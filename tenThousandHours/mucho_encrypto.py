flag = [ord(i) for i in 'REDACTED']
k = len(flag)
def cmul_8facd3c6(x):
    return [x[i] * 4 for i in range(k)]
def cmul_01ec6381(x):
    # so good
    return [x[i] * 7 for i in range(k)]
def sub_6baa906d(x):
    y = [7193286563, 1000366953, 9487801728, 622764323, 7895081014, 8442638755, 5773974792, 2565878446, 4125643875, 4663766520, 267295231, 7370549931, 6506054537, 7132642309, 8923416001, 1369582662, 5167357739, 4950407955, 7145258470, 714487870, 8850565334, 8030406986, 2932304208, 7044470735, 1480096493, 1561356581, 8588538281, 7300539185, 3337232820, 4873357640, 7417255756, 5660813993, 8681559256, 2280839755, 1187901350, 592899298]
    return [x[i] - y[i] for i in range(k)]
def sub_eeb354ba(x):
    # lel
    y = [8826391404, 7202631240, 3414818439, 2204650638, 5105662331, 6503636771, 7302194785, 943912167, 7634869581, 7071758282, 4136164863, 130031296, 8811913162, 3945167457, 7358755050, 4239809698, 7482114969, 9762891083, 6783370588, 260830939, 1788036615, 471234083, 2991782596, 1175815025, 6827100517, 746303591, 4832227226, 233461643, 2542917495, 7551270424, 7035955296, 6043428854, 6497814661, 7987436470, 1565254745, 3708651759]
    return [x[i] - y[i] for i in range(k)]
def chadd_f5ab37d9(x):
    # lel
    y = [ord(p) for p in 'd68f5c2fe182e63a37bb472b3aeaaa53bbfe']
    return [x[i] + y[i] for i in range(k)]
def mul_c50eb88b(x):
    y = [5, 10, 6, 9, 8, 4, 8, 6, 3, 2, 3, 7, 4, 10, 4, 4, 4, 1, 4, 5, 5, 9, 5, 1, 3, 1, 1, 10, 7, 4, 2, 10, 9, 9, 7, 8]
    return [x[i] * y[i] for i in range(k)]
def cmul_fb7cc4ca(x):
    return [x[i] * 10 for i in range(k)]
def chunk_b0d8cc2d(x):
    # the best
    return x[26:] + x[:26]
def chunk_aed3b0f6(x):
    # the flag is flag{jk}
    return x[19:] + x[:19]
def chsub_aebdb774(x):
    # lel
    y = [ord(p) for p in '34baa5ba038f6b37f9765d1bbe437df588ff']
    return [x[i] - y[i] for i in range(k)]
def cadd_ae3d5a54(x):
    return [x[i] + 6206226242 for i in range(k)]
def cxor_48ff1c3c(x):
    # lmaooo
    return [x[i] ^ 7333114582 for i in range(k)]
def chunk_6b870e2e(x):
    return x[11:] + x[:11]
def shuffle_2cab1c5d(x):
    return [x[p] for p in [15, 16, 2, 25, 24, 30, 18, 8, 4, 29, 9, 33, 13, 17, 3, 0, 20, 14, 19, 11, 1, 5, 26, 28, 27, 23, 22, 21, 10, 12, 34, 32, 35, 7, 6, 31]]
def chmul_6192a06c(x):
    y = [ord(p) for p in 'c50cb6d74d1093939e5fa079020b4660cee7']
    return [x[i] * y[i] for i in range(k)]
def cadd_09c2f719(x):
    return [x[i] + 2341967088 for i in range(k)]
def shuffle_3b482bb3(x):
    # kek
    return [x[p] for p in [19, 14, 29, 33, 10, 26, 30, 0, 18, 4, 21, 27, 35, 23, 11, 1, 8, 32, 2, 28, 13, 16, 22, 5, 20, 24, 25, 34, 15, 7, 31, 6, 17, 12, 9, 3]]
def chxor_3a47885a(x):
    # so good
    y = [ord(p) for p in 'd9f69fed923a283dd16e0161f207225dc2dd']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_e2b38bce(x):
    # the best
    y = [ord(p) for p in 'a67e8e96db9396790210135e908ad1ede50c']
    return [x[i] * y[i] for i in range(k)]
def chadd_8658906e(x):
    y = [ord(p) for p in 'b0be5e231ec41afe9b6df6fcdad096643fed']
    return [x[i] + y[i] for i in range(k)]
def cmul_76043ee3(x):
    return [x[i] * 9 for i in range(k)]
def add_664be5fd(x):
    # just reverse it
    y = [3558102023, 153950277, 1458447210, 3639932917, 7079836341, 8028024341, 8024841527, 7282344688, 8825079662, 9724294458, 2641602229, 8740207506, 9056507215, 9224073681, 91673525, 7356078510, 6991405977, 9335107063, 9760755757, 6679080172, 6803169312, 5462016092, 1656882180, 2715420668, 7855798956, 970256558, 6287469025, 7200475892, 3025391695, 3512367268, 1694408959, 3504833875, 1183127818, 9588266808, 660979564, 1911202868]
    return [x[i] + y[i] for i in range(k)]
def deck_9e9073a3(x):
    # lmaooo
    return x[9:9] + x[:9] + x[30:] + x[9:30]
def csub_452392a9(x):
    return [x[i] - 1151161403 for i in range(k)]
def digsub_ee047607(x):
    return [int(str(n)[:1] + ''.join(['7', '1', '5', '9', '4', '6', '8', '2', '3', '0'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_d95ce6fa(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '75815eca5ece603e0f3455b82f04392c1362']
    return [x[i] * y[i] for i in range(k)]
def chunk_1fa032d8(x):
    # shiet?
    return x[7:] + x[:7]
def shuffle_e5071e98(x):
    return [x[p] for p in [7, 25, 23, 28, 32, 10, 8, 4, 12, 27, 19, 34, 17, 35, 31, 30, 9, 29, 13, 2, 26, 0, 1, 11, 21, 22, 24, 3, 16, 15, 33, 20, 6, 18, 14, 5]]
def csub_7321b0e9(x):
    # mucho encrypto
    return [x[i] - 4275493741 for i in range(k)]
def add_6c75725b(x):
    y = [8016953375, 241264371, 5947922517, 2631826685, 8060993114, 8662723368, 653052795, 6647059457, 3683954167, 66158944, 9663511620, 3888571333, 2753992869, 9758843026, 1899556291, 479870217, 6445497928, 4487236241, 7477387838, 9695814709, 3760214525, 4969157145, 2845299957, 9143188111, 4929324740, 1328456444, 3104195868, 2903303529, 4414310737, 5771227644, 2244838445, 4458632078, 5530540744, 2969254389, 8189753711, 7640325159]
    return [x[i] + y[i] for i in range(k)]
def chunk_816b54df(x):
    return x[36:] + x[:36]
def sub_26a484b7(x):
    # the best
    y = [9289285678, 8276024421, 3700164633, 7556277259, 1627142313, 7622827926, 9728835286, 4229922974, 7096448176, 4023229967, 9859034484, 1264417542, 830182869, 9083165078, 5851229020, 7238810897, 1393407889, 6220141216, 1317455440, 7890335579, 3090954319, 577368620, 8404835388, 1807220982, 6802599226, 8596855328, 775373192, 6994513000, 7133978014, 9602587392, 1888929194, 8013278556, 6324258909, 2015853365, 8648972326, 3150667388]
    return [x[i] - y[i] for i in range(k)]
def chsub_59843fee(x):
    # encryption
    y = [ord(p) for p in '3dcb6e954e2c777d420bc51ed5bfc5c17ec9']
    return [x[i] - y[i] for i in range(k)]
def cadd_4dc54d10(x):
    # evil
    return [x[i] + 4232019002 for i in range(k)]
def shuffle_0736ce82(x):
    return [x[p] for p in [11, 26, 24, 33, 17, 16, 22, 35, 23, 18, 34, 31, 20, 8, 21, 13, 1, 28, 3, 25, 29, 2, 19, 12, 27, 5, 4, 0, 15, 30, 7, 14, 6, 9, 10, 32]]
def cmul_4f99fe69(x):
    return [x[i] * 5 for i in range(k)]
def sub_8b45b630(x):
    # lel
    y = [2162210887, 5471399219, 444939413, 823546259, 3417806323, 2243943990, 9560812424, 7688509380, 8624108723, 1013519034, 2351650138, 9728376151, 5937361247, 2339434995, 9360492580, 2332279597, 8048829087, 2879554558, 6949700057, 4519597586, 9194177683, 9013063700, 1655348462, 8024712505, 1462614614, 2433466674, 2039668711, 1008949447, 7171746173, 6810577685, 1696796754, 305251950, 832474685, 6863759153, 19446927, 3117384897]
    return [x[i] - y[i] for i in range(k)]
def add_b6e74b73(x):
    y = [1876550221, 8790565989, 1217791926, 1288364086, 7154627658, 180171328, 6733169512, 6127914220, 834770089, 5228563649, 928397945, 1797037503, 208437773, 5389592576, 2404042416, 1178812034, 1746290586, 3232648796, 621705537, 384566946, 7316790051, 4839500510, 2483826896, 2063480930, 1666324343, 6058356093, 7381068883, 2825028543, 2520090576, 7570646193, 4795904437, 4221352282, 3696941869, 3879280137, 2983528886, 7634219993]
    return [x[i] + y[i] for i in range(k)]
def xor_4a69189b(x):
    # so good
    y = [9257350831, 2967104746, 3688148813, 4588821681, 1531227693, 5980247511, 2164255102, 8419248024, 1049546772, 8016834334, 5395617626, 6878819039, 9927167258, 5970170584, 6642585966, 931717389, 5984627485, 5607128078, 5222553987, 2150677488, 9426064542, 9493948753, 3385700174, 8810672838, 267077104, 1662597020, 1362006103, 9392433240, 6593568658, 5904393793, 6542806555, 7479112623, 1255666062, 8505270478, 3304637843, 2331211228]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_504110f5(x):
    return [int(str(n)[:1] + ''.join(['4', '9', '1', '3', '7', '2', '8', '0', '6', '5'][int(p)] for p in str(n)[1:])) for n in x]
def chsub_d7ccd4eb(x):
    # the best
    y = [ord(p) for p in 'ca12347d4af76e901def7bffe982d9232fe5']
    return [x[i] - y[i] for i in range(k)]
def chmul_923598c6(x):
    # kek
    y = [ord(p) for p in '3ece1caf061afbefc8f815ac2868df59c4c0']
    return [x[i] * y[i] for i in range(k)]
def cadd_0788aaad(x):
    # encryption
    return [x[i] + 6159230552 for i in range(k)]
def cadd_5cb4a9bb(x):
    return [x[i] + 4989321524 for i in range(k)]
def xor_b0ff6bbd(x):
    y = [9329590721, 2430984102, 4078105642, 2948202832, 9546205034, 5953082624, 3102368744, 4566528170, 8429198224, 3826188465, 6361562416, 4769740571, 5859736587, 6913292045, 4240108766, 838787102, 1446603703, 9085786053, 4638422723, 9876893923, 2478510736, 358264211, 5384801288, 6495840439, 1027368648, 1283955217, 5283106026, 429657424, 3572747096, 9329758548, 139310427, 3039208778, 2150400457, 6375547184, 9674694110, 320389492]
    return [x[i] ^ y[i] for i in range(k)]
def mul_abf95b28(x):
    # rekt
    y = [2, 8, 2, 2, 4, 5, 3, 3, 4, 3, 7, 2, 4, 1, 7, 6, 6, 6, 5, 2, 2, 3, 7, 6, 5, 1, 6, 5, 6, 3, 8, 2, 7, 1, 1, 3]
    return [x[i] * y[i] for i in range(k)]
def digsub_19f61f73(x):
    # kek
    return [int(str(n)[:1] + ''.join(['3', '2', '6', '5', '8', '7', '4', '1', '9', '0'][int(p)] for p in str(n)[1:])) for n in x]
def chunk_22f90678(x):
    return x[23:] + x[:23]
def mul_6906b8ec(x):
    # rekt
    y = [3, 4, 2, 3, 2, 3, 1, 2, 3, 1, 3, 3, 1, 4, 3, 2, 4, 2, 1, 3, 3, 4, 1, 3, 4, 2, 2, 2, 1, 4, 1, 1, 2, 1, 1, 1]
    return [x[i] * y[i] for i in range(k)]
def cxor_c0bd96a1(x):
    return [x[i] ^ 7423489623 for i in range(k)]
def add_aa98b4ae(x):
    # lmaooo
    y = [2548979500, 5807130957, 5503317167, 6083013829, 3248457739, 895341642, 1643578199, 4863001093, 1383233704, 6634232003, 963903142, 6429268689, 709622403, 3044459934, 3583963415, 2286266905, 647875489, 5741282793, 4302703784, 6876621433, 4040771674, 5000600628, 605146211, 8430222011, 9182886332, 169954603, 8594564776, 7737273223, 1919066598, 8761301470, 2356253, 9350331244, 9052577687, 8799413343, 6686833059, 2956664507]
    return [x[i] + y[i] for i in range(k)]
def chadd_63faefcf(x):
    y = [ord(p) for p in '0b08a401c3339d1adaa7fb306600bdbcb641']
    return [x[i] + y[i] for i in range(k)]
def add_d7079839(x):
    y = [87657097, 9425460708, 8903102386, 3695125091, 1243729075, 648343426, 101493153, 4657050596, 9380088482, 3194070576, 6824984816, 5863236852, 1839624767, 8717762194, 6908818850, 5391485509, 6997967808, 6541632891, 3021122937, 8071429160, 8518812705, 5932419054, 8480673611, 6157068888, 4872246289, 6100190332, 4386437479, 9677655067, 8792821734, 855699673, 1287093228, 8419289913, 8375869715, 9112288197, 9696703254, 3743744084]
    return [x[i] + y[i] for i in range(k)]
def csub_40fa37b4(x):
    return [x[i] - 1333000818 for i in range(k)]
def chmul_315f2063(x):
    y = [ord(p) for p in '85fe437a61bf04435a6bbe467d8d4e6eb4a4']
    return [x[i] * y[i] for i in range(k)]
def cmul_1c2bf9c2(x):
    return [x[i] * 10 for i in range(k)]
def sub_5da6bb53(x):
    # encryption
    y = [2596117217, 4466145340, 5637017161, 7556286589, 7409903776, 4445797195, 2985574959, 442765252, 7808583934, 226700203, 5640710208, 597496850, 9937131091, 3191770782, 8556694313, 427738566, 687138253, 1048374397, 1698080996, 1114627038, 4657724805, 3536157054, 2237721329, 3055922403, 3387334400, 4315520452, 8478897192, 8928153167, 5707780397, 2488269490, 8825368313, 9686023983, 8356054267, 1923042240, 4346489703, 8951961865]
    return [x[i] - y[i] for i in range(k)]
def xor_1ffb5965(x):
    # evil
    y = [7250624895, 8235368959, 1853782907, 4609899690, 9966240136, 1644932405, 241549931, 3574972919, 9675914096, 2575300922, 4383604749, 2675495483, 629609774, 6957332311, 3065564966, 9587230610, 9393048457, 5752591995, 5021125677, 309827522, 1041622895, 3176051091, 5346763895, 3498407931, 9441945424, 2724634967, 9229932470, 4728329568, 8036836392, 5363215317, 1890345430, 3441176989, 5456152903, 1107834412, 914158157, 7082435506]
    return [x[i] ^ y[i] for i in range(k)]
def cmul_06256c90(x):
    return [x[i] * 9 for i in range(k)]
def csub_cb66374f(x):
    return [x[i] - 4420369415 for i in range(k)]
def cxor_89b073e0(x):
    # mucho encrypto
    return [x[i] ^ 6538575452 for i in range(k)]
def cmul_bac2ec72(x):
    return [x[i] * 7 for i in range(k)]
def mul_c991ef9e(x):
    # shiet?
    y = [2, 2, 3, 3, 1, 3, 1, 2, 3, 2, 3, 1, 2, 1, 1, 1, 1, 1, 2, 3, 3, 1, 3, 2, 2, 2, 3, 1, 1, 1, 2, 2, 2, 2, 2, 1]
    return [x[i] * y[i] for i in range(k)]
def shuffle_e14d57f5(x):
    return [x[p] for p in [20, 32, 7, 15, 26, 5, 24, 31, 23, 0, 19, 11, 13, 12, 30, 2, 8, 35, 25, 33, 29, 6, 16, 4, 9, 21, 14, 28, 34, 27, 3, 18, 1, 17, 22, 10]]
def cadd_e7cd385e(x):
    # encryption
    return [x[i] + 148936630 for i in range(k)]
def sub_734f1f1d(x):
    y = [2894512739, 5277799792, 9296892474, 4879677984, 302473021, 3896735797, 7940723048, 2839445569, 8561076745, 3460863486, 3115294026, 4074787844, 2975248697, 3138657381, 5682789303, 8329382731, 2774144566, 8177189109, 9379476022, 6570363912, 8245661665, 6217384296, 5683615228, 5863196046, 5860224958, 6994880138, 1202142462, 915064972, 9205425331, 5104047826, 1027810655, 8569996210, 3741998350, 1623660771, 9855130932, 9050973060]
    return [x[i] - y[i] for i in range(k)]
def chadd_7fc84678(x):
    y = [ord(p) for p in '622cb335322796898ab2c09aa62b7209aedd']
    return [x[i] + y[i] for i in range(k)]
def cadd_44729e6e(x):
    # lmaooo
    return [x[i] + 7279952684 for i in range(k)]
def xor_a2999e10(x):
    y = [4663792685, 1562247378, 2069874811, 2582483880, 858324634, 1828104906, 7140629149, 6849485130, 898509061, 1174389578, 9727998033, 8419897869, 7309362961, 516348330, 7676012112, 5753276293, 4661130277, 8795234045, 6852162946, 3466468030, 3205199303, 2961512982, 8487679864, 4460059807, 4073794256, 5977499256, 259008500, 9494638054, 866615997, 3501457772, 1049081787, 7289776795, 9736362548, 2676878920, 3718492395, 1176449278]
    return [x[i] ^ y[i] for i in range(k)]
def sub_dc4b5de9(x):
    # the best
    y = [976928102, 8152534975, 7680741829, 5605892230, 9584029329, 7963919735, 8694428991, 6809959473, 9885619294, 5033178239, 5184035476, 7325660315, 1214048826, 6532680311, 3747020665, 1315397003, 292358955, 7033427846, 1636959234, 1190857273, 6177392780, 7126471450, 8325509141, 8385838762, 16342482, 9744514553, 2889964419, 3887058559, 6535775648, 4997235309, 7973946876, 2329015518, 6536066464, 9921903232, 1079758014, 5432905429]
    return [x[i] - y[i] for i in range(k)]
def cxor_21b4aab4(x):
    # lmaooo
    return [x[i] ^ 2887160687 for i in range(k)]
def xor_ff7262d6(x):
    # encryption
    y = [8790309946, 6853185164, 8433785023, 3858983076, 8119425936, 8784381636, 9247954219, 4637907306, 5119557097, 3986816434, 989974430, 4673300027, 1830899550, 6900080465, 7147358852, 1146921967, 344438118, 9613115540, 3616885186, 6657366670, 9509598682, 1229405176, 7097351985, 4063982636, 4909579222, 3043924951, 5348845365, 4791397483, 3488965577, 9721731057, 7566088794, 2783867545, 4972190050, 286246588, 3166283111, 8091840766]
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_fe7bcc78(x):
    # the best
    return [x[p] for p in [10, 34, 11, 7, 19, 21, 3, 20, 9, 17, 29, 25, 26, 4, 31, 33, 14, 13, 35, 15, 22, 12, 28, 2, 23, 32, 8, 6, 24, 1, 16, 18, 0, 5, 30, 27]]
def chxor_aa8e1df9(x):
    y = [ord(p) for p in '70cb117b2648e5e8b9e8625a1c9083bee911']
    return [x[i] ^ y[i] for i in range(k)]
def chsub_5d86241d(x):
    # the best
    y = [ord(p) for p in 'c2ecab5dce9997e9f4bb82cdca6b861eb406']
    return [x[i] - y[i] for i in range(k)]
def chxor_af8f84bc(x):
    y = [ord(p) for p in '005025c2d6a7f617b3031a28e559ff75bfb2']
    return [x[i] ^ y[i] for i in range(k)]
def mul_043ce6a6(x):
    y = [3, 3, 4, 4, 4, 1, 2, 1, 3, 2, 4, 2, 2, 3, 1, 1, 1, 3, 2, 3, 1, 1, 1, 1, 1, 2, 3, 4, 1, 1, 2, 4, 2, 1, 2, 2]
    return [x[i] * y[i] for i in range(k)]
def chsub_b60cec96(x):
    # so good
    y = [ord(p) for p in '994dd9cf38fd85c372d879e62244aca71a88']
    return [x[i] - y[i] for i in range(k)]
def chsub_f1540b87(x):
    y = [ord(p) for p in '8df10f7bbdc93c7458de3bd880f1ad47a729']
    return [x[i] - y[i] for i in range(k)]
def cmul_75c87098(x):
    return [x[i] * 8 for i in range(k)]
def cxor_f4744f0e(x):
    return [x[i] ^ 5314769655 for i in range(k)]
def shuffle_e204c945(x):
    return [x[p] for p in [6, 8, 15, 22, 4, 12, 11, 16, 35, 2, 21, 18, 0, 5, 20, 31, 34, 23, 33, 26, 17, 3, 19, 7, 28, 24, 30, 27, 13, 1, 32, 14, 25, 10, 9, 29]]
def cxor_1af18e89(x):
    # mucho encrypto
    return [x[i] ^ 332212611 for i in range(k)]
def sub_fe1bac9b(x):
    # lmaooo
    y = [4604672384, 5704419680, 7071245456, 4841700936, 8671190011, 9499004748, 7314676725, 3621288740, 4813787024, 1147633557, 6080742849, 9663341830, 1661918787, 9898714114, 361778204, 164481758, 2082734062, 3359458584, 2910644888, 1600437825, 2537089238, 5006710937, 1011594597, 8448488832, 8413128492, 8465432887, 2937736192, 7655428683, 2514324553, 6575757975, 7414687480, 4021861946, 6245149838, 2818221514, 5712426407, 661643430]
    return [x[i] - y[i] for i in range(k)]
def csub_0356de94(x):
    return [x[i] - 9407243563 for i in range(k)]
def cmul_5ceeaceb(x):
    # rekt
    return [x[i] * 8 for i in range(k)]
def chmul_e406aa1a(x):
    # evil
    y = [ord(p) for p in 'b962c329c11ab2c458c6b294c42ca9a28046']
    return [x[i] * y[i] for i in range(k)]
def shuffle_520f2eb6(x):
    # mucho encrypto
    return [x[p] for p in [22, 15, 31, 2, 4, 17, 20, 3, 23, 0, 32, 6, 18, 27, 7, 13, 21, 29, 1, 5, 19, 34, 9, 11, 35, 33, 16, 30, 26, 14, 25, 28, 8, 12, 24, 10]]
def deck_f6e9dd23(x):
    # lel
    return x[7:8] + x[8:34] + x[34:] + x[:7]
def chmul_b65f3bc2(x):
    y = [ord(p) for p in '692c7058ccd2df74b5ffa83a7bcac79a9211']
    return [x[i] * y[i] for i in range(k)]
def csub_4707f65f(x):
    # encryption
    return [x[i] - 4376126504 for i in range(k)]
def chmul_4863adb1(x):
    y = [ord(p) for p in '91db41bb38b1ee899ebe4d245d3c029a93db']
    return [x[i] * y[i] for i in range(k)]
def cmul_c36f1e1c(x):
    return [x[i] * 4 for i in range(k)]
def chunk_5e4879e0(x):
    return x[24:] + x[:24]
def cmul_18dd5479(x):
    return [x[i] * 9 for i in range(k)]
def mul_b62c8153(x):
    y = [2, 1, 1, 1, 2, 3, 2, 2, 1, 2, 2, 2, 2, 3, 3, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 1, 1, 2, 3, 1]
    return [x[i] * y[i] for i in range(k)]
def chmul_c67e0f7b(x):
    y = [ord(p) for p in '7736119adcf79196dbe9eef8e04ab5b976dc']
    return [x[i] * y[i] for i in range(k)]
def csub_b10244d8(x):
    # the best
    return [x[i] - 5398646418 for i in range(k)]
def xor_13c063a7(x):
    y = [5079760318, 4794035346, 8086062728, 7780480762, 4711333116, 585982876, 8934216066, 9340581080, 8145905473, 3129766135, 7079473306, 7555592666, 2923060693, 2931085720, 1424684971, 5521880534, 416035406, 5313078400, 2279641834, 3556715270, 3537564177, 3411899610, 5825846474, 3875965084, 4856328068, 4288454893, 839449714, 3147328056, 7954140623, 8047000402, 8787448803, 2702262151, 1860598052, 9855482797, 2541875970, 2906811895]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_699d5577(x):
    # evil
    y = [ord(p) for p in '22267fdaad3a4d72225834b96d5d9b9dd822']
    return [x[i] ^ y[i] for i in range(k)]
def deck_74d33bc9(x):
    # evil
    return x[15:34] + x[34:34] + x[34:] + x[:15]
def chsub_619c6037(x):
    y = [ord(p) for p in 'b1d9a90dc77331b51cc1fe929fc1b1e2a19e']
    return [x[i] - y[i] for i in range(k)]
def add_139a0cf3(x):
    y = [7924151969, 6854151409, 4500179104, 4226157219, 7097552013, 9507925601, 6422795696, 7799913425, 180070134, 8327729083, 3323090398, 3208284075, 55656936, 1825678418, 9372882650, 1115168708, 5645375179, 2550921891, 8068993456, 9695424828, 1073847158, 3178116952, 7631813791, 1187327994, 3898867375, 1355132941, 3116158568, 3021040589, 2903361147, 7619705602, 5660133634, 2332860720, 9214870291, 6885452654, 9646599028, 5637120797]
    return [x[i] + y[i] for i in range(k)]
def mul_8e78cc44(x):
    y = [5, 2, 2, 2, 1, 3, 4, 6, 6, 7, 3, 7, 7, 2, 5, 6, 6, 1, 2, 1, 2, 2, 2, 6, 5, 7, 7, 5, 3, 7, 3, 2, 1, 7, 4, 1]
    return [x[i] * y[i] for i in range(k)]
def chadd_b9c3b1c6(x):
    y = [ord(p) for p in '41ef5326e21d90fe698ae13279daeeedd5a8']
    return [x[i] + y[i] for i in range(k)]
def shuffle_0bc785b3(x):
    # encryption
    return [x[p] for p in [22, 16, 18, 27, 19, 4, 8, 11, 12, 23, 7, 34, 0, 31, 32, 13, 6, 9, 26, 17, 33, 1, 29, 24, 2, 14, 15, 35, 3, 10, 21, 28, 5, 20, 30, 25]]
def sub_d67326ec(x):
    y = [2537061902, 576601677, 4578064216, 1415819858, 8828376205, 7739875228, 210654059, 1198749831, 6505014493, 9237305113, 5072139241, 2024156656, 7520116428, 9556343147, 3758408811, 6670485977, 570274789, 1714764687, 9242135251, 4220199612, 3907967189, 8017343616, 1678751778, 4388667959, 44361946, 1427589007, 7104015470, 5200574454, 7151936304, 1739456625, 7185740934, 6321580425, 8444450038, 2867354862, 514449027, 2591940185]
    return [x[i] - y[i] for i in range(k)]
def chsub_a9bb41f7(x):
    y = [ord(p) for p in 'd9e1d4f22b58fbeb21d1c8eb52af3b28a6c3']
    return [x[i] - y[i] for i in range(k)]
def deck_388049a5(x):
    # just reverse it
    return x[0:13] + x[:0] + x[13:13] + x[13:]
def cxor_060a98db(x):
    return [x[i] ^ 796595843 for i in range(k)]
def chmul_e62c2028(x):
    y = [ord(p) for p in '1898fd9b3e3059d0882f3829598b2be9ead8']
    return [x[i] * y[i] for i in range(k)]
def sub_481904d7(x):
    y = [227733577, 5098980790, 4556824599, 6110447744, 4449903286, 8644101958, 6569332169, 725391890, 3284199245, 3751329990, 4658540098, 2951059692, 4432132892, 1013312425, 7251534713, 1790815002, 4934504360, 8574174072, 1882989920, 2250198637, 8333603941, 2398580422, 9805112046, 2668563747, 731527456, 7909151604, 3753510315, 4606788882, 499797797, 378766053, 5320069202, 4434366211, 3403862626, 8407034926, 9893623493, 3857176573]
    return [x[i] - y[i] for i in range(k)]
def chmul_a6bf2367(x):
    y = [ord(p) for p in 'e84f7d43efed06f466f91c817f5173c67008']
    return [x[i] * y[i] for i in range(k)]
def sub_65030a05(x):
    y = [7367673478, 4520582265, 58415614, 8983522218, 7633142495, 2777961342, 9567808083, 5640362086, 8905194280, 5830033149, 5444292248, 7395090489, 2604231621, 4265880185, 9348793299, 5226716922, 7532330003, 6073852354, 2900746196, 3644354164, 6564076286, 1231597037, 2418654560, 6175179392, 1186619722, 3453334824, 9994595014, 7977274435, 6779040072, 3259336650, 4547256, 9949593335, 9663064374, 954894691, 9971515784, 9673894439]
    return [x[i] - y[i] for i in range(k)]
def chsub_808e087e(x):
    y = [ord(p) for p in 'a6a707590a529e74020fa6f5f02a56029ecc']
    return [x[i] - y[i] for i in range(k)]
def chunk_f44dbb33(x):
    return x[25:] + x[:25]
def chadd_2699a0a4(x):
    # kek
    y = [ord(p) for p in 'a295b93e268b9856bf0cdcc097358303d1db']
    return [x[i] + y[i] for i in range(k)]
def add_67af3ff4(x):
    y = [4658650380, 7450187392, 8609065755, 8217719491, 1378370941, 707048103, 8562023372, 3537020409, 8007268719, 2396106361, 3475983786, 3494821711, 7796888085, 2264574244, 2564834863, 9513109434, 4778249099, 6517908964, 2356351642, 7489598631, 736314542, 3820692829, 9192136964, 7826289453, 3579606135, 8737687942, 539842713, 4098398523, 9067057200, 2641635240, 7535713878, 2901646625, 3575816626, 6861071104, 9428845409, 5604590480]
    return [x[i] + y[i] for i in range(k)]
def mul_2dbeaa3b(x):
    y = [4, 6, 7, 2, 1, 3, 7, 1, 4, 1, 1, 1, 6, 1, 7, 2, 3, 4, 1, 6, 7, 3, 7, 2, 5, 3, 2, 2, 6, 3, 2, 3, 5, 1, 4, 2]
    return [x[i] * y[i] for i in range(k)]
def chadd_e835abf7(x):
    y = [ord(p) for p in 'd926cc3ae6a31335a61b260a35e947b9f128']
    return [x[i] + y[i] for i in range(k)]
def chxor_a244aa4c(x):
    y = [ord(p) for p in '0f26178b21825c387e31c483214f53b1bc5b']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_b080755f(x):
    # kek
    y = [ord(p) for p in '0b4591a8d1f12e190c330b5f95c084729bc2']
    return [x[i] ^ y[i] for i in range(k)]
def csub_f0b67669(x):
    # lel
    return [x[i] - 8382164548 for i in range(k)]
def sub_df2b698e(x):
    # the flag is flag{jk}
    y = [3374301873, 869045058, 3123331668, 6583407795, 3397916475, 5951734380, 263234026, 93812494, 7584072858, 7268089495, 8310076729, 7376005004, 1836586490, 3532873829, 8063879292, 1493174426, 4127352590, 9168786747, 6952195101, 7947431773, 1730993734, 9638114229, 8380404845, 9351248373, 5961711734, 7591457804, 7372122593, 2804815415, 7924423125, 8100401649, 3021408027, 7234145037, 5452110653, 9918188283, 319852874, 6090566470]
    return [x[i] - y[i] for i in range(k)]
def chmul_06728846(x):
    y = [ord(p) for p in 'b19868f153d37d8df13f42369972d78ddfcc']
    return [x[i] * y[i] for i in range(k)]
def sub_1866fa1c(x):
    y = [9449173267, 3658899192, 367647482, 694416868, 5678245527, 2677832998, 6623760481, 8768516069, 8309516640, 2369747683, 3968734178, 3967770488, 2421550441, 6232569272, 4831226185, 1501353831, 5622133785, 3984090544, 5460357622, 6782690560, 2028231712, 6184113431, 8161445531, 233843625, 2733089027, 8922802604, 4644868492, 3242565955, 1248931929, 3703949587, 2638100695, 1193340901, 4596269688, 1669306027, 1810333660, 7725338176]
    return [x[i] - y[i] for i in range(k)]
def xor_48d487cb(x):
    y = [8890750080, 8916214187, 8379795237, 5921047049, 1213353786, 433293025, 7760741028, 3312622347, 8938821223, 8035272199, 9633291345, 9290160899, 4062928007, 5296671303, 7108733404, 4335180299, 4021986463, 4561509691, 2943407085, 3657253591, 4899666925, 7056130342, 7364099493, 2687242581, 8070030565, 1194131443, 4009354027, 1397610182, 8683750847, 7079949521, 7893002992, 6115127827, 6010147002, 475711646, 6998627540, 5955000755]
    return [x[i] ^ y[i] for i in range(k)]
def deck_0f90ee06(x):
    # the flag is flag{jk}
    return x[:1] + x[6:] + x[2:6] + x[1:2]
def chxor_8550301d(x):
    # lmaooo
    y = [ord(p) for p in 'a14a2240500414063c24ead8c5c0843b287f']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_d9e8611e(x):
    # shiet?
    return [x[i] + 2850438880 for i in range(k)]
def shuffle_0ca300ee(x):
    # the best
    return [x[p] for p in [30, 35, 5, 19, 11, 12, 2, 3, 8, 7, 24, 27, 14, 1, 32, 34, 31, 4, 33, 28, 16, 29, 10, 6, 15, 18, 25, 22, 26, 13, 23, 0, 17, 21, 9, 20]]
def digsub_575bce65(x):
    # encryption
    return [int(str(n)[:1] + ''.join(['4', '0', '6', '8', '1', '9', '7', '2', '5', '3'][int(p)] for p in str(n)[1:])) for n in x]
def sub_73c53d9f(x):
    y = [4109064473, 946337384, 8744528620, 1917643345, 2893430484, 3322010599, 291721029, 1225116637, 2468896652, 3339728098, 8960110780, 1777631027, 1332920116, 3954328226, 7736159113, 8103683898, 1639223384, 4187733846, 3035031523, 7638280076, 19696247, 9034376713, 9272617889, 9949567372, 795775282, 779259827, 231740768, 3638845345, 1519843602, 2851847232, 5902360876, 8686426970, 3890183141, 7599479551, 2702636087, 3339120370]
    return [x[i] - y[i] for i in range(k)]
def csub_16bab438(x):
    # so good
    return [x[i] - 3721077124 for i in range(k)]
def chadd_d980e2e3(x):
    y = [ord(p) for p in '5e17abd918ec8e59ce00985cfb7e5d4d0ad1']
    return [x[i] + y[i] for i in range(k)]
def shuffle_a2ef4315(x):
    # the flag is flag{jk}
    return [x[p] for p in [23, 25, 6, 20, 10, 24, 30, 2, 14, 28, 22, 0, 18, 21, 16, 8, 5, 27, 15, 13, 17, 3, 32, 31, 1, 4, 12, 9, 34, 35, 11, 26, 29, 7, 33, 19]]
def cxor_f20321f0(x):
    # shiet?
    return [x[i] ^ 5680086676 for i in range(k)]
def sub_7f903ea3(x):
    # the best
    y = [8683580960, 5091296477, 1268301574, 7792436234, 4552114671, 6478781084, 130029420, 5207519401, 4153584333, 5100247909, 9406778624, 4270360859, 6249569763, 7759328313, 145932308, 5243758247, 5136003124, 4867055127, 8567554956, 4666568771, 2247143388, 7374130305, 8122888323, 7549878994, 7005321644, 4476375348, 8135598365, 3413859960, 5810453382, 720517750, 5582360718, 2122021237, 5837251434, 7251153605, 6254001357, 2722197507]
    return [x[i] - y[i] for i in range(k)]
def chsub_9fe7030d(x):
    y = [ord(p) for p in 'a6ae9d9f2f513fbc301f51168330a18352fc']
    return [x[i] - y[i] for i in range(k)]
def add_769c8b28(x):
    y = [6938360196, 9878485250, 626971705, 9513122252, 1614005252, 9528359205, 7148651541, 6593614753, 8550524314, 7231833060, 5889481663, 9236688721, 5279539493, 7709846535, 1119394897, 6441218352, 4412751631, 3636446519, 5356713060, 2423742991, 7980150409, 9250795430, 8825237361, 4668048182, 9307282022, 7384644139, 1541335809, 1176127405, 5422680055, 110127696, 5856942474, 1256496321, 1608353154, 5895589595, 3510599273, 6410397044]
    return [x[i] + y[i] for i in range(k)]
def chxor_ea20e7b5(x):
    y = [ord(p) for p in '055b3bcf49588469e845682ebfd7ac99eaa1']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_474b9959(x):
    # mucho encrypto
    y = [ord(p) for p in '6db56bd93982ab2c9eb2c6b57d9b35500dc1']
    return [x[i] + y[i] for i in range(k)]
def digsub_69f3e773(x):
    return [int(str(n)[:1] + ''.join(['6', '2', '3', '0', '8', '9', '4', '5', '7', '1'][int(p)] for p in str(n)[1:])) for n in x]
def chxor_ffe97ebb(x):
    # rekt
    y = [ord(p) for p in 'f64d822362e1e0df251b1f2425bfa244f3ab']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_12c3036e(x):
    return [x[i] + 4662249217 for i in range(k)]
def chunk_181817bc(x):
    # just reverse it
    return x[35:] + x[:35]
def xor_3583ad2a(x):
    # the best
    y = [7456283688, 6902705693, 7347442630, 1923854185, 6970424609, 4360034139, 900133314, 6976386866, 8985271591, 9299923277, 3286317543, 330300591, 4290332590, 667173561, 3616563621, 6162955069, 8708763229, 7050158081, 8385652104, 607851321, 3059448142, 3946547347, 2493396641, 541539910, 2227204918, 2385256631, 8794335900, 7246114417, 6951482993, 9987651928, 1088078689, 7774800983, 855215687, 7513928849, 1839740935, 6691974592]
    return [x[i] ^ y[i] for i in range(k)]
def deck_68c779a5(x):
    return x[:1] + x[11:19] + x[1:11] + x[19:]
def chmul_db0dca9a(x):
    y = [ord(p) for p in 'b4321ad0b0de4fd4d2a352ad0026299cb3fe']
    return [x[i] * y[i] for i in range(k)]
def chmul_8f392c35(x):
    y = [ord(p) for p in 'a95dfba3f852a3e2ea9ff0a7aaa04d32acf0']
    return [x[i] * y[i] for i in range(k)]
def chsub_df08aee7(x):
    y = [ord(p) for p in 'c36030cea3308c84401a88ae8cab6657797a']
    return [x[i] - y[i] for i in range(k)]
def chunk_8703835d(x):
    # kek
    return x[3:] + x[:3]
def xor_4b381c82(x):
    # evil
    y = [9925536831, 9584292991, 4034494669, 6221050601, 848613479, 3124537653, 5811647918, 8820443069, 7195772334, 202035510, 7987901517, 8854594448, 6711956394, 2139279532, 2423531575, 5813847911, 5387081220, 9307146877, 9906250848, 6967558984, 1227586820, 2477602566, 3983354409, 1148265919, 8068195593, 7989969000, 5962247535, 6725853008, 9014164788, 9427846748, 9902121558, 5882424817, 6908027101, 9016654736, 4727877290, 7791998859]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_a1b43d44(x):
    return [x[i] ^ 3049233017 for i in range(k)]
def chmul_9fd400d3(x):
    # evil
    y = [ord(p) for p in '1ea6aa1531f7c5878e13a1074ef09de734ec']
    return [x[i] * y[i] for i in range(k)]
def cmul_7ca572e2(x):
    return [x[i] * 7 for i in range(k)]
def shuffle_8ab6bb33(x):
    return [x[p] for p in [3, 26, 2, 24, 17, 33, 23, 21, 30, 5, 7, 9, 1, 18, 19, 27, 34, 0, 11, 31, 28, 13, 4, 6, 8, 20, 10, 29, 32, 14, 35, 25, 16, 22, 12, 15]]
def chadd_8789f269(x):
    # the best
    y = [ord(p) for p in '46cd921a06e4f18406e9ab42390df485b9af']
    return [x[i] + y[i] for i in range(k)]
def cxor_a7504c76(x):
    return [x[i] ^ 7789011129 for i in range(k)]
def chmul_def74a51(x):
    y = [ord(p) for p in 'f503e9a230d1f5d0233281c25efa5a042cd3']
    return [x[i] * y[i] for i in range(k)]
def deck_1cca44d6(x):
    # just reverse it
    return x[28:] + x[1:17] + x[:1] + x[17:28]
def cadd_3876a03b(x):
    return [x[i] + 9222844234 for i in range(k)]
def deck_b6859b0d(x):
    return x[2:12] + x[12:23] + x[23:] + x[:2]
def mul_095b48a3(x):
    # kek
    y = [3, 8, 1, 1, 5, 3, 5, 5, 7, 8, 5, 9, 9, 4, 2, 4, 2, 1, 5, 8, 2, 4, 5, 3, 9, 3, 1, 9, 2, 4, 9, 7, 1, 5, 1, 8]
    return [x[i] * y[i] for i in range(k)]
def chadd_2a11532c(x):
    # the best
    y = [ord(p) for p in '7449e324e7741bd046f7b558f84ebc997d39']
    return [x[i] + y[i] for i in range(k)]
def chsub_4c009b94(x):
    # lmaooo
    y = [ord(p) for p in '0c897fb3d1d8f030cdb5265c1e30fa2294fc']
    return [x[i] - y[i] for i in range(k)]
def chadd_b9888b8b(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '2266fb18952c92a4cdadddfe47b0b45fd2d6']
    return [x[i] + y[i] for i in range(k)]
def chxor_2f1310f4(x):
    # the best
    y = [ord(p) for p in 'be8c6dd09df01e17e5ea250b04d54e4f0c49']
    return [x[i] ^ y[i] for i in range(k)]
def sub_6ca5da9b(x):
    y = [3989617640, 3721486361, 5566880581, 6637639099, 228093592, 3330689229, 9852339944, 7392571710, 5146494201, 8561147023, 9993975926, 3748595880, 9235952559, 9358044500, 4567104590, 794060172, 3816388289, 9127650757, 4286257307, 6797949321, 9862053931, 3711923394, 2206788846, 1083250361, 1288281593, 3429212042, 9819675509, 8857981223, 7509016161, 1135595770, 3350819338, 5609100113, 6320573260, 8178222532, 1915191478, 71236739]
    return [x[i] - y[i] for i in range(k)]
def digsub_cd61bbc0(x):
    # the flag is flag{jk}
    return [int(str(n)[:1] + ''.join(['2', '6', '5', '3', '1', '7', '9', '8', '0', '4'][int(p)] for p in str(n)[1:])) for n in x]
def sub_785b373a(x):
    y = [8780598705, 5103692275, 6700349864, 8276595224, 7773857552, 50255755, 573526129, 7668891811, 3894469762, 9896869567, 2119615741, 9702565205, 4401029286, 1816629078, 2696726060, 9275354382, 6489241756, 2762067775, 6301044257, 1888229815, 3583124887, 6247353714, 2482368581, 3446968489, 7754890242, 9963293788, 2562903823, 3818806470, 5869688764, 9915988165, 6157013845, 8679635674, 2545541205, 2586738218, 5697318296, 2090291787]
    return [x[i] - y[i] for i in range(k)]
def xor_ab75a784(x):
    # encryption
    y = [5266946626, 9585637068, 1667584792, 3855080818, 5635410293, 2859452698, 875125702, 9271108046, 5240683926, 3303822623, 2289348876, 3046900895, 8043294718, 1053489503, 5913533783, 7287165709, 477277988, 5275867535, 1074784339, 7353297586, 6588330237, 8670665872, 8739868538, 4293255075, 3578173727, 9073327019, 5241813742, 6552411957, 9268173924, 4744328391, 5382962464, 872488969, 2993962880, 1016036547, 5735302544, 9363260414]
    return [x[i] ^ y[i] for i in range(k)]
def cadd_2d211677(x):
    return [x[i] + 9965054805 for i in range(k)]
def csub_4fc27255(x):
    return [x[i] - 6067948050 for i in range(k)]
def chadd_eacac1c3(x):
    # evil
    y = [ord(p) for p in 'b8fcaf7d4b85a4516f5ab07f9c7d65cd2e2f']
    return [x[i] + y[i] for i in range(k)]
def deck_1e56f1c1(x):
    # lel
    return x[13:29] + x[:1] + x[1:13] + x[29:]
def cmul_bb576c8f(x):
    return [x[i] * 7 for i in range(k)]
def chunk_4423d984(x):
    # the flag is flag{jk}
    return x[36:] + x[:36]
def chmul_a6c30448(x):
    # evil
    y = [ord(p) for p in 'ca613eb21f61655537cee971a3e11031fbf8']
    return [x[i] * y[i] for i in range(k)]
def shuffle_5f97b5a9(x):
    # the flag is flag{jk}
    return [x[p] for p in [2, 31, 16, 17, 33, 12, 7, 30, 8, 0, 6, 34, 18, 19, 20, 1, 32, 23, 9, 3, 5, 10, 15, 29, 28, 26, 35, 4, 21, 11, 14, 27, 25, 13, 24, 22]]
def deck_1cd105c7(x):
    return x[10:12] + x[:5] + x[5:10] + x[12:]
def deck_766c528f(x):
    return x[33:] + x[:1] + x[1:1] + x[1:33]
def digsub_9dcf4316(x):
    return [int(str(n)[:1] + ''.join(['4', '5', '3', '6', '9', '8', '0', '1', '7', '2'][int(p)] for p in str(n)[1:])) for n in x]
def sub_658747e3(x):
    # encryption
    y = [6023791904, 5695997966, 858552300, 1896074407, 3018845164, 733211445, 1410372451, 4644095748, 308683712, 6564262091, 7473871752, 635696414, 8769347686, 1465353495, 6079415203, 7307425693, 7421723189, 8743946326, 715372011, 6846600731, 3272291147, 2835072537, 5771995374, 331323153, 3229748854, 159195752, 3823267406, 3880374037, 8409183428, 7880758694, 3857407704, 1597085138, 5797192869, 8758432586, 1187694504, 4539627964]
    return [x[i] - y[i] for i in range(k)]
def csub_ecf51562(x):
    # shiet?
    return [x[i] - 727155567 for i in range(k)]
def chunk_0188117c(x):
    # rekt
    return x[28:] + x[:28]
def chmul_d95a813a(x):
    y = [ord(p) for p in '27eaf0d5813eb56d24eb635aa5ebcc57727c']
    return [x[i] * y[i] for i in range(k)]
def chadd_7620a0b7(x):
    # the best
    y = [ord(p) for p in '423ec2653730b8e73bed460fd1b55c1d3964']
    return [x[i] + y[i] for i in range(k)]
def mul_a3a1940e(x):
    # so good
    y = [1, 5, 1, 2, 2, 2, 1, 3, 2, 5, 3, 1, 5, 3, 2, 3, 4, 4, 4, 4, 3, 4, 5, 5, 1, 3, 4, 1, 2, 3, 1, 3, 5, 1, 4, 3]
    return [x[i] * y[i] for i in range(k)]
def cxor_0c6bb32e(x):
    # the flag is flag{jk}
    return [x[i] ^ 7484457268 for i in range(k)]
def chxor_90da6de6(x):
    y = [ord(p) for p in '017f10644536986c466a889a0d2d892c0952']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_e7f67d19(x):
    # encryption
    y = [ord(p) for p in '2e0275170fbdc6adc7898dcf71f8c87d024a']
    return [x[i] * y[i] for i in range(k)]
def chsub_75cdd33b(x):
    # rekt
    y = [ord(p) for p in '1565c4439c7a681652561e4bdfe2398c3d82']
    return [x[i] - y[i] for i in range(k)]
def cmul_2d5025b5(x):
    return [x[i] * 4 for i in range(k)]
def cxor_c4236734(x):
    return [x[i] ^ 9119303644 for i in range(k)]
def csub_b7f33659(x):
    return [x[i] - 8275913725 for i in range(k)]
def cmul_d7a4e37f(x):
    # evil
    return [x[i] * 4 for i in range(k)]
def deck_f7c8bbd1(x):
    return x[:7] + x[19:34] + x[34:] + x[7:19]
def deck_d814839f(x):
    return x[:1] + x[13:26] + x[26:] + x[1:13]
def chsub_4c5385aa(x):
    # evil
    y = [ord(p) for p in '195397b82f435eb7843dfa78bba5b942378e']
    return [x[i] - y[i] for i in range(k)]
def chunk_4113b7f6(x):
    # lmaooo
    return x[11:] + x[:11]
def sub_7aa7238b(x):
    y = [3966592556, 3257616088, 2047957566, 7771129851, 7179370904, 8183021845, 161030353, 4952996746, 3069336956, 6039921837, 6953481036, 8474403929, 3390283340, 6732935671, 4474288306, 2469356366, 8492302368, 9816340116, 7554350180, 1423916557, 7776715850, 4409403738, 9043878810, 6409416731, 7472369739, 8193713263, 8522079973, 439487310, 5828811162, 315627598, 6106444682, 3843566260, 5210238952, 9139090768, 7458084555, 4045469194]
    return [x[i] - y[i] for i in range(k)]
def chmul_c9980e5a(x):
    y = [ord(p) for p in '3b4d251d768251bc6a6bb2008caab32ff1f0']
    return [x[i] * y[i] for i in range(k)]
def csub_0c9dc34d(x):
    return [x[i] - 250104969 for i in range(k)]
def chunk_bfd2f50a(x):
    return x[5:] + x[:5]
def csub_f9235964(x):
    # encryption
    return [x[i] - 3828380293 for i in range(k)]
def chadd_2bcca0b5(x):
    y = [ord(p) for p in 'bf4463d0241ab83c6e14b0338419ed018e25']
    return [x[i] + y[i] for i in range(k)]
def csub_d480ce5f(x):
    return [x[i] - 8027748411 for i in range(k)]
def digsub_20c16447(x):
    # encryption
    return [int(str(n)[:1] + ''.join(['7', '1', '3', '6', '2', '9', '8', '5', '0', '4'][int(p)] for p in str(n)[1:])) for n in x]
def chsub_e6873048(x):
    y = [ord(p) for p in 'd75f1f7a7fd41c7469b4da55e26d7594a450']
    return [x[i] - y[i] for i in range(k)]
def sub_abe98fac(x):
    y = [1443317276, 7892572809, 4517855600, 7616694727, 7649143331, 5270223099, 8999474618, 1239338002, 7295965850, 8967210622, 3950513662, 2582359164, 6146404660, 2234085724, 3893719251, 6252809882, 6917314127, 8182747496, 5927395595, 1038871057, 6202167450, 6620292298, 8777112739, 7140149669, 2466101011, 9724504482, 2198184550, 3238835357, 5905441848, 8010080795, 4142291291, 295159812, 9600354394, 2845899799, 811747314, 9104121173]
    return [x[i] - y[i] for i in range(k)]
def chmul_510bb7ff(x):
    y = [ord(p) for p in '738d3f324f2d93dac56febe33e1c99aa5873']
    return [x[i] * y[i] for i in range(k)]
def chmul_a4bed1f5(x):
    # shiet?
    y = [ord(p) for p in '56c54cc6f0915baa6a3d1d4a4be76f7d94f6']
    return [x[i] * y[i] for i in range(k)]
def chadd_404cff4b(x):
    # so good
    y = [ord(p) for p in 'a5ea354ca12d1cafc5285142f6485daef628']
    return [x[i] + y[i] for i in range(k)]
def chsub_d64b63cc(x):
    y = [ord(p) for p in 'd9a1cd36e0eee266f9eab724b3c727e3b4e6']
    return [x[i] - y[i] for i in range(k)]
def shuffle_c71df508(x):
    # the best
    return [x[p] for p in [3, 5, 35, 18, 13, 26, 29, 15, 20, 24, 19, 30, 8, 22, 25, 27, 12, 34, 17, 16, 0, 11, 33, 28, 7, 23, 4, 9, 21, 6, 1, 10, 31, 14, 32, 2]]
def mul_a1ba17e5(x):
    y = [3, 4, 7, 3, 2, 4, 2, 7, 2, 5, 2, 1, 2, 3, 4, 4, 4, 7, 4, 3, 3, 3, 1, 1, 1, 6, 7, 1, 6, 7, 5, 4, 3, 3, 5, 4]
    return [x[i] * y[i] for i in range(k)]
def chxor_2bbe4cc1(x):
    # lmaooo
    y = [ord(p) for p in '51653231fd7824ea47c606a29b0f48ec7f75']
    return [x[i] ^ y[i] for i in range(k)]
def xor_698d0c07(x):
    # the best
    y = [2909917501, 8227764124, 3157127184, 9916875193, 8191282051, 6763835920, 1208631499, 9438036837, 8482239720, 2377080750, 1241096006, 4022881950, 8272117346, 6211220852, 4953942658, 2675731853, 3762509208, 7756636677, 9746968259, 5074026812, 9137324275, 4232918319, 6372229723, 7424584948, 221521868, 4167507921, 5666534273, 6837154348, 5939010240, 7441485889, 1792938437, 2791088276, 869092014, 520740170, 5469829191, 3414942815]
    return [x[i] ^ y[i] for i in range(k)]
def xor_c1cdd552(x):
    y = [6501389209, 1456993742, 7174674336, 6401826724, 8666581143, 2937034585, 9820753715, 9217819098, 3367249455, 3581417185, 1877910779, 9461979158, 4002858188, 3659233964, 6428833628, 1421693049, 4200735059, 2296892231, 1026934514, 9933467667, 8681582498, 614247012, 9798077314, 2733931011, 8792071136, 2941546832, 1692235097, 1880640924, 6862632392, 9373575102, 4414882142, 7130020307, 1823552575, 1971087454, 7992947756, 470971276]
    return [x[i] ^ y[i] for i in range(k)]
def csub_8f08114e(x):
    return [x[i] - 9788452553 for i in range(k)]
def mul_6bdc88d2(x):
    y = [2, 5, 4, 6, 2, 5, 2, 2, 3, 6, 3, 6, 2, 2, 2, 6, 6, 1, 3, 3, 5, 6, 6, 4, 3, 3, 3, 5, 1, 5, 4, 1, 2, 6, 5, 6]
    return [x[i] * y[i] for i in range(k)]
def chadd_baaab600(x):
    y = [ord(p) for p in 'af997517a50de54f531b273d846379723ff8']
    return [x[i] + y[i] for i in range(k)]
def cmul_f59de4d7(x):
    # the flag is flag{jk}
    return [x[i] * 8 for i in range(k)]
def cadd_029527b8(x):
    return [x[i] + 3820338826 for i in range(k)]
def cadd_2ed55f8d(x):
    return [x[i] + 1658564478 for i in range(k)]
def chunk_0934570f(x):
    return x[33:] + x[:33]
def chxor_d01563ec(x):
    # lel
    y = [ord(p) for p in '273e43501ef0438eaedf092beedfbfc45880']
    return [x[i] ^ y[i] for i in range(k)]
def sub_a2aa3ba7(x):
    y = [408193474, 5034445386, 3216451674, 6017212979, 5145737068, 6455108025, 2811365064, 5384814391, 5378788224, 2421428621, 1457766509, 6443265001, 9345936748, 4927018035, 1304736094, 2225045164, 2815967077, 8176747123, 3296698846, 3140101873, 5876788260, 3507073692, 4009548498, 6819502444, 9782056738, 1880160338, 4466381267, 160359221, 7275845406, 7706916621, 1314594264, 7153399866, 9159056675, 2952429755, 5025910751, 8332065344]
    return [x[i] - y[i] for i in range(k)]
def cxor_1adfeb4e(x):
    # lmaooo
    return [x[i] ^ 6636264009 for i in range(k)]
def cadd_79d7fa85(x):
    return [x[i] + 6246556838 for i in range(k)]
def chmul_decbe9f3(x):
    y = [ord(p) for p in '75db5d65d46e03410ddd077b056a1358cc82']
    return [x[i] * y[i] for i in range(k)]
def mul_efab7eff(x):
    # the flag is flag{jk}
    y = [2, 5, 3, 7, 5, 4, 8, 8, 8, 1, 6, 5, 9, 8, 7, 7, 9, 1, 4, 5, 1, 9, 7, 6, 7, 9, 1, 1, 1, 6, 7, 2, 8, 4, 5, 9]
    return [x[i] * y[i] for i in range(k)]
def xor_60d3ac80(x):
    # lmaooo
    y = [6751348284, 6268499939, 5925971471, 3151391086, 8112635710, 6058388722, 4234930116, 3836920405, 3522991856, 5619763961, 5753353329, 7621554985, 8374478317, 6030765213, 2270775529, 2279795816, 2903064624, 9243903990, 9346667281, 9278801079, 9167624515, 8012577976, 4393038407, 9470766036, 4288263876, 2340133349, 8548940750, 4631947189, 370410373, 6575912164, 2591077146, 742470919, 5336378827, 4500100284, 3510035223, 3255604651]
    return [x[i] ^ y[i] for i in range(k)]
def cadd_5b4e9aab(x):
    # mucho encrypto
    return [x[i] + 7778605573 for i in range(k)]
def cxor_075c21e0(x):
    return [x[i] ^ 652431080 for i in range(k)]
def chxor_9d86eb3b(x):
    # the best
    y = [ord(p) for p in '8f76b79954d115296365347d624afd99b963']
    return [x[i] ^ y[i] for i in range(k)]
def add_6e59afd0(x):
    y = [8661615883, 4829083820, 5581416639, 406087980, 7971239066, 1254694611, 3209917436, 4298185579, 6278210893, 2966265622, 2433643859, 9924449222, 3767050987, 2769385256, 3614981901, 9275438046, 5336708509, 9536057157, 9261899634, 2990318036, 2639459657, 6870139104, 7253551213, 3178905093, 8127513335, 7287357419, 6058093114, 1047985104, 9424629511, 4501634124, 7475201713, 8834073195, 5055721055, 6802515562, 7959211794, 561962744]
    return [x[i] + y[i] for i in range(k)]
def csub_ecd1b6d0(x):
    # evil
    return [x[i] - 2213393971 for i in range(k)]
def cxor_61ffae1c(x):
    # lel
    return [x[i] ^ 4302626633 for i in range(k)]
def chunk_45aefbfc(x):
    return x[15:] + x[:15]
def sub_8fe1102c(x):
    y = [4899333122, 5730128105, 8025301565, 989783143, 1246366341, 1018847991, 3720801637, 595706854, 9851314009, 1280303257, 6621505566, 4731930977, 5182404732, 5358941743, 6528575959, 6866653386, 9948242979, 6799273353, 8652628305, 2207252217, 307428317, 9177417297, 7125267475, 1948189663, 7795339587, 7610406901, 1194388043, 9135463721, 1750819142, 6753617502, 1338082688, 7354644414, 2114488365, 2305036271, 5131169217, 2232815689]
    return [x[i] - y[i] for i in range(k)]
def chsub_894d41c7(x):
    # evil
    y = [ord(p) for p in 'fd47846f0371f72f78e0925606603f87403a']
    return [x[i] - y[i] for i in range(k)]
def digsub_be40e0aa(x):
    return [int(str(n)[:1] + ''.join(['1', '2', '5', '6', '7', '8', '3', '0', '9', '4'][int(p)] for p in str(n)[1:])) for n in x]
def add_547096c9(x):
    # kek
    y = [9279900356, 8046280681, 775142732, 3839139684, 8276264789, 9801506595, 7871002395, 8088219746, 5038160187, 3008960972, 3263218173, 8637412811, 5405530094, 7765441016, 9577924138, 6702483221, 7234968307, 3089089193, 6908746516, 6354820234, 5365317504, 321856904, 7362378749, 3101081272, 5188631163, 8898947551, 8534148587, 6829023238, 5850514916, 1141738386, 6980206604, 7521321518, 6641257929, 5175092793, 1741341228, 5306042766]
    return [x[i] + y[i] for i in range(k)]
def cxor_e3ac0f88(x):
    # encryption
    return [x[i] ^ 5470028511 for i in range(k)]
def cmul_0d8033d0(x):
    # lmaooo
    return [x[i] * 4 for i in range(k)]
def chmul_2c8f4393(x):
    y = [ord(p) for p in 'a82d14c663ef8c511cb9cc9c645cf6280b2a']
    return [x[i] * y[i] for i in range(k)]
def cxor_ed3b1b28(x):
    # mucho encrypto
    return [x[i] ^ 7822923239 for i in range(k)]
def deck_79be82f7(x):
    # so good
    return x[23:26] + x[0:23] + x[:0] + x[26:]
def xor_816adcd8(x):
    # evil
    y = [4004381464, 603338552, 4496452041, 1083570800, 1520890903, 2550662820, 3275095858, 1522194247, 3487865725, 1869096771, 9580734255, 5611572150, 7787282867, 1147496639, 1778142375, 2831952422, 9654269356, 2057409519, 3351792111, 5221711992, 1212051730, 6088302243, 1839673367, 7813971134, 4222406119, 9813963020, 8601840674, 4213443575, 452126395, 691815999, 3589051852, 9756687038, 85970979, 2762398391, 7615732031, 3555264328]
    return [x[i] ^ y[i] for i in range(k)]
def chadd_685bb625(x):
    y = [ord(p) for p in 'b917d7215da3c48281960d692158f50bf658']
    return [x[i] + y[i] for i in range(k)]
def cmul_b2582678(x):
    return [x[i] * 9 for i in range(k)]
def csub_8dbb396c(x):
    # mucho encrypto
    return [x[i] - 5353060456 for i in range(k)]
def chadd_b13cc8ae(x):
    y = [ord(p) for p in 'ec1e32003dc72568bcf3ef3eb37724e9b396']
    return [x[i] + y[i] for i in range(k)]
def cxor_da56bd65(x):
    # rekt
    return [x[i] ^ 9910670250 for i in range(k)]
def chunk_4b50f9e1(x):
    # kek
    return x[30:] + x[:30]
def chsub_57719ac8(x):
    y = [ord(p) for p in '017a19aefdfb825360589cd4c1d016455250']
    return [x[i] - y[i] for i in range(k)]
def sub_dd4a6aab(x):
    y = [1429367819, 5576380046, 96440977, 1015536045, 1676384946, 1514889138, 6907672475, 4953792576, 1855313234, 3631882500, 7003851885, 8699612697, 7926228518, 1308162225, 4130662106, 7688140216, 6984062688, 89998394, 8656630430, 5069315704, 854777800, 5658786198, 781822991, 5757845262, 4592256530, 1086131926, 8675736676, 1641246050, 9388523354, 2589950159, 2706164536, 5243760156, 218869868, 6240554607, 5738154448, 6576401886]
    return [x[i] - y[i] for i in range(k)]
def deck_7bcad7f6(x):
    return x[2:3] + x[29:] + x[3:29] + x[:2]
def sub_04d98d74(x):
    # the flag is flag{jk}
    y = [2929244334, 3174933497, 7773429463, 9046923786, 7177457063, 2052589527, 9302449958, 3584542634, 6542455019, 606871844, 9114675947, 2395322348, 7153893242, 4206476131, 3755643790, 1436066628, 702249281, 7656386295, 9274366507, 9070585954, 4637927400, 817163938, 2428380237, 2447183030, 6626590582, 8011739512, 8937030031, 6877390336, 7659478528, 2671624533, 8196001999, 3103235861, 4958558934, 1461104395, 7489644837, 6393454127]
    return [x[i] - y[i] for i in range(k)]
def chadd_2732f1ee(x):
    # so good
    y = [ord(p) for p in '8c757676eb63bd7b3c38c4c59d5d9c61d629']
    return [x[i] + y[i] for i in range(k)]
def add_b94ae645(x):
    # kek
    y = [2262169353, 6184054471, 6123899165, 6007993189, 9166223341, 2481567312, 9694221626, 6985222767, 5869244532, 8831526451, 7918719669, 8870010250, 8155310201, 634775697, 7145416502, 7281822450, 336893193, 9397980881, 9679890486, 4012826865, 2733628981, 1513733506, 694244003, 2047945205, 2810162936, 3518509356, 1128897815, 9037131661, 9155149467, 2232123826, 2451715276, 2730787441, 5548230222, 6575052866, 3824483028, 6782158906]
    return [x[i] + y[i] for i in range(k)]
def cmul_c52f5be0(x):
    # so good
    return [x[i] * 3 for i in range(k)]
def cxor_a56196fd(x):
    # the best
    return [x[i] ^ 5652386618 for i in range(k)]
def csub_34b73c2d(x):
    # the best
    return [x[i] - 1146721984 for i in range(k)]
def cadd_bf48a745(x):
    # encryption
    return [x[i] + 3726354937 for i in range(k)]
def chadd_6a4e5b24(x):
    # encryption
    y = [ord(p) for p in '4c704115ccbecf3925214a6868f74655163a']
    return [x[i] + y[i] for i in range(k)]
def deck_b7403ae0(x):
    # so good
    return x[24:34] + x[4:24] + x[:4] + x[34:]
def chsub_8590464c(x):
    # evil
    y = [ord(p) for p in 'da6dc5a8b4390f1ee0b395471a3c8cdc7caf']
    return [x[i] - y[i] for i in range(k)]
def chsub_cd79e5f6(x):
    # evil
    y = [ord(p) for p in 'ef9a73dbe747aa14e4e74a6d33d338026e0a']
    return [x[i] - y[i] for i in range(k)]
def mul_e0667d8e(x):
    # encryption
    y = [3, 1, 3, 1, 2, 3, 1, 3, 3, 3, 3, 2, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 3, 3, 3, 3, 2, 2, 3, 2, 3, 2, 1, 3, 2]
    return [x[i] * y[i] for i in range(k)]
def sub_8346a4e8(x):
    y = [4026511700, 7589531530, 7868687902, 3828329025, 1519540758, 9254913220, 9670603158, 8076839664, 301958085, 7969490305, 2566087719, 2537004966, 9179212788, 8188552597, 7541780058, 8553845148, 6657034623, 6857539392, 396907182, 6821151168, 9467923204, 2942349911, 5716482081, 7771562649, 8645100603, 1881602926, 841593293, 6262786432, 7809801243, 6092734125, 2040488828, 8162864926, 1607377458, 3906998509, 7396648006, 8529628209]
    return [x[i] - y[i] for i in range(k)]
def digsub_06f2e415(x):
    # so good
    return [int(str(n)[:1] + ''.join(['4', '8', '0', '1', '7', '6', '9', '3', '5', '2'][int(p)] for p in str(n)[1:])) for n in x]
def chxor_3e87843f(x):
    y = [ord(p) for p in '3197d6a04b9ff7e78d77624d2aba1c574050']
    return [x[i] ^ y[i] for i in range(k)]
def mul_987e03f2(x):
    y = [1, 2, 1, 1, 6, 5, 2, 4, 2, 1, 2, 6, 3, 4, 1, 4, 2, 4, 3, 3, 4, 1, 5, 1, 3, 3, 2, 5, 6, 2, 3, 2, 2, 3, 6, 2]
    return [x[i] * y[i] for i in range(k)]
def cadd_ba5550aa(x):
    # lel
    return [x[i] + 6654654445 for i in range(k)]
def cxor_892833c6(x):
    return [x[i] ^ 9580825718 for i in range(k)]
def chxor_37bb6be2(x):
    y = [ord(p) for p in 'e44d28a47488f29eb3a3390bf79cf9ada113']
    return [x[i] ^ y[i] for i in range(k)]
def csub_7c363447(x):
    return [x[i] - 1993858918 for i in range(k)]
def chunk_66d22063(x):
    # just reverse it
    return x[14:] + x[:14]
def sub_4d3e2340(x):
    # evil
    y = [6487195428, 7421684305, 4848250348, 5611732574, 9259482133, 8779824437, 1243663123, 1335490949, 9065564752, 35807751, 326052209, 839830227, 183933830, 9469728798, 184144843, 3617616965, 9969927545, 9850666786, 2177664303, 6334817685, 6859376600, 6613819443, 6446195581, 6201081628, 6097261416, 2985536215, 1463014255, 4532108802, 4933574880, 4718295363, 9263896495, 5675413439, 6984090375, 1761831374, 5316265705, 5145050234]
    return [x[i] - y[i] for i in range(k)]
def cadd_7838f4d9(x):
    return [x[i] + 3846537952 for i in range(k)]
def deck_5ae88524(x):
    # just reverse it
    return x[:13] + x[13:31] + x[31:33] + x[33:]
def add_c93fcbda(x):
    y = [4145964614, 8022544118, 4973557073, 3712143390, 2539915694, 1830210796, 2148912659, 7582512771, 7297796007, 6443299233, 1934037033, 2568270428, 2079426955, 979224713, 5195569971, 7545626614, 9888877926, 6042251922, 1545685111, 8173697144, 7731099238, 8022270008, 3393112243, 7624770089, 530816664, 9595685366, 2576424224, 6860956605, 4332622309, 5318249089, 5953027824, 861076790, 7619628026, 3005837362, 6771730991, 244687765]
    return [x[i] + y[i] for i in range(k)]
def digsub_19451cfd(x):
    # so good
    return [int(str(n)[:1] + ''.join(['4', '8', '2', '7', '9', '6', '5', '0', '3', '1'][int(p)] for p in str(n)[1:])) for n in x]
def digsub_e09ab638(x):
    # kek
    return [int(str(n)[:1] + ''.join(['1', '2', '6', '3', '9', '8', '7', '4', '5', '0'][int(p)] for p in str(n)[1:])) for n in x]
def add_d2c1e8bc(x):
    # the best
    y = [6981867476, 6497672255, 9173177536, 3813235738, 4647164368, 4988341521, 9121436428, 5689035095, 9004331457, 4091279986, 7384358851, 8931203631, 5255903848, 3568029532, 9127056574, 4938378006, 4867443526, 7998568756, 7213739617, 990532466, 7286017665, 2697505932, 8645230654, 8157098149, 8671724835, 3106008905, 5034628663, 3484381594, 468454446, 1182952675, 8130187466, 2082170722, 4049732258, 7494956838, 3121020908, 1819876022]
    return [x[i] + y[i] for i in range(k)]
def chsub_dbd1ec78(x):
    y = [ord(p) for p in '6082d58d243314abb9aee770a9c007eba599']
    return [x[i] - y[i] for i in range(k)]
def xor_f5bcc389(x):
    # encryption
    y = [2849832317, 83722745, 1709545201, 9965690312, 2536440811, 2774388453, 4704325446, 6096324840, 1319341976, 8045990581, 5031475092, 7134636923, 1577081156, 5301356740, 4916726933, 7936942627, 9847226633, 8247964558, 7554093274, 9999334956, 6187129954, 4691872688, 3753904924, 5665219242, 3808209867, 3764722414, 14928056, 6771690495, 7892999539, 9352507087, 4278087346, 735771975, 5224693588, 193250261, 4657271996, 3195598749]
    return [x[i] ^ y[i] for i in range(k)]
def add_0b0a39a3(x):
    # evil
    y = [968063859, 8331766624, 3436578133, 212247450, 3788334737, 7845142862, 566370643, 4016753016, 7687796483, 6889742044, 6495251892, 7118015422, 1904355941, 1433232266, 3629007692, 2971931909, 9861535142, 5901683588, 5651355132, 2380676298, 1184958368, 9006644421, 9996174497, 1197638673, 683792607, 9177247535, 4848909814, 1155145282, 4637186450, 4033547048, 3950928425, 8442178091, 6620494846, 5022291084, 1777553930, 7049214452]
    return [x[i] + y[i] for i in range(k)]
def chsub_a2001711(x):
    y = [ord(p) for p in '8a4eda625a452944a9af5d527a7827fbec1e']
    return [x[i] - y[i] for i in range(k)]
def chmul_1bf400c7(x):
    # rekt
    y = [ord(p) for p in '6e9bed9fa06c3c1e591dedc0bd4d82597fc3']
    return [x[i] * y[i] for i in range(k)]
def sub_48430fed(x):
    y = [6112653584, 4892462402, 30847442, 9385829700, 5277339562, 9444513274, 5097555562, 7721626364, 6007945714, 6803878875, 3346165006, 84375153, 6001357770, 9913707706, 5788222580, 1756711744, 3272264505, 4730026684, 1699455769, 6347323588, 4618669276, 6826403022, 552994657, 2840431714, 348185764, 9896274221, 1879309202, 8298125951, 51433835, 5081214996, 4957321000, 8793896311, 9790188696, 4045746415, 4675303851, 3679144240]
    return [x[i] - y[i] for i in range(k)]
def chmul_d9fd0dcd(x):
    y = [ord(p) for p in '22c44f708cfb86a9ac1a67a3b2124973ff83']
    return [x[i] * y[i] for i in range(k)]
def chmul_e4e712b9(x):
    y = [ord(p) for p in 'bd8cb914a8b7de274fc1ff550710784af5d6']
    return [x[i] * y[i] for i in range(k)]
def chadd_d54dcfab(x):
    y = [ord(p) for p in '7a197dfdb2f717b08c6f80cc5fe2dfa69994']
    return [x[i] + y[i] for i in range(k)]
def cxor_871a2d7f(x):
    return [x[i] ^ 4476678103 for i in range(k)]
def chsub_76a99240(x):
    # lel
    y = [ord(p) for p in 'e69ca182e1aa93d928ae3b16d22cb2b7ba6e']
    return [x[i] - y[i] for i in range(k)]
def cadd_5352b247(x):
    # evil
    return [x[i] + 946917190 for i in range(k)]
def cxor_9df954e1(x):
    return [x[i] ^ 4289891566 for i in range(k)]
def chadd_f4c466d3(x):
    # the best
    y = [ord(p) for p in '5bbb28e70427a9e3dee72ec5c841b582281b']
    return [x[i] + y[i] for i in range(k)]
def chadd_ebbb5dc5(x):
    y = [ord(p) for p in 'dcce07f5d8e210a26fab0641651c46f2038e']
    return [x[i] + y[i] for i in range(k)]
def add_837ef20b(x):
    # kek
    y = [9785792681, 4482448274, 1382279823, 9441672083, 3570349250, 798784013, 8758123792, 9523827646, 2259300065, 9751563627, 6682810500, 1783446706, 4165603089, 7949925406, 5086288703, 8530848878, 5912653669, 1323227332, 4123375918, 9080219289, 950028479, 2856448789, 3795471338, 972982888, 6933832499, 331559840, 2827235115, 4405377737, 2842025077, 4311917674, 2845582411, 4379552764, 9333001813, 4206910969, 8322895859, 2032028679]
    return [x[i] + y[i] for i in range(k)]
def digsub_7942bae6(x):
    return [int(str(n)[:1] + ''.join(['6', '3', '8', '5', '9', '4', '2', '0', '1', '7'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_e7c72b68(x):
    return [x[i] * 4 for i in range(k)]
def chadd_a7330cb4(x):
    # lel
    y = [ord(p) for p in '0698c45e242588a82e450467e31db37f2c12']
    return [x[i] + y[i] for i in range(k)]
def xor_1eba93e4(x):
    # lel
    y = [3814898986, 9411245033, 8941442998, 6597214101, 4740741577, 3775728608, 1217411603, 3898443647, 5032796242, 9646533343, 8246401820, 2890463323, 5894955388, 2773920876, 9984668781, 5944980082, 9633662958, 5512320, 3835305481, 3657473544, 5455227364, 9923247423, 7317087297, 6502959727, 8928867920, 4149816155, 8169722904, 8579809872, 2263823655, 3695410108, 663173034, 567247373, 9118028860, 9889933345, 7029758007, 7745756993]
    return [x[i] ^ y[i] for i in range(k)]
def deck_d8d482e0(x):
    # encryption
    return x[:2] + x[2:22] + x[34:] + x[22:34]
def chunk_12fc1604(x):
    return x[19:] + x[:19]
def shuffle_8ca0e8e2(x):
    # rekt
    return [x[p] for p in [15, 8, 26, 24, 35, 11, 2, 9, 20, 18, 10, 28, 3, 1, 23, 30, 5, 29, 33, 31, 27, 22, 13, 21, 0, 32, 19, 12, 17, 16, 34, 6, 25, 7, 14, 4]]
def csub_dcf528e5(x):
    return [x[i] - 589725557 for i in range(k)]
def cadd_c15fc794(x):
    return [x[i] + 5770720731 for i in range(k)]
def csub_5eadc310(x):
    # encryption
    return [x[i] - 9234898700 for i in range(k)]
def chxor_845d20e4(x):
    y = [ord(p) for p in 'efef196600310d0eacd527e6df0f85507b72']
    return [x[i] ^ y[i] for i in range(k)]
def xor_ba2cb10f(x):
    y = [1281934227, 1547800999, 9203729944, 8543056511, 8754948229, 620566895, 4234233584, 1755332323, 8681115362, 2755999188, 2975933805, 8841302570, 685948076, 1423707355, 688933464, 88342639, 6506848534, 9382538417, 5322862488, 5272821794, 8890119275, 2024591873, 1957274399, 7556347270, 7687964312, 6065204517, 7031114440, 5768804615, 459876537, 1319248071, 7936068660, 7844904900, 3909153562, 8250358787, 6032348377, 1122229727]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_7f33f858(x):
    return [x[i] ^ 7525827622 for i in range(k)]
def mul_4bd300c9(x):
    # rekt
    y = [3, 3, 1, 2, 2, 1, 1, 3, 1, 3, 3, 2, 3, 1, 2, 1, 3, 3, 3, 3, 2, 2, 3, 3, 2, 3, 2, 2, 1, 3, 1, 1, 1, 1, 1, 1]
    return [x[i] * y[i] for i in range(k)]
def chxor_c55e532b(x):
    y = [ord(p) for p in '69ac3c2dffd7a912dddd3e6a634cf1662d73']
    return [x[i] ^ y[i] for i in range(k)]
def xor_8dc6fc89(x):
    # shiet?
    y = [9695266398, 5585580983, 1951708270, 3196826072, 3548432596, 5308890385, 6687578808, 8271369704, 2319385983, 9416481113, 6086738357, 3500844120, 121833080, 7057446536, 7529422779, 793615926, 9839391975, 6959607855, 893614706, 786068488, 651494533, 6359628338, 8274693306, 4747223555, 5010453379, 6907035131, 3810211611, 8415079358, 2859716007, 2866780254, 653672030, 6461977740, 9123483861, 7273287806, 69256738, 6493699373]
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_9a408c44(x):
    return [x[p] for p in [31, 9, 5, 28, 24, 0, 13, 10, 8, 12, 7, 33, 6, 1, 15, 29, 2, 21, 18, 35, 32, 17, 16, 25, 30, 11, 19, 14, 34, 20, 26, 27, 3, 23, 4, 22]]
def chmul_96b3e78c(x):
    # shiet?
    y = [ord(p) for p in 'a8c88141d28e5d00af3c9fc27d1e5d5c5fed']
    return [x[i] * y[i] for i in range(k)]
def chmul_659e5d80(x):
    # kek
    y = [ord(p) for p in '3db81bc10cc5b023089988baba0effc7890b']
    return [x[i] * y[i] for i in range(k)]
def add_88cb654b(x):
    y = [1294379066, 9059283667, 8901376986, 8687713388, 681589652, 6813509641, 9267711236, 7318738566, 8218148415, 7136376310, 960898033, 4704257763, 8162329702, 9192732926, 9454114692, 1129185015, 8297364970, 6631282290, 8023794444, 8395043541, 8440688137, 2983592520, 8752059770, 5462946766, 136317693, 3339605961, 9624999304, 2343554456, 4337726159, 4240006119, 1652715195, 147482089, 3048100682, 8135833245, 4429924423, 2353604755]
    return [x[i] + y[i] for i in range(k)]
def shuffle_64a08693(x):
    # shiet?
    return [x[p] for p in [15, 33, 34, 25, 11, 35, 20, 22, 21, 10, 12, 7, 26, 3, 14, 19, 18, 13, 23, 5, 24, 16, 9, 6, 28, 27, 4, 1, 29, 30, 8, 2, 32, 17, 0, 31]]
def add_c8475b4e(x):
    # the flag is flag{jk}
    y = [8935284713, 5564905676, 203135499, 6348686487, 3711846244, 351744089, 4002059005, 5284227816, 5804673392, 4847069459, 9552666803, 9568529475, 8899537295, 7065373852, 9516716308, 1150929134, 3446272095, 4958268295, 7689381277, 4967972283, 9238847491, 513529221, 7604522262, 4196370122, 4881556399, 5691284776, 5611630518, 7053578153, 5761430919, 8663210135, 1447395814, 9858488417, 3731862302, 9187452132, 5928674168, 8974973512]
    return [x[i] + y[i] for i in range(k)]
def sub_92b6d92c(x):
    y = [8016997299, 2420844230, 6423717085, 2285146149, 1927028384, 8403523110, 6900001482, 8057220303, 4915070639, 2361875056, 1277443916, 3502470375, 6303018778, 2526950585, 7197496221, 219630939, 2217368297, 1109165761, 7832348000, 9297567671, 7598918339, 1302492922, 9106358108, 1198708075, 2737394307, 2055814724, 403021597, 5299496497, 5038734005, 856241252, 8200544024, 2357909799, 2058109284, 9860124463, 751555023, 2092154965]
    return [x[i] - y[i] for i in range(k)]
def digsub_e4832eb3(x):
    return [int(str(n)[:1] + ''.join(['9', '2', '8', '6', '7', '0', '1', '3', '5', '4'][int(p)] for p in str(n)[1:])) for n in x]
def mul_e020bc90(x):
    # evil
    y = [1, 5, 1, 5, 6, 3, 1, 1, 5, 2, 4, 2, 2, 2, 6, 4, 6, 4, 3, 2, 2, 5, 6, 5, 3, 6, 4, 1, 5, 1, 6, 3, 3, 2, 1, 5]
    return [x[i] * y[i] for i in range(k)]
def chxor_665eed2c(x):
    # mucho encrypto
    y = [ord(p) for p in '51ade52b075452e1c1d15b32d97963a84dec']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_2aa22b89(x):
    # lmaooo
    return [x[i] ^ 8217184934 for i in range(k)]
def csub_4660584b(x):
    # kek
    return [x[i] - 3560401685 for i in range(k)]
def cadd_56facd4a(x):
    # lmaooo
    return [x[i] + 2752635267 for i in range(k)]
def sub_6b51b490(x):
    # shiet?
    y = [2765214040, 392124319, 1407164901, 1198180051, 8956114988, 6173726926, 3211255325, 4397944722, 944616674, 3595161326, 2673887189, 9002688911, 5754169811, 8443910759, 1092234210, 3598638623, 8042754460, 9628372506, 1746891436, 4057736684, 5713022748, 8229840060, 6399510482, 2537826854, 8562613292, 3812451811, 6343449725, 7577518891, 2365364237, 7691767796, 4748352797, 4829892127, 3842168887, 2059508487, 5655819957, 331976057]
    return [x[i] - y[i] for i in range(k)]
def chmul_f03e312d(x):
    y = [ord(p) for p in 'fe4d20c6f89c153b3d3cf04c36982af0c4f4']
    return [x[i] * y[i] for i in range(k)]
def cadd_598cbf7e(x):
    return [x[i] + 1051654684 for i in range(k)]
def cmul_23a5f304(x):
    return [x[i] * 8 for i in range(k)]
def chmul_c25d1cd0(x):
    # the best
    y = [ord(p) for p in '1b23fde72cde18413eb5d521b608188aed5e']
    return [x[i] * y[i] for i in range(k)]
def digsub_b7bd2cb5(x):
    return [int(str(n)[:1] + ''.join(['7', '8', '6', '2', '0', '9', '4', '1', '3', '5'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_d8f1c0f8(x):
    y = [ord(p) for p in '611ec33e36d007e9d84f01054806df80051b']
    return [x[i] * y[i] for i in range(k)]
def chmul_f5416998(x):
    # just reverse it
    y = [ord(p) for p in '1db7199aa3e34369b6ae00ca2a6596c9da1e']
    return [x[i] * y[i] for i in range(k)]
def sub_0a7dad65(x):
    y = [1496970964, 8353354847, 9488750181, 4203817083, 5273213063, 6302843288, 6993418553, 9462816226, 255619649, 5192050953, 8291130966, 3007357394, 1843465311, 2389558623, 6076206151, 8941929007, 1291170286, 2485760230, 2574382773, 7009081340, 1445994951, 5697382819, 7866696094, 6659393953, 1444474374, 7502064955, 8164254085, 6188808697, 9281591285, 1667835780, 6171723277, 6407290258, 3477808415, 1658551680, 6981415822, 6776351866]
    return [x[i] - y[i] for i in range(k)]
def sub_47698898(x):
    # the best
    y = [5811133627, 1022711388, 293656843, 1967477153, 115420807, 2469758450, 8212884521, 8754842552, 2795551210, 8509045815, 8267983956, 7155049839, 2406917230, 3323135099, 9142466943, 2173589299, 6539384096, 3720089467, 952407836, 5992112030, 3118899388, 1175780795, 5800304260, 2990073270, 7943996963, 8332379742, 9830558284, 8076119041, 3298901512, 1970685667, 740330080, 9650707146, 214848226, 1659696934, 3280747260, 8050697657]
    return [x[i] - y[i] for i in range(k)]
def mul_d952127d(x):
    y = [1, 1, 3, 5, 5, 4, 2, 1, 2, 3, 3, 3, 3, 2, 2, 5, 2, 3, 1, 5, 2, 2, 3, 4, 5, 2, 2, 2, 1, 1, 4, 2, 5, 5, 2, 1]
    return [x[i] * y[i] for i in range(k)]
def csub_9253b05f(x):
    return [x[i] - 5838301128 for i in range(k)]
def chxor_0d7983da(x):
    # evil
    y = [ord(p) for p in '5bfb10faf8f2df00ccfd52c328d4af15f4a7']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_f3858d75(x):
    # just reverse it
    return [x[p] for p in [30, 19, 34, 29, 6, 26, 4, 8, 5, 10, 33, 7, 27, 17, 25, 20, 16, 0, 14, 32, 21, 31, 28, 2, 13, 11, 22, 12, 15, 18, 9, 35, 24, 23, 1, 3]]
def xor_c0543d9e(x):
    y = [8174768667, 2108285016, 5895157151, 4546020724, 9485894892, 7088369937, 4455484939, 535353261, 9340750376, 9915047846, 9274127901, 9554481883, 4945147158, 739476252, 8012473595, 8847785090, 862452760, 8722120346, 739704980, 3408869892, 8747973921, 5105290921, 8163568756, 2007040224, 6342551224, 3281397305, 6638252950, 3162768973, 760947958, 5220715270, 6859886003, 1071260658, 6187589623, 7977699316, 1551708890, 8549890598]
    return [x[i] ^ y[i] for i in range(k)]
def cadd_3deee9ba(x):
    return [x[i] + 9650898077 for i in range(k)]
def chadd_ae237728(x):
    # mucho encrypto
    y = [ord(p) for p in 'dbc3d7033778cdfccdeca4b05a04e0cb57bd']
    return [x[i] + y[i] for i in range(k)]
def add_8ef46bd6(x):
    # the best
    y = [8804330998, 1222055874, 6487562481, 9381111018, 2061663674, 552153938, 9271378751, 8229584262, 4011782570, 8961141697, 2682175172, 4305029391, 5158724765, 4040671059, 172766926, 3395228473, 1591375273, 3597014166, 8422321496, 2871137163, 152018303, 5651430666, 975327258, 3267936568, 482829881, 3943143318, 7423272866, 4844267116, 3681610886, 3709146233, 8658083173, 2399465144, 1160769644, 5295144116, 7099429673, 5547780579]
    return [x[i] + y[i] for i in range(k)]
def shuffle_f44f0fc5(x):
    return [x[p] for p in [4, 16, 19, 23, 15, 29, 34, 22, 7, 10, 17, 13, 3, 27, 0, 6, 30, 5, 8, 12, 1, 28, 2, 9, 11, 26, 32, 24, 33, 21, 18, 31, 14, 20, 25, 35]]
def add_2be5c482(x):
    # kek
    y = [2997553596, 1402168577, 9890425780, 4258646217, 6011394422, 9700396112, 2806836705, 4016075101, 9380023927, 3194902295, 5723372553, 1488306124, 8275296774, 2959858207, 508193410, 7673163978, 7413019958, 874979004, 839911047, 3412549104, 1568583914, 5964067472, 4676866907, 777033328, 7803639457, 3434865597, 1606667714, 4049285717, 3303256085, 1746259672, 8082741928, 6590863191, 6067544207, 5743844557, 8957916565, 5608536066]
    return [x[i] + y[i] for i in range(k)]
def shuffle_0f715c90(x):
    # mucho encrypto
    return [x[p] for p in [31, 12, 30, 28, 14, 25, 7, 8, 27, 4, 20, 35, 10, 32, 5, 34, 6, 1, 24, 19, 16, 26, 21, 33, 13, 15, 9, 29, 23, 3, 2, 17, 22, 0, 18, 11]]
def chunk_aad9a6a9(x):
    return x[4:] + x[:4]
def chmul_b7f6dccf(x):
    y = [ord(p) for p in '3528f0336712f6f799c6edddcdeb75d98090']
    return [x[i] * y[i] for i in range(k)]
def chsub_6ab39e5c(x):
    # shiet?
    y = [ord(p) for p in 'be379bfce4d2a4b97717d3719b2acf098b51']
    return [x[i] - y[i] for i in range(k)]
def shuffle_efa32ed0(x):
    return [x[p] for p in [4, 26, 19, 14, 29, 9, 34, 20, 12, 22, 31, 16, 35, 23, 13, 21, 3, 7, 18, 33, 28, 25, 8, 30, 15, 0, 17, 1, 27, 11, 6, 24, 5, 10, 2, 32]]
def shuffle_7c86708c(x):
    # so good
    return [x[p] for p in [7, 33, 34, 4, 24, 5, 9, 13, 21, 30, 20, 3, 32, 16, 23, 26, 18, 14, 10, 6, 28, 27, 0, 35, 15, 31, 8, 17, 11, 19, 25, 1, 22, 29, 12, 2]]
def chunk_dd51ac10(x):
    # so good
    return x[34:] + x[:34]
def chxor_ea027ec2(x):
    # just reverse it
    y = [ord(p) for p in 'be2387a29a6ebd443714069cbef916ccd155']
    return [x[i] ^ y[i] for i in range(k)]
def xor_cdbf869f(x):
    # shiet?
    y = [232366101, 6220501596, 9142614994, 1729311330, 9344310914, 4492702416, 4992419439, 6541019930, 6003086553, 790982278, 6087244148, 601865240, 2822535187, 5400626388, 1328094396, 284185341, 9415762468, 6636393801, 8488272027, 2679384813, 8451271811, 1890424340, 8329134423, 1522565231, 4407641981, 4987145930, 2228810485, 2204411962, 2009038930, 43264175, 4423520477, 8133818045, 9468077914, 4964128561, 3797318314, 1323041502]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_aea82172(x):
    y = [ord(p) for p in '4635886c8a5fe0e3479fca0f53ef3bca2380']
    return [x[i] - y[i] for i in range(k)]
def add_1039dc95(x):
    y = [5723244445, 9451702922, 9196868334, 2048492575, 2228833635, 8074623431, 1136840581, 1324442629, 4853398434, 8835381260, 1584311041, 8698009373, 2680131519, 280633565, 8227390009, 8528359163, 4883796323, 4435511372, 3533859747, 3816673653, 977027305, 3619325279, 1618539559, 2709525688, 4678792298, 5239898284, 5739816805, 2684371141, 7417193573, 491720217, 1710117086, 3603134704, 4184906046, 21308101, 6327856934, 646664105]
    return [x[i] + y[i] for i in range(k)]
def mul_b8963b30(x):
    y = [1, 8, 4, 10, 9, 10, 5, 1, 5, 1, 6, 7, 9, 5, 5, 8, 3, 9, 1, 10, 5, 5, 6, 8, 3, 2, 2, 8, 1, 4, 3, 8, 3, 5, 2, 8]
    return [x[i] * y[i] for i in range(k)]
def xor_0e75b77c(x):
    # the flag is flag{jk}
    y = [2884890570, 803143156, 5362633564, 2262549551, 2832787448, 8203309444, 1992418853, 118156772, 465399762, 2586724756, 8551304600, 5022266155, 6045137780, 9258842831, 981238339, 5501041736, 1035990213, 8369994587, 4864378712, 1731935285, 2599528192, 2279936039, 1330227921, 9394832205, 4054225435, 2807830041, 5958236855, 1127281211, 2852059755, 9679621390, 3826638582, 884976007, 6234606299, 8292491298, 8463500342, 4450610452]
    return [x[i] ^ y[i] for i in range(k)]
def cmul_21388cd8(x):
    return [x[i] * 9 for i in range(k)]
def csub_9ccfaef5(x):
    # evil
    return [x[i] - 4908155444 for i in range(k)]
def cadd_0208daec(x):
    # kek
    return [x[i] + 6386294048 for i in range(k)]
def sub_8058d94d(x):
    # so good
    y = [4327254576, 7399585540, 6871227710, 3717367111, 3950603293, 9560422657, 9026723568, 5080215999, 4066782630, 9885352190, 2364813516, 4734898567, 1253213582, 2644177935, 4525424106, 1055323870, 8111059475, 6495876332, 3465572920, 4159203203, 603849913, 8794456894, 2170343220, 6384200218, 4979639055, 7965943329, 474739881, 4258555382, 1902133223, 4393925955, 5602357362, 124857305, 3296343529, 9316645861, 2024970155, 9379100821]
    return [x[i] - y[i] for i in range(k)]
def digsub_2f6deeb4(x):
    return [int(str(n)[:1] + ''.join(['0', '3', '7', '9', '1', '5', '8', '6', '4', '2'][int(p)] for p in str(n)[1:])) for n in x]
def mul_70d397f8(x):
    y = [2, 2, 1, 3, 1, 1, 1, 3, 2, 1, 2, 2, 2, 2, 3, 1, 1, 2, 3, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3, 2, 3, 3, 1, 1]
    return [x[i] * y[i] for i in range(k)]
def cmul_adeb1535(x):
    # shiet?
    return [x[i] * 10 for i in range(k)]
def chsub_004b681b(x):
    # lel
    y = [ord(p) for p in '4955e25a8198167d8751906a3c0ab512161d']
    return [x[i] - y[i] for i in range(k)]
def chxor_eaba9d0d(x):
    # so good
    y = [ord(p) for p in 'cfbdd7cd75aa15aef65f829425e9f4718e3b']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_22bbbf9c(x):
    # just reverse it
    y = [ord(p) for p in '2d1ea3ead7a350332ac491cb29c77f66e5d4']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_8c84166e(x):
    # rekt
    return [x[p] for p in [4, 20, 5, 2, 22, 13, 10, 6, 29, 25, 31, 14, 32, 17, 7, 15, 30, 28, 27, 18, 11, 35, 12, 23, 33, 34, 9, 16, 24, 3, 26, 0, 8, 19, 1, 21]]
def sub_8476e2a1(x):
    y = [8675635239, 7611742540, 9612094464, 2846443969, 756580332, 2566110334, 4992880227, 4722683719, 1271686436, 3219115717, 3584670346, 2555624603, 7579422842, 6007029616, 7303791346, 4437136466, 3076433918, 9434556203, 5283726380, 7695021472, 8658794765, 5863292118, 5106398387, 6104331592, 9549451327, 1893019366, 840470567, 9947057226, 3801825852, 597506161, 4773760757, 4002745706, 2725005070, 2578167926, 2761776601, 2666546326]
    return [x[i] - y[i] for i in range(k)]
def mul_1dfffbd5(x):
    y = [6, 1, 6, 4, 4, 6, 1, 2, 7, 7, 2, 1, 9, 6, 5, 8, 9, 6, 1, 4, 10, 9, 8, 4, 5, 6, 7, 8, 4, 2, 7, 6, 2, 9, 3, 1]
    return [x[i] * y[i] for i in range(k)]
def cmul_10dcbe35(x):
    return [x[i] * 10 for i in range(k)]
def xor_c0655006(x):
    # shiet?
    y = [4661991892, 9098675284, 8172246862, 4077899546, 2258482295, 8285107265, 4990824666, 2741232963, 8634811800, 6552762502, 1323465662, 2449618986, 842138647, 481457888, 8426391280, 554772865, 9202202321, 7083642183, 2951836993, 1897075297, 5639237662, 5992272884, 9828247258, 3904222602, 4263592974, 5696106937, 6803780966, 4930194399, 7652568656, 5303827611, 4701703605, 7665814630, 5507277375, 7563161455, 2889589424, 9878663578]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_62312f9d(x):
    y = [ord(p) for p in '9bc2c5ec336c09be81a700d2d548e8e196b0']
    return [x[i] - y[i] for i in range(k)]
def sub_a091f45e(x):
    # the best
    y = [8162420858, 2627634431, 5703279989, 1864045512, 5323058914, 3531476573, 3391050131, 5360475839, 467928371, 6449431150, 9079917228, 3621941591, 2105211053, 7843148109, 4068230563, 9444777717, 3699740827, 6901232456, 359824527, 8448341200, 5255563795, 3054949233, 9670800942, 552225349, 210413765, 9518515741, 8817879005, 4770999049, 5237008523, 7528083309, 2657201898, 7885804019, 9709264306, 1810247140, 9727816170, 8132874074]
    return [x[i] - y[i] for i in range(k)]
def chxor_61629011(x):
    y = [ord(p) for p in '339dc43dfb84cb15bcbe4f47ad2fbb6ee072']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_6db45a16(x):
    y = [ord(p) for p in 'd0eff34ce3fa98a083af0b72749842ca82c1']
    return [x[i] ^ y[i] for i in range(k)]
def deck_a1377867(x):
    return x[6:10] + x[:6] + x[10:29] + x[29:]
def chxor_4a6282f5(x):
    y = [ord(p) for p in 'a54e415e722d89a752967cf9b48f14c5a714']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_4e66e309(x):
    # kek
    return [x[i] * 8 for i in range(k)]
def chxor_14176db9(x):
    # lel
    y = [ord(p) for p in 'ce44de28c705220d651d8a017f7cf1b7e945']
    return [x[i] ^ y[i] for i in range(k)]
def digsub_7b1651a7(x):
    return [int(str(n)[:1] + ''.join(['6', '1', '7', '8', '5', '4', '3', '2', '9', '0'][int(p)] for p in str(n)[1:])) for n in x]
def mul_af43f0cd(x):
    # mucho encrypto
    y = [4, 6, 2, 5, 7, 5, 5, 3, 7, 5, 3, 3, 4, 5, 2, 1, 6, 7, 1, 1, 7, 7, 2, 1, 5, 4, 1, 2, 2, 1, 2, 7, 3, 7, 5, 4]
    return [x[i] * y[i] for i in range(k)]
def cmul_fd921d5b(x):
    return [x[i] * 9 for i in range(k)]
def shuffle_64f815bd(x):
    return [x[p] for p in [34, 2, 10, 12, 30, 20, 4, 1, 7, 3, 15, 19, 5, 22, 35, 32, 29, 17, 11, 24, 8, 31, 33, 6, 26, 28, 13, 16, 18, 23, 0, 27, 25, 9, 21, 14]]
def chsub_c2ee0e2b(x):
    y = [ord(p) for p in 'da070367676e54794c8e7dfa1ecffb9c928b']
    return [x[i] - y[i] for i in range(k)]
def chadd_3a6ba43e(x):
    y = [ord(p) for p in '6fb9e35bccde870e5266e453b685524b7c3f']
    return [x[i] + y[i] for i in range(k)]
def chmul_b131f273(x):
    # lel
    y = [ord(p) for p in '34c340fa46da03408cbdb943c1d1acda8863']
    return [x[i] * y[i] for i in range(k)]
def csub_34d4359e(x):
    return [x[i] - 8157394560 for i in range(k)]
def csub_b0a1c121(x):
    return [x[i] - 5494838303 for i in range(k)]
def chmul_23bd481d(x):
    # the flag is flag{jk}
    y = [ord(p) for p in 'c091fc298629ffa08b7b4027451ea4afadb8']
    return [x[i] * y[i] for i in range(k)]
def cmul_4381cbd5(x):
    # just reverse it
    return [x[i] * 8 for i in range(k)]
def chsub_134ff6dd(x):
    # evil
    y = [ord(p) for p in 'ac9189da36575fbe390ae9dda3c5ec59c699']
    return [x[i] - y[i] for i in range(k)]
def cmul_4efbd341(x):
    return [x[i] * 7 for i in range(k)]
def digsub_78f5b7bb(x):
    # shiet?
    return [int(str(n)[:1] + ''.join(['4', '1', '8', '0', '5', '9', '7', '2', '3', '6'][int(p)] for p in str(n)[1:])) for n in x]
def mul_e5700c12(x):
    # evil
    y = [1, 3, 2, 1, 1, 1, 3, 3, 1, 3, 3, 3, 2, 3, 3, 2, 1, 2, 2, 2, 1, 2, 3, 3, 3, 1, 3, 2, 1, 2, 1, 3, 1, 2, 2, 1]
    return [x[i] * y[i] for i in range(k)]
def sub_5d7857eb(x):
    y = [7473147172, 7275834011, 3514346248, 4537406506, 8949750693, 9663824312, 5509420632, 9172971228, 48965541, 2370517150, 391773044, 6049049574, 1480023294, 1735639261, 7819051831, 6731459765, 1492477542, 9143185982, 4316267420, 3934938247, 8670529127, 9905274135, 917620662, 146263144, 4218442511, 5658459649, 34554184, 6200785508, 3433621550, 5626983652, 5028857949, 556037895, 788114394, 7267349839, 6437746568, 8962046503]
    return [x[i] - y[i] for i in range(k)]
def chsub_01f682a9(x):
    y = [ord(p) for p in '02f02f792a4bc32005d461bd62430b953b6d']
    return [x[i] - y[i] for i in range(k)]
def xor_e8c8896d(x):
    # the best
    y = [4177220066, 8090758914, 8203212100, 93122346, 5567980283, 2576824088, 8409297717, 7028981941, 9501306060, 2848652637, 265699740, 1463756009, 3693209398, 2885914975, 7076098607, 8059194968, 5042567138, 9481790272, 529568756, 7454996164, 8304256762, 9083196624, 1660132966, 3208831291, 695560261, 440788742, 9326243822, 3948281911, 4487483378, 7607863301, 7438709807, 9766650653, 15015697, 6671248080, 1650807011, 6135423609]
    return [x[i] ^ y[i] for i in range(k)]
def cadd_3879fa4f(x):
    return [x[i] + 3479485182 for i in range(k)]
def cadd_27c86167(x):
    # shiet?
    return [x[i] + 1858086073 for i in range(k)]
def chmul_7ce961bc(x):
    # shiet?
    y = [ord(p) for p in '30a2ab5f40cc7dc42fdd9c1feca55b00fc67']
    return [x[i] * y[i] for i in range(k)]
def cxor_df97c526(x):
    return [x[i] ^ 4998522497 for i in range(k)]
def mul_1caf7ce9(x):
    y = [4, 6, 1, 3, 10, 4, 10, 6, 3, 1, 2, 5, 9, 9, 2, 6, 10, 1, 6, 2, 10, 5, 10, 5, 1, 6, 3, 1, 6, 10, 2, 7, 8, 9, 5, 4]
    return [x[i] * y[i] for i in range(k)]
def shuffle_93a215e5(x):
    # the best
    return [x[p] for p in [32, 2, 6, 23, 29, 25, 9, 12, 24, 8, 35, 21, 22, 7, 20, 0, 4, 3, 15, 10, 11, 26, 31, 28, 34, 27, 14, 13, 17, 5, 33, 1, 19, 18, 30, 16]]
def csub_a667ebea(x):
    # so good
    return [x[i] - 7106717218 for i in range(k)]
def xor_53593d21(x):
    # so good
    y = [8348189550, 9638973817, 1138799530, 1984140853, 193010940, 1997328856, 4216119457, 7699918995, 8727467517, 6137309128, 9072540746, 7570413524, 6062310960, 4111075414, 7105876017, 777816139, 9329020871, 2958048392, 9348151728, 4923762691, 4680137849, 3781571226, 4497410745, 5941914121, 5841219658, 7279988659, 6153971559, 1887950630, 8647182979, 754424315, 9231084908, 2970677871, 467848486, 9557554640, 5109928900, 3180853654]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_7e09e05c(x):
    # rekt
    return [int(str(n)[:1] + ''.join(['2', '1', '5', '6', '4', '3', '8', '0', '7', '9'][int(p)] for p in str(n)[1:])) for n in x]
def chunk_3256d188(x):
    return x[3:] + x[:3]
def shuffle_0d936e4f(x):
    return [x[p] for p in [35, 33, 18, 19, 13, 1, 20, 25, 15, 31, 23, 12, 5, 29, 30, 0, 34, 8, 9, 27, 17, 4, 14, 28, 21, 2, 6, 10, 7, 24, 16, 32, 3, 11, 22, 26]]
def digsub_8fc854f8(x):
    return [int(str(n)[:1] + ''.join(['4', '9', '8', '7', '5', '2', '3', '0', '1', '6'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_ffc882e5(x):
    y = [ord(p) for p in '7497c125c56bc488c8a21b5e11565b7cd1ae']
    return [x[i] * y[i] for i in range(k)]
def deck_c17de034(x):
    # encryption
    return x[27:31] + x[31:] + x[11:27] + x[:11]
def chxor_9a066ef0(x):
    y = [ord(p) for p in '11b876e5e310efcc98e53f6df95f7ca3c364']
    return [x[i] ^ y[i] for i in range(k)]
def xor_741282be(x):
    y = [7898311858, 3576488688, 2906910725, 4656297960, 897152496, 9458463148, 8482469186, 3371126678, 8320359918, 3650057049, 8523209261, 5281543072, 1780944995, 4771796718, 4781062481, 9318796572, 7191626874, 4001781055, 2877058229, 9875380435, 9619613248, 2485390075, 6329806515, 6385871513, 4596342299, 8042133874, 5016010413, 1861974496, 6797323096, 4844726230, 9545407681, 4498469196, 9244581503, 5409300561, 4754679821, 833064257]
    return [x[i] ^ y[i] for i in range(k)]
def deck_745f2090(x):
    return x[:5] + x[28:] + x[5:16] + x[16:28]
def cadd_a39df2bc(x):
    return [x[i] + 8193820985 for i in range(k)]
def chxor_6ebc3376(x):
    # kek
    y = [ord(p) for p in 'affb3f4417778f2d058357e18019e48cf637']
    return [x[i] ^ y[i] for i in range(k)]
def sub_a5b2a08c(x):
    # rekt
    y = [5144800491, 7834098192, 5914178863, 9590802683, 3306370821, 7462021161, 2264525773, 1243548506, 360006739, 7684974719, 4004169640, 5701359166, 1235965345, 9836288090, 9103435678, 326413834, 6899913667, 990260566, 6659644397, 130711571, 3076161124, 403251609, 2115915101, 1708512864, 6037359771, 603521902, 5943699912, 9281155763, 2427643859, 4027868601, 3231080423, 5021701474, 2904844398, 4230057265, 5460187203, 3010565550]
    return [x[i] - y[i] for i in range(k)]
def cmul_95802649(x):
    return [x[i] * 7 for i in range(k)]
def shuffle_def3ecab(x):
    return [x[p] for p in [14, 27, 3, 13, 24, 15, 17, 6, 26, 16, 9, 33, 5, 34, 8, 22, 1, 18, 35, 12, 32, 7, 23, 20, 29, 4, 19, 10, 11, 30, 28, 31, 25, 2, 21, 0]]
def xor_2b415907(x):
    y = [9380615577, 3536849487, 4823424611, 1543272234, 5611472593, 9512574416, 9460359301, 6554835615, 6120203498, 6788840484, 5766792803, 5375363630, 5411350341, 1237390226, 3756597188, 6507255974, 8787716231, 2423535108, 7629872099, 7923981505, 1683407107, 358679987, 6208586835, 2164473706, 3698899689, 5596087605, 1154494067, 3552102577, 2978663982, 6957497378, 8024226378, 3081452989, 2852947783, 2351019927, 394113495, 1305984066]
    return [x[i] ^ y[i] for i in range(k)]
def cadd_19b7645a(x):
    return [x[i] + 7912062999 for i in range(k)]
def chmul_eb007432(x):
    y = [ord(p) for p in '2371308105426ca6133025ddaf0fe634aac7']
    return [x[i] * y[i] for i in range(k)]
def add_c8ec5588(x):
    y = [5540793903, 591577380, 5154760004, 8746536243, 4341243130, 3818153417, 1797061334, 1571816374, 2598582115, 4163078452, 7464917963, 8707298740, 7620065905, 683648185, 5710261147, 8391562781, 6199847213, 2810346818, 3055428664, 2507709821, 9793386288, 3751970831, 5092747345, 2199313679, 5432321242, 4831857240, 7402274424, 4315097986, 5843304527, 4025992341, 8017242121, 5279316236, 4155243728, 8037357600, 7575209227, 5844133542]
    return [x[i] + y[i] for i in range(k)]
def chsub_792c2235(x):
    # encryption
    y = [ord(p) for p in '13885f598b0a5ee0f3fb925fab13df1bca32']
    return [x[i] - y[i] for i in range(k)]
def cmul_38769a31(x):
    # encryption
    return [x[i] * 7 for i in range(k)]
def xor_097a8a70(x):
    # just reverse it
    y = [2063673655, 916644133, 7869954416, 6630480612, 9453107589, 5763206578, 4366820805, 7586779382, 5834761183, 3229444131, 9797901284, 3926400038, 2321405339, 5365466356, 6091506463, 801135358, 7901834862, 3008664078, 3581872850, 2949853106, 4129405273, 3136198140, 4703993813, 9194127168, 7488913522, 3330577628, 2019599256, 8557960426, 6371615248, 542019631, 2114274777, 8203042416, 2408349173, 359940992, 7502358776, 5241151047]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_b8a7f012(x):
    y = [ord(p) for p in 'aafedcd6bb81c48662fd58346e30c96111ba']
    return [x[i] * y[i] for i in range(k)]
def cadd_dd57ed89(x):
    # so good
    return [x[i] + 8366943350 for i in range(k)]
def cmul_fdbbadd8(x):
    return [x[i] * 9 for i in range(k)]
def chunk_cf8a51ed(x):
    return x[14:] + x[:14]
def cadd_b07f15df(x):
    return [x[i] + 1136693384 for i in range(k)]
def digsub_7cd65058(x):
    # the best
    return [int(str(n)[:1] + ''.join(['2', '1', '9', '8', '7', '3', '4', '0', '5', '6'][int(p)] for p in str(n)[1:])) for n in x]
def chxor_18337976(x):
    y = [ord(p) for p in 'b9790047728945de90edc778d6d1a192c886']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_ba434ed3(x):
    # kek
    return [x[i] * 3 for i in range(k)]
def deck_24fb9fca(x):
    return x[27:29] + x[:22] + x[22:27] + x[29:]
def chadd_65bf6072(x):
    # mucho encrypto
    y = [ord(p) for p in '8c2e77196e38d6fda2b6452e6ef70d261a00']
    return [x[i] + y[i] for i in range(k)]
def chmul_c84a1d05(x):
    y = [ord(p) for p in '50eb11585252ce676a6393cacf0d734a5323']
    return [x[i] * y[i] for i in range(k)]
def chmul_9522f239(x):
    y = [ord(p) for p in '157cc115a5d0ddf0481f96c3ca995e07d87c']
    return [x[i] * y[i] for i in range(k)]
def chunk_a9500e9e(x):
    # just reverse it
    return x[23:] + x[:23]
def chadd_b3214236(x):
    y = [ord(p) for p in '649a3d246afbb1d91a72d10ff8788b76f841']
    return [x[i] + y[i] for i in range(k)]
def sub_6fb5c242(x):
    y = [730508486, 8124615645, 7626657932, 9172580251, 8910901483, 3247159940, 3032902011, 3101839410, 33521568, 3880985845, 5718535873, 9815974230, 1899578379, 9543411419, 1061389474, 4860455010, 6802791452, 7722793842, 6494548308, 1988293100, 490248821, 4852426246, 1836915561, 2589823706, 7084509356, 1210226833, 3220301220, 9061698134, 9617520855, 9147203521, 3622208789, 525459280, 7806586171, 4215408884, 32037260, 3970638597]
    return [x[i] - y[i] for i in range(k)]
def cadd_f79f3974(x):
    # encryption
    return [x[i] + 9146844261 for i in range(k)]
def chsub_71c61f9b(x):
    y = [ord(p) for p in '3c8b02b1f6d69fc893ad9342de2fbb4424a9']
    return [x[i] - y[i] for i in range(k)]
def deck_9a11b98c(x):
    # just reverse it
    return x[36:] + x[5:36] + x[:3] + x[3:5]
def chmul_ef7fa6ac(x):
    y = [ord(p) for p in 'b738f063a4510b0eba8d1428b9dad7555636']
    return [x[i] * y[i] for i in range(k)]
def chsub_f9d9c30e(x):
    # mucho encrypto
    y = [ord(p) for p in 'cd1818406e8ef447e2ec6d061591cb801beb']
    return [x[i] - y[i] for i in range(k)]
def xor_6f958906(x):
    # lel
    y = [2982887673, 7900605962, 3863170017, 2193542485, 7187872559, 9871669283, 8789039240, 165588954, 5779412248, 7241396182, 6807548627, 6183618983, 7752690330, 9620648127, 3259746967, 455137475, 1279307829, 9512758600, 2171916232, 7819387854, 3938424093, 1192638350, 7475419925, 5844313152, 714834549, 8309972692, 1262176727, 26409599, 1223916859, 3422379342, 3157062138, 8516778722, 493061851, 5941177602, 8976766018, 6115434853]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_56440f95(x):
    # so good
    y = [ord(p) for p in 'cf0c9c4cc2deffbbb31f28c61d1a8d4e75b8']
    return [x[i] - y[i] for i in range(k)]
def xor_393c82c1(x):
    y = [6625175330, 598513096, 3010955952, 593362867, 9683987438, 2766195770, 1460696651, 6966214025, 9112713669, 5901122686, 63053478, 1718671052, 7494179586, 4192638551, 4414911860, 2538301368, 4573299150, 5534611737, 7944366123, 7397384081, 267667513, 406174441, 6595229725, 2475074359, 312875081, 2838001809, 5128985539, 8593089659, 6177941780, 8584407225, 9583665657, 2382675012, 3416520672, 7479332166, 9887566136, 6092216856]
    return [x[i] ^ y[i] for i in range(k)]
def cadd_93ce9459(x):
    return [x[i] + 1228524118 for i in range(k)]
def chmul_b5f1b2d9(x):
    y = [ord(p) for p in '5898cf6666547f043b13e1cd49e55561a3d0']
    return [x[i] * y[i] for i in range(k)]
def chunk_0a45d781(x):
    # kek
    return x[32:] + x[:32]
def mul_d900d8ed(x):
    # shiet?
    y = [4, 1, 1, 4, 1, 1, 4, 2, 4, 2, 1, 2, 2, 3, 5, 3, 5, 2, 1, 5, 4, 5, 3, 3, 3, 3, 2, 2, 2, 3, 2, 4, 3, 5, 5, 1]
    return [x[i] * y[i] for i in range(k)]
def xor_19d4481b(x):
    y = [696771319, 83326548, 9404809213, 778070915, 8353062634, 506118031, 5549678994, 645666384, 2403993636, 3898751275, 7202931576, 9896401879, 8486628239, 7881703232, 8789956622, 3993720447, 7146098934, 2498681102, 1713719491, 3794805869, 9269488455, 1451239686, 3796116209, 2947093942, 5209956125, 5878245156, 151602981, 1467927690, 2952605849, 3280860983, 5116299657, 6267753521, 8198609214, 1578774414, 8818619653, 5794095984]
    return [x[i] ^ y[i] for i in range(k)]
def cmul_b487c574(x):
    return [x[i] * 9 for i in range(k)]
def shuffle_3e606129(x):
    # mucho encrypto
    return [x[p] for p in [31, 15, 12, 34, 13, 29, 27, 10, 9, 26, 0, 19, 2, 5, 20, 30, 22, 17, 11, 21, 18, 32, 28, 3, 6, 7, 16, 33, 24, 14, 4, 8, 1, 35, 25, 23]]
def cadd_51596bc7(x):
    return [x[i] + 7525954091 for i in range(k)]
def add_de55f4f2(x):
    # rekt
    y = [8389272525, 3619656725, 1712642114, 5473970548, 4531969506, 4579871292, 6819376948, 6040406560, 5499743691, 8789281116, 394170618, 7039920894, 3503977972, 6984998221, 8028523895, 3469543874, 121085706, 8114419565, 3868552087, 9599692611, 7298591307, 931589935, 3533255185, 3449992067, 6257989703, 4126725393, 8126444312, 9225812563, 8492651925, 7575059322, 8026289281, 6515981301, 6508658891, 374565126, 4598831833, 7650843267]
    return [x[i] + y[i] for i in range(k)]
def xor_99a5aed1(x):
    y = [4939554652, 6458174324, 5494206219, 7074262895, 6183007238, 3679453786, 4573450211, 6436439555, 984931085, 3394070017, 293687746, 6027710204, 2517489451, 2066842832, 5162468898, 1862426072, 8093245653, 6880694431, 7104664330, 732815308, 4854657584, 717150407, 319832010, 9109313585, 5746372022, 3578605808, 4985812639, 1677733347, 5324462460, 5842302274, 1806698982, 241660765, 2980898910, 5539956419, 3263072029, 7208023048]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_88eef1ab(x):
    return [x[i] ^ 5188930351 for i in range(k)]
def cadd_faabb5dd(x):
    return [x[i] + 8212805473 for i in range(k)]
def sub_df1c5e46(x):
    y = [9514849987, 6266804318, 5815934136, 4796926296, 7023967464, 1716412530, 192051889, 4433445299, 2180236893, 9422295223, 8990853030, 3035123408, 7830453519, 3354910778, 4396397742, 3168751970, 7678385402, 1444632971, 8000705068, 4064758387, 1728583419, 4555057143, 2790125750, 2304749257, 5609196035, 3957740577, 8206599204, 1595112722, 9245198781, 1333962283, 7790233266, 3779967482, 4543837280, 7039483671, 460864387, 8638216306]
    return [x[i] - y[i] for i in range(k)]
def cxor_e4b3ee28(x):
    return [x[i] ^ 9824009182 for i in range(k)]
def mul_5918bc39(x):
    y = [1, 4, 2, 4, 1, 3, 2, 4, 2, 2, 2, 1, 4, 4, 3, 3, 3, 3, 4, 2, 2, 2, 1, 1, 2, 1, 4, 4, 3, 1, 3, 3, 1, 2, 1, 3]
    return [x[i] * y[i] for i in range(k)]
def deck_d1300b0b(x):
    return x[3:13] + x[:3] + x[13:26] + x[26:]
def deck_4ce4a82f(x):
    # evil
    return x[:1] + x[1:13] + x[13:21] + x[21:]
def digsub_88a027ca(x):
    return [int(str(n)[:1] + ''.join(['2', '0', '1', '4', '8', '9', '7', '6', '3', '5'][int(p)] for p in str(n)[1:])) for n in x]
def cadd_51ae129c(x):
    return [x[i] + 8566534788 for i in range(k)]
def cadd_e0fbc1fa(x):
    return [x[i] + 9613871461 for i in range(k)]
def chxor_5323ed11(x):
    y = [ord(p) for p in 'a58f94feede6d6b0a4841f14b09392ce1f5c']
    return [x[i] ^ y[i] for i in range(k)]
def chsub_c4e082fd(x):
    y = [ord(p) for p in 'a31666b617e5e7fdc647b01158d2d2c66370']
    return [x[i] - y[i] for i in range(k)]
def chsub_62b4c10c(x):
    # just reverse it
    y = [ord(p) for p in '1e48203a113683e4614888bfe9c12e18e52b']
    return [x[i] - y[i] for i in range(k)]
def chxor_9426335a(x):
    y = [ord(p) for p in 'a397c5eb0fc354827ee9774546391be5d67a']
    return [x[i] ^ y[i] for i in range(k)]
def deck_070724c4(x):
    # so good
    return x[23:25] + x[32:] + x[25:32] + x[:23]
def chsub_f09042f0(x):
    y = [ord(p) for p in '340902f2cbf86c1a2e1a1af8fbea0a79d274']
    return [x[i] - y[i] for i in range(k)]
def add_2071c6f7(x):
    # mucho encrypto
    y = [8351613713, 5484808345, 8001176454, 9664512877, 3192415360, 4318177495, 3214755119, 260411952, 9422690030, 6309079456, 7977395082, 75639048, 2807050421, 1883278730, 2201566480, 1344302823, 7581111609, 6465482668, 7536271059, 7277755209, 8099023197, 7356472087, 221167275, 2757464717, 6497191120, 4245474899, 9270329647, 6989617088, 6973295423, 6727091693, 9961000783, 1671068000, 5387928523, 5746052616, 9350774319, 1615037230]
    return [x[i] + y[i] for i in range(k)]
def chxor_7d723b4b(x):
    y = [ord(p) for p in '949f9c57101d819692c77cafbb51fab2366a']
    return [x[i] ^ y[i] for i in range(k)]
def csub_ea9d41b8(x):
    return [x[i] - 4188439476 for i in range(k)]
def chxor_6d888483(x):
    # mucho encrypto
    y = [ord(p) for p in 'de71100cb199c5f9aa2ed74a2d1685d5a0b2']
    return [x[i] ^ y[i] for i in range(k)]
def deck_7a154a07(x):
    return x[21:32] + x[32:] + x[13:21] + x[:13]
def chadd_04672342(x):
    y = [ord(p) for p in '9fd57e3be1f49e65f476aec099873a510f7c']
    return [x[i] + y[i] for i in range(k)]
def deck_ed0b3136(x):
    return x[15:25] + x[1:15] + x[:1] + x[25:]
def shuffle_57fe470a(x):
    # kek
    return [x[p] for p in [31, 13, 26, 22, 34, 8, 19, 28, 11, 12, 24, 9, 7, 30, 3, 32, 15, 5, 18, 35, 4, 21, 0, 25, 20, 33, 17, 1, 2, 16, 23, 14, 6, 10, 27, 29]]
def xor_32fe74f6(x):
    y = [6074842903, 7444785383, 8651677035, 2603883202, 2064620431, 8103876871, 7122514362, 7103591203, 2801343014, 7399150474, 3785127747, 3324860609, 6579114372, 8869619707, 6329310231, 7874805244, 1399212162, 6807702334, 5842564071, 1100070291, 8513908810, 2372157934, 7403962190, 6858705345, 5849854667, 7893823016, 1532811005, 8198135388, 6656433179, 9607331032, 8263689387, 3991414309, 6796536453, 7314501886, 6417043624, 7735226882]
    return [x[i] ^ y[i] for i in range(k)]
def add_100ba22e(x):
    y = [9842493799, 9721841885, 5131818625, 1770001741, 4958126670, 6478416452, 2229264029, 4254507160, 6098666118, 6753722003, 7540568797, 5533616502, 2475223730, 1343792245, 3906533035, 5537548717, 6370664923, 4722289074, 1854667580, 2434796424, 5581973533, 4392199476, 3092443898, 8746723029, 698445266, 1381895263, 2640454465, 2660747129, 5728043110, 3451260996, 7154995791, 3587808164, 9503695713, 6291512703, 2021027133, 5622890451]
    return [x[i] + y[i] for i in range(k)]
def digsub_26596efe(x):
    return [int(str(n)[:1] + ''.join(['8', '9', '4', '6', '0', '7', '1', '5', '3', '2'][int(p)] for p in str(n)[1:])) for n in x]
def cadd_775bd2a3(x):
    return [x[i] + 9549044118 for i in range(k)]
def chunk_ab1c7f5f(x):
    return x[33:] + x[:33]
def chmul_035bd60a(x):
    y = [ord(p) for p in 'b4ee0638953379db84196b135ddeb629ed8f']
    return [x[i] * y[i] for i in range(k)]
def cxor_e799ce0f(x):
    return [x[i] ^ 3579666994 for i in range(k)]
def chadd_65b8d0ef(x):
    y = [ord(p) for p in '663f0a593d80d7c450ced766d6f69735fd59']
    return [x[i] + y[i] for i in range(k)]
def chsub_98a13db8(x):
    y = [ord(p) for p in '6aed46238dfc7a75f2f8f2ce3ec4d626a524']
    return [x[i] - y[i] for i in range(k)]
def chsub_2d19348f(x):
    y = [ord(p) for p in '9d3dc69df05a857db43a9f8c9975205ac534']
    return [x[i] - y[i] for i in range(k)]
def chunk_2a7d8d80(x):
    # the best
    return x[20:] + x[:20]
def shuffle_1a7b4aba(x):
    # encryption
    return [x[p] for p in [31, 25, 8, 16, 26, 29, 19, 13, 14, 6, 10, 17, 24, 23, 12, 21, 22, 32, 34, 4, 1, 7, 5, 11, 28, 20, 30, 3, 18, 27, 0, 9, 33, 2, 15, 35]]
def chunk_bdec9045(x):
    # the flag is flag{jk}
    return x[5:] + x[:5]
def csub_cd81496c(x):
    return [x[i] - 4120648195 for i in range(k)]
def deck_b6fed091(x):
    # shiet?
    return x[29:34] + x[23:29] + x[34:] + x[:23]
def xor_6a5cf5a7(x):
    # the best
    y = [5695952505, 3416936707, 1433428265, 5007587662, 2562310217, 7769287394, 7544765183, 4255673967, 2928379912, 2200628516, 6554688125, 4130215431, 1565364021, 3964978, 8560787879, 5016668341, 9232115711, 2788630577, 6619676139, 5044507532, 5966919650, 9084598865, 9713294810, 2075802592, 8721314647, 3900318137, 5314527001, 3713513602, 405372633, 9013206613, 6966209120, 2528854010, 775464299, 1226423192, 6197390623, 8237768859]
    return [x[i] ^ y[i] for i in range(k)]
def xor_f13936e3(x):
    # the flag is flag{jk}
    y = [9835209487, 8231232994, 6451542093, 7218104645, 3522139680, 265616288, 6733386139, 8999417615, 5138083590, 7033693524, 5437524904, 21452452, 1364695057, 137125563, 8079108159, 6959262748, 7317742667, 374212445, 1492900145, 811274703, 1635530912, 2365375262, 3962563019, 6541347567, 2424931237, 6210612372, 6876803231, 3296682792, 9855953061, 3318059537, 1540194850, 2944726844, 4524535062, 5164087400, 966895036, 7070305214]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_0b233094(x):
    # the best
    return x[21:] + x[:21]
def chmul_5c3ce310(x):
    # so good
    y = [ord(p) for p in '08c2f98afb38c1df63339d1e86f10270ee5b']
    return [x[i] * y[i] for i in range(k)]
def chadd_ddff28b1(x):
    y = [ord(p) for p in '71ae3b19563fbd4ed7c3007f3eef1bdb0b74']
    return [x[i] + y[i] for i in range(k)]
def deck_49b464d5(x):
    return x[:14] + x[20:26] + x[26:] + x[14:20]
def xor_e7da9a66(x):
    # evil
    y = [2425763943, 486702663, 7764838380, 9581721403, 3870302804, 6461705086, 7370236833, 8361698797, 6952178670, 8359010239, 99520025, 937274671, 1034923562, 8242335133, 3375643874, 4886714311, 9895515089, 8470233048, 1600418649, 8393924803, 1474416880, 5577682728, 4570292498, 1239569883, 532282640, 7440893337, 5563711846, 1123517339, 8162913845, 5290223767, 7865608166, 6213523737, 7250649010, 8512776218, 7912276238, 2219680057]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_b10769e4(x):
    # evil
    y = [ord(p) for p in '00783569a6b218e3796691fa1b90c2b94685']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_be83cfa8(x):
    # so good
    return [x[i] * 9 for i in range(k)]
def digsub_324078ea(x):
    # lel
    return [int(str(n)[:1] + ''.join(['4', '5', '8', '3', '6', '2', '0', '9', '7', '1'][int(p)] for p in str(n)[1:])) for n in x]
def chunk_e3f72016(x):
    return x[36:] + x[:36]
def chmul_a39be275(x):
    # rekt
    y = [ord(p) for p in 'acae005ac6e69f95b7f067c1d4b312153dc7']
    return [x[i] * y[i] for i in range(k)]
def chxor_beaa6fd7(x):
    y = [ord(p) for p in 'd3728b2bd84cd3c1000531e1a453400e848a']
    return [x[i] ^ y[i] for i in range(k)]
def deck_4ce0cb7e(x):
    # lel
    return x[34:] + x[14:22] + x[22:34] + x[:14]
def chsub_b30f7244(x):
    # just reverse it
    y = [ord(p) for p in '5e3ff8eaf14a8612091aeedf3c961e153023']
    return [x[i] - y[i] for i in range(k)]
def sub_1b55f541(x):
    y = [2210269998, 3793970217, 6863321743, 8452665023, 5562970355, 8952194859, 8918206685, 9280167825, 4809972840, 9232955116, 7624559219, 4249591630, 7979315263, 845805114, 4231380940, 5518655676, 5864940581, 1762116044, 618758258, 6185632528, 4385880829, 5095326234, 6507886784, 780176540, 3291141415, 2495616818, 8718126924, 5553737740, 2666167938, 9651772731, 7924630707, 724802690, 1526003303, 3230882808, 4828288, 1380703588]
    return [x[i] - y[i] for i in range(k)]
def xor_efa5ece1(x):
    y = [6448635941, 5573182768, 8809920628, 8969258422, 2477827849, 3159116949, 4393120203, 3346755449, 5558045477, 3111089177, 783936360, 3283640589, 7237692526, 8365656988, 7494033871, 7024414043, 8493773732, 7099378626, 751042851, 9186301552, 4252217328, 1785557116, 2814260466, 4343533751, 7202745526, 3858361406, 1109821099, 9368478221, 9284582476, 479523107, 9217328995, 8799452284, 9551850870, 6437785191, 8292547553, 2924530592]
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_692c856d(x):
    return [x[p] for p in [16, 8, 19, 18, 20, 25, 6, 28, 32, 5, 31, 22, 12, 2, 7, 21, 0, 30, 23, 10, 24, 9, 29, 26, 15, 33, 4, 3, 27, 13, 35, 11, 34, 14, 1, 17]]
def chunk_28475841(x):
    # kek
    return x[35:] + x[:35]
def add_53a3ae63(x):
    # encryption
    y = [7791781911, 9756890164, 2569737136, 3713714709, 9966815865, 433762811, 9214430273, 9504909847, 2666897224, 2447033739, 6770010513, 3503563284, 7486411883, 6902824230, 4453623518, 2426860053, 1653543327, 1067724959, 8609478853, 5791391650, 4937120558, 735235185, 6658682330, 8133966362, 2375460693, 5935616005, 9319732287, 6667330801, 8440727014, 3684881498, 115417735, 189860566, 4996205339, 409524888, 1264436950, 2427464781]
    return [x[i] + y[i] for i in range(k)]
def chxor_c43c6725(x):
    # the best
    y = [ord(p) for p in '8d7e22e3de7d5f54cd16b147a78e83bb9c9b']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_004133b3(x):
    # encryption
    y = [ord(p) for p in '3f83e45ecc53f77fecd2bfdbcc3b50309172']
    return [x[i] * y[i] for i in range(k)]
def cadd_788a340a(x):
    # rekt
    return [x[i] + 7570632240 for i in range(k)]
def shuffle_2946b8f8(x):
    # the flag is flag{jk}
    return [x[p] for p in [33, 31, 32, 14, 25, 12, 24, 4, 29, 35, 10, 30, 26, 1, 11, 9, 20, 13, 19, 21, 5, 6, 7, 8, 3, 27, 28, 23, 17, 2, 34, 18, 16, 22, 0, 15]]
def cxor_a4885bca(x):
    # lel
    return [x[i] ^ 2521151591 for i in range(k)]
def add_d153a7bf(x):
    y = [1133270228, 6959375927, 5576297038, 9237341518, 5820991344, 5390349709, 8260585186, 8314032341, 2062099429, 4280954977, 677898888, 485125640, 9916134848, 7961915791, 1038959407, 468081508, 2093710996, 1651134391, 5448849822, 9946878641, 5115114028, 1116484856, 3110900476, 6661144936, 9644581391, 3755258583, 4770622421, 4076443017, 1983113581, 7839975820, 2500400724, 497458979, 8582454065, 5658932474, 8713229024, 5239074850]
    return [x[i] + y[i] for i in range(k)]
def cmul_29ff7c2b(x):
    return [x[i] * 3 for i in range(k)]
def deck_10390b92(x):
    return x[9:26] + x[7:9] + x[:7] + x[26:]
def digsub_53dac253(x):
    return [int(str(n)[:1] + ''.join(['9', '0', '4', '1', '6', '7', '8', '3', '5', '2'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_39351a8a(x):
    return [x[p] for p in [23, 6, 18, 11, 34, 0, 27, 21, 16, 24, 8, 28, 12, 14, 22, 20, 19, 25, 2, 33, 31, 1, 35, 29, 5, 17, 13, 4, 9, 30, 26, 32, 3, 7, 15, 10]]
def shuffle_7b60ebb6(x):
    # kek
    return [x[p] for p in [21, 22, 27, 0, 13, 32, 30, 11, 19, 1, 16, 12, 26, 7, 35, 4, 18, 6, 17, 5, 3, 10, 20, 2, 33, 15, 28, 24, 29, 31, 25, 9, 34, 14, 8, 23]]
def cadd_8d1c2ebb(x):
    # kek
    return [x[i] + 6279768667 for i in range(k)]
def digsub_69f7a7ef(x):
    # encryption
    return [int(str(n)[:1] + ''.join(['5', '7', '3', '1', '2', '9', '6', '0', '8', '4'][int(p)] for p in str(n)[1:])) for n in x]
def mul_f38a2a76(x):
    y = [7, 7, 10, 5, 7, 5, 7, 6, 3, 10, 9, 2, 4, 4, 6, 10, 9, 5, 6, 9, 8, 5, 10, 1, 5, 8, 2, 10, 1, 9, 6, 7, 6, 4, 1, 8]
    return [x[i] * y[i] for i in range(k)]
def sub_8c5d52aa(x):
    y = [1304283424, 4422741206, 1331992630, 5851813735, 7635361688, 6425859834, 6902963598, 9154975221, 3672346032, 8269588552, 914612719, 423755336, 1200992211, 5318749663, 9705404759, 348974325, 8455538567, 701610518, 2527517904, 7712909878, 8011822227, 4087634909, 3334015662, 7891698482, 3777262020, 8405599762, 5647560598, 1017907386, 9057805622, 4242803414, 1856667204, 4093829259, 8881554232, 3016200732, 5217650612, 5456936659]
    return [x[i] - y[i] for i in range(k)]
def shuffle_d2451358(x):
    # lel
    return [x[p] for p in [16, 14, 27, 19, 15, 5, 35, 8, 18, 26, 23, 12, 30, 3, 4, 11, 1, 17, 22, 9, 6, 0, 29, 34, 13, 10, 31, 7, 33, 25, 2, 20, 24, 21, 28, 32]]
def mul_a5d1eb4a(x):
    y = [2, 2, 2, 3, 2, 3, 2, 2, 3, 2, 3, 3, 2, 1, 3, 1, 3, 1, 2, 2, 2, 1, 3, 2, 2, 2, 2, 1, 1, 1, 3, 2, 3, 3, 2, 3]
    return [x[i] * y[i] for i in range(k)]
def chxor_d6bf3b04(x):
    # so good
    y = [ord(p) for p in '839072d883b09f4fa4a50fae484fb3eb47ba']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_eae26d7e(x):
    # so good
    return [x[i] * 9 for i in range(k)]
def chunk_878046b8(x):
    return x[35:] + x[:35]
def cadd_e87be691(x):
    return [x[i] + 5268822823 for i in range(k)]
def mul_0bbc1674(x):
    # kek
    y = [2, 1, 9, 9, 5, 4, 4, 6, 1, 2, 4, 4, 8, 2, 4, 4, 3, 8, 8, 5, 5, 4, 3, 7, 7, 9, 3, 1, 5, 7, 10, 8, 10, 5, 10, 5]
    return [x[i] * y[i] for i in range(k)]
def cadd_07c72dba(x):
    return [x[i] + 1574519118 for i in range(k)]
def cxor_d43914ce(x):
    # mucho encrypto
    return [x[i] ^ 1804382166 for i in range(k)]
def xor_ba1d287c(x):
    y = [7388506586, 5155791664, 7826808079, 3322628656, 8668581689, 7312614406, 7084012666, 7025901869, 1567899713, 8288373655, 7822661369, 7304151650, 9801503969, 8407649998, 8072454772, 9998612700, 6269134540, 1591521400, 8790849199, 6194931972, 4062021393, 9920131781, 4075376401, 4300075070, 4746371280, 5734616013, 7601452344, 3934604271, 3985454325, 7289074136, 890166039, 928545896, 3142099158, 6328381517, 4155555244, 5096010205]
    return [x[i] ^ y[i] for i in range(k)]
def mul_dd59ae79(x):
    y = [7, 7, 2, 1, 7, 1, 7, 4, 6, 8, 8, 5, 8, 3, 7, 6, 6, 1, 2, 6, 2, 3, 3, 5, 7, 7, 1, 4, 2, 5, 3, 1, 1, 5, 8, 6]
    return [x[i] * y[i] for i in range(k)]
def shuffle_5f949cd5(x):
    # kek
    return [x[p] for p in [6, 24, 18, 4, 32, 12, 15, 34, 28, 3, 23, 35, 19, 21, 0, 31, 30, 22, 33, 14, 26, 2, 27, 13, 5, 11, 17, 8, 25, 9, 7, 20, 29, 16, 10, 1]]
def shuffle_6cc67bbf(x):
    # rekt
    return [x[p] for p in [32, 30, 0, 23, 26, 21, 5, 6, 28, 12, 11, 14, 31, 33, 8, 15, 9, 35, 4, 10, 22, 25, 24, 16, 29, 1, 34, 18, 2, 3, 19, 17, 27, 20, 13, 7]]
def cxor_9af689b5(x):
    # rekt
    return [x[i] ^ 4478613329 for i in range(k)]
def deck_96595830(x):
    # just reverse it
    return x[:9] + x[9:32] + x[32:33] + x[33:]
def deck_0094d247(x):
    return x[14:] + x[5:13] + x[13:14] + x[:5]
def chxor_f396db26(x):
    # the best
    y = [ord(p) for p in '0022cebb7646e26a1a5abcad45c6e847d19a']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_680cf464(x):
    # lel
    y = [ord(p) for p in '3f01e255902d611f01261ab03b12ca85bff0']
    return [x[i] * y[i] for i in range(k)]
def xor_d9eda893(x):
    # so good
    y = [744916623, 8826945470, 2564087338, 127643325, 517731540, 6807765486, 1474758907, 6555335609, 8174877781, 2326212082, 9947727979, 6827805978, 1320937363, 3187119294, 2324543036, 8672196006, 2793646596, 540711952, 3742520899, 3831181214, 3175662779, 8915809877, 3438903072, 6928668579, 5868058196, 8348245505, 5364403030, 3187911239, 2496996776, 8152244831, 1727302246, 4365859099, 9612558442, 7295423367, 1623516783, 7083584252]
    return [x[i] ^ y[i] for i in range(k)]
def cadd_df4a88c2(x):
    return [x[i] + 6133929673 for i in range(k)]
def deck_3e721b39(x):
    return x[4:15] + x[:4] + x[15:25] + x[25:]
def csub_24fb716e(x):
    # the flag is flag{jk}
    return [x[i] - 9460941133 for i in range(k)]
def cadd_8a476763(x):
    return [x[i] + 5203986985 for i in range(k)]
def add_204a88d5(x):
    # evil
    y = [1242283437, 4525121395, 6752258965, 5771540163, 3143106706, 8756360155, 6824564577, 6916019001, 5185304247, 403136684, 7236982267, 9422446170, 9092229712, 8905701744, 2573466126, 6374632201, 7003697285, 4887135656, 5370995367, 7029404620, 4129162245, 904594835, 4747005536, 3934166111, 6362208710, 5548057115, 1359949642, 6862028384, 1514583550, 6298231941, 1924280197, 6024701024, 3003391995, 3709919332, 3121952917, 2802625770]
    return [x[i] + y[i] for i in range(k)]
def mul_8502f399(x):
    y = [6, 1, 1, 3, 8, 9, 3, 6, 3, 1, 3, 9, 1, 9, 1, 2, 6, 4, 4, 1, 2, 3, 5, 1, 4, 8, 2, 7, 2, 8, 1, 4, 4, 4, 2, 6]
    return [x[i] * y[i] for i in range(k)]
def cmul_5e8f38d5(x):
    # rekt
    return [x[i] * 9 for i in range(k)]
def digsub_e671df40(x):
    return [int(str(n)[:1] + ''.join(['8', '0', '2', '7', '1', '4', '9', '3', '6', '5'][int(p)] for p in str(n)[1:])) for n in x]
def cadd_fc1ffff9(x):
    return [x[i] + 5793781919 for i in range(k)]
def add_271749c1(x):
    y = [2332690153, 7547302395, 2288229494, 2544131408, 9354377841, 5338575464, 962246465, 4318018920, 9482196800, 1411615556, 7143719406, 342728957, 8097369790, 1888759738, 2830963938, 9656123435, 5565129639, 1461315831, 6317984553, 2202071450, 3434665616, 8081829236, 9660570163, 167600479, 9473484842, 9156371783, 5094833128, 9218192077, 6318919277, 734613540, 634643906, 8320274209, 8617207700, 5295761951, 9876447539, 3817330263]
    return [x[i] + y[i] for i in range(k)]
def digsub_b8269215(x):
    # the flag is flag{jk}
    return [int(str(n)[:1] + ''.join(['0', '6', '4', '5', '9', '3', '2', '8', '7', '1'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_ab9cdb92(x):
    y = [ord(p) for p in '5a520b00355a9562982a941e9cce57426807']
    return [x[i] * y[i] for i in range(k)]
def cadd_e69f5bf8(x):
    # the best
    return [x[i] + 6127858774 for i in range(k)]
def cxor_d1b86499(x):
    # lel
    return [x[i] ^ 7447975302 for i in range(k)]
def sub_83b9af79(x):
    # lmaooo
    y = [7392731076, 9551343368, 6298002381, 8207279903, 4910593301, 232435788, 4107662076, 2439065055, 6782855272, 3982920901, 6994722551, 4123028540, 8466995216, 6414051830, 6866870863, 8175329754, 1785754175, 8728421753, 6547854212, 3158450458, 2194217049, 3490613329, 673473460, 2585974624, 3503143380, 9459439377, 8720594265, 2015029825, 5839873395, 4824910903, 8832307770, 9724023694, 4545203564, 9642817822, 5784573326, 9067692975]
    return [x[i] - y[i] for i in range(k)]
def cxor_c4a0e97e(x):
    return [x[i] ^ 7901322435 for i in range(k)]
def mul_8155b14e(x):
    y = [8, 3, 2, 9, 9, 1, 7, 1, 3, 5, 2, 10, 10, 5, 1, 4, 3, 6, 7, 10, 9, 8, 10, 1, 5, 1, 2, 1, 1, 8, 3, 3, 3, 10, 4, 7]
    return [x[i] * y[i] for i in range(k)]
def chxor_62bb4f9e(x):
    # shiet?
    y = [ord(p) for p in 'e6e3ee7b818b6404886731aa9256f2c055c0']
    return [x[i] ^ y[i] for i in range(k)]
def csub_31de6d2c(x):
    # the flag is flag{jk}
    return [x[i] - 1376323364 for i in range(k)]
def sub_51975f8d(x):
    y = [3522579058, 5571099448, 7655002042, 8647214599, 974765091, 4542126776, 6012382198, 2811182759, 4423705005, 3380168865, 6466867315, 7071470694, 1614285568, 3326304921, 2600987393, 8665593984, 7942238715, 3789160881, 2360666492, 9054001634, 6596546878, 3420872020, 648397215, 304529981, 3405307425, 1007739601, 246374675, 5091334135, 9372303252, 381709755, 3761744448, 7489265470, 5923500999, 3381881583, 6662058237, 7008864875]
    return [x[i] - y[i] for i in range(k)]
def deck_6756e067(x):
    # rekt
    return x[32:] + x[9:14] + x[:9] + x[14:32]
def cxor_33678a18(x):
    # mucho encrypto
    return [x[i] ^ 5826289230 for i in range(k)]
def csub_d278adbd(x):
    # evil
    return [x[i] - 5003768727 for i in range(k)]
def chmul_ab54c89e(x):
    # kek
    y = [ord(p) for p in '681c578ab5ee34f838373efb404e99d7650f']
    return [x[i] * y[i] for i in range(k)]
def deck_39505d64(x):
    # so good
    return x[16:19] + x[19:] + x[:9] + x[9:16]
def csub_754c0169(x):
    # mucho encrypto
    return [x[i] - 6883461677 for i in range(k)]
def mul_c3e69fa2(x):
    # encryption
    y = [3, 1, 2, 1, 2, 4, 4, 4, 4, 1, 2, 3, 4, 4, 2, 2, 3, 2, 4, 1, 1, 2, 3, 3, 1, 2, 3, 3, 2, 3, 3, 4, 3, 3, 1, 2]
    return [x[i] * y[i] for i in range(k)]
def mul_b19c9677(x):
    y = [1, 1, 3, 2, 1, 1, 3, 3, 1, 2, 2, 1, 2, 1, 1, 1, 3, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 3, 2, 1, 2, 1, 2, 3, 2, 3]
    return [x[i] * y[i] for i in range(k)]
def deck_ec6a9387(x):
    # encryption
    return x[16:] + x[:3] + x[13:16] + x[3:13]
def csub_9bf22fee(x):
    return [x[i] - 450215091 for i in range(k)]
def cxor_cc615bb3(x):
    # mucho encrypto
    return [x[i] ^ 9364129701 for i in range(k)]
def chxor_fc74d45b(x):
    y = [ord(p) for p in '0ffec52a587ad00918ce7db225409ea72768']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_30089d16(x):
    return [x[i] * 10 for i in range(k)]
def digsub_bcdd2125(x):
    return [int(str(n)[:1] + ''.join(['1', '4', '5', '8', '0', '3', '7', '6', '2', '9'][int(p)] for p in str(n)[1:])) for n in x]
def add_2b6347c9(x):
    y = [2406580234, 4078363953, 5589372222, 7000088999, 6674302789, 5550045968, 4761875044, 3528696617, 3101764317, 8588728738, 4646855532, 4244521356, 7999761768, 8158826371, 4053508818, 362206467, 1046676319, 9452604065, 4627408088, 8922864816, 487008672, 497033378, 8103042465, 632500982, 8590234242, 9807833360, 9104330197, 657316226, 6579449541, 4440204412, 5799041267, 3851688938, 1407685178, 9409558150, 8665511654, 5408325571]
    return [x[i] + y[i] for i in range(k)]
def xor_14cbf59f(x):
    y = [6289898306, 7191503078, 2950596445, 6837502694, 4361815207, 1238915961, 9476089707, 3948075261, 4520898427, 4459607969, 3612254754, 952794774, 5765885736, 7804392512, 2551241436, 402654325, 1644459919, 6365564335, 7879194092, 5036469366, 7458329820, 7237734131, 5263302287, 9136114713, 8112465962, 9798068816, 9788500131, 152763796, 8309110966, 8395781450, 7647077052, 3092014965, 5603452145, 3962992993, 7013130056, 6471898471]
    return [x[i] ^ y[i] for i in range(k)]
def csub_8bb7278b(x):
    # the best
    return [x[i] - 7113239391 for i in range(k)]
def add_f4113996(x):
    # just reverse it
    y = [689662275, 7587284254, 3813123677, 7356432692, 9167180094, 7966180296, 9787835347, 228534680, 8255107874, 6062598102, 5742579003, 9490829234, 9538674417, 7454154542, 8771549776, 454061333, 8202999156, 1352101330, 780813903, 8654874614, 5506785952, 6917870732, 1957703658, 8809240419, 1683625351, 7605181163, 3931126648, 2546038087, 959675891, 3885396329, 9456259180, 2793427829, 583853954, 6986762685, 5971832707, 7612420591]
    return [x[i] + y[i] for i in range(k)]
def chxor_e1dd333b(x):
    y = [ord(p) for p in 'ad6d82f0b7eccec263f81089f0422f703686']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_b4b187d5(x):
    return x[6:] + x[:6]
def sub_899f4720(x):
    # encryption
    y = [9326355227, 8547542218, 5296451887, 1138707620, 4178892388, 2161358631, 4501124020, 7212088639, 3913748301, 498492915, 9960623098, 4664420345, 4355554808, 1516223185, 8459232125, 8550617687, 3099661220, 5991760321, 9924199052, 1954611442, 983014117, 6833547333, 9479981812, 2583296455, 6842694609, 3680956542, 2828612097, 1521289351, 2736153844, 1211515595, 6803387321, 1499021471, 28338410, 8965309685, 31214776, 4750569034]
    return [x[i] - y[i] for i in range(k)]
def chmul_a2ab16cb(x):
    # mucho encrypto
    y = [ord(p) for p in 'a1f52ca7c496913561b2a202b864f8918169']
    return [x[i] * y[i] for i in range(k)]
def chmul_ebd5a20e(x):
    # lel
    y = [ord(p) for p in '3983a853f4d9e44f376fd24236140f7b33fc']
    return [x[i] * y[i] for i in range(k)]
def chsub_2792abe7(x):
    # just reverse it
    y = [ord(p) for p in '3c8f4591def8658964594df0f50f23809ffc']
    return [x[i] - y[i] for i in range(k)]
def xor_d4b3bf17(x):
    # rekt
    y = [3616770655, 1857979639, 1376678665, 9113035397, 7306431291, 1633528122, 120598876, 881257411, 8926549642, 4680727834, 1058262839, 1418027762, 6548741463, 2365113587, 7430769377, 3879345422, 2494601500, 5219318512, 5442452073, 2780205912, 841616167, 604868426, 4171388915, 4435831443, 691665218, 7863958113, 5783964747, 8605581320, 9316569100, 7465950460, 5234714211, 1402400438, 6806274192, 9494540184, 4950138807, 8476410340]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_0d1dcf5e(x):
    return [x[i] ^ 2835641694 for i in range(k)]
def chunk_adb7a31f(x):
    return x[3:] + x[:3]
def sub_f3871ca4(x):
    # kek
    y = [1157275243, 8361765040, 8027167940, 1168642551, 6889460072, 2240383080, 7936675837, 3877782520, 9795121652, 3660695628, 4693363078, 893661021, 7926485561, 7452727579, 1970933370, 6245195009, 407089197, 7599888288, 3057458711, 1516277942, 8561684240, 4439334535, 9124921882, 7521692930, 546328290, 8963996838, 9913718714, 8995131150, 8153917952, 967333077, 8311536988, 5900509144, 1527996242, 797612830, 7706683328, 4149236314]
    return [x[i] - y[i] for i in range(k)]
def cmul_ca71521f(x):
    return [x[i] * 8 for i in range(k)]
def csub_737d4c67(x):
    # the flag is flag{jk}
    return [x[i] - 78670089 for i in range(k)]
def chadd_0ef59fd4(x):
    # lmaooo
    y = [ord(p) for p in 'f0d11fa5c398efb676dfffaf6144fbfb6555']
    return [x[i] + y[i] for i in range(k)]
def chsub_00adad20(x):
    # evil
    y = [ord(p) for p in '79ab1fd66b6f047f62a0964df6acf178c951']
    return [x[i] - y[i] for i in range(k)]
def xor_5806c787(x):
    # kek
    y = [8742691122, 4565819679, 8379717803, 4960351473, 9322578990, 9123869614, 3206177181, 8990551964, 995952503, 1673392375, 4984132589, 5744472155, 8491391405, 182949854, 3555824159, 5625436375, 785907229, 5960414552, 7514061426, 2069081034, 3063570138, 8004800541, 2242727260, 8393242377, 9869780440, 8738070488, 2029651324, 7502167667, 3108192507, 9664229225, 687716490, 3375334282, 8958571525, 4083870268, 4646875010, 1980475385]
    return [x[i] ^ y[i] for i in range(k)]
def csub_5a6c81e3(x):
    return [x[i] - 7084681039 for i in range(k)]
def shuffle_98accf0f(x):
    return [x[p] for p in [20, 21, 6, 22, 1, 25, 32, 31, 29, 30, 16, 18, 33, 4, 24, 2, 8, 14, 19, 5, 26, 35, 11, 17, 0, 23, 10, 3, 9, 15, 27, 28, 13, 34, 12, 7]]
def digsub_154d7267(x):
    # shiet?
    return [int(str(n)[:1] + ''.join(['7', '2', '0', '3', '4', '8', '6', '1', '5', '9'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_a05a6983(x):
    # so good
    return [x[i] * 3 for i in range(k)]
def xor_76cd9a81(x):
    # the flag is flag{jk}
    y = [1682426576, 6145863783, 7369353804, 5001138470, 2481795509, 2513779456, 3340975240, 1961127065, 5939090066, 9953766002, 5148582115, 5765611465, 9907242299, 2823019866, 9198412808, 825368655, 1978633145, 7046098324, 6825041808, 6039202790, 7892529404, 3455751827, 2081599666, 8619299140, 8239539647, 9822632815, 735814584, 3995246968, 4473670580, 6746805444, 3433528248, 3748089423, 9950389056, 4496814280, 8258858152, 435068981]
    return [x[i] ^ y[i] for i in range(k)]
def xor_ddb48d72(x):
    # the flag is flag{jk}
    y = [8257029542, 6382229445, 2053319013, 8988778733, 8125965380, 885175941, 4027632570, 3285144557, 660578389, 899796634, 9916749015, 9363003488, 8141599018, 3981915744, 947987171, 9322873613, 5068839097, 8280731284, 9133160617, 895765835, 9321522093, 5251474209, 5142449327, 5353219685, 9355136845, 7505214593, 7366342146, 2553753963, 4403504865, 5688903666, 8611611080, 3740643906, 1055658295, 6435457515, 9786441426, 5723219583]
    return [x[i] ^ y[i] for i in range(k)]
def cmul_148c07dc(x):
    # kek
    return [x[i] * 9 for i in range(k)]
def mul_0af7d935(x):
    y = [1, 6, 1, 3, 6, 5, 2, 5, 4, 3, 5, 3, 2, 6, 1, 1, 5, 4, 2, 5, 2, 3, 3, 2, 4, 6, 3, 1, 6, 3, 2, 3, 6, 2, 5, 2]
    return [x[i] * y[i] for i in range(k)]
def cxor_719205d0(x):
    # lmaooo
    return [x[i] ^ 3680680173 for i in range(k)]
def xor_6c2819c2(x):
    y = [9677875716, 6681608349, 2168124425, 5655388294, 9761540629, 2286328185, 4535329156, 3863031481, 4645353916, 5683659240, 1785709756, 6837725767, 3777044842, 5841799989, 891250688, 5814309654, 261714956, 3079101753, 8799027244, 1992743839, 1570638719, 860373840, 7041347506, 7758212917, 6574044336, 9552853831, 308322839, 8840481768, 5415594951, 4988403103, 215369590, 3626011159, 7075701606, 3956891136, 4233119179, 2718628751]
    return [x[i] ^ y[i] for i in range(k)]
def sub_599ea520(x):
    # rekt
    y = [452745, 3882042539, 412624687, 820116077, 8052467530, 6824199813, 3292357074, 5428591721, 7044609012, 3966330986, 5916844126, 405882308, 5171098367, 8904678336, 6700491449, 3608032615, 4482001467, 7011079948, 644791091, 9211191568, 4709121476, 8947847236, 9091101178, 2549493983, 5210568298, 3541647265, 3104510055, 8377978455, 7711601762, 4673363037, 7678017503, 623804881, 1258664168, 9933698744, 4868563003, 9153213787]
    return [x[i] - y[i] for i in range(k)]
def mul_0e478f31(x):
    # shiet?
    y = [6, 3, 5, 5, 5, 6, 4, 2, 1, 5, 6, 3, 2, 6, 5, 1, 6, 2, 4, 3, 3, 7, 1, 1, 7, 6, 5, 6, 4, 5, 6, 7, 6, 2, 5, 5]
    return [x[i] * y[i] for i in range(k)]
def chxor_556134a0(x):
    y = [ord(p) for p in 'bc38303935aa912e6224d54ba4ec9fdb2a05']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_596e2779(x):
    return [x[i] + 2115933458 for i in range(k)]
def cadd_594b40aa(x):
    return [x[i] + 5832847210 for i in range(k)]
def shuffle_5ef2dd0d(x):
    # so good
    return [x[p] for p in [25, 14, 6, 1, 17, 31, 2, 11, 32, 3, 19, 26, 0, 4, 9, 28, 16, 15, 33, 23, 30, 5, 20, 8, 35, 18, 7, 22, 10, 24, 34, 13, 29, 21, 27, 12]]
def chmul_49ccc560(x):
    # so good
    y = [ord(p) for p in 'e7d67f338766695e8f5e047913544c84ea5c']
    return [x[i] * y[i] for i in range(k)]
def chadd_868635c7(x):
    # lel
    y = [ord(p) for p in '0f85a9450806c283314665e0b82d1010dc37']
    return [x[i] + y[i] for i in range(k)]
def deck_4a3d10cc(x):
    return x[34:] + x[:9] + x[9:13] + x[13:34]
def shuffle_17e23897(x):
    # encryption
    return [x[p] for p in [26, 21, 18, 33, 20, 17, 11, 9, 10, 29, 25, 34, 1, 5, 12, 23, 27, 31, 35, 13, 32, 30, 16, 19, 8, 3, 15, 2, 22, 24, 28, 0, 6, 14, 4, 7]]
def shuffle_55c1c340(x):
    return [x[p] for p in [26, 5, 11, 9, 17, 28, 19, 21, 6, 15, 30, 13, 20, 18, 29, 22, 8, 32, 35, 0, 34, 33, 2, 12, 23, 24, 3, 1, 31, 27, 14, 10, 7, 16, 25, 4]]
def cadd_01e4dea4(x):
    # just reverse it
    return [x[i] + 3586646894 for i in range(k)]
def cmul_7d0c9f1b(x):
    return [x[i] * 5 for i in range(k)]
def chxor_57e0c9f1(x):
    # just reverse it
    y = [ord(p) for p in '26a44d6b95e22998a39e578b336907fcfd97']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_d2b698ff(x):
    return [x[i] ^ 6270495149 for i in range(k)]
def add_fc769e2f(x):
    y = [2142831090, 1910638798, 7198087683, 9113125585, 4535695632, 3143199769, 2292465362, 5729782593, 5901550711, 4300776801, 1665223590, 7025897589, 2462311761, 8585959345, 1785979794, 5415005861, 1753039064, 4322962068, 6687388369, 4449953033, 5432047246, 7960760028, 6174957302, 3519570116, 2726988969, 385350959, 1523124425, 7920500915, 1356286650, 7380587977, 2125123129, 6185924295, 5932002018, 491768702, 4428940000, 2728353947]
    return [x[i] + y[i] for i in range(k)]
def chunk_b51aa621(x):
    # lmaooo
    return x[0:] + x[:0]
def chmul_be23499e(x):
    y = [ord(p) for p in 'c7cdb55ce052faf5fca97a1634a45ad4d95b']
    return [x[i] * y[i] for i in range(k)]
def chxor_1150451f(x):
    # the best
    y = [ord(p) for p in '0a0f3f515e15c1b46424ab0507f5b7c32cf4']
    return [x[i] ^ y[i] for i in range(k)]
def chsub_4b31a145(x):
    # just reverse it
    y = [ord(p) for p in '76d44d718edad44b92d495b9d4db162c5de4']
    return [x[i] - y[i] for i in range(k)]
def cmul_c112008e(x):
    # lel
    return [x[i] * 3 for i in range(k)]
def add_ed6c03df(x):
    # encryption
    y = [8763397753, 7395844308, 262244304, 5016441289, 7956511391, 4297865063, 6459799420, 3005983761, 5783343266, 7131110327, 9015490946, 6292091405, 6913276958, 4706239144, 8270845357, 8260294668, 1458027105, 7779627393, 757635001, 1344241008, 7891816001, 7407396513, 3328962526, 6717303531, 8059076815, 9450298545, 5993456970, 9614641943, 9573520529, 8420762816, 6577237253, 8293726459, 752868939, 3498642938, 8349642797, 9540374136]
    return [x[i] + y[i] for i in range(k)]
def shuffle_d88e3f7d(x):
    return [x[p] for p in [29, 2, 22, 15, 9, 17, 1, 4, 0, 31, 3, 13, 23, 5, 27, 7, 34, 35, 19, 18, 20, 11, 30, 32, 26, 6, 33, 25, 24, 10, 16, 8, 14, 21, 12, 28]]
def mul_2cd00355(x):
    # rekt
    y = [2, 1, 3, 1, 3, 1, 2, 2, 2, 3, 3, 3, 2, 2, 3, 3, 3, 3, 2, 3, 2, 1, 3, 3, 1, 2, 3, 1, 2, 2, 3, 3, 2, 1, 3, 1]
    return [x[i] * y[i] for i in range(k)]
def csub_417a5b3f(x):
    # just reverse it
    return [x[i] - 1192852934 for i in range(k)]
def chsub_ba0df272(x):
    y = [ord(p) for p in '2801c6ca931c426c4bfd0c1efa3731a1544a']
    return [x[i] - y[i] for i in range(k)]
def chmul_79591ad9(x):
    # the flag is flag{jk}
    y = [ord(p) for p in 'd3edc9f304c00e887310b8ddf7b44675b45a']
    return [x[i] * y[i] for i in range(k)]
def cadd_d62d0fdd(x):
    return [x[i] + 202640214 for i in range(k)]
def chunk_d09c8616(x):
    return x[19:] + x[:19]
def digsub_7c2a7053(x):
    return [int(str(n)[:1] + ''.join(['0', '1', '2', '9', '6', '4', '3', '7', '8', '5'][int(p)] for p in str(n)[1:])) for n in x]
def xor_4742cccf(x):
    # so good
    y = [340120708, 1175309130, 272220625, 7157373881, 8387032777, 2502475708, 9140448703, 3051557794, 9626889226, 7315680196, 6359319052, 5169252243, 1528087683, 1403277808, 8081317198, 5996203050, 4344372198, 2000318860, 5500261315, 7998593639, 5182303549, 2563945420, 7981482086, 4812805892, 7520749904, 2536259430, 7037600532, 4992235671, 4168760420, 1349486008, 7584046560, 6328068260, 564928404, 2422911257, 2991638320, 154530826]
    return [x[i] ^ y[i] for i in range(k)]
def mul_36bc3f6e(x):
    y = [1, 1, 4, 4, 4, 5, 6, 7, 1, 3, 7, 4, 1, 5, 1, 5, 5, 2, 3, 2, 6, 7, 2, 7, 5, 7, 7, 5, 7, 5, 1, 7, 3, 6, 5, 4]
    return [x[i] * y[i] for i in range(k)]
def xor_890e78b1(x):
    # mucho encrypto
    y = [1864860196, 5626202298, 3588272756, 6549929019, 9970540292, 3166566492, 956071335, 7490802403, 56097979, 168073211, 5344336840, 6760865115, 6037274772, 616015129, 3228104807, 9874399566, 5374282796, 1118741944, 6102583475, 1350892420, 8932124809, 4635934016, 9265615560, 775971962, 3725119810, 2177544301, 9108650015, 1653184256, 6563941432, 295379923, 9696720298, 5777587785, 806404511, 9736576473, 6293915169, 6900436725]
    return [x[i] ^ y[i] for i in range(k)]
def add_c1f5edb7(x):
    y = [4323052845, 7299476745, 8581118177, 9588782518, 7757302065, 8383500995, 6113676913, 1219078666, 1065097889, 8938368044, 2799470920, 6613453443, 7291439272, 6283440106, 6073267229, 1802955957, 1721013594, 597770004, 6000373189, 7988104483, 652018351, 9473969511, 3284983348, 1327738614, 9485027315, 226260817, 5504142120, 5347700077, 7173979483, 2317041919, 539484641, 46817690, 6884515836, 2082796906, 5368387429, 1900984495]
    return [x[i] + y[i] for i in range(k)]
def chmul_9cb9b54c(x):
    # mucho encrypto
    y = [ord(p) for p in '894513a827271a310d101aa69952517ca0f6']
    return [x[i] * y[i] for i in range(k)]
def shuffle_69db3f4f(x):
    return [x[p] for p in [19, 25, 28, 24, 30, 35, 9, 31, 13, 6, 27, 16, 4, 34, 23, 15, 8, 11, 22, 33, 18, 10, 21, 1, 7, 0, 29, 12, 32, 26, 5, 2, 3, 20, 14, 17]]
def chsub_31abc2cf(x):
    y = [ord(p) for p in '2bb075ff07d02554dc06ff38f146602008d1']
    return [x[i] - y[i] for i in range(k)]
def shuffle_82fd1e74(x):
    # so good
    return [x[p] for p in [28, 20, 16, 10, 23, 29, 0, 2, 21, 22, 32, 33, 7, 35, 6, 3, 31, 9, 11, 13, 30, 26, 5, 14, 4, 17, 15, 34, 12, 19, 25, 27, 24, 8, 18, 1]]
def cadd_d96fc4cc(x):
    # shiet?
    return [x[i] + 491160893 for i in range(k)]
def chxor_e36c3430(x):
    y = [ord(p) for p in 'd2e08057e90f8995ad3aeb5466098089cbb3']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_f274337d(x):
    y = [ord(p) for p in '671a475c5eeaf5217434fb254b1526a6995e']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_51cbffb6(x):
    # rekt
    y = [ord(p) for p in '1214298dbc9115d91ac6424bfc39958458b4']
    return [x[i] + y[i] for i in range(k)]
def deck_e48e65fa(x):
    return x[7:24] + x[:4] + x[24:] + x[4:7]
def mul_386487fa(x):
    # shiet?
    y = [9, 2, 5, 9, 1, 8, 2, 4, 4, 5, 8, 6, 8, 7, 1, 6, 1, 6, 7, 6, 8, 6, 6, 6, 2, 9, 2, 4, 6, 1, 8, 4, 5, 2, 4, 3]
    return [x[i] * y[i] for i in range(k)]
def cadd_629049ed(x):
    # shiet?
    return [x[i] + 5486302320 for i in range(k)]
def chxor_30be5eb3(x):
    # rekt
    y = [ord(p) for p in '586e998a577bb12b322c7572c7410a9fb481']
    return [x[i] ^ y[i] for i in range(k)]
def mul_4ca5f016(x):
    y = [8, 1, 3, 7, 6, 1, 6, 8, 4, 8, 7, 5, 7, 3, 1, 2, 8, 3, 8, 5, 6, 1, 1, 1, 2, 2, 5, 3, 4, 2, 1, 3, 9, 2, 9, 6]
    return [x[i] * y[i] for i in range(k)]
def shuffle_3207f061(x):
    # so good
    return [x[p] for p in [28, 17, 2, 20, 21, 15, 9, 4, 23, 22, 3, 8, 19, 5, 18, 32, 31, 26, 12, 34, 1, 30, 0, 10, 11, 6, 24, 27, 7, 35, 33, 16, 29, 25, 13, 14]]
def chsub_b80a9f15(x):
    # so good
    y = [ord(p) for p in '8a8298d1619165f944d68f313d941c0bd899']
    return [x[i] - y[i] for i in range(k)]
def shuffle_a7b0cb57(x):
    # rekt
    return [x[p] for p in [25, 23, 32, 14, 16, 21, 30, 6, 24, 31, 19, 28, 15, 0, 22, 3, 8, 10, 11, 5, 29, 17, 20, 9, 33, 34, 12, 2, 35, 18, 27, 1, 4, 7, 26, 13]]
def xor_22b22c9a(x):
    y = [6458423429, 5881370941, 4032307453, 9202618313, 3161968963, 3100591976, 9115690869, 4589338432, 2599322874, 9044529490, 1490326758, 6783586037, 166008329, 5392976175, 7340558959, 9624604609, 1754516083, 1486250902, 5240374537, 2504725245, 6083819463, 9053159267, 4809792832, 1515954398, 8960772002, 6541654463, 3193101831, 3902882416, 9043719969, 4567759007, 876711273, 1577084376, 4022740669, 327213853, 4494538917, 2464731032]
    return [x[i] ^ y[i] for i in range(k)]
def add_a91e1171(x):
    y = [4397393330, 5654521702, 244418829, 1788821371, 2831617592, 638954991, 7953554661, 5805626510, 2392800384, 8355562786, 2361541158, 4108518316, 7856998484, 1537190535, 8506360200, 4451940489, 1739457949, 524294530, 5712991824, 8101936139, 1662425989, 3133039763, 3500953703, 4480271988, 215629214, 3639995431, 874493285, 466551073, 7096354683, 2783268281, 8725371845, 5393875888, 3866313811, 2175965511, 8923365761, 4400360012]
    return [x[i] + y[i] for i in range(k)]
def csub_9a19bbcf(x):
    return [x[i] - 7698427097 for i in range(k)]
def xor_c425535c(x):
    # the flag is flag{jk}
    y = [3158284747, 8283299562, 6807025796, 1257029069, 3965097240, 7950179332, 2540555740, 7842958146, 1314425391, 8481772801, 2837733967, 9100381957, 2318788819, 8989909216, 9824770950, 6782624564, 2265852229, 1357195934, 4174802087, 7951499955, 3952024214, 987575191, 5025029578, 904779266, 8590392702, 4470933320, 2014389236, 565561022, 8530995906, 5456936066, 3341111779, 8075801018, 7682562596, 9873455827, 2461655567, 5276882001]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_d697c787(x):
    # the best
    return x[1:] + x[:1]
def sub_0d8062bd(x):
    # lel
    y = [6268186929, 3632986878, 4113603746, 6817736383, 8483744807, 5333531961, 9244041606, 8733888280, 9627184380, 1584288966, 5708945245, 4260336140, 2731768613, 584463066, 6653957048, 3187491300, 7634614525, 8601715612, 780209383, 16885885, 3596072657, 9419966506, 95149068, 6012099129, 8114454522, 3862826219, 5882323095, 4160815655, 5755385215, 7650152248, 4822455516, 6455648101, 9943315332, 5277939737, 6852047693, 308866661]
    return [x[i] - y[i] for i in range(k)]
def chxor_1e5bb2ed(x):
    # lmaooo
    y = [ord(p) for p in 'd167eda2176b55d47d57ac444a90c0d31341']
    return [x[i] ^ y[i] for i in range(k)]
def deck_d78a10ec(x):
    # just reverse it
    return x[25:36] + x[36:] + x[:21] + x[21:25]
def cmul_0ee39eec(x):
    # evil
    return [x[i] * 9 for i in range(k)]
def mul_712130c5(x):
    y = [3, 2, 3, 2, 1, 4, 1, 2, 5, 3, 4, 3, 3, 2, 1, 5, 5, 2, 4, 1, 3, 5, 4, 5, 5, 5, 3, 3, 5, 4, 5, 3, 3, 2, 5, 3]
    return [x[i] * y[i] for i in range(k)]
def xor_214fe10e(x):
    y = [849489821, 280171568, 2652021245, 4148579937, 8592108553, 1103020031, 3331217092, 7875962335, 3049271415, 4512237498, 5330833497, 7630292022, 7860505273, 7671294411, 2587283136, 4958968043, 6439734608, 8252055783, 8648386791, 9374455072, 6442668512, 597001344, 5725242437, 7855556624, 5001259712, 6845008140, 5778548785, 6847130591, 9326387966, 7662087174, 9668466533, 3587503299, 7469796095, 3890242365, 9308212207, 2906483218]
    return [x[i] ^ y[i] for i in range(k)]
def mul_00091c11(x):
    y = [2, 5, 4, 3, 2, 6, 3, 1, 4, 6, 6, 2, 2, 4, 6, 1, 5, 6, 1, 4, 5, 2, 4, 5, 6, 1, 4, 4, 3, 4, 2, 6, 6, 6, 6, 3]
    return [x[i] * y[i] for i in range(k)]
def mul_1d0b4953(x):
    # so good
    y = [2, 3, 2, 1, 2, 3, 2, 3, 3, 1, 2, 1, 2, 1, 1, 3, 3, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 3, 2, 3, 1, 2, 1, 3]
    return [x[i] * y[i] for i in range(k)]
def chmul_e6b12a10(x):
    y = [ord(p) for p in '0d9fd3c831d5cfea2dd5a04e85b53a7f5459']
    return [x[i] * y[i] for i in range(k)]
def digsub_ee34dc69(x):
    # mucho encrypto
    return [int(str(n)[:1] + ''.join(['2', '7', '5', '4', '3', '9', '1', '6', '0', '8'][int(p)] for p in str(n)[1:])) for n in x]
def chunk_b4139adc(x):
    # lel
    return x[19:] + x[:19]
def digsub_8df7fbd0(x):
    return [int(str(n)[:1] + ''.join(['9', '0', '2', '6', '5', '7', '8', '4', '3', '1'][int(p)] for p in str(n)[1:])) for n in x]
def chxor_bca7bb47(x):
    y = [ord(p) for p in 'ce228810a46b466c2be0047cd8955a8f99ef']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_ffc10c41(x):
    # the best
    return [x[p] for p in [15, 22, 27, 26, 2, 9, 3, 34, 17, 35, 21, 14, 32, 24, 33, 16, 10, 4, 20, 13, 6, 19, 29, 12, 25, 30, 11, 5, 18, 0, 7, 8, 23, 1, 28, 31]]
def chxor_9bc8ede2(x):
    y = [ord(p) for p in 'b917b1c76e0d98fcbff866bbadce81ee3941']
    return [x[i] ^ y[i] for i in range(k)]
def digsub_ced825e4(x):
    return [int(str(n)[:1] + ''.join(['0', '7', '1', '9', '8', '5', '2', '3', '6', '4'][int(p)] for p in str(n)[1:])) for n in x]
def cxor_32a07079(x):
    # kek
    return [x[i] ^ 8194617596 for i in range(k)]
def cmul_3e4053fd(x):
    # kek
    return [x[i] * 6 for i in range(k)]
def cadd_14ae0fe3(x):
    # so good
    return [x[i] + 5224273120 for i in range(k)]
def add_c90f428d(x):
    y = [5366638237, 3980730465, 1644563267, 8779898009, 9074135131, 3330368830, 9776505565, 913748911, 6067841469, 8350934699, 5857425889, 4757135292, 9207744763, 1747951115, 2296696873, 8625333140, 6244068890, 7475821429, 8945042903, 884389037, 7330269307, 7605953274, 4425071696, 1013425149, 9688368302, 1484224645, 3744124930, 7898843079, 6127625722, 7688461467, 6093395998, 9108500095, 620227114, 626892821, 5990035217, 1267374949]
    return [x[i] + y[i] for i in range(k)]
def csub_23110697(x):
    # encryption
    return [x[i] - 3510742858 for i in range(k)]
def xor_339b9a13(x):
    y = [4906520795, 3026348234, 3433908135, 7932494571, 9444107919, 3947364165, 3978574062, 6223451909, 9407280898, 8136517383, 1097762810, 1069791036, 6432306816, 4987945420, 6124217010, 4088086282, 1383272202, 5478267325, 7078412814, 6567303301, 7098306443, 8166301044, 7489826623, 9764475365, 9252954602, 4031156751, 5010401608, 2754350904, 4859963712, 594681377, 1041039857, 2729278744, 6934752941, 740065434, 214879398, 6551398571]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_d17e07b3(x):
    y = [ord(p) for p in '852ff7b527a1f86d7f3cfa39e7d3a5686b8b']
    return [x[i] ^ y[i] for i in range(k)]
def xor_8f24dd01(x):
    y = [2846773406, 341678595, 5931447467, 4525417136, 3849415386, 2523466044, 6469359005, 8400868902, 3626058440, 8851092163, 9861866367, 2567954327, 3542763077, 9968658115, 6124669865, 7242618030, 1809330153, 940517785, 6045739930, 615812321, 1183972501, 7450537854, 1846675586, 8765936673, 4714822624, 3751279555, 1552070477, 6150981171, 7705663874, 2043836533, 8929601212, 5766641173, 9343442243, 2369447617, 2801799094, 9388684432]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_708c05e7(x):
    y = [ord(p) for p in '6709f8117fc14b135c9143878f79024110ab']
    return [x[i] * y[i] for i in range(k)]
def csub_0c233dba(x):
    # encryption
    return [x[i] - 5433387154 for i in range(k)]
def xor_3c5d07f5(x):
    y = [7190854964, 7305182422, 4355709926, 6820741667, 5663851089, 2381821052, 1695766832, 790477717, 3287339521, 9681024693, 2746148968, 796620768, 9314397556, 3354124274, 5682083438, 8531679883, 1585428555, 3497023036, 5395425552, 5180705798, 5187383081, 1086441970, 3207989799, 5984211974, 495050967, 5799204198, 3955745244, 3989371692, 3170880787, 6009229170, 9433232856, 7514952193, 4292190573, 9354781870, 3718957287, 1550317105]
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_7894ad24(x):
    # lel
    return [x[p] for p in [32, 16, 25, 19, 5, 8, 17, 27, 14, 31, 7, 29, 4, 28, 18, 0, 21, 35, 24, 2, 6, 12, 11, 15, 26, 13, 1, 30, 33, 9, 20, 3, 10, 22, 23, 34]]
def xor_c6061863(x):
    y = [1764191553, 6531195001, 5434448332, 2063556038, 9424364036, 9466455035, 5268280345, 7693072988, 8987329114, 8592582651, 450657777, 1639801385, 154862106, 5028271177, 4809115435, 2709025688, 5562060931, 7103813481, 3942995714, 7495926117, 4296527675, 6530601374, 7260277285, 2959394098, 2400928796, 3691482946, 6610156981, 4297792282, 8231073101, 887261983, 9897293150, 6052726823, 265199470, 5611728937, 9966053093, 4292713247]
    return [x[i] ^ y[i] for i in range(k)]
def add_9670343c(x):
    # evil
    y = [8447355456, 926634575, 1195467135, 2765799730, 8232982785, 631925902, 9540832690, 2348515078, 5967903032, 4412882246, 3292159158, 6020718585, 9688876443, 6966544043, 5457991709, 7303452401, 2324883539, 9485575316, 3454213175, 5850629379, 7044593822, 1547456967, 6934993316, 3420595499, 8018703329, 8415201643, 6722150362, 6266071905, 1992546121, 2599809373, 2297905463, 8851808683, 7836412674, 3647693334, 3859562846, 9058913637]
    return [x[i] + y[i] for i in range(k)]
def cadd_5f3da75c(x):
    return [x[i] + 795514919 for i in range(k)]
def digsub_dbfc4977(x):
    # mucho encrypto
    return [int(str(n)[:1] + ''.join(['9', '1', '8', '2', '4', '0', '6', '5', '7', '3'][int(p)] for p in str(n)[1:])) for n in x]
def deck_e06291a4(x):
    # just reverse it
    return x[17:35] + x[:12] + x[35:] + x[12:17]
def cmul_5b292fda(x):
    # just reverse it
    return [x[i] * 4 for i in range(k)]
def sub_2637de69(x):
    # rekt
    y = [4274294875, 708317931, 8909620534, 9883258232, 9289099169, 3301963486, 6791005230, 2131456448, 4735290161, 4189641747, 5551981945, 9138765761, 1313417018, 6441115751, 5605560485, 836602572, 8688473887, 3330765557, 9727404624, 6978093039, 5148432442, 9934406473, 8491708814, 1923746684, 8568587272, 5696283737, 6275048862, 2788635863, 917493345, 1561228216, 6404423586, 4802123843, 2424195478, 9464364741, 7514238314, 9250014206]
    return [x[i] - y[i] for i in range(k)]
def cadd_469004ba(x):
    # encryption
    return [x[i] + 9860141213 for i in range(k)]
def cmul_61024c03(x):
    return [x[i] * 7 for i in range(k)]
def add_6c1ae0e6(x):
    # the flag is flag{jk}
    y = [57937936, 4309262740, 981630844, 647312566, 9162000298, 5197118133, 2735495616, 7099673977, 2270128793, 4532474419, 9759792364, 8811765986, 3644795702, 5365623443, 9599393808, 7535736209, 2787916659, 7302075573, 7268736812, 8377764226, 29456221, 7399325614, 3697246045, 9335729655, 9328886725, 2337457625, 3148623353, 9909407511, 1696902488, 9050481589, 7037636493, 2138681315, 290547978, 7409458381, 1592067292, 276839317]
    return [x[i] + y[i] for i in range(k)]
def chmul_6b279231(x):
    y = [ord(p) for p in '600ead1aaaa9ee4e751e0426b85a2bca65e6']
    return [x[i] * y[i] for i in range(k)]
def deck_79fca05c(x):
    return x[32:] + x[:14] + x[19:32] + x[14:19]
def csub_eb8a37eb(x):
    # evil
    return [x[i] - 5319599489 for i in range(k)]
def xor_a8652323(x):
    # lel
    y = [2566020188, 8978319224, 8929142779, 2184147028, 6969347389, 9739656673, 2408366592, 3526633051, 3638688094, 3392479328, 5847201019, 9591946862, 1486347592, 5847530679, 9651334236, 2442498907, 8027891140, 6221224517, 9021393479, 5487353560, 2715679797, 8567782792, 6761293413, 8677975655, 5738246951, 5457387537, 5385184001, 3733037749, 890579873, 7448747064, 8659904306, 4011116405, 2626284176, 5857285146, 7000758037, 9716300776]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_7d45ef3f(x):
    # kek
    return [int(str(n)[:1] + ''.join(['2', '7', '3', '4', '0', '1', '6', '5', '8', '9'][int(p)] for p in str(n)[1:])) for n in x]
def cadd_c0d41733(x):
    # lmaooo
    return [x[i] + 4140121466 for i in range(k)]
def mul_4369dd0c(x):
    y = [2, 5, 3, 4, 4, 6, 6, 4, 1, 5, 1, 4, 5, 2, 4, 4, 4, 4, 2, 3, 4, 4, 5, 5, 1, 3, 5, 5, 1, 1, 3, 6, 2, 4, 2, 6]
    return [x[i] * y[i] for i in range(k)]
def cxor_f929f224(x):
    # encryption
    return [x[i] ^ 4921550152 for i in range(k)]
def cxor_40a00f38(x):
    return [x[i] ^ 1342175342 for i in range(k)]
def cadd_81a69b3f(x):
    return [x[i] + 8747780795 for i in range(k)]
def shuffle_9a11da09(x):
    # lmaooo
    return [x[p] for p in [0, 24, 2, 22, 11, 6, 35, 15, 19, 34, 7, 20, 8, 31, 13, 30, 32, 5, 17, 10, 16, 25, 3, 14, 27, 12, 4, 18, 9, 26, 23, 1, 21, 33, 29, 28]]
def sub_31cd283b(x):
    y = [6342193282, 2138732272, 6471396196, 8276533514, 9078837837, 7801588149, 4959505273, 5771565148, 583886707, 4160508242, 8493655967, 1005679039, 4786619892, 8990403763, 1805608162, 7085559003, 9542835051, 3001514167, 6541704696, 1702392139, 1923767201, 5825112811, 7008442323, 7446750122, 7897959299, 4373266111, 9368763181, 4951446674, 8899737621, 3662711807, 5136158327, 2962889811, 2189708681, 8399747495, 723673334, 309315555]
    return [x[i] - y[i] for i in range(k)]
def sub_4e6d826d(x):
    # evil
    y = [9555245711, 5499390850, 5829315334, 849156345, 2688725053, 4516051164, 7117712457, 2499778288, 8478760770, 6181332206, 7879799227, 8660304608, 9013610703, 2655636518, 725339816, 6484119868, 4960555036, 9674312031, 2322151999, 6638884173, 1656865264, 5722685496, 474852843, 1926663283, 4714959748, 4023418132, 5812746208, 5813619212, 5553109798, 4221875742, 9608436175, 5275753336, 9403869132, 2337590771, 2066244463, 4042482423]
    return [x[i] - y[i] for i in range(k)]
def add_f10a2818(x):
    # lmaooo
    y = [604430052, 8821179832, 5107562078, 8901735957, 3757070607, 1374598199, 4157071787, 6322345796, 2009452466, 7829337063, 601730988, 9172021330, 2144786872, 1744092639, 4573557128, 1947412912, 4018325618, 718366233, 4337852014, 1646534566, 1676065938, 5445779106, 7301117898, 2659568838, 768620609, 6540115784, 1914258955, 311050985, 6788650004, 6898805305, 9915476792, 6826422483, 9850364313, 4571200152, 7731681557, 6615764325]
    return [x[i] + y[i] for i in range(k)]
def mul_5067d66a(x):
    y = [3, 6, 2, 2, 3, 1, 5, 2, 5, 2, 3, 5, 1, 4, 2, 4, 5, 2, 4, 4, 3, 2, 3, 5, 4, 6, 4, 4, 1, 1, 4, 4, 3, 2, 3, 6]
    return [x[i] * y[i] for i in range(k)]
def cadd_79e79007(x):
    # mucho encrypto
    return [x[i] + 9648991720 for i in range(k)]
def mul_40c0f816(x):
    y = [2, 2, 3, 1, 2, 3, 3, 1, 1, 3, 1, 2, 1, 1, 3, 1, 3, 1, 3, 1, 1, 1, 2, 1, 2, 3, 1, 3, 1, 2, 3, 3, 1, 1, 1, 2]
    return [x[i] * y[i] for i in range(k)]
def shuffle_dd27dbb1(x):
    # the best
    return [x[p] for p in [29, 3, 28, 18, 2, 7, 20, 30, 15, 0, 23, 10, 24, 1, 32, 14, 21, 35, 11, 27, 34, 13, 9, 16, 25, 31, 6, 4, 33, 17, 12, 26, 19, 22, 8, 5]]
def cadd_92da2c6d(x):
    # just reverse it
    return [x[i] + 122608545 for i in range(k)]
def deck_91bc14ed(x):
    return x[:2] + x[9:34] + x[34:] + x[2:9]
def deck_22feb52e(x):
    return x[11:22] + x[22:] + x[:9] + x[9:11]
def cmul_c4987507(x):
    # the flag is flag{jk}
    return [x[i] * 6 for i in range(k)]
def cxor_96357748(x):
    return [x[i] ^ 8693198915 for i in range(k)]
def cadd_2c027db7(x):
    # rekt
    return [x[i] + 3088087287 for i in range(k)]
def cmul_3cb7c090(x):
    return [x[i] * 10 for i in range(k)]
def cxor_9a4356f0(x):
    # shiet?
    return [x[i] ^ 1370127332 for i in range(k)]
def chunk_225b51ad(x):
    # lmaooo
    return x[16:] + x[:16]
def csub_c8591293(x):
    return [x[i] - 3719695581 for i in range(k)]
def chsub_ccea72cb(x):
    y = [ord(p) for p in 'd95748b3e1517df2f9a7036741ea0e7b776b']
    return [x[i] - y[i] for i in range(k)]
def chadd_db3363a7(x):
    # the best
    y = [ord(p) for p in 'f9ae24e7445e398020e0fc43807682045c16']
    return [x[i] + y[i] for i in range(k)]
def chadd_323e5325(x):
    y = [ord(p) for p in 'c514ea9ea66c479c78667ed956ca6b5ec02b']
    return [x[i] + y[i] for i in range(k)]
def xor_6cfdbb4a(x):
    y = [1683016610, 6287885619, 6140819248, 905116249, 977905326, 3504508438, 2195374835, 4893726709, 5668315288, 1686857554, 8316378390, 5991893221, 3029795659, 6059618964, 5326059685, 7094674718, 4261471312, 7108462725, 2881479487, 9642421117, 2485015812, 3038555596, 4567417532, 5609792517, 9858034566, 1071445719, 2909928296, 5492319380, 2907617837, 3430390138, 6781176225, 1462721801, 2739676889, 9121408246, 1135515870, 9644822622]
    return [x[i] ^ y[i] for i in range(k)]
def cadd_02aec3ae(x):
    return [x[i] + 9192540057 for i in range(k)]
def mul_cf7af31a(x):
    y = [5, 6, 2, 7, 6, 5, 1, 2, 1, 5, 2, 1, 2, 7, 3, 7, 6, 2, 6, 2, 6, 1, 5, 4, 3, 4, 4, 6, 5, 4, 3, 2, 2, 5, 7, 1]
    return [x[i] * y[i] for i in range(k)]
def cxor_1c819fcf(x):
    # lel
    return [x[i] ^ 9758721419 for i in range(k)]
def xor_b75a23b1(x):
    # encryption
    y = [9030733525, 6184407613, 4389410971, 9559112392, 3314468134, 2527724816, 9988438658, 2726147732, 7352856936, 9206980714, 9046483766, 6068865841, 867215899, 7692382626, 3434283766, 9855521549, 8151325200, 752318472, 4483381950, 9882759163, 8032210075, 4191433623, 9483641790, 1917770419, 3221845512, 6881565684, 515396724, 5469854753, 3965982400, 5760968217, 1807913, 2190656989, 1022509835, 2088919947, 7210529534, 5814244346]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_05b3201a(x):
    # kek
    y = [ord(p) for p in '85ad09bb7c67d4683bcd437b86ea432d7388']
    return [x[i] * y[i] for i in range(k)]
def sub_a74b5cf9(x):
    y = [8631246758, 2899173677, 9632991531, 4710666080, 7381817212, 2914158428, 5034452258, 5300131918, 8046719860, 1915287937, 3838537662, 4723055329, 7085579698, 8302461755, 1559925776, 600795722, 6952362284, 8489337234, 2080550245, 5262913825, 2483154305, 1160306298, 8790909504, 464891430, 8286376169, 17816484, 8364864556, 1972507705, 8566415151, 8546242576, 6927456260, 5404473545, 2049098107, 1643451056, 5014545505, 5818002715]
    return [x[i] - y[i] for i in range(k)]
def csub_e5b6d56f(x):
    return [x[i] - 110658831 for i in range(k)]
def chunk_d3ecfe82(x):
    return x[23:] + x[:23]
def xor_308c8fd5(x):
    # mucho encrypto
    y = [7925428055, 1930351343, 6554883747, 7459406369, 6924990222, 4745035154, 5899948947, 5082623053, 5127424632, 829655995, 4090640092, 1626256167, 7056168240, 4849883961, 2941692377, 815679235, 5946637927, 4698816811, 2874023656, 5759018333, 9047235440, 3806293211, 6816765581, 9682464108, 4544411986, 2550736705, 1210349290, 7443152534, 4684099604, 8512948751, 9689755471, 6442373439, 291166802, 3084321000, 7979554691, 5723426809]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_426ca25d(x):
    return [int(str(n)[:1] + ''.join(['8', '2', '3', '9', '6', '4', '0', '1', '5', '7'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_47929ded(x):
    # encryption
    return [x[p] for p in [7, 15, 34, 4, 6, 1, 24, 18, 31, 30, 26, 19, 0, 2, 8, 14, 5, 12, 17, 3, 16, 35, 22, 33, 25, 27, 20, 11, 9, 21, 28, 23, 10, 29, 32, 13]]
def cmul_04ae6c22(x):
    # shiet?
    return [x[i] * 6 for i in range(k)]
def deck_fcf49a19(x):
    # kek
    return x[2:9] + x[:2] + x[9:10] + x[10:]
def mul_993204a9(x):
    # mucho encrypto
    y = [9, 8, 5, 5, 2, 2, 8, 3, 7, 7, 5, 4, 8, 7, 6, 2, 2, 6, 5, 7, 3, 1, 7, 7, 2, 8, 9, 7, 9, 4, 5, 5, 9, 4, 6, 2]
    return [x[i] * y[i] for i in range(k)]
def cadd_a377ad5c(x):
    return [x[i] + 1256614303 for i in range(k)]
def mul_15292c86(x):
    y = [4, 6, 3, 8, 1, 8, 6, 7, 8, 9, 7, 7, 10, 2, 8, 1, 3, 5, 6, 4, 4, 5, 6, 5, 8, 1, 3, 7, 5, 7, 6, 5, 1, 4, 8, 8]
    return [x[i] * y[i] for i in range(k)]
def deck_03515b18(x):
    # rekt
    return x[28:] + x[:7] + x[7:24] + x[24:28]
def chmul_bd4ac691(x):
    # evil
    y = [ord(p) for p in 'cc1ebef3c354d25f0fd0f6c70f6b02d5c705']
    return [x[i] * y[i] for i in range(k)]
def chmul_5add5ae2(x):
    y = [ord(p) for p in 'd448d623641d7f28e838b6c54be31cd083fc']
    return [x[i] * y[i] for i in range(k)]
def chsub_339c9633(x):
    # lmaooo
    y = [ord(p) for p in '93308f7351ec0d7d17a9b39b7333ca27437c']
    return [x[i] - y[i] for i in range(k)]
def csub_d97e3189(x):
    return [x[i] - 7987266220 for i in range(k)]
def chsub_9e3a2eb0(x):
    y = [ord(p) for p in '3d4fa88968e64e2fa84511a8b7c5bd145d42']
    return [x[i] - y[i] for i in range(k)]
def xor_276ba897(x):
    y = [8295337483, 5314627698, 2741420624, 2671103352, 5970983642, 5765790054, 1202154961, 9702295728, 3610552735, 8542642894, 5739806917, 8710372153, 5039881538, 4218094310, 3217930659, 8497328680, 7139018003, 4713948993, 8314669369, 424404463, 1902276909, 3940639879, 1429783295, 4961590176, 9572959440, 8226966764, 9216574192, 9255019553, 7129693827, 6754523150, 7263491537, 6225296716, 9950277591, 1391095962, 9387735766, 527396598]
    return [x[i] ^ y[i] for i in range(k)]
def cadd_a2760089(x):
    # shiet?
    return [x[i] + 1852698805 for i in range(k)]
def shuffle_883a1be7(x):
    return [x[p] for p in [3, 14, 12, 21, 18, 32, 13, 29, 24, 17, 7, 31, 26, 8, 20, 1, 15, 6, 10, 25, 23, 30, 35, 28, 19, 5, 27, 33, 0, 16, 2, 11, 4, 34, 22, 9]]
def csub_43b0ae55(x):
    # the flag is flag{jk}
    return [x[i] - 8072750271 for i in range(k)]
def chxor_5c4c4d77(x):
    y = [ord(p) for p in '97315873c7c85f2add3f3e6e505a9c5e350f']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_42bc522c(x):
    # the flag is flag{jk}
    return x[34:] + x[:34]
def deck_78957fff(x):
    # encryption
    return x[9:25] + x[25:27] + x[27:] + x[:9]
def mul_e04a2c12(x):
    # lel
    y = [4, 7, 3, 5, 6, 7, 7, 1, 5, 1, 2, 2, 3, 5, 4, 1, 7, 4, 1, 3, 6, 7, 7, 1, 1, 1, 1, 4, 3, 2, 7, 5, 2, 2, 4, 4]
    return [x[i] * y[i] for i in range(k)]
def sub_0b5acfeb(x):
    y = [9551309865, 8542887645, 5656622330, 9507159017, 707943563, 4547401160, 744751472, 2447641330, 3379405706, 647519452, 1710884684, 2762783315, 5914904630, 9233499935, 6722423618, 6463173042, 8755235658, 7962225917, 9676023206, 72817134, 6806440374, 9681474957, 3929730409, 9136705322, 6311569342, 7580470402, 7336435764, 3965059983, 9823779568, 1768852410, 5296718159, 334478958, 8748929111, 9565515530, 9863963086, 3177794271]
    return [x[i] - y[i] for i in range(k)]
def cxor_eb9b7ae7(x):
    return [x[i] ^ 3744633235 for i in range(k)]
def chmul_cfee488f(x):
    y = [ord(p) for p in 'd7fc3eb0f0023425334948897c2cee3362d5']
    return [x[i] * y[i] for i in range(k)]
def add_0919e3a2(x):
    # the best
    y = [6596696675, 7361296510, 6504037837, 24520177, 2101237280, 3932325536, 3293316434, 591478207, 8066767345, 2531021166, 5855012514, 8440124257, 7221972605, 5272191206, 2650062386, 9398317480, 627849668, 8864784849, 4197602894, 1474109684, 8675108784, 7136840773, 1561945685, 1635398240, 9416369490, 1455132067, 7901067792, 2067892583, 6571502269, 5067956918, 2696053297, 3254690376, 863138604, 8030920559, 8257413551, 7392862034]
    return [x[i] + y[i] for i in range(k)]
def cmul_a50583d3(x):
    # mucho encrypto
    return [x[i] * 6 for i in range(k)]
def cxor_8ff25e39(x):
    # mucho encrypto
    return [x[i] ^ 4476391879 for i in range(k)]
def sub_122f24d4(x):
    # rekt
    y = [7344000643, 4716691651, 730767841, 8231090372, 9328582597, 8095134735, 9644894416, 6600377763, 243948820, 9676647971, 588104646, 9372107184, 49409136, 8220645205, 8943675301, 1680922778, 1749845537, 2209362890, 9500593061, 2674156781, 9478698031, 180748057, 8503289520, 8357750601, 6552468511, 3927773648, 8996215429, 4204258140, 2494095594, 6113062208, 5238988946, 984256297, 8335149033, 4422029150, 4290375367, 2298763956]
    return [x[i] - y[i] for i in range(k)]
def xor_bb19f697(x):
    y = [2269581014, 815697634, 64582332, 9441853307, 6314290271, 4381532571, 5388797175, 7073235088, 3946300854, 2296478751, 223035000, 7023300068, 6839111885, 2738223277, 590144744, 4970803282, 4408529405, 4862587746, 8076352985, 6637789179, 5364405347, 9260289499, 1655453611, 7888689778, 2095401725, 5304124467, 807909683, 4852527771, 2263856903, 512455500, 2256124899, 4868558393, 1656150809, 5884405583, 8467210363, 3960553146]
    return [x[i] ^ y[i] for i in range(k)]
def csub_31de2ba3(x):
    # encryption
    return [x[i] - 44515411 for i in range(k)]
def shuffle_cef04b1b(x):
    return [x[p] for p in [25, 2, 11, 8, 32, 31, 35, 6, 24, 21, 17, 10, 16, 28, 26, 22, 9, 5, 33, 20, 23, 27, 4, 3, 13, 30, 19, 7, 1, 0, 14, 34, 12, 18, 29, 15]]
def deck_7b56a061(x):
    return x[26:28] + x[28:] + x[18:26] + x[:18]
def sub_6a9bc171(x):
    # so good
    y = [3014737995, 1795417228, 9673376147, 9182647908, 1783656001, 9502747262, 3377807355, 9543146267, 7755829460, 8369578665, 1441702267, 5366490390, 8056652709, 294072141, 2199298574, 3184676516, 7956611, 2263391037, 8985593613, 1555422089, 3038611719, 5080584355, 9128915395, 7903941903, 9410808126, 4849940580, 2298879758, 67996033, 381188564, 3818965647, 4288734132, 1644917029, 5790288350, 6354597978, 4775921517, 1550435372]
    return [x[i] - y[i] for i in range(k)]
def chxor_8264e501(x):
    y = [ord(p) for p in '169cd9daccc4afbe90372a9449d2f2c3516e']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_e08d8ea1(x):
    y = [ord(p) for p in 'b1c0894085e36b5df7ec3bb5ae0520f2645c']
    return [x[i] * y[i] for i in range(k)]
def deck_7fb01f80(x):
    return x[24:34] + x[:16] + x[34:] + x[16:24]
def shuffle_2877e883(x):
    # just reverse it
    return [x[p] for p in [9, 31, 29, 33, 13, 17, 0, 32, 12, 25, 19, 6, 11, 16, 35, 5, 27, 10, 4, 30, 14, 26, 15, 24, 34, 18, 1, 8, 22, 2, 23, 21, 3, 7, 20, 28]]
def add_99ad02f5(x):
    # the best
    y = [7513528041, 2244690492, 892320749, 5468737951, 6913415164, 4897110434, 3069626718, 8019307205, 8087904371, 4627543646, 7692108417, 4140217477, 2009141044, 9013610820, 1608926668, 5467879736, 3824720254, 2997610683, 2873318546, 577435294, 7053834034, 9597377352, 5781361699, 3892298192, 286031561, 8460685064, 7680744085, 7644757635, 362602847, 1973692012, 4079357589, 6454884851, 3082058904, 2501576386, 4794677896, 7515940739]
    return [x[i] + y[i] for i in range(k)]
def digsub_899a9f6d(x):
    return [int(str(n)[:1] + ''.join(['2', '5', '3', '9', '0', '8', '1', '6', '4', '7'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_fc9ca4bd(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '6ad0cbc51f4380b24dda815bd32f35877e84']
    return [x[i] * y[i] for i in range(k)]
def cadd_b83d6dfa(x):
    return [x[i] + 167448354 for i in range(k)]
def cadd_5df8c3da(x):
    # lmaooo
    return [x[i] + 2828760266 for i in range(k)]
def mul_897a634a(x):
    y = [4, 6, 6, 9, 8, 5, 9, 3, 10, 6, 5, 6, 5, 4, 6, 5, 9, 8, 10, 9, 5, 10, 2, 2, 1, 2, 3, 2, 8, 1, 5, 7, 1, 8, 1, 3]
    return [x[i] * y[i] for i in range(k)]
def chsub_04fb6e14(x):
    # shiet?
    y = [ord(p) for p in '55a5b5114f7252d0651972b1f8b080bcabf1']
    return [x[i] - y[i] for i in range(k)]
def chsub_3a9fd4f5(x):
    # kek
    y = [ord(p) for p in 'b36af9224892f4c2136afa5f4561b2d78dd3']
    return [x[i] - y[i] for i in range(k)]
def add_b2a61490(x):
    # rekt
    y = [7131901134, 9099038881, 4902767249, 6637679791, 6185980506, 2994788505, 3267007003, 6690762015, 3282436506, 7688388665, 4505880688, 3880752506, 5231186209, 2138415026, 422230567, 3152710834, 7100859162, 1154377157, 163514720, 3706494461, 3680151200, 5552213763, 5335047460, 9885538924, 9130735725, 2462990215, 3647947591, 1847282753, 4785818210, 985945859, 2404870091, 9627546518, 5087037433, 7828140664, 5752657175, 184060198]
    return [x[i] + y[i] for i in range(k)]
def shuffle_c3a4eec2(x):
    # evil
    return [x[p] for p in [4, 9, 17, 18, 1, 3, 16, 7, 15, 5, 32, 24, 23, 11, 30, 27, 10, 8, 6, 35, 22, 31, 21, 13, 28, 20, 34, 33, 19, 0, 14, 26, 12, 29, 2, 25]]
def sub_e0bac344(x):
    # so good
    y = [9661407738, 596519251, 9075668768, 9098654406, 293906733, 9505757255, 6973966787, 9326406375, 5670280190, 8771648888, 9818465950, 4630217287, 9030815174, 9988424993, 5570530479, 7053685572, 1999127084, 9043080291, 5566854094, 7871599493, 2399734650, 3605617585, 8301100483, 7277271092, 7771183776, 5852544579, 6324612276, 4431165980, 8584465024, 1804290399, 3545006305, 2665309918, 5952216565, 8504831649, 9532282744, 4359971144]
    return [x[i] - y[i] for i in range(k)]
def xor_8833c00c(x):
    y = [3123569577, 4404914290, 2561049204, 4439523017, 1142077695, 2316710723, 7293313946, 15773894, 6713190851, 7984355164, 8261766012, 3858020382, 6489267170, 1386976394, 2201520004, 9019948398, 1932547301, 6284534506, 1600510477, 4313691655, 4731215398, 3413893413, 4261311545, 3077242688, 7920540217, 986212731, 6130773356, 5303918916, 1833595880, 6933410842, 6142739154, 5738339980, 1471964039, 3882605081, 3611665060, 3505367710]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_2561cd28(x):
    # lmaooo
    y = [ord(p) for p in '27903854d0d181806ebe0b86a4e294ed5283']
    return [x[i] * y[i] for i in range(k)]
def chsub_c4c05ce8(x):
    # the best
    y = [ord(p) for p in '9e8165a6ac95fea065dac11cc5a5e3dc8a0c']
    return [x[i] - y[i] for i in range(k)]
def chxor_733c74e9(x):
    y = [ord(p) for p in '37110b8326bfcc085bc42c58e9e5f63822f8']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_896dc902(x):
    # encryption
    y = [ord(p) for p in 'ad9c16dd8101939c30ad2adeffb0af936716']
    return [x[i] + y[i] for i in range(k)]
def chunk_41b017cd(x):
    # just reverse it
    return x[21:] + x[:21]
def chsub_91add2c2(x):
    y = [ord(p) for p in 'ed377197821f312ebb828992251142dbab6e']
    return [x[i] - y[i] for i in range(k)]
def sub_31d58010(x):
    y = [1769857492, 1033263638, 3243104400, 7398253268, 1043023011, 2716560616, 8521216591, 6741703501, 2115514631, 2132149692, 8001918718, 9786950679, 4285106743, 4759487323, 4555206144, 2590282363, 5114838021, 1316953954, 730980456, 5305151502, 4789662633, 6379093303, 7792288264, 2389727210, 9444654490, 9028379625, 1997645486, 7464008823, 3403466958, 962058091, 2037030167, 8841437275, 8150853662, 1633333565, 3852473749, 446160851]
    return [x[i] - y[i] for i in range(k)]
def digsub_f38ffcc2(x):
    # just reverse it
    return [int(str(n)[:1] + ''.join(['0', '9', '3', '5', '1', '4', '8', '7', '6', '2'][int(p)] for p in str(n)[1:])) for n in x]
def digsub_76cf6e97(x):
    # mucho encrypto
    return [int(str(n)[:1] + ''.join(['3', '4', '5', '9', '0', '6', '7', '1', '2', '8'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_5dac5c0c(x):
    y = [ord(p) for p in '4e34f0a16191941cd94ead4344ffdb83e163']
    return [x[i] * y[i] for i in range(k)]
def chmul_f8bd0b15(x):
    y = [ord(p) for p in 'f30ec9b7655a1347dd6294a5b5d85ac2d98d']
    return [x[i] * y[i] for i in range(k)]
def digsub_a5f0e042(x):
    return [int(str(n)[:1] + ''.join(['3', '8', '7', '5', '1', '9', '2', '4', '6', '0'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_0847afe1(x):
    return [x[p] for p in [15, 11, 14, 1, 25, 26, 19, 7, 12, 31, 30, 0, 18, 16, 34, 3, 6, 4, 8, 20, 21, 2, 10, 33, 24, 32, 29, 5, 28, 22, 9, 27, 17, 35, 23, 13]]
def chxor_a614acf2(x):
    y = [ord(p) for p in '94d2bf6e9236fd0cb4113685d44b7b0742c7']
    return [x[i] ^ y[i] for i in range(k)]
def chsub_1ad0c5fe(x):
    y = [ord(p) for p in 'c53457a60f28a7b2f7a0f9302814be436605']
    return [x[i] - y[i] for i in range(k)]
def cadd_577d5f70(x):
    # evil
    return [x[i] + 6234552851 for i in range(k)]
def add_5f5c1e45(x):
    y = [1215252101, 9420554013, 5062312215, 2448168404, 5775572351, 6200840016, 3334112979, 1333089726, 6303699871, 2149159280, 3950361579, 5120448538, 2865492267, 1306763457, 9101199487, 8395239525, 5022721056, 8165356127, 700318399, 5027824643, 555023768, 8411554952, 9075966147, 7799244799, 5453662460, 9013768032, 1071407544, 9540871785, 4217848162, 810753596, 6793615531, 6874896070, 6215876276, 8652593725, 6186486185, 4038365023]
    return [x[i] + y[i] for i in range(k)]
def shuffle_32641923(x):
    return [x[p] for p in [7, 17, 8, 18, 4, 28, 11, 13, 35, 12, 23, 10, 29, 22, 31, 32, 1, 6, 15, 3, 0, 5, 14, 9, 33, 26, 34, 30, 25, 16, 19, 21, 24, 20, 27, 2]]
def chmul_d22494d3(x):
    # the best
    y = [ord(p) for p in '7e8735b07b78309918026704b9e36d04e19d']
    return [x[i] * y[i] for i in range(k)]
def cxor_f0f82070(x):
    return [x[i] ^ 8805049577 for i in range(k)]
def cadd_49e18892(x):
    return [x[i] + 6547652441 for i in range(k)]
def chxor_ddc3a6b5(x):
    # so good
    y = [ord(p) for p in '126754e7892f920bad0f224d7c5978de6f0c']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_ce6a8f1f(x):
    return [x[i] + 2618430063 for i in range(k)]
def chsub_84e2be83(x):
    # the best
    y = [ord(p) for p in 'ef4286f7fad55622dd694482a67a86ed942d']
    return [x[i] - y[i] for i in range(k)]
def shuffle_dd75cb23(x):
    # lmaooo
    return [x[p] for p in [22, 32, 6, 34, 8, 21, 4, 27, 31, 20, 2, 19, 16, 1, 3, 13, 14, 23, 12, 11, 26, 9, 15, 28, 35, 24, 30, 0, 17, 29, 10, 33, 18, 5, 25, 7]]
def cxor_112ee4fc(x):
    # evil
    return [x[i] ^ 7912267858 for i in range(k)]
def deck_ea5bab41(x):
    return x[9:9] + x[0:9] + x[9:] + x[:0]
def digsub_8326055f(x):
    # rekt
    return [int(str(n)[:1] + ''.join(['8', '1', '2', '3', '6', '4', '7', '5', '9', '0'][int(p)] for p in str(n)[1:])) for n in x]
def chadd_58981664(x):
    y = [ord(p) for p in 'd77250234d373a06c085eb3706fb282a0ae7']
    return [x[i] + y[i] for i in range(k)]
def cxor_20661e8f(x):
    # lmaooo
    return [x[i] ^ 7116803634 for i in range(k)]
def chmul_3d18df83(x):
    # encryption
    y = [ord(p) for p in '7fe48b153d9bb658cd9bcc96ededee292a03']
    return [x[i] * y[i] for i in range(k)]
def shuffle_92fb44d4(x):
    return [x[p] for p in [22, 10, 12, 31, 16, 27, 32, 9, 20, 5, 26, 18, 24, 34, 3, 17, 0, 8, 28, 2, 21, 19, 30, 15, 11, 13, 6, 25, 29, 14, 7, 23, 33, 1, 4, 35]]
def chadd_d95f9ffa(x):
    # the best
    y = [ord(p) for p in '7e5a0ca4aedd90e49cb0b52095b218f8f238']
    return [x[i] + y[i] for i in range(k)]
def shuffle_b16c2957(x):
    return [x[p] for p in [5, 28, 29, 31, 12, 15, 27, 23, 0, 25, 33, 1, 3, 14, 26, 8, 35, 21, 13, 10, 19, 9, 22, 11, 17, 30, 16, 20, 32, 6, 34, 18, 24, 7, 2, 4]]
def cadd_400b70cb(x):
    return [x[i] + 3473120576 for i in range(k)]
def chmul_47e5352e(x):
    # mucho encrypto
    y = [ord(p) for p in '051ac2919f89814da0a68f2421d51e7b699e']
    return [x[i] * y[i] for i in range(k)]
def cmul_f0b91a4d(x):
    # lmaooo
    return [x[i] * 9 for i in range(k)]
def cmul_6c27ae5b(x):
    return [x[i] * 6 for i in range(k)]
def add_7cb7d116(x):
    y = [6861408719, 4180526953, 687257889, 2907738110, 5634615801, 2740872697, 9414591817, 7763543555, 2627055423, 9035756527, 1080519631, 2185227720, 5888566866, 5016498533, 2713629304, 5422663741, 9450806639, 681732100, 9889784993, 2867527679, 253429497, 1930066013, 4794554951, 7152318568, 2791538998, 6990370680, 9261126288, 1775090898, 5228927513, 9657095018, 1323975869, 6869985057, 470503805, 8356417306, 5035315318, 975184353]
    return [x[i] + y[i] for i in range(k)]
def chxor_01d4c54e(x):
    y = [ord(p) for p in '4d2a773dc9b246393312c854c625648f9c87']
    return [x[i] ^ y[i] for i in range(k)]
def chsub_25609124(x):
    # rekt
    y = [ord(p) for p in 'fdfa67874e7426795bea94e299ff10a5c040']
    return [x[i] - y[i] for i in range(k)]
def add_9b544b2a(x):
    y = [734863020, 6628765792, 589833575, 8835126724, 8506081318, 2054557908, 8837811521, 2504833761, 4240984953, 2038875961, 9058950829, 7246193853, 1234554894, 6370565922, 329784341, 3356581661, 6055081730, 4658980921, 7075308448, 2288599886, 7178935518, 1758356669, 2772878228, 3319223720, 8302936526, 7854034650, 780519934, 4744955301, 2039045391, 3221700182, 23471527, 1875102747, 7612430199, 8190208029, 5857401043, 351218687]
    return [x[i] + y[i] for i in range(k)]
def add_108fd3c6(x):
    y = [7596907002, 39187786, 5866812388, 3729298893, 2289724597, 7724842697, 5560800911, 5034630052, 6670051959, 5566306000, 149822519, 425713626, 1086614679, 3730572312, 8764228258, 426291979, 4931037422, 824137245, 7682567923, 7772409652, 1695835444, 3959282231, 7132100897, 1247711036, 5374993339, 3309199648, 4837527085, 6396721288, 2142000816, 1776992704, 636594250, 4347935087, 6331765110, 1205001185, 1430048740, 7237673420]
    return [x[i] + y[i] for i in range(k)]
def mul_4a9471da(x):
    y = [6, 6, 4, 6, 4, 9, 6, 5, 9, 2, 5, 9, 6, 3, 6, 9, 3, 1, 7, 8, 4, 7, 6, 1, 4, 7, 7, 9, 8, 4, 9, 8, 7, 4, 2, 4]
    return [x[i] * y[i] for i in range(k)]
def cxor_ad95af8e(x):
    return [x[i] ^ 3118275724 for i in range(k)]
def deck_a2222b71(x):
    # rekt
    return x[35:] + x[26:35] + x[:20] + x[20:26]
def deck_0033c25a(x):
    return x[17:] + x[:7] + x[11:17] + x[7:11]
def chmul_49efe464(x):
    y = [ord(p) for p in '3cbd4b16bbda07c9ec3327e76e646e668da2']
    return [x[i] * y[i] for i in range(k)]
def chunk_a9bb69a3(x):
    # lel
    return x[15:] + x[:15]
def chxor_9eee4faf(x):
    # evil
    y = [ord(p) for p in '3e6200ee1a9e1bd923d621b3a26b4683cba8']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_a293a45d(x):
    return [x[p] for p in [31, 19, 30, 5, 12, 10, 24, 14, 21, 17, 34, 6, 13, 8, 18, 9, 16, 7, 33, 4, 27, 32, 26, 25, 15, 35, 28, 20, 3, 0, 1, 23, 11, 22, 29, 2]]
def xor_34863588(x):
    # lmaooo
    y = [1661494024, 831806488, 4659375811, 886451973, 7677215614, 2177752350, 4868066207, 2438989904, 8722831572, 7290182916, 971750956, 6098506902, 4969878993, 2015600326, 9133045724, 8907318531, 9054256387, 9907043029, 2048930686, 4845839269, 3568854675, 3493617218, 7568461740, 6145236144, 8040173237, 8447888235, 716976496, 3800493106, 5376751755, 573469530, 7680395620, 3827275376, 5161880886, 4269422548, 8195711456, 8777023877]
    return [x[i] ^ y[i] for i in range(k)]
def mul_2e2bca7d(x):
    # just reverse it
    y = [7, 4, 8, 2, 7, 5, 7, 4, 2, 3, 5, 8, 4, 2, 5, 4, 3, 2, 7, 7, 1, 7, 7, 4, 6, 2, 3, 1, 8, 6, 6, 5, 7, 1, 3, 2]
    return [x[i] * y[i] for i in range(k)]
def xor_edf3c9f3(x):
    # kek
    y = [5890739291, 1335657371, 2779896415, 8678676892, 7790344398, 5965852202, 7226808288, 7863350470, 4126075431, 8689976019, 5694470160, 2292751114, 2567899243, 9442904631, 5601597820, 1787845957, 9754651042, 1657562975, 3858658343, 5096340964, 6396623390, 2222006538, 2627589698, 9600578581, 8247464841, 4661798523, 533295496, 7159026007, 3142057178, 3752107096, 5759592761, 3591319344, 8475058883, 234315373, 6080291349, 8375307010]
    return [x[i] ^ y[i] for i in range(k)]
def add_c40251ff(x):
    y = [7189394377, 5777266817, 2950365429, 3553315726, 4812545544, 3979769546, 631985165, 5217089006, 1062898103, 1319792566, 6720561315, 9881252342, 8892633552, 2457751363, 4201940583, 8089577532, 4114281464, 5874550900, 5909689898, 2265434445, 2986745278, 6634400675, 7655385231, 8533714939, 5639657089, 3755506943, 9121932538, 8735131312, 793870306, 4925409805, 905883171, 9981022702, 2979718633, 4641389277, 3054397033, 3365791392]
    return [x[i] + y[i] for i in range(k)]
def digsub_038640b7(x):
    return [int(str(n)[:1] + ''.join(['1', '6', '2', '5', '8', '7', '0', '3', '9', '4'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_2a77e1f0(x):
    return [x[p] for p in [13, 31, 4, 33, 34, 15, 23, 28, 32, 17, 0, 14, 24, 21, 5, 25, 11, 29, 26, 18, 1, 20, 12, 6, 19, 3, 9, 2, 7, 30, 22, 16, 8, 27, 35, 10]]
def chxor_eae131e0(x):
    # encryption
    y = [ord(p) for p in 'b3c6ec6abc98558ce1dba686ed08f60b5911']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_4d8aa24b(x):
    y = [ord(p) for p in '44b0f9e2e9cb474b082c814b2caac43faa37']
    return [x[i] * y[i] for i in range(k)]
def add_333323b1(x):
    y = [4185418851, 1751928349, 4821373485, 2740254127, 8453731805, 1801067168, 4112999390, 5867112380, 5003752908, 6177311360, 1838708307, 7487313955, 4296991824, 4755206304, 7526729035, 3656965541, 7751578268, 8287238738, 3146688935, 1735108268, 755552681, 4209913216, 188249932, 7552630647, 1731296374, 663984315, 2051840920, 9245351140, 6266695409, 4163039189, 8191805850, 5068090278, 8354129599, 1654245190, 101418359, 364568405]
    return [x[i] + y[i] for i in range(k)]
def chadd_224e17b1(x):
    # mucho encrypto
    y = [ord(p) for p in 'aebcf19e8f4fb1bdbfe55a971fe34ced4f4b']
    return [x[i] + y[i] for i in range(k)]
def digsub_e43318ff(x):
    # just reverse it
    return [int(str(n)[:1] + ''.join(['0', '8', '7', '5', '9', '1', '6', '3', '2', '4'][int(p)] for p in str(n)[1:])) for n in x]
def sub_085ded8f(x):
    y = [5882668641, 3048988588, 2229399659, 4322478956, 6374043315, 9090573265, 4054538148, 8859863491, 240343540, 726714244, 4666722738, 3475223620, 8155269246, 7345186224, 6907218431, 6584363499, 3509544081, 8718180918, 9400163449, 2672808400, 875017439, 6456336896, 806121812, 1877374671, 1284718002, 832915209, 4505354362, 4453784188, 4658803738, 5991411770, 8534302823, 6391672337, 5178645748, 4182189143, 7856451970, 1453101173]
    return [x[i] - y[i] for i in range(k)]
def xor_2a24945c(x):
    # lel
    y = [5382590011, 1139361171, 2716726606, 3956554576, 6823045127, 3373203535, 4521764531, 7930000699, 3352046732, 8337339620, 8436997032, 9286084155, 1285053484, 4362402545, 4941858584, 9861247699, 3567640794, 4357896047, 9896917527, 53227023, 3924686075, 3710070228, 1731045970, 3814040472, 2816775645, 4459473871, 5689491303, 1416083642, 2319550179, 9735634385, 9890201674, 8375655002, 9590081380, 8041361422, 2099808493, 3685257298]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_a9c59f97(x):
    # just reverse it
    return [x[i] ^ 7782027954 for i in range(k)]
def deck_cf4eac66(x):
    # just reverse it
    return x[7:27] + x[2:7] + x[27:] + x[:2]
def chxor_0256cccb(x):
    y = [ord(p) for p in '6a47429eab8ac06db0c093167ab1a67ea300']
    return [x[i] ^ y[i] for i in range(k)]
def add_726cd7c7(x):
    # the flag is flag{jk}
    y = [5313971264, 5130610660, 1186135946, 513359066, 9557800378, 5958120379, 3086601008, 5343445216, 2735672596, 1731630340, 974219526, 385617124, 1020745837, 5062251232, 6677914452, 2950729752, 3732254212, 6506538805, 2329889178, 2019301444, 1054285702, 4949633515, 6953120505, 1671697103, 7885923307, 2962775249, 4062432723, 1274582836, 3261663328, 9285014281, 5497666930, 3562746591, 238666706, 2125824964, 794247224, 5392505762]
    return [x[i] + y[i] for i in range(k)]
def chunk_180b51ff(x):
    # so good
    return x[18:] + x[:18]
def chxor_7e8369a9(x):
    y = [ord(p) for p in '39c253fc02afd3d5e36230cb970c8690a0e9']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_a2ec48eb(x):
    return [x[i] * 4 for i in range(k)]
def cxor_c68edc46(x):
    # evil
    return [x[i] ^ 5437680490 for i in range(k)]
def chsub_4d0982ce(x):
    y = [ord(p) for p in '637a9a649ad604dcf1667bf2617f4a5590fd']
    return [x[i] - y[i] for i in range(k)]
def csub_8a4930e2(x):
    # kek
    return [x[i] - 9901607603 for i in range(k)]
def mul_2f89e56a(x):
    # so good
    y = [4, 4, 3, 3, 6, 4, 4, 6, 5, 5, 5, 6, 2, 3, 1, 5, 5, 1, 2, 3, 3, 5, 6, 3, 6, 5, 6, 1, 1, 6, 5, 3, 4, 4, 1, 2]
    return [x[i] * y[i] for i in range(k)]
def cxor_70fa2d45(x):
    # evil
    return [x[i] ^ 9003124987 for i in range(k)]
def chadd_70e1dac6(x):
    # just reverse it
    y = [ord(p) for p in '11260497ba4720cdcc93619c4f57582fab6d']
    return [x[i] + y[i] for i in range(k)]
def mul_224595eb(x):
    y = [1, 3, 1, 2, 3, 3, 3, 3, 2, 2, 3, 3, 2, 3, 3, 3, 2, 2, 1, 3, 3, 2, 2, 3, 2, 1, 1, 1, 2, 2, 1, 3, 3, 3, 1, 1]
    return [x[i] * y[i] for i in range(k)]
def cadd_75e1b32f(x):
    return [x[i] + 351632765 for i in range(k)]
def chxor_24ff0dd9(x):
    # the best
    y = [ord(p) for p in 'ff95c38b415151ae91b74114d09df0803f25']
    return [x[i] ^ y[i] for i in range(k)]
def chsub_c7e9cf5d(x):
    # rekt
    y = [ord(p) for p in 'df443c4f5e8e796769a41ecefc10e030825d']
    return [x[i] - y[i] for i in range(k)]
def chunk_8af8feea(x):
    return x[2:] + x[:2]
def sub_142fa244(x):
    y = [5130015392, 4881906755, 3133239847, 2203504802, 2307643369, 4485997140, 2380167121, 9099867690, 8762515821, 3805771800, 1712596070, 6484105187, 8699782895, 5759799182, 5191321498, 2712310808, 9388466985, 8381252575, 8597318793, 7719856077, 1743104703, 1324606958, 5650915555, 3526892682, 7258203880, 624932870, 2127703594, 9406277781, 4808312807, 37070354, 7831147791, 7144523008, 2479991111, 6607937830, 1174390363, 7328681203]
    return [x[i] - y[i] for i in range(k)]
def shuffle_0d526f11(x):
    return [x[p] for p in [10, 6, 14, 22, 28, 23, 5, 21, 24, 16, 12, 20, 33, 26, 17, 0, 13, 35, 2, 25, 29, 15, 34, 32, 11, 8, 9, 1, 19, 7, 18, 30, 3, 31, 4, 27]]
def chxor_faf934e8(x):
    y = [ord(p) for p in 'e237d07e7da7f4ca9937e6d9881c544e7d8c']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_747dfa2f(x):
    # the flag is flag{jk}
    y = [ord(p) for p in 'd270af0d2209a5adc0be432faf3838b29ec1']
    return [x[i] + y[i] for i in range(k)]
def cxor_86921258(x):
    # kek
    return [x[i] ^ 3436155187 for i in range(k)]
def cmul_1f88fc08(x):
    return [x[i] * 7 for i in range(k)]
def chmul_5ed084ad(x):
    y = [ord(p) for p in '7909ae75858d9457c18783345db80ebe6556']
    return [x[i] * y[i] for i in range(k)]
def xor_4c2f2b2e(x):
    # kek
    y = [7773167905, 2054065438, 7179051699, 2948987753, 6637455901, 6258904406, 8219087923, 1624752071, 1197195979, 1037192111, 4242098926, 2287977736, 9017216499, 4588757219, 5581063401, 8071490899, 6838122582, 6504584298, 2082904053, 5591432526, 2649090114, 701197344, 7098378583, 6535546550, 2313911158, 5535837790, 4845312417, 6718036413, 9174256348, 2476369350, 7269885251, 2237833716, 5627294245, 2770455126, 3540908815, 7963425685]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_421c0466(x):
    y = [ord(p) for p in 'b1e9e2f524f98a247113be64200a631d7a79']
    return [x[i] - y[i] for i in range(k)]
def cadd_c751d9e4(x):
    # shiet?
    return [x[i] + 5135110466 for i in range(k)]
def cxor_c57039b1(x):
    # lel
    return [x[i] ^ 945709836 for i in range(k)]
def add_dbc17785(x):
    # encryption
    y = [4483733819, 4382586350, 4667533926, 4410065797, 9392738100, 8128186319, 8655746313, 136287726, 9409037814, 3542433648, 7359737006, 2288764574, 7940058742, 8278000007, 341929598, 7216877725, 1157034508, 7610911814, 1642704375, 4149215544, 2256698250, 1698112916, 7769748609, 7601715257, 9363397128, 5963992203, 1240777188, 27179304, 453522090, 1301590341, 6294352908, 8914281889, 3871834212, 8107705129, 4450685139, 2080274317]
    return [x[i] + y[i] for i in range(k)]
def cmul_a3103f38(x):
    return [x[i] * 4 for i in range(k)]
def cxor_4f2ad7d2(x):
    return [x[i] ^ 1161456078 for i in range(k)]
def chxor_730db16c(x):
    # rekt
    y = [ord(p) for p in 'c7e470c2d15dc0c0ff744bdcc9240e2aa16b']
    return [x[i] ^ y[i] for i in range(k)]
def xor_78429cb3(x):
    # rekt
    y = [9097475640, 8684885920, 6319872368, 6941186621, 6280901974, 4658102946, 9411920584, 5576030767, 5485667362, 6426685289, 9114104107, 3445378465, 6768726319, 8728721708, 5966600658, 1445293270, 2789322378, 9808447228, 7391363974, 9264841602, 4020079589, 8188672072, 6507080574, 1717019154, 4517403244, 7559612932, 993935164, 400218530, 4496660853, 3922933714, 547405318, 8006089322, 5125054065, 8682063934, 9227902801, 4000030868]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_92f27399(x):
    # lel
    y = [ord(p) for p in '89e327441cf07ea20185cbb21bc48e3a9103']
    return [x[i] - y[i] for i in range(k)]
def csub_74d531bb(x):
    return [x[i] - 661994010 for i in range(k)]
def chxor_e276b565(x):
    # so good
    y = [ord(p) for p in '70e1b2fed1ba498f57bf9531c5cb1c3e98db']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_ab4034bb(x):
    y = [ord(p) for p in 'ed3b25bb90e511c2e63fc711f0c30da116ac']
    return [x[i] * y[i] for i in range(k)]
def sub_97300f52(x):
    y = [7868588506, 1419954371, 4396759003, 2245774153, 4170768232, 8356418191, 8103032470, 4916632951, 3710450850, 1242079532, 6949233576, 4826473743, 894602998, 4014172371, 3635860553, 452037537, 5990445108, 7262710600, 1887731317, 9902622150, 5209634924, 4500063030, 9285397674, 7882479330, 386595023, 9484183908, 3580729550, 4159724530, 4077584553, 4277680546, 7836808257, 5116254490, 9604129888, 4037505962, 4356773501, 265005134]
    return [x[i] - y[i] for i in range(k)]
def chxor_442c0a5b(x):
    y = [ord(p) for p in '03537dfdf33ba6ae9d190f8bbc7a125efc3c']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_0a5ff345(x):
    # rekt
    return [x[i] + 1911933260 for i in range(k)]
def cxor_3cac8696(x):
    # encryption
    return [x[i] ^ 1128748206 for i in range(k)]
def cxor_7f32a16a(x):
    return [x[i] ^ 6580874019 for i in range(k)]
def add_2527f4da(x):
    # lel
    y = [7705169151, 8008195596, 1678541727, 2039683450, 6084409259, 7724527749, 5417611684, 5768311027, 2324422153, 2241972219, 8410289238, 5791760481, 3265806214, 525772417, 2391008808, 9571593799, 2732233602, 9447856986, 3870267010, 8332268148, 2024364099, 3049844139, 3694414392, 859726141, 3147611961, 7125597328, 1556819034, 6917127429, 801622517, 830902247, 3707018776, 5635208810, 6548913198, 1128294106, 5550533900, 4806089068]
    return [x[i] + y[i] for i in range(k)]
def csub_cf019266(x):
    return [x[i] - 2446101591 for i in range(k)]
def deck_3c3bd3c0(x):
    # so good
    return x[:6] + x[25:] + x[6:18] + x[18:25]
def deck_5cb4928d(x):
    # kek
    return x[13:18] + x[33:] + x[18:33] + x[:13]
def mul_b2698654(x):
    y = [8, 1, 9, 3, 7, 4, 1, 10, 8, 9, 9, 8, 2, 7, 8, 5, 6, 2, 10, 7, 10, 9, 10, 3, 4, 6, 1, 8, 4, 1, 1, 5, 8, 8, 3, 1]
    return [x[i] * y[i] for i in range(k)]
def chadd_d8ce38a5(x):
    # just reverse it
    y = [ord(p) for p in 'c9f4951e6e70df1cb5de1473af16cae3dffb']
    return [x[i] + y[i] for i in range(k)]
def chadd_6a1bd216(x):
    # the best
    y = [ord(p) for p in '1d43e720dab92ff6c7413761db02d0821eda']
    return [x[i] + y[i] for i in range(k)]
def digsub_907a9a8a(x):
    return [int(str(n)[:1] + ''.join(['4', '5', '2', '7', '0', '3', '8', '9', '1', '6'][int(p)] for p in str(n)[1:])) for n in x]
def csub_a15374e1(x):
    # encryption
    return [x[i] - 4278776843 for i in range(k)]
def cmul_8189d30e(x):
    # evil
    return [x[i] * 4 for i in range(k)]
def cxor_07785927(x):
    # so good
    return [x[i] ^ 7267008781 for i in range(k)]
def cadd_95ea1de0(x):
    # mucho encrypto
    return [x[i] + 5212032605 for i in range(k)]
def cadd_3a7e4ac5(x):
    return [x[i] + 4358427567 for i in range(k)]
def chadd_d7b62183(x):
    y = [ord(p) for p in 'f7351a9051f76b74aad71c9795d2bf16f24a']
    return [x[i] + y[i] for i in range(k)]
def xor_d90ee923(x):
    # the flag is flag{jk}
    y = [1642777874, 1071341309, 9872632626, 175878320, 5316472970, 5900624493, 7554880566, 6572082591, 7133094392, 301851188, 6535968608, 9879749960, 4675889639, 7036579360, 4935229968, 668227431, 7508785917, 1680639890, 9942215343, 7347290327, 4262589823, 1734787881, 9308211964, 2464844749, 6546468300, 7369074172, 3918425064, 8613312994, 240392699, 2497982141, 6460594147, 555155250, 3788785461, 7237563295, 8765373470, 3598250019]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_eb7e47c1(x):
    y = [ord(p) for p in '2ee8e8112f7dd60af8a61ba950842b66c163']
    return [x[i] ^ y[i] for i in range(k)]
def deck_c7850458(x):
    return x[:0] + x[21:] + x[0:18] + x[18:21]
def xor_1e24aa63(x):
    # kek
    y = [3993266388, 8155876785, 3332953531, 1432492255, 9832295790, 1624748762, 7775005923, 2577766264, 9801810559, 9731735046, 4218994822, 3775389471, 2056732886, 4720535898, 2940653893, 666061461, 4926629040, 5487969357, 3908083744, 8024428454, 6668978900, 3017029406, 6928184298, 5389234553, 6470039542, 1361525989, 5979062229, 836649265, 5756263364, 954537226, 3575102023, 7060284866, 376056697, 3338009255, 6906011338, 6192274572]
    return [x[i] ^ y[i] for i in range(k)]
def deck_f8a08d13(x):
    # lel
    return x[15:17] + x[31:] + x[17:31] + x[:15]
def deck_2b49690d(x):
    # the best
    return x[:5] + x[34:] + x[5:27] + x[27:34]
def chadd_4b0b608a(x):
    # shiet?
    y = [ord(p) for p in 'a1204c328d73ecb4885d71bbf25831b5773d']
    return [x[i] + y[i] for i in range(k)]
def cadd_761effde(x):
    return [x[i] + 7388035101 for i in range(k)]
def sub_a40cb760(x):
    # so good
    y = [6051939208, 9899296359, 1435780228, 2046348118, 6137934429, 6972815075, 5527007365, 1386317082, 6353979530, 4512939156, 174707028, 3828384346, 8595543463, 3188187239, 14418105, 8102937895, 1370663284, 7443946774, 1585287495, 1007945183, 5167334553, 9266504242, 5055358874, 5342463440, 3448150119, 4618652849, 249706110, 7918642749, 9714610058, 5652187175, 5152333781, 1433977290, 1023031382, 7237220085, 6363172572, 8142988849]
    return [x[i] - y[i] for i in range(k)]
def chadd_9c4be3af(x):
    y = [ord(p) for p in '24bb63ad3ca80b74b6803262817f6bc7da32']
    return [x[i] + y[i] for i in range(k)]
def shuffle_f0fadf4b(x):
    # so good
    return [x[p] for p in [2, 34, 1, 33, 18, 21, 19, 15, 28, 7, 3, 5, 35, 11, 6, 0, 27, 8, 31, 17, 24, 26, 13, 20, 9, 25, 23, 29, 4, 22, 16, 14, 30, 32, 12, 10]]
def cxor_15061824(x):
    return [x[i] ^ 3261365425 for i in range(k)]
def sub_88400353(x):
    # mucho encrypto
    y = [7050204904, 3864656814, 6126342934, 9710673179, 6963214621, 5657032266, 9665906731, 2186218743, 7287411856, 561455256, 5850288887, 9844537425, 1035558631, 8846913670, 4496836, 1198788377, 8960818868, 3507300978, 2917221994, 9837159997, 3942951381, 2627290501, 6374935313, 2425000448, 8975533400, 3549351775, 9071715792, 2563402261, 6308988284, 668101269, 2497295304, 7493061466, 3475884920, 6077343847, 6568436122, 4359040469]
    return [x[i] - y[i] for i in range(k)]
def cxor_928d8cb2(x):
    return [x[i] ^ 6998175763 for i in range(k)]
def chadd_88ba6a81(x):
    y = [ord(p) for p in 'a3a65b45c25778f7b20d13e8d76bad074788']
    return [x[i] + y[i] for i in range(k)]
def chunk_79cef8cd(x):
    # mucho encrypto
    return x[0:] + x[:0]
def shuffle_1a2b743e(x):
    return [x[p] for p in [23, 5, 25, 31, 12, 22, 3, 13, 16, 33, 24, 35, 1, 17, 7, 21, 6, 32, 4, 26, 19, 20, 14, 10, 18, 9, 8, 29, 0, 28, 30, 27, 2, 11, 34, 15]]
def deck_f92aa873(x):
    # evil
    return x[27:] + x[:1] + x[1:7] + x[7:27]
def digsub_b4f2bfbc(x):
    return [int(str(n)[:1] + ''.join(['1', '3', '4', '9', '8', '6', '2', '0', '5', '7'][int(p)] for p in str(n)[1:])) for n in x]
def sub_b82d8405(x):
    # rekt
    y = [7296336149, 3647508045, 727579124, 1648580666, 494281003, 9777046708, 2119074581, 7534828394, 4551203978, 803809231, 5665167055, 3049806144, 9676649326, 8639076099, 1739761430, 8196966993, 6703635863, 5849519794, 7832952962, 1901606067, 5536535300, 8786340987, 4149549817, 7680785849, 7981051951, 5380762998, 3197574904, 8967902012, 2918807911, 4872130436, 950949287, 4437241434, 7538147185, 9976283161, 407447980, 3567338372]
    return [x[i] - y[i] for i in range(k)]
def chsub_46b53140(x):
    y = [ord(p) for p in '975152ada51e55fb65b85682f1376718a4bc']
    return [x[i] - y[i] for i in range(k)]
def cxor_fe5870fc(x):
    return [x[i] ^ 8290437485 for i in range(k)]
def mul_5d959d10(x):
    y = [4, 7, 3, 5, 8, 8, 8, 8, 7, 5, 5, 8, 1, 1, 5, 2, 1, 9, 7, 1, 7, 1, 5, 8, 9, 9, 8, 4, 4, 6, 9, 7, 3, 8, 9, 7]
    return [x[i] * y[i] for i in range(k)]
def chadd_af05dbbf(x):
    # rekt
    y = [ord(p) for p in '684148281654ccbd1bcedc2331ac20e02896']
    return [x[i] + y[i] for i in range(k)]
def chxor_e3309cca(x):
    y = [ord(p) for p in 'bae574783e7b340a4de62323fa44096e1e9b']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_5d103edd(x):
    # just reverse it
    return x[35:] + x[:35]
def chxor_013d1031(x):
    y = [ord(p) for p in '1d3953aaf6fc6ba340030191d8915ecaa4e2']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_426d469b(x):
    return x[15:] + x[:15]
def chmul_a1decfe1(x):
    # the best
    y = [ord(p) for p in '0f66bddbe757fcd33461b93bce439403e65c']
    return [x[i] * y[i] for i in range(k)]
def chunk_c5398c39(x):
    return x[25:] + x[:25]
def chunk_c761d499(x):
    # rekt
    return x[16:] + x[:16]
def cadd_1af81cdc(x):
    # lmaooo
    return [x[i] + 506742572 for i in range(k)]
def sub_f3b58e44(x):
    # so good
    y = [8202262966, 1101004500, 491962233, 4097611833, 7543913087, 257886432, 2995283388, 3970421081, 2982031724, 3141034986, 6927108291, 487319194, 7030532112, 5649508197, 9234028089, 7186190193, 4191492114, 5672105288, 3332528028, 7707159557, 1525386287, 1192310016, 365981125, 9584608801, 2547718737, 1114648470, 9219621429, 9688963200, 4924129315, 5944551411, 3438526743, 9415287216, 7093936501, 7561717255, 3663565697, 2951155730]
    return [x[i] - y[i] for i in range(k)]
def chadd_cdd2cb99(x):
    # lmaooo
    y = [ord(p) for p in '44d8900c0ceb66886d06792ffeb1083c8419']
    return [x[i] + y[i] for i in range(k)]
def cmul_0faaa6e2(x):
    return [x[i] * 5 for i in range(k)]
def chadd_4d2a9496(x):
    # rekt
    y = [ord(p) for p in '489734febdf0de87565398c5aa0f5eb2bfe0']
    return [x[i] + y[i] for i in range(k)]
def cmul_4691495a(x):
    # the best
    return [x[i] * 6 for i in range(k)]
def chadd_c951759a(x):
    # so good
    y = [ord(p) for p in 'dcdae3c0820ae32a499ce75c57fb6a27f73d']
    return [x[i] + y[i] for i in range(k)]
def mul_a337ba89(x):
    y = [4, 2, 2, 9, 7, 4, 6, 5, 2, 2, 1, 7, 9, 8, 9, 6, 7, 3, 9, 7, 4, 6, 6, 5, 6, 7, 5, 9, 9, 4, 7, 8, 5, 2, 9, 4]
    return [x[i] * y[i] for i in range(k)]
def digsub_0ea92eac(x):
    # rekt
    return [int(str(n)[:1] + ''.join(['7', '4', '3', '9', '0', '8', '1', '6', '5', '2'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_9eddde7b(x):
    # kek
    return [x[p] for p in [29, 8, 20, 26, 1, 17, 27, 14, 11, 32, 0, 16, 30, 3, 28, 4, 2, 21, 33, 19, 31, 13, 12, 18, 24, 5, 15, 25, 22, 23, 6, 34, 10, 9, 35, 7]]
def chadd_3b98f1b0(x):
    # rekt
    y = [ord(p) for p in '560cfd9c6b2b593ac16cce368f5296cd4e0a']
    return [x[i] + y[i] for i in range(k)]
def chmul_e0c73179(x):
    # the best
    y = [ord(p) for p in 'b3e157e8d0ced3f13cef7b112fcd85e9d6ac']
    return [x[i] * y[i] for i in range(k)]
def cadd_bf6aacf5(x):
    return [x[i] + 2379752170 for i in range(k)]
def deck_2c815eca(x):
    return x[13:27] + x[:13] + x[36:] + x[27:36]
def xor_7661c292(x):
    # lmaooo
    y = [1707295738, 1996230156, 3120869299, 7840370286, 575125770, 9229495939, 6098000232, 5128310799, 3152424384, 6959373483, 7849374060, 1071550301, 7683357506, 7664181464, 5968591056, 6712143978, 1166464798, 1197157302, 671538921, 879548311, 9351935352, 384435388, 6156442823, 897850012, 1128752446, 9468455346, 8482721786, 465701194, 66111386, 1250855235, 7337944842, 7630086410, 1398920476, 7306038900, 3956890104, 685249135]
    return [x[i] ^ y[i] for i in range(k)]
def csub_7ae589be(x):
    # evil
    return [x[i] - 6952525038 for i in range(k)]
def add_3a8493e1(x):
    y = [5838067058, 1567515996, 5843556513, 1719065569, 3459826475, 2572040326, 3170861540, 5199892899, 816987802, 1964848753, 6089522896, 547681018, 4052103896, 4624873905, 4047278599, 624409057, 4507726864, 2132107901, 7011774971, 847085614, 6229513361, 8286648355, 5497080793, 1347258385, 6456004504, 8074638751, 2406051484, 2569222605, 1170649950, 8071191461, 1548764457, 8857911121, 1714133267, 6382761129, 205935748, 1991661543]
    return [x[i] + y[i] for i in range(k)]
def chxor_dda862c4(x):
    y = [ord(p) for p in '5cc458d60ad88ced32fc837577217716c681']
    return [x[i] ^ y[i] for i in range(k)]
def xor_29589c28(x):
    y = [9719159935, 8841042043, 3210015269, 2382740925, 3154118793, 3531632393, 6701712677, 8766166638, 762012034, 1138053516, 888881411, 9888916332, 1730702514, 1534273238, 6138591488, 1624705659, 6564950120, 8194574929, 4771014479, 6481425527, 3887124687, 2183132093, 9822442672, 3737319817, 9236369882, 9928972564, 6047198064, 7650038649, 4583019379, 548052288, 7041250202, 1595305474, 7012538011, 8272573256, 8181115895, 2196007885]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_37604f81(x):
    return x[26:] + x[:26]
def csub_e0440f53(x):
    # kek
    return [x[i] - 1888756103 for i in range(k)]
def mul_fcc77ce6(x):
    # lel
    y = [3, 2, 3, 3, 3, 1, 5, 3, 5, 3, 2, 3, 2, 3, 3, 4, 5, 5, 1, 4, 1, 3, 3, 4, 4, 4, 4, 3, 5, 5, 5, 4, 3, 1, 3, 3]
    return [x[i] * y[i] for i in range(k)]
def sub_ef127564(x):
    # lel
    y = [8216568770, 6496664198, 2808724513, 2585863098, 262157010, 5793560345, 4516871165, 7484500423, 3791923119, 9670433707, 9792078054, 250866488, 5759746343, 6721962813, 3036753545, 1222890310, 6636939166, 9087122130, 7668655780, 1908523263, 7158383030, 7120666163, 8518770265, 137072702, 8555019595, 3055850500, 5126225988, 2285827282, 8840031059, 8629656899, 7978163737, 1364655140, 9542233815, 3600459797, 6344594267, 8439400494]
    return [x[i] - y[i] for i in range(k)]
def deck_54b56c32(x):
    # the flag is flag{jk}
    return x[22:27] + x[27:] + x[20:22] + x[:20]
def cmul_38593f30(x):
    return [x[i] * 9 for i in range(k)]
def cmul_513a78aa(x):
    # shiet?
    return [x[i] * 9 for i in range(k)]
def cadd_ed8e4346(x):
    return [x[i] + 1626073209 for i in range(k)]
def chunk_be89d48a(x):
    return x[9:] + x[:9]
def deck_1229ab9b(x):
    # just reverse it
    return x[6:26] + x[:1] + x[1:6] + x[26:]
def chsub_52e6291c(x):
    y = [ord(p) for p in '59de65f720ea141931eb2e81333742c89888']
    return [x[i] - y[i] for i in range(k)]
def cadd_92239d35(x):
    # lel
    return [x[i] + 2429058417 for i in range(k)]
def sub_430d0f4c(x):
    # just reverse it
    y = [3888843278, 2404724620, 5143635365, 3601356698, 6360057876, 6254766826, 4486889064, 9171327457, 428382215, 8179318937, 2425668738, 9778286280, 1732837130, 3940957612, 3477656537, 1757095142, 915991799, 230755850, 9469489123, 5049817014, 5922221645, 843705817, 8381359320, 5048271187, 6470125465, 5233021497, 6520010035, 6499326451, 4657148086, 4224683369, 7838745919, 4051005037, 7080278699, 5539590409, 1948122722, 6967120928]
    return [x[i] - y[i] for i in range(k)]
def add_a45b80f9(x):
    # so good
    y = [9920854752, 4040449939, 2239025492, 9527654327, 7318434692, 8733319616, 7836257949, 7004937010, 9981204791, 4582280438, 6839495429, 6450592838, 5207211257, 1673055608, 1531800808, 2692387458, 3002537328, 8590150001, 317545946, 825703118, 6333078406, 7695382493, 3868985498, 8864184293, 3449812658, 4953577104, 6920241432, 2659178994, 7153196387, 347365121, 9118583489, 9400660557, 7087800545, 5639694556, 8929785631, 2448075550]
    return [x[i] + y[i] for i in range(k)]
def xor_24b008b9(x):
    y = [8082952041, 6333429861, 6664034421, 9439040889, 2971854881, 1395019447, 4886665109, 3785630755, 1646655577, 7963451616, 9099726212, 7502266628, 2188470475, 3859089963, 5912550621, 7972227064, 54596301, 2906513968, 3733004231, 4422328751, 544454894, 1098504969, 9680107869, 224472559, 9019954210, 3737529828, 9725559381, 8903344122, 6041845574, 6805332131, 8666242007, 9124459314, 634191837, 2855202399, 8841494724, 8040539233]
    return [x[i] ^ y[i] for i in range(k)]
def mul_1f240b2b(x):
    y = [1, 1, 3, 3, 4, 3, 2, 4, 3, 3, 1, 2, 4, 2, 1, 1, 3, 1, 4, 4, 3, 3, 2, 4, 4, 1, 3, 2, 2, 1, 4, 2, 1, 1, 2, 4]
    return [x[i] * y[i] for i in range(k)]
def chmul_5fbe910e(x):
    y = [ord(p) for p in '069b9f563cb546c0f62bed3b5ce2d1a51181']
    return [x[i] * y[i] for i in range(k)]
def cmul_c6f9ed4d(x):
    # rekt
    return [x[i] * 7 for i in range(k)]
def deck_01da133e(x):
    # the flag is flag{jk}
    return x[3:9] + x[9:36] + x[:3] + x[36:]
def cxor_f2627c5a(x):
    # kek
    return [x[i] ^ 9818684606 for i in range(k)]
def deck_aa240489(x):
    return x[10:24] + x[24:] + x[:0] + x[0:10]
def chunk_c47f2b0e(x):
    return x[9:] + x[:9]
def cxor_d20accc3(x):
    # evil
    return [x[i] ^ 8339994520 for i in range(k)]
def csub_59e78f82(x):
    return [x[i] - 3588193352 for i in range(k)]
def chsub_3f26a959(x):
    y = [ord(p) for p in '6dba304c5a00ca5f07b59eb7921e620c25f9']
    return [x[i] - y[i] for i in range(k)]
def add_bb11d3eb(x):
    # kek
    y = [5577014347, 2028510845, 5143200946, 4806098840, 7810384401, 9563449611, 1947313852, 6156502965, 7802232856, 4274852448, 2208938636, 1164942716, 7336136866, 1647770205, 8734088836, 9164249376, 6166283182, 8332231393, 823127815, 3434316832, 9944058927, 7643366991, 2262990405, 7287651889, 6421099822, 870672427, 7766942541, 8978229298, 9774865450, 3156536469, 2222209782, 5263202570, 8793664881, 9683042222, 1003352683, 3231006344]
    return [x[i] + y[i] for i in range(k)]
def cxor_6938f43d(x):
    return [x[i] ^ 5296020136 for i in range(k)]
def shuffle_899fbb68(x):
    # shiet?
    return [x[p] for p in [10, 25, 20, 28, 31, 9, 7, 0, 13, 30, 16, 14, 32, 12, 19, 3, 4, 26, 5, 35, 6, 22, 11, 23, 8, 24, 27, 15, 34, 2, 17, 18, 21, 1, 33, 29]]
def add_33350535(x):
    # evil
    y = [4495364555, 1594639456, 9376404853, 7194481012, 8983934447, 7929955604, 6938693679, 2629767006, 1500347221, 7170058156, 9000312410, 8335542578, 582228159, 6653029033, 4556120536, 5166860730, 4348247268, 2529037676, 638109574, 9827695965, 8818475338, 9954484229, 8305933160, 1288889552, 4942890680, 2709283140, 7887062295, 3601699069, 3220686400, 2033309459, 5667738676, 1136075701, 7391028553, 1339929136, 8125866033, 7776587744]
    return [x[i] + y[i] for i in range(k)]
def cxor_28d8fe91(x):
    # kek
    return [x[i] ^ 7126044488 for i in range(k)]
def chunk_594d46bc(x):
    return x[14:] + x[:14]
def xor_92fb1dc0(x):
    # so good
    y = [1945252699, 9345774410, 8489213163, 2815832619, 502256459, 5557965201, 3397506911, 3329387657, 4824222561, 8511628034, 5384607867, 2180010314, 1832087708, 4917148605, 4634525428, 3885561201, 3860748716, 9141086821, 9516063874, 522109476, 6294091993, 2593518706, 1792783990, 7761324681, 7919321544, 5206529870, 2666107266, 8937393403, 3576645838, 5315271782, 8925802199, 972991267, 8902255043, 425681937, 1793747069, 7908808489]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_7948ea7c(x):
    return [x[i] ^ 5095704477 for i in range(k)]
def shuffle_23d41aeb(x):
    # the flag is flag{jk}
    return [x[p] for p in [7, 0, 22, 27, 20, 26, 16, 28, 25, 5, 18, 17, 11, 6, 23, 8, 35, 32, 12, 21, 2, 4, 1, 14, 10, 33, 34, 15, 24, 9, 30, 3, 29, 31, 13, 19]]
def cxor_e4036825(x):
    return [x[i] ^ 8932899520 for i in range(k)]
def cxor_5e014b04(x):
    return [x[i] ^ 6469515723 for i in range(k)]
def csub_0f2dcd11(x):
    # the flag is flag{jk}
    return [x[i] - 6508010612 for i in range(k)]
def shuffle_ce932b10(x):
    return [x[p] for p in [35, 14, 6, 8, 32, 19, 3, 12, 33, 24, 15, 29, 1, 2, 21, 13, 23, 26, 34, 25, 30, 9, 7, 22, 11, 31, 0, 17, 27, 16, 20, 18, 28, 5, 4, 10]]
def add_fb49a21d(x):
    # mucho encrypto
    y = [822738878, 8109181379, 6059128835, 5131983643, 6425298181, 6423548216, 4713995458, 1266524015, 7304425161, 4083911611, 1049985068, 7094076390, 5327763799, 6603159846, 1465369020, 6419956205, 2318534180, 9413857574, 3135676147, 1640700953, 313352428, 9866896786, 4144726373, 6523946399, 9566040278, 8219433399, 2189801355, 2512888894, 5365382202, 6483797658, 8798695943, 9329190936, 6805230974, 4870860288, 6346936645, 272140914]
    return [x[i] + y[i] for i in range(k)]
def chadd_f45b5a3e(x):
    y = [ord(p) for p in '5f7051cc1cf3ff12ddb35262dc4a21555626']
    return [x[i] + y[i] for i in range(k)]
def sub_5525246a(x):
    # mucho encrypto
    y = [7287990091, 7306821407, 8821053182, 6970286718, 6780291457, 4448605546, 3002874852, 2081899492, 9588624338, 2939135560, 8674422211, 5075198282, 7556222785, 3982066885, 6138269664, 9063312943, 7488775747, 3366276263, 7002141168, 543335540, 4526585659, 3365595136, 5418296886, 9049558267, 6909291361, 4471708771, 2812108275, 4954399838, 5497033414, 8324454353, 421619782, 1632515479, 4158120913, 5419182701, 3894486388, 5147025883]
    return [x[i] - y[i] for i in range(k)]
def cadd_61a362c2(x):
    return [x[i] + 4438701983 for i in range(k)]
def deck_37493959(x):
    # mucho encrypto
    return x[:15] + x[15:32] + x[33:] + x[32:33]
def deck_5931c049(x):
    return x[6:6] + x[:6] + x[13:] + x[6:13]
def csub_841d8ee8(x):
    # so good
    return [x[i] - 4702545275 for i in range(k)]
def chunk_4c3d6535(x):
    return x[21:] + x[:21]
def chadd_52f847ab(x):
    y = [ord(p) for p in '8ad0a0c8f97435b2ff91ffa22504ebb02280']
    return [x[i] + y[i] for i in range(k)]
def digsub_93474c70(x):
    return [int(str(n)[:1] + ''.join(['0', '7', '4', '9', '5', '8', '6', '1', '2', '3'][int(p)] for p in str(n)[1:])) for n in x]
def digsub_800f76fb(x):
    return [int(str(n)[:1] + ''.join(['8', '5', '0', '7', '6', '1', '3', '9', '4', '2'][int(p)] for p in str(n)[1:])) for n in x]
def csub_2645ed31(x):
    # evil
    return [x[i] - 8604408825 for i in range(k)]
def cmul_e577eda6(x):
    return [x[i] * 7 for i in range(k)]
def digsub_24f7cbd7(x):
    return [int(str(n)[:1] + ''.join(['3', '7', '9', '8', '4', '0', '2', '1', '6', '5'][int(p)] for p in str(n)[1:])) for n in x]
def csub_1017a6c4(x):
    # rekt
    return [x[i] - 716024980 for i in range(k)]
def cmul_0ee0ce26(x):
    return [x[i] * 3 for i in range(k)]
def cxor_ea36911a(x):
    # the flag is flag{jk}
    return [x[i] ^ 6727058435 for i in range(k)]
def chsub_19dd999e(x):
    y = [ord(p) for p in '42f58f40526e2f48aa1049f0d2218a4dfb8d']
    return [x[i] - y[i] for i in range(k)]
def shuffle_dc2ed635(x):
    return [x[p] for p in [18, 14, 27, 30, 26, 35, 4, 11, 19, 9, 12, 15, 7, 1, 21, 24, 32, 20, 25, 5, 28, 34, 17, 3, 31, 13, 23, 0, 2, 29, 16, 33, 6, 8, 10, 22]]
def cmul_a84df24b(x):
    return [x[i] * 10 for i in range(k)]
def cxor_f5f56306(x):
    # lel
    return [x[i] ^ 3294381646 for i in range(k)]
def xor_ee57e55f(x):
    # the flag is flag{jk}
    y = [7135042465, 1671946846, 7807296168, 3810753243, 4202545357, 6313934551, 5002582634, 254028324, 7108883203, 2316916989, 8205275012, 6827081136, 9026859390, 2657098705, 9594014341, 1563653339, 7962792677, 2376460657, 638084461, 8893957127, 6320008345, 7698421709, 1461305672, 6074470577, 8240189543, 4161290389, 6124060285, 6276343027, 9044318668, 7562609349, 1956173705, 9674131855, 8817282132, 7998449722, 7860488389, 8250113534]
    return [x[i] ^ y[i] for i in range(k)]
def mul_c00416be(x):
    y = [1, 4, 3, 4, 4, 1, 2, 3, 3, 1, 2, 1, 3, 1, 3, 1, 1, 2, 1, 3, 3, 3, 1, 2, 3, 1, 3, 1, 2, 1, 2, 4, 4, 4, 4, 1]
    return [x[i] * y[i] for i in range(k)]
def deck_46c13eea(x):
    # shiet?
    return x[6:16] + x[:6] + x[16:30] + x[30:]
def sub_4e125d47(x):
    y = [9385337420, 8322743980, 108970700, 3525761715, 6096944157, 3560424356, 1532033737, 42445084, 866275764, 8034504092, 2858899891, 3480554516, 236455909, 8282112031, 9069096019, 6850089360, 1059520319, 4382546752, 7875619888, 3849043733, 3188884155, 2123374459, 6347086506, 6216446165, 3216070942, 7027743987, 6803365513, 5645334833, 1616032463, 9252552957, 3251591659, 3795435511, 6799382494, 7361911355, 7347087141, 9643163850]
    return [x[i] - y[i] for i in range(k)]
def chxor_0f3c245c(x):
    y = [ord(p) for p in '691f79118569c5942badd2b27d0f71f7e5f9']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_e4b46665(x):
    # the best
    return [x[i] + 6422642906 for i in range(k)]
def deck_e03b98ab(x):
    # so good
    return x[2:2] + x[:2] + x[2:18] + x[18:]
def cxor_6eff9336(x):
    # lmaooo
    return [x[i] ^ 5544497573 for i in range(k)]
def mul_0b75c488(x):
    # so good
    y = [1, 3, 1, 3, 3, 3, 1, 4, 2, 4, 4, 3, 2, 1, 2, 1, 3, 3, 3, 3, 2, 4, 2, 3, 2, 3, 2, 2, 1, 1, 2, 2, 3, 2, 3, 3]
    return [x[i] * y[i] for i in range(k)]
def cmul_3df83c6a(x):
    return [x[i] * 10 for i in range(k)]
def cxor_19dece1a(x):
    return [x[i] ^ 8798137962 for i in range(k)]
def shuffle_c089e7f9(x):
    # so good
    return [x[p] for p in [5, 1, 18, 8, 12, 9, 6, 0, 27, 13, 16, 17, 26, 25, 23, 7, 33, 24, 14, 22, 15, 19, 31, 2, 29, 30, 10, 20, 4, 32, 3, 35, 21, 11, 34, 28]]
def sub_134957ec(x):
    y = [2361391196, 9142815689, 3024774840, 5270779711, 1510758982, 4242221781, 3918980256, 554508970, 1020546245, 1180774989, 547551675, 2485556774, 5970319020, 587730524, 1835044107, 9725597664, 5386074593, 6965242926, 2800586009, 1356983960, 9123495038, 8106844103, 8812143914, 7301119649, 9460272583, 7502447459, 9030057372, 7525251752, 7861781090, 3102348836, 7968965801, 555173446, 7328526287, 4395893532, 1973618487, 2987401045]
    return [x[i] - y[i] for i in range(k)]
def digsub_19a384d0(x):
    # the best
    return [int(str(n)[:1] + ''.join(['3', '4', '0', '6', '1', '7', '8', '2', '9', '5'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_a0ab0dc2(x):
    # mucho encrypto
    return [x[i] * 6 for i in range(k)]
def chsub_62a8f1cd(x):
    # the best
    y = [ord(p) for p in '70ccc21018b5f35977b91c7cd66473507538']
    return [x[i] - y[i] for i in range(k)]
def cadd_66bcc5a2(x):
    return [x[i] + 3731865368 for i in range(k)]
def cadd_991ec901(x):
    return [x[i] + 3107862546 for i in range(k)]
def mul_652ee2e0(x):
    y = [4, 2, 4, 3, 4, 2, 2, 4, 5, 4, 7, 2, 1, 5, 6, 7, 5, 6, 7, 7, 2, 3, 3, 7, 1, 3, 3, 4, 1, 6, 7, 2, 7, 5, 2, 3]
    return [x[i] * y[i] for i in range(k)]
def chadd_bfbcfbbe(x):
    y = [ord(p) for p in '348e746444be34d6da71aa108c9cb7ddf4cc']
    return [x[i] + y[i] for i in range(k)]
def shuffle_e4527971(x):
    return [x[p] for p in [31, 6, 10, 2, 17, 24, 14, 26, 23, 11, 15, 4, 29, 7, 25, 19, 1, 12, 16, 20, 27, 30, 28, 33, 3, 8, 0, 5, 34, 13, 32, 22, 18, 9, 21, 35]]
def chunk_b62eda1a(x):
    return x[13:] + x[:13]
def chxor_49e5796a(x):
    y = [ord(p) for p in '201ef097a36bc514aad3a586ca7b23a09498']
    return [x[i] ^ y[i] for i in range(k)]
def add_4d5b7dd8(x):
    # kek
    y = [1882839651, 2010525350, 244772179, 5298566541, 7900941426, 1542817250, 6565862590, 3800192038, 1938859120, 8981054216, 6548419542, 8431116951, 1549270239, 3373690454, 2628226174, 9353276202, 1111738171, 5946336032, 2424290218, 1657918780, 1400154565, 5850635276, 2448465572, 5798098595, 1364918811, 2596466851, 521260998, 5862374193, 8990852653, 1500101592, 59925108, 3180479335, 8902926422, 6212939072, 4677987552, 3918483950]
    return [x[i] + y[i] for i in range(k)]
def mul_a0ace443(x):
    # evil
    y = [7, 5, 10, 9, 5, 9, 9, 1, 10, 10, 8, 10, 8, 6, 1, 7, 4, 4, 9, 1, 5, 9, 10, 10, 6, 3, 1, 9, 6, 8, 10, 9, 3, 3, 8, 7]
    return [x[i] * y[i] for i in range(k)]
def deck_cc792b32(x):
    return x[4:11] + x[2:4] + x[:2] + x[11:]
def cadd_7bfaa07b(x):
    return [x[i] + 5311575848 for i in range(k)]
def cmul_06a971d4(x):
    # evil
    return [x[i] * 7 for i in range(k)]
def sub_00c9af82(x):
    y = [8008210626, 6032184068, 3314586998, 2217197472, 2255716491, 1073301773, 2755034001, 354478500, 6344050034, 5406775531, 1763802212, 8644374489, 9034906063, 6707588265, 9577140629, 4660810894, 7586426989, 8251669039, 879193165, 3100877505, 5574865326, 1508158269, 6764935697, 6657987082, 9035754994, 6961268788, 9038399476, 9980913528, 575285620, 398864389, 3279194425, 7295129872, 4658018126, 4500157249, 1369254003, 355417881]
    return [x[i] - y[i] for i in range(k)]
def cadd_e856ecc9(x):
    # the best
    return [x[i] + 6241677662 for i in range(k)]
def chxor_9b4a8975(x):
    y = [ord(p) for p in '80101de36d8f6f703ee490aaa83ac08ed932']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_42438acb(x):
    # encryption
    y = [ord(p) for p in '9bf57e564504bca6ce09126b571da3317d68']
    return [x[i] ^ y[i] for i in range(k)]
def deck_65c64a2d(x):
    # shiet?
    return x[2:6] + x[6:34] + x[34:] + x[:2]
def chunk_cbcd0993(x):
    # kek
    return x[9:] + x[:9]
def shuffle_72671ce6(x):
    return [x[p] for p in [16, 10, 6, 2, 32, 26, 11, 30, 27, 3, 34, 25, 13, 12, 15, 21, 24, 8, 9, 14, 19, 35, 23, 1, 31, 17, 33, 7, 5, 29, 28, 4, 20, 0, 22, 18]]
def chunk_0591e3c5(x):
    return x[20:] + x[:20]
def cmul_a00c082c(x):
    # the flag is flag{jk}
    return [x[i] * 3 for i in range(k)]
def mul_1e5ed056(x):
    y = [4, 4, 2, 6, 1, 6, 5, 6, 1, 5, 5, 2, 5, 1, 4, 3, 6, 6, 1, 2, 5, 3, 6, 2, 5, 2, 3, 2, 6, 5, 4, 6, 6, 1, 6, 1]
    return [x[i] * y[i] for i in range(k)]
def xor_8da999ff(x):
    y = [6806409783, 5094685962, 4817103069, 8494674186, 1192384995, 7606163044, 6960579575, 43246706, 8256122928, 6226633188, 7734111093, 6331680640, 6190042506, 9785113926, 2358450257, 2121234422, 7653229209, 6380537166, 4652574957, 6771145970, 1266452865, 8092520038, 9178807680, 6918060240, 4279210847, 825095220, 5939883086, 8249700728, 2625706389, 1326917117, 1031344842, 5771798980, 2250776581, 5846116828, 5845004782, 722096352]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_8fdd15ff(x):
    # encryption
    y = [ord(p) for p in 'ef7f6546f244778b847cd011a538247d9038']
    return [x[i] * y[i] for i in range(k)]
def chunk_31411086(x):
    # shiet?
    return x[35:] + x[:35]
def shuffle_7ccfcf66(x):
    # kek
    return [x[p] for p in [23, 30, 19, 21, 5, 28, 1, 34, 26, 15, 20, 0, 13, 35, 6, 33, 16, 32, 8, 11, 7, 4, 14, 24, 10, 29, 3, 25, 17, 12, 27, 18, 22, 9, 31, 2]]
def chxor_a84644b1(x):
    # kek
    y = [ord(p) for p in '6c47b8c76e403df3c5facd11af3d332bdb8d']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_de4afce0(x):
    return [x[p] for p in [10, 17, 20, 28, 34, 15, 22, 2, 24, 27, 33, 9, 18, 8, 7, 5, 0, 16, 11, 32, 31, 25, 12, 19, 13, 35, 23, 21, 30, 14, 26, 4, 6, 1, 3, 29]]
def cxor_51d9f2ee(x):
    return [x[i] ^ 9152877309 for i in range(k)]
def digsub_7638ee12(x):
    # mucho encrypto
    return [int(str(n)[:1] + ''.join(['6', '1', '0', '5', '8', '2', '4', '3', '9', '7'][int(p)] for p in str(n)[1:])) for n in x]
def add_bc200f67(x):
    # so good
    y = [8835166862, 2955567081, 1133289350, 917759077, 571292651, 4238406639, 742429283, 2854110297, 1668303882, 2356594972, 4511457766, 1433143291, 3534462618, 7294427763, 6570847648, 6391865483, 391667609, 303011218, 7750571247, 6763226548, 1636439297, 475515531, 7169193625, 8716213584, 4504368946, 2715240966, 9955879219, 5984201785, 5672700559, 231038334, 2548561852, 6316958934, 871850528, 7467764007, 6892580884, 839097751]
    return [x[i] + y[i] for i in range(k)]
def xor_6495a383(x):
    y = [6081932324, 8453429489, 9465243355, 342518836, 1227285820, 2270107211, 9282253916, 5588461285, 7773797768, 7514509159, 9340579770, 7321129201, 4845866471, 6097539112, 5475261906, 1790190596, 7548593756, 8006143383, 499710854, 6433069768, 8669285742, 4697250894, 8605810071, 7682396735, 3076047378, 3360356537, 4122682356, 9024562783, 8373680864, 117886606, 4414180568, 4431810834, 9733792416, 3822224642, 2670796274, 8755147421]
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_54e93000(x):
    return [x[p] for p in [13, 33, 32, 35, 21, 3, 17, 4, 10, 15, 26, 20, 19, 34, 18, 16, 25, 30, 7, 6, 23, 24, 28, 0, 14, 9, 29, 11, 12, 8, 1, 22, 31, 5, 2, 27]]
def add_fee2762f(x):
    y = [6574529152, 5969033007, 1114283696, 9562965377, 5618145813, 9560834996, 1127672811, 3249609434, 9657196189, 4920124015, 1233213996, 9901476321, 4439261900, 7800393793, 5538607884, 3549859907, 2620534641, 1814499658, 4123921812, 4215634297, 9367803018, 4181148769, 6348028591, 6552496521, 1909686975, 6429218634, 3286315893, 8844947448, 3351579123, 8460780462, 4727293144, 8734348659, 7640842504, 7818753045, 3937623892, 1736269603]
    return [x[i] + y[i] for i in range(k)]
def chxor_b9b02bcc(x):
    y = [ord(p) for p in 'd4b691f1e17fd195a96396c7f843138f14e6']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_ad9ae418(x):
    return [x[i] ^ 9057308316 for i in range(k)]
def add_decb86a7(x):
    # the best
    y = [8418427541, 4052647282, 8984441409, 3133244706, 3583462794, 5635513297, 9783513968, 288097663, 5261096848, 1277381093, 2083223362, 4277938530, 5984830987, 9976621559, 3411895089, 1036508804, 7686558861, 7124974913, 2514603840, 712575039, 9566083406, 3922370027, 5741206311, 210323480, 6861012809, 7541373829, 8517112230, 5887043915, 8097733802, 4390274758, 9751769362, 5946223765, 6459360272, 3905473280, 2014756798, 8772862106]
    return [x[i] + y[i] for i in range(k)]
def add_a5b30fdf(x):
    # the best
    y = [1744494300, 8025312150, 1056870455, 79807473, 3593116646, 1810039300, 8205676350, 6185562911, 1807869180, 277806350, 9585488356, 3390114872, 5021011848, 7254056719, 1403724439, 3747404155, 5362834621, 1968485654, 9650133681, 5949584639, 3300859589, 2991917222, 2307819334, 4329604128, 9355105072, 6405021020, 9360180049, 675198222, 6790895259, 1231356474, 5416559551, 4889313474, 8439156803, 2746317256, 9625930167, 6553185399]
    return [x[i] + y[i] for i in range(k)]
def digsub_c09c7211(x):
    return [int(str(n)[:1] + ''.join(['6', '2', '7', '3', '5', '9', '4', '8', '0', '1'][int(p)] for p in str(n)[1:])) for n in x]
def add_306b249b(x):
    y = [2354569415, 5105969752, 7986756755, 846006799, 797632372, 2396879839, 7161020283, 1283749160, 4369455678, 4729740177, 4539837055, 8028728199, 7772716082, 7774354904, 2733582807, 9055877123, 6515753116, 5601597378, 7944003608, 3923106958, 9241023009, 5139929246, 3338416945, 136468422, 7744540383, 7144572829, 9774520637, 1431735851, 6123902963, 1365171281, 7066996443, 5961261902, 6221870698, 8200057260, 9970291602, 5849733583]
    return [x[i] + y[i] for i in range(k)]
def chxor_6c6e06b4(x):
    # rekt
    y = [ord(p) for p in '3bc5a0869917c3ca715536a3150187352d1c']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_84a750a8(x):
    return x[33:] + x[:33]
def xor_9a3a96a8(x):
    y = [6514920996, 6710870525, 567836061, 7758003660, 3871661580, 1125569689, 7174067224, 1460502720, 9909077878, 1440504434, 8027722048, 4690768743, 7379843730, 4348033725, 7829238551, 6081372904, 5761597010, 7264116851, 4616884876, 3637960633, 8454659450, 8592987245, 6369836892, 9619484420, 1778102256, 1136898867, 4939623517, 2704063819, 8947859439, 3359206379, 8146521416, 6439237082, 8985530396, 4288164669, 2871274973, 2693027007]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_1ee9c5e9(x):
    y = [ord(p) for p in 'bab558ce5254137981add9f42f0977696855']
    return [x[i] - y[i] for i in range(k)]
def chxor_041a698a(x):
    # lmaooo
    y = [ord(p) for p in '699d73228d8c4ab9544f482ec615801ad820']
    return [x[i] ^ y[i] for i in range(k)]
def mul_3dd9a13e(x):
    y = [4, 2, 1, 6, 5, 1, 1, 5, 6, 6, 1, 3, 3, 2, 5, 1, 2, 6, 6, 5, 3, 1, 4, 2, 6, 4, 2, 3, 6, 5, 6, 4, 4, 5, 1, 1]
    return [x[i] * y[i] for i in range(k)]
def cxor_86de55f2(x):
    return [x[i] ^ 6396386291 for i in range(k)]
def cmul_91c63a57(x):
    return [x[i] * 4 for i in range(k)]
def shuffle_49d97f75(x):
    return [x[p] for p in [16, 29, 22, 7, 20, 6, 35, 32, 15, 2, 17, 5, 23, 31, 4, 18, 25, 26, 13, 24, 10, 21, 12, 19, 8, 14, 33, 9, 28, 30, 3, 34, 0, 27, 1, 11]]
def mul_84ac318e(x):
    y = [3, 4, 1, 4, 2, 3, 3, 3, 2, 3, 4, 1, 3, 1, 1, 3, 2, 4, 4, 1, 3, 3, 2, 2, 3, 3, 2, 4, 4, 3, 2, 3, 4, 2, 1, 4]
    return [x[i] * y[i] for i in range(k)]
def cadd_838fe20a(x):
    return [x[i] + 9756856717 for i in range(k)]
def chmul_b8a4da05(x):
    y = [ord(p) for p in '7b17d0f7448b72f49d5a9f2917f263e945f1']
    return [x[i] * y[i] for i in range(k)]
def shuffle_fda70d35(x):
    # kek
    return [x[p] for p in [23, 19, 14, 6, 22, 35, 13, 29, 25, 15, 2, 16, 27, 5, 31, 20, 11, 30, 4, 9, 3, 24, 7, 17, 10, 18, 33, 26, 34, 12, 32, 8, 21, 0, 28, 1]]
def chunk_bf78a71f(x):
    return x[22:] + x[:22]
def cmul_b759583b(x):
    return [x[i] * 9 for i in range(k)]
def chsub_99c9e6ed(x):
    # just reverse it
    y = [ord(p) for p in 'c0335805b337a4fe5dbe328ad07e75148a0f']
    return [x[i] - y[i] for i in range(k)]
def add_b1383cfb(x):
    # just reverse it
    y = [6327326363, 2759277778, 6160013207, 2212273701, 5826814385, 538071538, 4922820915, 6847055978, 1041014795, 1265424476, 2434254781, 8414516762, 2327885333, 6439820907, 7531013623, 4159717855, 628091938, 6861990273, 2650540799, 1227129178, 7955348134, 8939915464, 228680539, 1470357834, 1315418760, 2687096288, 6369749105, 2580889819, 6241757395, 6503053971, 627362168, 8365997974, 1295097015, 7593720499, 9029944325, 2312339678]
    return [x[i] + y[i] for i in range(k)]
def cxor_13669885(x):
    return [x[i] ^ 2143028198 for i in range(k)]
def add_6e9d979e(x):
    # lmaooo
    y = [1966608702, 7779776990, 1666779169, 6792550031, 4509780616, 5370026323, 3386329577, 1515670252, 2555585183, 524159714, 5203579317, 8195192214, 4087254014, 4927949886, 1246861748, 8412945998, 157730947, 1562294656, 5431762791, 2545704052, 884629333, 7230903984, 3362509483, 8639139191, 6230114880, 6153415382, 7834827696, 1654809963, 6346590247, 9736088214, 3982901194, 3852894401, 609860321, 6813398141, 3162942259, 1295349296]
    return [x[i] + y[i] for i in range(k)]
def chxor_3dd86e1b(x):
    # evil
    y = [ord(p) for p in 'c57fce08249236f89038e9b3659eb38c50c8']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_77349f1c(x):
    y = [ord(p) for p in 'ef26ac852a1dad967fb82bba49b0c322964b']
    return [x[i] * y[i] for i in range(k)]
def chxor_ae76ed5a(x):
    # the best
    y = [ord(p) for p in '93eaa238140cf9160e1c7bf6f3b2e211961a']
    return [x[i] ^ y[i] for i in range(k)]
def chsub_70e4436e(x):
    y = [ord(p) for p in '0b7312589e6234f8dcb63dee0b965d1a0e63']
    return [x[i] - y[i] for i in range(k)]
def xor_23d58644(x):
    y = [3994125028, 8651489204, 5304534791, 9505253073, 593815405, 3434246401, 7308185863, 4813472974, 9930123209, 2511810469, 9992683017, 3138536470, 9619548190, 9764498234, 6817316550, 2638500220, 3279263815, 9850961200, 2723882012, 4480639325, 3591822772, 6665571292, 9380190654, 9076021154, 1659133979, 3959509104, 4998287238, 8387323691, 7151178200, 2026911939, 560895521, 1647315195, 1991208829, 5027822580, 413560461, 3420842234]
    return [x[i] ^ y[i] for i in range(k)]
def add_4db6bc88(x):
    # shiet?
    y = [8371672105, 4533432187, 2812632865, 2174970726, 5177768856, 7533879792, 5769161176, 5468709734, 2673258712, 5695688189, 414118198, 2331822579, 7902624103, 3788185683, 9560936608, 97675277, 2882929495, 3739397504, 9598419323, 6661260469, 5130206416, 245035869, 8044708269, 6230185505, 1388456378, 7930968492, 6820509515, 1560182050, 653097267, 1070005664, 8852291572, 8112586918, 3907395286, 794151097, 4995865121, 2132941342]
    return [x[i] + y[i] for i in range(k)]
def shuffle_ee25c5d7(x):
    return [x[p] for p in [8, 26, 1, 20, 19, 28, 24, 34, 31, 22, 16, 14, 13, 12, 27, 30, 11, 25, 18, 15, 9, 5, 0, 21, 7, 2, 32, 23, 3, 33, 10, 17, 35, 6, 4, 29]]
def digsub_1f1582a8(x):
    return [int(str(n)[:1] + ''.join(['9', '1', '5', '3', '4', '0', '8', '7', '6', '2'][int(p)] for p in str(n)[1:])) for n in x]
def cxor_2eec2815(x):
    return [x[i] ^ 7732742157 for i in range(k)]
def chxor_9f1b55f6(x):
    # shiet?
    y = [ord(p) for p in '4dc58c8c9c3135ccaba90c58d617052c7b56']
    return [x[i] ^ y[i] for i in range(k)]
def add_bd22edc2(x):
    y = [5623995873, 7237832089, 3555499867, 241055987, 3985807415, 9587895273, 6965364241, 3075059016, 9844430438, 6273023394, 2775614312, 1213331135, 771180642, 5544522710, 8256184382, 4072040765, 6783534758, 4135721650, 8844961831, 9126719225, 7971632537, 4435600192, 4953515370, 6793324348, 9290909432, 4222024310, 8757893776, 2801467214, 59706978, 4250481011, 2263071666, 3941504815, 57228831, 414647014, 818039213, 3080196995]
    return [x[i] + y[i] for i in range(k)]
def cxor_3addab66(x):
    return [x[i] ^ 8263766351 for i in range(k)]
def shuffle_c5cb30a9(x):
    return [x[p] for p in [22, 13, 34, 1, 15, 20, 5, 7, 32, 26, 3, 31, 6, 21, 17, 30, 12, 11, 8, 27, 0, 4, 25, 23, 9, 33, 16, 2, 18, 29, 19, 10, 28, 14, 35, 24]]
def csub_717c9f99(x):
    return [x[i] - 4302280178 for i in range(k)]
def deck_dc5f05c0(x):
    return x[1:27] + x[:1] + x[27:33] + x[33:]
def sub_8d22e619(x):
    # shiet?
    y = [429858705, 4505281565, 4984238992, 876196644, 5821582319, 4577166770, 8815567377, 930087285, 4223120701, 1071992195, 5366803713, 8497046327, 2556466475, 2590634207, 2579776074, 5759378656, 4668411067, 4811575257, 2440458567, 5612775601, 7654926406, 1431067488, 2160350437, 2050624051, 8394131805, 4164769922, 6735422883, 7192060311, 4421049424, 8996309495, 7680145155, 7444053972, 9894815330, 3493971583, 8553399399, 570446641]
    return [x[i] - y[i] for i in range(k)]
def xor_e994fa9c(x):
    # shiet?
    y = [3793106586, 4602448180, 9564792398, 701290269, 2413177878, 569532114, 4107799729, 9418211600, 7755387242, 2554419067, 8701870418, 6883862049, 6598490117, 9858111719, 9147630910, 9820917475, 3255151090, 3788934225, 686247142, 5324587438, 5214938401, 855310529, 9550991608, 9612682915, 7624407502, 7953202648, 1883923909, 4882446024, 4671231861, 7507534777, 7905368452, 13991935, 1911517833, 8741752442, 6399473871, 4317945766]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_0c3b8e79(x):
    y = [ord(p) for p in 'd46d427497f51d1a96f486862c211da6b23c']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_b97315dd(x):
    # mucho encrypto
    y = [ord(p) for p in 'cb5d0cf564a499294dfbb079740912a59b22']
    return [x[i] + y[i] for i in range(k)]
def chsub_e87a1297(x):
    y = [ord(p) for p in 'd7313ca7e1d6e82cfc98abd79ad16989f047']
    return [x[i] - y[i] for i in range(k)]
def sub_bbf06d64(x):
    # just reverse it
    y = [2650220171, 8035875140, 225534399, 7374117531, 4062486193, 8850617761, 1583628798, 8545894875, 9627261522, 73113547, 4030438098, 9165526662, 3288055167, 2325032208, 9444643029, 1199231408, 6262667435, 4289861031, 2307240192, 834189024, 4652829219, 8842179192, 4509847999, 8320269395, 4136799633, 4323359177, 1452296457, 9211746047, 7171356418, 2067957083, 9908700266, 4295968031, 1206298140, 9770875519, 8891598521, 9321503065]
    return [x[i] - y[i] for i in range(k)]
def chmul_0b2874b7(x):
    y = [ord(p) for p in 'e3647e798d266bb67fd40a773741e7b50817']
    return [x[i] * y[i] for i in range(k)]
def chunk_ba9920ce(x):
    return x[31:] + x[:31]
def deck_9aad47ed(x):
    return x[15:31] + x[1:15] + x[31:] + x[:1]
def chsub_e30c03a4(x):
    # lmaooo
    y = [ord(p) for p in 'b4cf9e4839b8235183256e370c182be05758']
    return [x[i] - y[i] for i in range(k)]
def cadd_d08b740c(x):
    # encryption
    return [x[i] + 9195550368 for i in range(k)]
def chsub_ef4867dc(x):
    y = [ord(p) for p in '9986c8cc7619d3f75a03731e9487866b0920']
    return [x[i] - y[i] for i in range(k)]
def chxor_b82fad32(x):
    # so good
    y = [ord(p) for p in 'daf3e8576ec0dd8aefc6feb7601f4cdba5a1']
    return [x[i] ^ y[i] for i in range(k)]
def mul_959ccef4(x):
    # lmaooo
    y = [5, 3, 4, 5, 2, 1, 3, 1, 1, 5, 5, 3, 1, 2, 4, 2, 3, 2, 3, 5, 1, 4, 5, 5, 1, 4, 5, 2, 1, 5, 5, 1, 5, 3, 1, 3]
    return [x[i] * y[i] for i in range(k)]
def chadd_00e2dbca(x):
    # the best
    y = [ord(p) for p in 'eb2d6a72a374026cb2b11adae7ab86ba5e57']
    return [x[i] + y[i] for i in range(k)]
def cxor_9a341cfa(x):
    return [x[i] ^ 1486464870 for i in range(k)]
def shuffle_2a77ed9b(x):
    return [x[p] for p in [31, 19, 22, 14, 10, 13, 21, 28, 5, 0, 20, 16, 11, 32, 7, 4, 9, 24, 6, 30, 8, 33, 23, 34, 18, 26, 27, 12, 17, 29, 2, 1, 3, 15, 35, 25]]
def add_79292e38(x):
    # shiet?
    y = [2687443556, 4410459716, 7378423765, 4595160894, 4275218373, 3640264287, 9037696435, 3434369616, 8543865894, 3931648724, 3412995605, 68331027, 1280804785, 8248371350, 8672786219, 2583311291, 9448567452, 5200003068, 7084369525, 6731597774, 9556532184, 5482282818, 6387689015, 4826541419, 6896367062, 2132049753, 9964337090, 6801065587, 6405860078, 6515082306, 3989559881, 2103849806, 8829963196, 4051161879, 7662287686, 9723057530]
    return [x[i] + y[i] for i in range(k)]
def chunk_5f5b8349(x):
    return x[35:] + x[:35]
def chunk_dbc6d3a2(x):
    # lmaooo
    return x[6:] + x[:6]
def chsub_6ee60616(x):
    y = [ord(p) for p in 'bbf80304008fdb49148c869359af81c88660']
    return [x[i] - y[i] for i in range(k)]
def shuffle_7813ad6f(x):
    return [x[p] for p in [13, 35, 9, 27, 28, 19, 2, 20, 3, 23, 8, 22, 0, 34, 6, 29, 32, 1, 14, 31, 21, 12, 5, 24, 26, 15, 17, 10, 7, 30, 11, 4, 25, 18, 33, 16]]
def chunk_93ca5889(x):
    # the flag is flag{jk}
    return x[3:] + x[:3]
def chsub_37756695(x):
    y = [ord(p) for p in 'd12ae1c8c389273b82f0d723efa0f08f3f66']
    return [x[i] - y[i] for i in range(k)]
def digsub_f2743d63(x):
    return [int(str(n)[:1] + ''.join(['3', '5', '9', '2', '1', '7', '6', '0', '8', '4'][int(p)] for p in str(n)[1:])) for n in x]
def chadd_36010571(x):
    y = [ord(p) for p in '90a724c228172fa7d34714d2fc56dcebbc6e']
    return [x[i] + y[i] for i in range(k)]
def mul_0b942967(x):
    y = [5, 3, 4, 4, 2, 3, 3, 8, 7, 6, 1, 8, 2, 6, 10, 4, 5, 10, 7, 4, 2, 7, 8, 1, 2, 10, 7, 5, 4, 7, 6, 7, 5, 9, 4, 2]
    return [x[i] * y[i] for i in range(k)]
def xor_722e91a8(x):
    y = [4333080549, 4800242819, 7226214512, 9776981484, 4075163830, 7098869360, 173806902, 1118603031, 1127290248, 8985998422, 9258249752, 12227978, 3709329489, 1098753129, 625152571, 671640513, 3191000540, 8279440741, 3986116388, 2893576804, 8031640481, 9091999738, 5350759012, 8343584833, 5149550016, 3029004138, 3699638670, 4799068949, 4727071065, 1707930941, 1763503709, 8461633375, 6202189115, 7146275983, 9919285740, 2417162408]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_fa709b53(x):
    y = [ord(p) for p in 'ecb9ccd31faf056ad352f3aad3afeb5bf815']
    return [x[i] - y[i] for i in range(k)]
def cmul_89d225a2(x):
    # encryption
    return [x[i] * 9 for i in range(k)]
def cmul_dd8d739c(x):
    return [x[i] * 6 for i in range(k)]
def digsub_8599b0c1(x):
    return [int(str(n)[:1] + ''.join(['1', '7', '0', '9', '6', '3', '8', '2', '5', '4'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_ff24f1b5(x):
    # so good
    return [x[i] * 9 for i in range(k)]
def chmul_5b21f3a5(x):
    y = [ord(p) for p in 'ad8e99caec4ecd1c6a31965f07fbe14663a7']
    return [x[i] * y[i] for i in range(k)]
def digsub_574e8941(x):
    return [int(str(n)[:1] + ''.join(['4', '2', '6', '8', '5', '0', '1', '3', '9', '7'][int(p)] for p in str(n)[1:])) for n in x]
def chunk_0e1a47db(x):
    # lmaooo
    return x[19:] + x[:19]
def chsub_e0a5b7b9(x):
    # encryption
    y = [ord(p) for p in '111df3f216bc927adbbadfb4733bedd5d582']
    return [x[i] - y[i] for i in range(k)]
def sub_0c6430ff(x):
    y = [7279026610, 2907045670, 6787653585, 2129910190, 8257688004, 8289533678, 2500105106, 5961556248, 6682102068, 2938330607, 4183004146, 453109777, 4018508887, 4765900937, 4676397045, 9358050702, 1189471180, 4492452721, 3777136487, 2800100079, 8232377973, 1224056269, 6927553270, 5317666479, 3926398534, 3237964410, 3559678101, 352084263, 1671743198, 7867666795, 9853342724, 9369857883, 3263750008, 7129435419, 4903528498, 5262444522]
    return [x[i] - y[i] for i in range(k)]
def cadd_7db59ff9(x):
    return [x[i] + 7645418911 for i in range(k)]
def cmul_9a7d5570(x):
    return [x[i] * 10 for i in range(k)]
def chxor_87ec1ab5(x):
    y = [ord(p) for p in 'f572cd870c31c9bb883157f617cd274e051d']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_cabb8b44(x):
    return [x[i] * 7 for i in range(k)]
def chxor_da22b4fb(x):
    y = [ord(p) for p in 'f7594844943104d00f29026328cea347e322']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_160cacb0(x):
    y = [ord(p) for p in '071be638ac7901ab16b129f27f75b58974a3']
    return [x[i] * y[i] for i in range(k)]
def shuffle_c433a286(x):
    return [x[p] for p in [1, 5, 7, 23, 33, 19, 14, 30, 25, 35, 16, 8, 13, 32, 10, 15, 22, 31, 18, 34, 17, 3, 21, 12, 4, 9, 29, 24, 27, 28, 2, 0, 20, 6, 11, 26]]
def chmul_ab23c18c(x):
    y = [ord(p) for p in 'e2cb246e0ffac6394c27a2eb98c74d466396']
    return [x[i] * y[i] for i in range(k)]
def chsub_f75e24ea(x):
    y = [ord(p) for p in '47b5ff199811f08175b5a23ac8cf4cc772ad']
    return [x[i] - y[i] for i in range(k)]
def cmul_db96fc2e(x):
    return [x[i] * 9 for i in range(k)]
def deck_b64cb7f7(x):
    # rekt
    return x[32:] + x[27:32] + x[14:27] + x[:14]
def digsub_ec34bd78(x):
    # lel
    return [int(str(n)[:1] + ''.join(['5', '7', '1', '6', '2', '9', '4', '3', '0', '8'][int(p)] for p in str(n)[1:])) for n in x]
def chadd_b07351e2(x):
    # shiet?
    y = [ord(p) for p in '7240285201389d9c7d04924a6a42196b7bd5']
    return [x[i] + y[i] for i in range(k)]
def chsub_1b8086f6(x):
    # lmaooo
    y = [ord(p) for p in '2d6bf652ab39b6c17f896ccd8b4b3a2e33da']
    return [x[i] - y[i] for i in range(k)]
def sub_c2ba5275(x):
    y = [8159823412, 1929995400, 9758268279, 4702759403, 3337437645, 2218016761, 6085055113, 7221438947, 5568624215, 455912599, 3890730370, 6525991023, 7973795057, 9929767200, 4220386847, 6558609541, 9040841829, 5990767367, 5750776236, 6121262629, 1857941326, 7007071360, 4619997316, 126978450, 249485432, 3337172848, 8355187832, 2803878523, 1068019943, 4549556528, 7691008169, 1485441450, 3561862817, 3656900886, 2698200679, 3671852135]
    return [x[i] - y[i] for i in range(k)]
def digsub_ee67309b(x):
    # shiet?
    return [int(str(n)[:1] + ''.join(['9', '4', '3', '5', '0', '6', '2', '7', '8', '1'][int(p)] for p in str(n)[1:])) for n in x]
def digsub_80e4e5c7(x):
    # kek
    return [int(str(n)[:1] + ''.join(['9', '4', '0', '1', '6', '2', '8', '5', '3', '7'][int(p)] for p in str(n)[1:])) for n in x]
def chadd_42bbf689(x):
    y = [ord(p) for p in '73e58491c6af97ea92b0e9be10558e65e294']
    return [x[i] + y[i] for i in range(k)]
def chxor_e5000f9b(x):
    # rekt
    y = [ord(p) for p in 'f0baa2c2dcf24fdd4106ff029e74342f0d00']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_c33c08d6(x):
    y = [ord(p) for p in '9d6746171c97a9a2c10d6c133da3eebe512a']
    return [x[i] + y[i] for i in range(k)]
def cadd_63b5febd(x):
    # rekt
    return [x[i] + 9181661196 for i in range(k)]
def chsub_74365a3a(x):
    # kek
    y = [ord(p) for p in '07ab02caae830e4c8b27ed4e10dc661a9faa']
    return [x[i] - y[i] for i in range(k)]
def deck_85b0b331(x):
    # shiet?
    return x[31:] + x[:17] + x[24:31] + x[17:24]
def chmul_fc1bd11c(x):
    # the best
    y = [ord(p) for p in '9de205006e6c7a5d3f08faade21723e6f7b0']
    return [x[i] * y[i] for i in range(k)]
def mul_77c55019(x):
    y = [2, 1, 3, 1, 1, 1, 1, 3, 2, 2, 1, 3, 3, 2, 1, 2, 2, 1, 1, 1, 3, 2, 1, 1, 3, 2, 3, 1, 3, 3, 2, 2, 2, 2, 3, 3]
    return [x[i] * y[i] for i in range(k)]
def deck_dba2e5fa(x):
    return x[22:31] + x[15:22] + x[:15] + x[31:]
def chxor_616b9569(x):
    y = [ord(p) for p in '516705278b3cb3e40a6407963c9a6194cf63']
    return [x[i] ^ y[i] for i in range(k)]
def digsub_3ff40549(x):
    # encryption
    return [int(str(n)[:1] + ''.join(['6', '4', '5', '3', '0', '1', '2', '9', '8', '7'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_e55c9291(x):
    return [x[i] * 5 for i in range(k)]
def shuffle_358e16be(x):
    # so good
    return [x[p] for p in [23, 11, 9, 15, 3, 14, 16, 22, 35, 1, 13, 29, 0, 12, 17, 26, 8, 5, 10, 30, 32, 7, 20, 31, 24, 4, 2, 19, 25, 21, 33, 6, 18, 34, 27, 28]]
def chadd_ac9d1de7(x):
    y = [ord(p) for p in '572d70032ff7055887a468c4887fe50a706e']
    return [x[i] + y[i] for i in range(k)]
def sub_d45b504c(x):
    # shiet?
    y = [8296958924, 3609781380, 7733140788, 2720508102, 5699581765, 5779344975, 1006269252, 1817262867, 4218269173, 6441336690, 840579508, 9821920636, 9374660512, 296577771, 921075802, 901140660, 1668789296, 3724741970, 2500887401, 6800310756, 80293396, 6897508520, 4787835775, 8643327593, 6825140626, 3538494242, 9407558343, 3342240678, 7473664523, 4882363970, 5194712246, 4115076152, 9928435333, 1717843118, 9845923522, 6493606922]
    return [x[i] - y[i] for i in range(k)]
def xor_90c0a051(x):
    y = [9936120837, 7878951365, 8636227609, 1976620013, 7221828048, 5729747934, 5330571980, 2399855953, 7070605710, 7755585773, 1132959467, 3395610437, 6274357102, 3621539859, 4571364740, 4867720051, 4539345776, 1388020947, 8198809908, 9760942599, 6505449873, 6726832421, 6423482441, 104400925, 8241579765, 7266393975, 1905355121, 2920278308, 5724346171, 8943614813, 4767907678, 6215699592, 1590964115, 9328387519, 2630444719, 7598386948]
    return [x[i] ^ y[i] for i in range(k)]
def csub_b08e7ba7(x):
    return [x[i] - 9227936929 for i in range(k)]
def chunk_c828ed7d(x):
    # just reverse it
    return x[19:] + x[:19]
def chsub_27343013(x):
    # rekt
    y = [ord(p) for p in 'd9021aa15fe1ea63d1b95d8ad5c1618d41e3']
    return [x[i] - y[i] for i in range(k)]
def xor_23517ee7(x):
    y = [2710803649, 4840367146, 3007492061, 1838066511, 1403378656, 2704755763, 1628365774, 4191101964, 3160422397, 7918609961, 313728333, 2637221539, 1924385426, 2610496430, 9256724704, 1234888275, 6596508107, 5993665487, 7203033444, 9382064910, 7833713202, 708138644, 7837370524, 7475532569, 5754482682, 4682699095, 3691933763, 2175257199, 6938184346, 6354308561, 1192926824, 2299011662, 5905792627, 3229182868, 6397594593, 317500356]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_31be8398(x):
    # the best
    return [x[i] ^ 3629006813 for i in range(k)]
def cadd_1bbdcd45(x):
    # so good
    return [x[i] + 2803978565 for i in range(k)]
def cadd_c170383d(x):
    return [x[i] + 676770794 for i in range(k)]
def chunk_2bbf6ee5(x):
    return x[8:] + x[:8]
def cxor_b70fe991(x):
    # mucho encrypto
    return [x[i] ^ 3891758195 for i in range(k)]
def csub_97ae1a88(x):
    return [x[i] - 9373912488 for i in range(k)]
def cadd_527ebfe5(x):
    # shiet?
    return [x[i] + 7015730119 for i in range(k)]
def chsub_d2de1fcc(x):
    y = [ord(p) for p in '775b0d1d5df65a25f93fbc3ef5040f0956cc']
    return [x[i] - y[i] for i in range(k)]
def chmul_048c1718(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '72e783e5cd08da8fda26040ae11a0ec04642']
    return [x[i] * y[i] for i in range(k)]
def cxor_bacb039a(x):
    # lel
    return [x[i] ^ 7113285267 for i in range(k)]
def cmul_393b0cfb(x):
    # kek
    return [x[i] * 10 for i in range(k)]
def chunk_1623733b(x):
    return x[22:] + x[:22]
def chxor_12caeb3c(x):
    # lel
    y = [ord(p) for p in 'e656539c09732d391dd69a78d2b15033ddc1']
    return [x[i] ^ y[i] for i in range(k)]
def digsub_ed6a3b94(x):
    return [int(str(n)[:1] + ''.join(['5', '7', '3', '2', '1', '4', '6', '0', '9', '8'][int(p)] for p in str(n)[1:])) for n in x]
def mul_3feda191(x):
    # the flag is flag{jk}
    y = [4, 1, 4, 1, 1, 2, 1, 4, 3, 2, 4, 1, 2, 1, 3, 4, 4, 3, 3, 2, 3, 4, 1, 4, 4, 4, 1, 1, 1, 3, 3, 1, 4, 1, 1, 2]
    return [x[i] * y[i] for i in range(k)]
def cxor_ff935c5e(x):
    # rekt
    return [x[i] ^ 6524857975 for i in range(k)]
def chunk_9f8fce5d(x):
    return x[31:] + x[:31]
def chmul_3155dc07(x):
    # the flag is flag{jk}
    y = [ord(p) for p in 'b4f63a510c7f494add253fff4b16f7a8ab36']
    return [x[i] * y[i] for i in range(k)]
def chsub_8b38a202(x):
    # mucho encrypto
    y = [ord(p) for p in '9dbf739bead706cb74244fb4e63082b4d5a7']
    return [x[i] - y[i] for i in range(k)]
def cxor_7d13d92f(x):
    return [x[i] ^ 913595649 for i in range(k)]
def digsub_c8eeae16(x):
    return [int(str(n)[:1] + ''.join(['4', '7', '0', '8', '3', '9', '6', '1', '5', '2'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_13171fff(x):
    return [x[p] for p in [14, 29, 35, 18, 22, 8, 1, 26, 4, 23, 13, 0, 33, 2, 10, 12, 15, 21, 6, 25, 11, 27, 34, 19, 24, 5, 30, 9, 32, 31, 7, 3, 17, 16, 20, 28]]
def cadd_1f30773b(x):
    # lel
    return [x[i] + 6298370624 for i in range(k)]
def add_c3181859(x):
    y = [5509781811, 7752578080, 5945910586, 6191292094, 1597148194, 6127274843, 4581311381, 842026976, 8637038882, 7455396972, 1682150361, 9621958140, 6324027042, 5255030255, 7244356672, 6877934777, 971444930, 9951728124, 6701399136, 2356919455, 7165469090, 2103523408, 9837814716, 748093824, 3803759252, 2013676349, 7096399027, 5178317272, 1280761090, 9964455915, 824192997, 9765351220, 5885506270, 6784739213, 457338982, 2190671244]
    return [x[i] + y[i] for i in range(k)]
def chxor_c7f6ad65(x):
    # lmaooo
    y = [ord(p) for p in 'bf9a4d929f7386fc4487e3e6d1ee205601b0']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_66f3a0d2(x):
    return [x[i] * 5 for i in range(k)]
def deck_480c5a33(x):
    return x[3:24] + x[24:27] + x[:3] + x[27:]
def sub_58eb1409(x):
    y = [2795307866, 2139342464, 2515906449, 5515031959, 2737336782, 6572903251, 863710041, 4441524916, 2153901783, 1636083311, 3298656803, 8476541126, 9648110239, 2242267454, 1519602842, 3614763623, 7012360463, 6160144360, 7381648157, 1524639160, 6268301516, 675430256, 6939488356, 8439682804, 4270624936, 9755458243, 1591502489, 962002891, 2749617397, 6473148905, 3454680296, 2932116265, 9540341769, 1040095510, 4269199356, 9548808031]
    return [x[i] - y[i] for i in range(k)]
def cadd_cfe7bb7a(x):
    # mucho encrypto
    return [x[i] + 8129842665 for i in range(k)]
def cmul_5ef49e31(x):
    return [x[i] * 9 for i in range(k)]
def sub_18770552(x):
    # shiet?
    y = [1260715906, 2751997937, 4445685025, 2373701340, 1502245260, 1476474238, 9570852533, 7984084227, 9744236843, 3114283319, 3451930565, 5682708876, 7550708798, 4414859614, 7329214916, 9955494026, 6110364968, 9221575067, 1957592906, 4718818427, 8475554142, 2955519007, 1926041662, 7384152322, 9494636212, 81052099, 4993469138, 5302102424, 8139163413, 6914338686, 2671191814, 1543000270, 6728138752, 7668191905, 7147153107, 8205584167]
    return [x[i] - y[i] for i in range(k)]
def sub_1b35acd4(x):
    y = [3123945888, 9371326828, 8043754421, 5767010335, 6503693701, 3158033152, 7572426066, 4760623175, 2371504696, 2235626689, 4135667276, 4830218891, 7640857634, 7989538845, 3961586188, 5677832903, 5112373659, 1512229714, 3761925019, 8051482369, 9491515648, 7655709004, 1034241545, 3529232888, 5819135102, 7965582669, 7327551189, 2846883031, 5725278008, 9682637304, 5150367706, 5015943210, 7840835642, 6447607292, 3953103141, 9431891884]
    return [x[i] - y[i] for i in range(k)]
def csub_4895fb4d(x):
    return [x[i] - 8291523146 for i in range(k)]
def mul_ed586e66(x):
    y = [7, 4, 10, 2, 9, 9, 4, 1, 3, 8, 4, 2, 9, 2, 3, 8, 10, 7, 3, 2, 9, 10, 8, 6, 10, 8, 9, 7, 1, 4, 8, 8, 1, 2, 3, 5]
    return [x[i] * y[i] for i in range(k)]
def chxor_7f2707c2(x):
    y = [ord(p) for p in '2017ec75b3599c0beea4f5cd469fa105d3f2']
    return [x[i] ^ y[i] for i in range(k)]
def csub_20678af6(x):
    # evil
    return [x[i] - 3690687867 for i in range(k)]
def digsub_3534e3b8(x):
    # the best
    return [int(str(n)[:1] + ''.join(['8', '0', '9', '2', '1', '5', '6', '4', '3', '7'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_e7965a1e(x):
    return [x[i] * 4 for i in range(k)]
def cxor_f9bee875(x):
    # evil
    return [x[i] ^ 7923139109 for i in range(k)]
def chadd_3d456bc0(x):
    # the best
    y = [ord(p) for p in 'f69ace0661cec5127fdc8b76ac5016902ef9']
    return [x[i] + y[i] for i in range(k)]
def xor_a2c95310(x):
    # lel
    y = [9013106652, 5701174081, 4431801806, 3969737464, 8117544536, 6267600643, 8333551209, 1959498036, 4070742170, 2735769581, 3941599500, 3229793211, 5963304473, 4549868331, 9398456551, 2445591725, 2908655267, 7237277960, 1851144512, 2215355000, 2744977120, 5805911059, 2184090205, 9162783809, 8791098269, 184673527, 5999734156, 2742320311, 1803639753, 6033625494, 8839063925, 5346262998, 5426328119, 1372011498, 9493941848, 4321339661]
    return [x[i] ^ y[i] for i in range(k)]
def xor_8e04350f(x):
    y = [5856567178, 2111446914, 1492967443, 9545647515, 7321599561, 7966331445, 2544134224, 2589695088, 6447516992, 7870219800, 6574272164, 6371135535, 9519289446, 1116849828, 1778055174, 4026771717, 5097123662, 6506157451, 6705788873, 9281540424, 5449629017, 9502679728, 3548636919, 2054273479, 961448278, 8948705364, 1645181724, 6897085158, 3966439321, 980005085, 332183475, 6295230513, 8748640341, 3689216099, 7502129975, 1201435470]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_d43d1a9f(x):
    # lmaooo
    y = [ord(p) for p in '941c03912eb44afba71c1935dcb3acd50470']
    return [x[i] * y[i] for i in range(k)]
def chmul_27a340a5(x):
    # just reverse it
    y = [ord(p) for p in '19bd42fcd66cf0fc93c11d293611709a18f5']
    return [x[i] * y[i] for i in range(k)]
def add_3631a2fd(x):
    # the best
    y = [550585828, 9583312091, 4876448099, 1991258165, 6800320715, 2368467858, 8408990826, 5130443777, 6625920693, 6393283053, 3905570536, 6748127242, 1888274706, 8109736942, 9558017445, 6120812050, 4191980916, 9507545437, 6201863634, 9593943291, 8750533837, 140280548, 327920481, 2124139386, 4597390413, 7838712277, 3148018178, 2825216585, 7170776794, 2164432361, 6137478024, 7595686798, 4054972232, 1000280810, 6909987885, 6711087118]
    return [x[i] + y[i] for i in range(k)]
def xor_25ac4148(x):
    y = [2059004394, 94669252, 5042883584, 2931469645, 1568356565, 7774175022, 8815598432, 1758951682, 7032713455, 7219221516, 1808502759, 7860061160, 8840288517, 870019207, 5224773572, 4670731366, 6656419316, 511283836, 9760801334, 9392749677, 2746206511, 248499209, 2622244004, 5772432842, 1279849369, 8956304013, 372862280, 8071652869, 9475285096, 624179091, 6817132657, 5382114387, 9325944466, 787146567, 1072316549, 865599738]
    return [x[i] ^ y[i] for i in range(k)]
def cadd_5d182653(x):
    return [x[i] + 8699046751 for i in range(k)]
def chmul_68e4c6ff(x):
    y = [ord(p) for p in '2abd8fbcaf6979c7fcf3b75baa52f4f86cb0']
    return [x[i] * y[i] for i in range(k)]
def digsub_c4e4d709(x):
    return [int(str(n)[:1] + ''.join(['6', '9', '1', '2', '4', '7', '8', '5', '3', '0'][int(p)] for p in str(n)[1:])) for n in x]
def mul_2b51c8be(x):
    y = [3, 2, 4, 3, 3, 2, 2, 4, 2, 2, 3, 4, 3, 4, 1, 3, 1, 2, 1, 2, 4, 5, 1, 5, 1, 5, 3, 5, 1, 2, 5, 1, 3, 4, 1, 4]
    return [x[i] * y[i] for i in range(k)]
def cadd_dc2d39b3(x):
    return [x[i] + 5566670310 for i in range(k)]
def shuffle_c5e07151(x):
    # lel
    return [x[p] for p in [4, 33, 7, 35, 19, 29, 12, 34, 22, 24, 14, 28, 16, 20, 17, 1, 5, 2, 6, 30, 0, 8, 25, 18, 3, 26, 32, 9, 23, 31, 10, 11, 13, 15, 27, 21]]
def chsub_c1aff5fd(x):
    y = [ord(p) for p in '5e12a928bb87548cc0254da5ff874478f66c']
    return [x[i] - y[i] for i in range(k)]
def add_2897abfa(x):
    y = [1975290008, 7304230183, 164429043, 2861260847, 3497062231, 7084044516, 5406429519, 7177523826, 5495026474, 770013896, 8665027392, 604036955, 6928132264, 5462119575, 7270921892, 9173901461, 9999369429, 4538891538, 3743208437, 165013277, 9930347192, 1459056660, 1535884867, 7170928115, 5920622593, 9875285046, 1674451707, 4252838984, 6448122391, 2850186737, 7245751877, 1459226832, 2592034391, 6034832941, 2421823444, 3462496601]
    return [x[i] + y[i] for i in range(k)]
def add_b6cb0782(x):
    # shiet?
    y = [956491040, 3795392345, 3367754284, 3617605444, 7333329163, 1740026482, 4811516924, 9728092236, 2250889639, 1447397476, 6342949752, 6690496962, 710226472, 9578757224, 6323288332, 3385177560, 4690400102, 8436713491, 9793192907, 252329597, 9221700883, 9932190393, 4221340396, 494857767, 9675858029, 9237540561, 6548212829, 2429489822, 9341659601, 65492841, 5354758528, 516909663, 5709043970, 5912324488, 6949214723, 8593509941]
    return [x[i] + y[i] for i in range(k)]
def cadd_36d81dd6(x):
    return [x[i] + 3961365394 for i in range(k)]
def chmul_36d54a3c(x):
    y = [ord(p) for p in '4de5eb4bab18e3416c33e9c220dd0ffecf6c']
    return [x[i] * y[i] for i in range(k)]
def chmul_ec64c95f(x):
    # so good
    y = [ord(p) for p in '0befe6d58fc688af7a3df116470eca050592']
    return [x[i] * y[i] for i in range(k)]
def csub_6f8ba274(x):
    return [x[i] - 7948099732 for i in range(k)]
def sub_4bcab1c3(x):
    # the flag is flag{jk}
    y = [5650781587, 662655986, 816964454, 826340764, 3621527137, 5150726311, 6629135462, 7417823683, 1310279192, 8113013392, 7174925608, 8395800680, 2925315608, 1702497756, 1276871458, 2954252829, 7184134057, 5205534786, 7054610178, 3711852464, 753293434, 2469885805, 6499411749, 1993117190, 7572697233, 5628626435, 9731765514, 6031164982, 3223995526, 2643523631, 8507416783, 1873871679, 4933849299, 6750361142, 4831288021, 1448077821]
    return [x[i] - y[i] for i in range(k)]
def mul_e7784e75(x):
    y = [6, 1, 2, 10, 9, 1, 1, 7, 10, 1, 3, 9, 8, 4, 1, 4, 1, 5, 2, 10, 1, 8, 8, 10, 4, 8, 1, 9, 8, 2, 1, 4, 8, 6, 8, 1]
    return [x[i] * y[i] for i in range(k)]
def chxor_79ffa521(x):
    y = [ord(p) for p in '249a0c3c3c08eb4a695415996dac783d9ad1']
    return [x[i] ^ y[i] for i in range(k)]
def xor_ccce8b68(x):
    # lmaooo
    y = [8407201902, 2114407372, 7747654474, 6255952740, 3532887581, 943664160, 1706444810, 2323056603, 8925695391, 5833810428, 4786254998, 2595142106, 3747080140, 3644442135, 5655568336, 4002902500, 2518511747, 3619279540, 3545300018, 3879966850, 7886001535, 9853026846, 4870465489, 2640968336, 8991538517, 5561972384, 3481598794, 6359705531, 4465149657, 3832466687, 715520054, 6476817596, 8740166653, 8933667170, 4880795629, 7929861878]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_6eea8007(x):
    # lmaooo
    return x[20:] + x[:20]
def chsub_ad24fefb(x):
    # lmaooo
    y = [ord(p) for p in '19d5d30d9f8c577030766fd1f50332d8792b']
    return [x[i] - y[i] for i in range(k)]
def chmul_b820c945(x):
    # so good
    y = [ord(p) for p in '781871041f146ee9e6012772297b29a4396e']
    return [x[i] * y[i] for i in range(k)]
def add_6300f0c0(x):
    y = [9326376409, 6654436310, 5904622805, 162086378, 846176354, 8263845484, 4889939497, 48139654, 4915114398, 5715290695, 1495044875, 1021787750, 2618119882, 3323912343, 8121677753, 6241674937, 3677392820, 4698190462, 7200365238, 7289778205, 9405212746, 6591584532, 5031625328, 2446666660, 7350443426, 5503035816, 3520502904, 2168414055, 1544309040, 2260027939, 3212627254, 2677977062, 1374283847, 5159870641, 9791776164, 2850769729]
    return [x[i] + y[i] for i in range(k)]
def add_4e407894(x):
    y = [6288333502, 3270765007, 5436266783, 5747818037, 2419948453, 225356276, 7294165538, 190871836, 5936540788, 8971948872, 8610968276, 6956921765, 2811553998, 8403976889, 4342102340, 1127606184, 1866313963, 4601166726, 6319054839, 8634699141, 643517540, 1530843346, 1116965796, 1960591743, 1582265738, 7001727319, 4060924664, 2628751617, 1836238781, 6426474773, 4429152671, 1251067203, 1826141611, 105454652, 2821917924, 675694750]
    return [x[i] + y[i] for i in range(k)]
def cadd_fdec7760(x):
    return [x[i] + 866799209 for i in range(k)]
def shuffle_63b7a61d(x):
    # evil
    return [x[p] for p in [20, 24, 18, 7, 2, 13, 15, 12, 27, 3, 29, 23, 6, 11, 32, 9, 4, 33, 21, 5, 10, 16, 0, 22, 19, 17, 8, 35, 34, 26, 30, 31, 25, 28, 1, 14]]
def chxor_b3db6e83(x):
    y = [ord(p) for p in '0428e6191d5c8da20de140d8042c1253d2e1']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_69cd9f4e(x):
    return [x[i] ^ 661690238 for i in range(k)]
def cmul_a292d693(x):
    # kek
    return [x[i] * 10 for i in range(k)]
def deck_5389800d(x):
    # the flag is flag{jk}
    return x[:2] + x[2:17] + x[19:] + x[17:19]
def deck_e2bae168(x):
    return x[34:] + x[:30] + x[32:34] + x[30:32]
def xor_a36d3d94(x):
    y = [1755673352, 9992442399, 2361777484, 1156048597, 3209701802, 7301071403, 1246096005, 7496389296, 385179899, 8816960534, 8124346330, 2959673281, 3899594702, 394595550, 837694723, 7411360111, 2390701286, 1544769381, 7536266933, 9072739682, 2963107595, 8102626740, 3842827417, 1028475502, 8765726222, 8957735877, 2490081953, 7698238106, 3895812509, 6708422390, 5091489807, 1715577569, 6833749862, 8678884286, 258913377, 721534997]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_68113691(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '2af9da91c6dceab07cae443027d1e6c376ea']
    return [x[i] - y[i] for i in range(k)]
def cxor_39585eb3(x):
    return [x[i] ^ 7992512728 for i in range(k)]
def deck_d52a691c(x):
    return x[36:36] + x[:12] + x[12:36] + x[36:]
def chxor_be8a1cce(x):
    # lmaooo
    y = [ord(p) for p in '29470957c65e63671fd7524c24a5ab782fb2']
    return [x[i] ^ y[i] for i in range(k)]
def deck_56af1801(x):
    # so good
    return x[29:31] + x[31:] + x[:7] + x[7:29]
def chxor_6f5bf7ea(x):
    y = [ord(p) for p in '61c7d1149ee6a1329fcd0e520b231d43590a']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_20aac844(x):
    # the flag is flag{jk}
    return [x[p] for p in [23, 5, 26, 27, 12, 13, 8, 35, 10, 0, 18, 6, 28, 24, 30, 17, 2, 11, 9, 25, 29, 7, 3, 21, 14, 31, 34, 19, 22, 32, 15, 16, 20, 4, 33, 1]]
def cmul_1db73e1b(x):
    return [x[i] * 7 for i in range(k)]
def cadd_626b1801(x):
    # lmaooo
    return [x[i] + 6284318972 for i in range(k)]
def mul_66f10f71(x):
    y = [4, 2, 2, 4, 4, 2, 4, 4, 1, 4, 2, 3, 2, 4, 1, 1, 3, 2, 2, 4, 4, 3, 1, 4, 2, 1, 2, 3, 2, 2, 4, 1, 1, 3, 3, 4]
    return [x[i] * y[i] for i in range(k)]
def chmul_9e62f058(x):
    y = [ord(p) for p in '0c7718ca0d5cc754202729fb719fb3422ccd']
    return [x[i] * y[i] for i in range(k)]
def chunk_88bc39ba(x):
    # rekt
    return x[2:] + x[:2]
def sub_1719880f(x):
    # encryption
    y = [868421558, 1016622215, 3489885007, 5082083399, 1071349038, 7615646749, 7078637182, 3298479912, 9118386157, 9405514882, 1114724432, 1179023162, 6268568542, 6924064135, 5393021433, 4935607395, 9815720332, 1532376234, 5294411288, 6696327018, 4430198800, 7132024430, 8515111369, 837575012, 5654953894, 3608593636, 8520066678, 1667487649, 9996388942, 1879663711, 894469970, 8891843426, 1510297639, 1715652782, 2001054650, 5454522752]
    return [x[i] - y[i] for i in range(k)]
def xor_f904d9a6(x):
    y = [2371796183, 1567277660, 7331315087, 6690964709, 7116558835, 7622358746, 3042466147, 2011033837, 395308930, 6855892364, 230669611, 5748901388, 3420737476, 91917807, 2157879855, 6328947522, 7496167019, 4138504393, 2372794190, 2308493853, 3004067761, 8948746177, 7029640116, 4110056906, 720145603, 7350879919, 1426917175, 6344851409, 3030847205, 4319217200, 3400753909, 7331241726, 4469990171, 5573697878, 3413494470, 8716302740]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_7a8c0f91(x):
    return [x[i] ^ 5472624750 for i in range(k)]
def csub_557e07a6(x):
    # just reverse it
    return [x[i] - 3261951133 for i in range(k)]
def cmul_f769c78a(x):
    return [x[i] * 10 for i in range(k)]
def xor_4d6d322c(x):
    y = [3032715551, 6608712427, 6649881912, 7549493696, 9693648285, 8752250963, 3875765278, 9188276261, 7822063574, 2137553534, 1277660751, 6659974284, 5757279887, 14907854, 8996878790, 8763843349, 2528300950, 4105060190, 414672861, 2275701226, 8032244538, 9397732319, 2658707468, 549484593, 6199168731, 4145701772, 2384587568, 1582041367, 1393820484, 9314199636, 6050505045, 8993683082, 8253489139, 9458426682, 6620188624, 8597965590]
    return [x[i] ^ y[i] for i in range(k)]
def cmul_66170953(x):
    # encryption
    return [x[i] * 8 for i in range(k)]
def add_2551e3c7(x):
    y = [1941441397, 5537254312, 3508733311, 364918184, 7074235666, 3831361029, 4884918916, 7963127312, 4188184740, 7756453264, 6663963137, 218240587, 6719769192, 7857113968, 7851419797, 9529156323, 551009141, 9275751028, 2081444443, 9205994976, 4700336503, 7429477129, 1126366899, 8726802264, 2485430766, 6963534988, 5769932211, 9972523055, 9234878507, 9022123627, 700818726, 4937447066, 3133564197, 1739364382, 7395196526, 1696110878]
    return [x[i] + y[i] for i in range(k)]
def mul_54b3dab3(x):
    y = [6, 1, 6, 3, 4, 2, 4, 4, 2, 1, 7, 5, 3, 1, 4, 1, 4, 4, 7, 2, 2, 3, 5, 7, 2, 2, 5, 3, 4, 5, 5, 4, 5, 7, 2, 4]
    return [x[i] * y[i] for i in range(k)]
def mul_8c6fc3ce(x):
    y = [4, 1, 2, 2, 8, 7, 4, 7, 4, 5, 7, 4, 2, 3, 3, 8, 4, 1, 1, 8, 8, 2, 3, 1, 4, 8, 1, 5, 3, 8, 4, 5, 2, 8, 6, 8]
    return [x[i] * y[i] for i in range(k)]
def chadd_fc7a65ec(x):
    # just reverse it
    y = [ord(p) for p in 'cf7acfd62cf454ebcad2b71a29be689c368b']
    return [x[i] + y[i] for i in range(k)]
def sub_a762259f(x):
    # encryption
    y = [372060118, 2814811122, 7862998852, 7590132659, 5708777881, 6105230301, 5927884522, 1378497366, 7268308921, 7812029049, 2170977828, 6472579260, 6361015922, 5032883067, 7591528312, 3872910152, 8522951522, 6343033906, 1093564455, 8180629579, 2883512641, 3821293081, 5712898217, 7054717876, 9564581679, 597342478, 9419122202, 1685991409, 1024061664, 348447457, 8182711562, 7619826704, 6223290877, 6296574910, 5073205247, 5098756754]
    return [x[i] - y[i] for i in range(k)]
def shuffle_2a813d89(x):
    return [x[p] for p in [1, 24, 28, 23, 12, 6, 3, 5, 18, 27, 25, 13, 20, 32, 19, 2, 33, 11, 30, 0, 10, 8, 31, 21, 35, 17, 29, 22, 16, 26, 15, 9, 34, 7, 14, 4]]
def mul_04e23b1b(x):
    # the best
    y = [8, 8, 9, 10, 5, 3, 2, 9, 7, 5, 4, 9, 3, 2, 2, 10, 8, 6, 5, 7, 6, 4, 2, 8, 5, 3, 4, 10, 6, 3, 1, 3, 4, 7, 10, 5]
    return [x[i] * y[i] for i in range(k)]
def cmul_b421453f(x):
    return [x[i] * 8 for i in range(k)]
def cxor_0af289cf(x):
    # the best
    return [x[i] ^ 9740758714 for i in range(k)]
def add_9009d319(x):
    # rekt
    y = [6612552506, 3202444649, 1837495385, 763032262, 2258689390, 6211610683, 7125927425, 2955045054, 412530244, 8201921022, 9868997606, 6649936084, 6888546489, 2873242037, 263387410, 3105068529, 4226759533, 2843812417, 4438432407, 2060314976, 2956004305, 9455989911, 9851573259, 4453283378, 2031715116, 5190631722, 3535826307, 4373910644, 7451884965, 9049666370, 9170829466, 5776560764, 8597022059, 2266499731, 2951619665, 4874108592]
    return [x[i] + y[i] for i in range(k)]
def chmul_22d64a0f(x):
    y = [ord(p) for p in '881ee8c65fc1239199d1983aa945992a01a9']
    return [x[i] * y[i] for i in range(k)]
def sub_b676ab61(x):
    y = [2600066539, 3253861253, 3783665693, 6445984800, 9296641570, 9548774016, 3785095782, 8595141657, 4054518632, 1363407432, 3235601835, 8172919249, 1889154114, 27002676, 6219626544, 9847984250, 2512237760, 5052080498, 8465673698, 4452266757, 9740541387, 2311895852, 5447023025, 1892306668, 5802609069, 1738522788, 5977769712, 3316295710, 2172540480, 5624048695, 260949618, 350013075, 4783129425, 3164200237, 3572705806, 9883082698]
    return [x[i] - y[i] for i in range(k)]
def mul_8f7d3564(x):
    # the flag is flag{jk}
    y = [1, 7, 1, 2, 3, 2, 5, 7, 6, 7, 1, 3, 2, 8, 5, 5, 6, 6, 1, 5, 8, 7, 5, 8, 9, 7, 1, 7, 9, 9, 3, 6, 5, 8, 8, 9]
    return [x[i] * y[i] for i in range(k)]
def xor_446fe190(x):
    y = [2577455337, 3955266230, 8478722791, 5517883022, 4468330829, 6334567636, 7589951709, 24904324, 4017373847, 2856298712, 8027606608, 8367250721, 4152466854, 696821640, 4499953549, 5592837130, 1266713712, 8292044456, 1619654767, 8743668648, 2092729602, 9640294777, 1578523799, 1533366875, 445047467, 1094178688, 2728345043, 137323015, 6634094143, 4908512480, 1092038916, 7580005590, 4796332208, 4808225650, 6749652834, 1534583380]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_cc8af1e6(x):
    # just reverse it
    y = [ord(p) for p in '0fdd06a9defb4a2e8c22931d64171e7414a6']
    return [x[i] * y[i] for i in range(k)]
def digsub_2362ee33(x):
    # just reverse it
    return [int(str(n)[:1] + ''.join(['4', '6', '8', '1', '3', '5', '2', '7', '0', '9'][int(p)] for p in str(n)[1:])) for n in x]
def xor_0ade2d1f(x):
    # so good
    y = [7043964431, 417933217, 4910233077, 235161096, 90725740, 9344927959, 2752481058, 8939606954, 4810744572, 4645792901, 6557634805, 7787741498, 7019988785, 5571133298, 6857204238, 7506882379, 9152623019, 8354081700, 156922481, 8816356328, 8102830269, 1313404456, 9584788932, 7959744988, 3837793106, 8110214971, 7061374492, 880592955, 4045303163, 9022581487, 4862119367, 9083914916, 9135852167, 7871228064, 7130521464, 1178077744]
    return [x[i] ^ y[i] for i in range(k)]
def deck_8d71767f(x):
    return x[15:21] + x[:15] + x[35:] + x[21:35]
def cadd_dd5bf521(x):
    return [x[i] + 5120444144 for i in range(k)]
def xor_47cf200f(x):
    # evil
    y = [2362057131, 6653076552, 8398662263, 5154609222, 1334312785, 9640503768, 4086857686, 1391721288, 5109607688, 1143472257, 5062042757, 7873698984, 9662128600, 7624627649, 139369304, 9667667112, 8140976017, 3082491806, 7923475873, 690525323, 4410036952, 5764952090, 1864616011, 6359475709, 6308674973, 5477037260, 2577218580, 1875934255, 7241448926, 4962289051, 3797281345, 2769735893, 4724269361, 1516483852, 2960580813, 9478924221]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_7628c3fc(x):
    return [x[i] ^ 1053946472 for i in range(k)]
def shuffle_35e807af(x):
    return [x[p] for p in [31, 10, 21, 17, 18, 7, 19, 9, 12, 28, 0, 27, 1, 33, 29, 25, 34, 20, 32, 24, 16, 6, 11, 5, 4, 26, 2, 3, 13, 30, 35, 15, 23, 22, 14, 8]]
def add_0cecddf7(x):
    # evil
    y = [1970068660, 1751339863, 8038545691, 3780477649, 5429614318, 2410408875, 9347985671, 6760105248, 6155083696, 49727642, 8251805640, 189155599, 7536735184, 7064123572, 1051368898, 8158487996, 5865477151, 8223753483, 580602600, 1458275253, 8495757980, 405193626, 9843367506, 6876362303, 4482985975, 8705541006, 3793722064, 6329319406, 713780919, 4912961605, 5716792915, 6736520459, 273289516, 9414143357, 6173562215, 5971663466]
    return [x[i] + y[i] for i in range(k)]
def chadd_974a7c54(x):
    y = [ord(p) for p in 'c6b6c2f27b3fb254c63a285c1f66c4ec7f1d']
    return [x[i] + y[i] for i in range(k)]
def sub_de9b7e77(x):
    # mucho encrypto
    y = [310452612, 4827508930, 7406203965, 8070621505, 7669184818, 3946932255, 2045945223, 2318243196, 2038677227, 982769247, 2558309087, 6253848043, 9993242222, 2642166068, 6550128088, 4930710059, 1341854909, 994962162, 1393412716, 2467260737, 4833159654, 8407064990, 9631562538, 556335486, 492060244, 9630212370, 7220696678, 1244100622, 9266033001, 3478895761, 7140512473, 6998104380, 2231407239, 812713233, 3539467158, 518807393]
    return [x[i] - y[i] for i in range(k)]
def chsub_c5b0dbf8(x):
    y = [ord(p) for p in '4a5d833c2fad0ef9518154c66c2f46098ef1']
    return [x[i] - y[i] for i in range(k)]
def shuffle_e8a5f5ef(x):
    # kek
    return [x[p] for p in [35, 15, 34, 23, 17, 31, 24, 22, 9, 10, 21, 11, 6, 28, 3, 18, 1, 16, 2, 7, 4, 32, 14, 8, 30, 5, 13, 12, 29, 33, 27, 19, 20, 0, 25, 26]]
def shuffle_34dde52b(x):
    return [x[p] for p in [19, 10, 13, 25, 35, 1, 15, 7, 28, 18, 8, 26, 5, 12, 2, 11, 17, 22, 34, 14, 16, 0, 4, 29, 31, 20, 32, 30, 21, 23, 24, 27, 3, 33, 9, 6]]
def chmul_20b6f48e(x):
    y = [ord(p) for p in 'bf6324dc755b1a48a07612d3aea4b7a04153']
    return [x[i] * y[i] for i in range(k)]
def sub_60d9cd7a(x):
    # evil
    y = [3380380959, 3700905087, 8755703360, 8612558796, 6492616145, 2708121797, 3017338350, 8779804503, 2736718722, 620139512, 1736587905, 5712191215, 7157462303, 9231694224, 1595753797, 2146663337, 5622964730, 8159044060, 2724649390, 2191786952, 4398325946, 6110868521, 4539669239, 4817947024, 788466070, 9138655363, 2635229422, 7827402386, 2784241665, 2833131722, 2013256794, 6294225290, 4476357687, 3713700214, 5668985819, 1210987413]
    return [x[i] - y[i] for i in range(k)]
def cmul_7bb17901(x):
    # the best
    return [x[i] * 4 for i in range(k)]
def chxor_cf80cd00(x):
    y = [ord(p) for p in '1781b77fc9af5de7fbceba9ce66f01c18d3d']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_2a9e106f(x):
    return x[31:] + x[:31]
def chmul_e6742997(x):
    # encryption
    y = [ord(p) for p in '7a3c9c5cb2a047a5314d4c01c666f68c08af']
    return [x[i] * y[i] for i in range(k)]
def shuffle_7eddc63c(x):
    return [x[p] for p in [9, 5, 33, 4, 15, 34, 31, 7, 21, 13, 23, 20, 27, 8, 10, 28, 29, 30, 3, 25, 24, 1, 0, 22, 35, 12, 17, 11, 6, 32, 26, 19, 2, 14, 18, 16]]
def digsub_e60d693c(x):
    # lel
    return [int(str(n)[:1] + ''.join(['8', '4', '5', '6', '3', '2', '9', '0', '7', '1'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_ad3ab72b(x):
    # just reverse it
    return [x[i] * 6 for i in range(k)]
def shuffle_dc7ee1c6(x):
    return [x[p] for p in [27, 4, 13, 35, 19, 11, 25, 18, 1, 2, 32, 16, 21, 22, 12, 33, 7, 0, 5, 3, 6, 24, 14, 34, 17, 30, 10, 28, 29, 20, 15, 8, 23, 31, 9, 26]]
def chadd_cc7b7e1e(x):
    y = [ord(p) for p in 'd052ffbce5fa6797bce0b8ebe22e274ba694']
    return [x[i] + y[i] for i in range(k)]
def digsub_d22e4d9e(x):
    return [int(str(n)[:1] + ''.join(['3', '1', '5', '0', '7', '4', '9', '8', '6', '2'][int(p)] for p in str(n)[1:])) for n in x]
def sub_4e853fbb(x):
    # lmaooo
    y = [3704551358, 2000491497, 494060505, 4087066672, 4970969987, 18327403, 8608110954, 7501420833, 5493862694, 6758347121, 6967360422, 8251651795, 4126300323, 2339021492, 1348768338, 5872141557, 6211629743, 7187793619, 8161628822, 13431891, 2297126058, 7291346432, 2520509820, 5606130559, 5726119034, 4890577993, 4614122396, 3007245481, 3175606960, 5886292910, 4758263791, 9778165324, 6221747108, 3256893150, 4294152763, 6184014234]
    return [x[i] - y[i] for i in range(k)]
def cmul_93ebf751(x):
    # kek
    return [x[i] * 5 for i in range(k)]
def chadd_fcb73b21(x):
    y = [ord(p) for p in '03a510bf9e993bf6bdb95bbd720e02efb1c2']
    return [x[i] + y[i] for i in range(k)]
def cmul_a089bf19(x):
    # rekt
    return [x[i] * 8 for i in range(k)]
def chunk_5d8873dc(x):
    # lel
    return x[2:] + x[:2]
def chadd_2eddab35(x):
    y = [ord(p) for p in '1697101af225321ae18faa2e89f32e313670']
    return [x[i] + y[i] for i in range(k)]
def csub_3d9f618d(x):
    return [x[i] - 1719666672 for i in range(k)]
def chmul_02f67fce(x):
    # lmaooo
    y = [ord(p) for p in 'f1e758e4c194c95dbd5b28a7bcd0bb7a36e2']
    return [x[i] * y[i] for i in range(k)]
def mul_d62641f4(x):
    y = [1, 3, 5, 4, 5, 3, 2, 2, 1, 2, 5, 2, 3, 2, 5, 1, 1, 3, 2, 4, 5, 5, 2, 4, 2, 2, 5, 2, 4, 4, 4, 3, 5, 3, 4, 3]
    return [x[i] * y[i] for i in range(k)]
def shuffle_49c48148(x):
    return [x[p] for p in [23, 25, 34, 7, 4, 14, 8, 9, 20, 33, 0, 1, 13, 28, 30, 2, 21, 31, 16, 17, 32, 22, 19, 24, 27, 18, 6, 3, 26, 5, 15, 29, 10, 11, 12, 35]]
def csub_c59b429f(x):
    # the flag is flag{jk}
    return [x[i] - 3984098831 for i in range(k)]
def chsub_e8aa8b79(x):
    y = [ord(p) for p in '29b1916ea8795a0d4839e1a48a961074f6b2']
    return [x[i] - y[i] for i in range(k)]
def mul_60a92fff(x):
    y = [3, 5, 5, 6, 7, 3, 7, 3, 7, 1, 6, 1, 3, 7, 5, 8, 8, 4, 6, 4, 1, 4, 3, 5, 5, 5, 6, 1, 7, 7, 2, 7, 6, 3, 2, 1]
    return [x[i] * y[i] for i in range(k)]
def chmul_8c7712e0(x):
    y = [ord(p) for p in 'd7354c58df2a5bfdc060257428fa97f4880c']
    return [x[i] * y[i] for i in range(k)]
def chmul_207c7813(x):
    y = [ord(p) for p in 'bb16c39b66c38914400e155f5e27aa9c5563']
    return [x[i] * y[i] for i in range(k)]
def mul_e74b3261(x):
    # so good
    y = [5, 1, 5, 4, 1, 2, 3, 9, 7, 4, 5, 1, 6, 2, 1, 6, 9, 7, 6, 5, 6, 1, 4, 7, 7, 3, 2, 8, 6, 5, 2, 5, 6, 5, 4, 8]
    return [x[i] * y[i] for i in range(k)]
def sub_1d06041f(x):
    # shiet?
    y = [1875694838, 2042768336, 6020575442, 5192458012, 1997421082, 6600710700, 7318232878, 7529457680, 5016315282, 3783924024, 4486544224, 9437875842, 6506555802, 1299219194, 7695189565, 4722099858, 1423348880, 1063387104, 4725981541, 7692810076, 737203804, 9874273720, 1322595762, 6121334557, 2251918531, 957896438, 7783843520, 9619282015, 6987012644, 1888175341, 8463276725, 4286175876, 6019294628, 2932329416, 2574878644, 1276862748]
    return [x[i] - y[i] for i in range(k)]
def deck_56a53509(x):
    return x[:0] + x[5:36] + x[36:] + x[0:5]
def sub_2ec060e9(x):
    # kek
    y = [8930382250, 4972297457, 805260475, 8493857829, 7291910127, 1483065463, 9457428620, 7211170381, 6408915217, 9483043494, 4895129970, 2580714998, 141631372, 6281701211, 3554341125, 3796336980, 4814286491, 7637815704, 1281961734, 4493882771, 453774892, 4666691897, 216386462, 4687562113, 3234449134, 274571766, 7359060178, 2847073383, 7321038290, 8873342879, 9844893167, 5349352800, 7808763865, 6226040011, 3300068641, 4634128992]
    return [x[i] - y[i] for i in range(k)]
def cxor_65e0c2b5(x):
    # shiet?
    return [x[i] ^ 3352186535 for i in range(k)]
def mul_a4e5921f(x):
    # rekt
    y = [1, 3, 5, 5, 5, 2, 1, 3, 5, 4, 1, 1, 2, 5, 2, 1, 5, 5, 4, 2, 5, 3, 3, 2, 4, 5, 4, 3, 4, 3, 3, 3, 5, 5, 2, 5]
    return [x[i] * y[i] for i in range(k)]
def cxor_ec93c298(x):
    # lel
    return [x[i] ^ 6195147830 for i in range(k)]
def cadd_648dbdbd(x):
    return [x[i] + 2420892845 for i in range(k)]
def add_ae27c2fc(x):
    # evil
    y = [375117041, 7343776260, 2212537979, 1408323988, 6031894542, 7793802843, 3048072972, 7484075736, 2519306262, 2656141315, 1422742236, 4677362219, 3998286398, 354427653, 8921046545, 5262056516, 462483995, 2246152620, 6473333381, 4689184352, 2702808247, 1802485668, 7732779097, 3696053155, 5165746482, 9010512089, 4819728362, 8463018551, 6001966793, 8037362545, 9567935244, 2280623484, 2289744953, 4733221221, 9457607738, 1388788520]
    return [x[i] + y[i] for i in range(k)]
def mul_833e4a11(x):
    y = [4, 3, 5, 2, 3, 1, 1, 2, 3, 5, 4, 2, 4, 4, 3, 5, 4, 4, 2, 6, 3, 1, 2, 3, 2, 6, 1, 2, 6, 5, 2, 2, 6, 3, 4, 3]
    return [x[i] * y[i] for i in range(k)]
def chadd_55d11883(x):
    y = [ord(p) for p in '6b2b23c2d7fa93c6babae4278344b8b24c82']
    return [x[i] + y[i] for i in range(k)]
def chunk_19abbb44(x):
    return x[15:] + x[:15]
def xor_51b2d18c(x):
    y = [2066308029, 382783243, 4470212073, 7790375073, 7170908299, 7509520627, 1850578454, 9062499946, 3041494261, 2899187398, 6403871792, 7858967543, 5462598074, 3913408247, 2720009327, 742691693, 5158932934, 8440685886, 1668046660, 4903753854, 3945928900, 6836734877, 829933369, 1644765220, 3011626240, 7347916813, 9944112267, 5531308209, 2747911754, 5852466963, 6853048918, 6090878842, 3910920584, 4956462193, 971615981, 4669695755]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_2e5f8990(x):
    # the flag is flag{jk}
    return [x[i] ^ 748765775 for i in range(k)]
def chunk_36ffef9b(x):
    # lmaooo
    return x[8:] + x[:8]
def cmul_5d27452a(x):
    # lel
    return [x[i] * 4 for i in range(k)]
def mul_8028fe56(x):
    # mucho encrypto
    y = [8, 4, 8, 6, 5, 7, 5, 7, 5, 4, 8, 8, 3, 3, 5, 1, 6, 4, 7, 7, 8, 4, 7, 1, 3, 3, 2, 3, 5, 4, 7, 2, 7, 3, 5, 5]
    return [x[i] * y[i] for i in range(k)]
def add_125357c0(x):
    # kek
    y = [2434060355, 2244550890, 8652466896, 3991339984, 9333570283, 7915985671, 5402224693, 8444022693, 7389027614, 8075876373, 6910988085, 5846909436, 1860916994, 1038028931, 8255860056, 1164698794, 4609119283, 9964672037, 7344415788, 2226190008, 8528165278, 1147231743, 8609206319, 5704065977, 1272584279, 2280241859, 6559224364, 1953023818, 7428152369, 9474477843, 504713011, 1081985290, 2218522635, 6517684040, 3714402108, 1804899590]
    return [x[i] + y[i] for i in range(k)]
def chsub_379e2ba1(x):
    # evil
    y = [ord(p) for p in 'c883b67424dd420eb6e52bdc893729a44a71']
    return [x[i] - y[i] for i in range(k)]
def chsub_4dc669f9(x):
    # lel
    y = [ord(p) for p in 'f8bec53e4c3efb84d06cf3f4c1f6c4deb228']
    return [x[i] - y[i] for i in range(k)]
def mul_a992e945(x):
    y = [7, 5, 6, 3, 4, 8, 5, 8, 9, 3, 4, 4, 1, 6, 1, 7, 1, 9, 7, 9, 2, 1, 2, 3, 2, 9, 6, 3, 4, 9, 4, 9, 6, 7, 1, 6]
    return [x[i] * y[i] for i in range(k)]
def chunk_0c74cc13(x):
    # shiet?
    return x[32:] + x[:32]
def mul_4de4594c(x):
    y = [2, 5, 6, 3, 3, 1, 9, 3, 10, 1, 9, 2, 1, 9, 8, 7, 8, 9, 3, 1, 7, 1, 4, 9, 8, 10, 7, 6, 6, 4, 9, 7, 2, 3, 3, 7]
    return [x[i] * y[i] for i in range(k)]
def cxor_569fa700(x):
    return [x[i] ^ 1829682349 for i in range(k)]
def deck_7937002f(x):
    return x[32:] + x[5:23] + x[23:32] + x[:5]
def cmul_ddd178e6(x):
    return [x[i] * 9 for i in range(k)]
def add_595625e1(x):
    # shiet?
    y = [6586656242, 8410313174, 3021442489, 4474845251, 1284398047, 7551992847, 765652061, 6100226668, 6098898647, 4751703539, 508329583, 1890017009, 8894235689, 599581212, 6913915728, 7979126944, 4194640101, 5119909297, 2255240239, 9817994920, 9852529893, 5975412867, 8370581429, 5954941318, 6763007164, 5138527061, 620415231, 7805585397, 8075996859, 7863958923, 3577875648, 7626405736, 2692253478, 8891997243, 7304956170, 3052383943]
    return [x[i] + y[i] for i in range(k)]
def mul_a2581ad1(x):
    y = [4, 6, 4, 3, 3, 5, 4, 6, 7, 7, 4, 1, 10, 8, 8, 7, 3, 3, 5, 1, 1, 7, 5, 6, 3, 2, 9, 9, 4, 6, 8, 6, 8, 3, 7, 9]
    return [x[i] * y[i] for i in range(k)]
def cmul_3c18a69a(x):
    # the best
    return [x[i] * 5 for i in range(k)]
def xor_9bd4e1fb(x):
    y = [7465887693, 2329540665, 5911637618, 2225029608, 6509030334, 4480530976, 9208654088, 4114079498, 5257661905, 7828356083, 9277525745, 9273130405, 4066367580, 8047524025, 1552885800, 749211913, 855907854, 88029363, 2470354599, 5277404293, 6118579771, 2629606895, 5434663467, 7776903833, 606530171, 9319734482, 9537254669, 9890889914, 8454550047, 628046555, 3947513248, 1698639955, 9525738218, 5171071047, 6165172990, 268229399]
    return [x[i] ^ y[i] for i in range(k)]
def csub_ee7d6d31(x):
    return [x[i] - 9674586424 for i in range(k)]
def csub_8d8cd37f(x):
    # evil
    return [x[i] - 1741443387 for i in range(k)]
def deck_ed8076b2(x):
    # so good
    return x[12:20] + x[:3] + x[20:] + x[3:12]
def shuffle_36c9353b(x):
    # mucho encrypto
    return [x[p] for p in [33, 15, 24, 8, 5, 30, 9, 10, 22, 12, 29, 32, 34, 14, 26, 35, 1, 23, 17, 28, 3, 4, 2, 16, 11, 0, 27, 20, 18, 25, 19, 13, 6, 31, 7, 21]]
def csub_8322948c(x):
    return [x[i] - 5148524405 for i in range(k)]
def cxor_31e27f48(x):
    return [x[i] ^ 8809002937 for i in range(k)]
def digsub_d131ea62(x):
    return [int(str(n)[:1] + ''.join(['5', '8', '0', '3', '7', '4', '1', '6', '9', '2'][int(p)] for p in str(n)[1:])) for n in x]
def cxor_ae138bf7(x):
    # mucho encrypto
    return [x[i] ^ 76467352 for i in range(k)]
def chxor_4fe33b06(x):
    # kek
    y = [ord(p) for p in 'a979095e75cdd2e1ba14de6c78b087790f28']
    return [x[i] ^ y[i] for i in range(k)]
def csub_2c8eacf9(x):
    # shiet?
    return [x[i] - 5241652871 for i in range(k)]
def chadd_87bfe060(x):
    # lel
    y = [ord(p) for p in '3933fe01b738555602045ae04df4f0a935c9']
    return [x[i] + y[i] for i in range(k)]
def xor_581836de(x):
    y = [7502291919, 7983773549, 1016062083, 9397765512, 974052173, 5280107467, 6839156903, 5478427329, 4089133188, 1948118822, 7248697415, 5129170565, 1101150959, 3485456340, 4865863061, 7827846764, 4607624783, 129541935, 3464787427, 9355688859, 5229309760, 8980642521, 1944606718, 5170300591, 2706138615, 9355788305, 7561151624, 7184222924, 9539079192, 6259995728, 3232315795, 4189228330, 2979778023, 7321469624, 8583193591, 6210845641]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_bb8eddbd(x):
    return [x[i] ^ 1206206607 for i in range(k)]
def cmul_9f9f2324(x):
    # lmaooo
    return [x[i] * 8 for i in range(k)]
def chxor_b041b00c(x):
    # encryption
    y = [ord(p) for p in 'd4709788be0ee65ba2473c6e14014a24669e']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_c1fbc654(x):
    return [x[i] + 3376231426 for i in range(k)]
def shuffle_8e02f517(x):
    # kek
    return [x[p] for p in [6, 12, 27, 15, 19, 22, 28, 30, 24, 10, 29, 3, 0, 4, 16, 2, 7, 18, 32, 23, 35, 1, 20, 25, 31, 17, 9, 11, 21, 33, 13, 14, 26, 8, 34, 5]]
def chmul_deae7468(x):
    # so good
    y = [ord(p) for p in '3077ce5f3f0eace0a068133a47c674566a1a']
    return [x[i] * y[i] for i in range(k)]
def digsub_fda06cd9(x):
    # evil
    return [int(str(n)[:1] + ''.join(['2', '4', '5', '3', '9', '7', '6', '8', '1', '0'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_b9aac0df(x):
    return [x[p] for p in [27, 15, 19, 10, 17, 5, 32, 13, 3, 28, 4, 25, 22, 35, 20, 14, 12, 31, 8, 33, 30, 9, 11, 2, 6, 0, 21, 24, 16, 26, 34, 18, 23, 7, 29, 1]]
def digsub_2a496578(x):
    return [int(str(n)[:1] + ''.join(['5', '4', '9', '1', '8', '2', '7', '3', '0', '6'][int(p)] for p in str(n)[1:])) for n in x]
def cxor_c6e16ecc(x):
    return [x[i] ^ 3532775418 for i in range(k)]
def chxor_83f63c74(x):
    # shiet?
    y = [ord(p) for p in '173c165e99eaa5fbc8052461a7e5f74a9612']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_fc74f7f2(x):
    # rekt
    y = [ord(p) for p in '65d44d9af8976dd1dbd48139d4336d7ca7e7']
    return [x[i] ^ y[i] for i in range(k)]
def deck_0505870b(x):
    return x[14:28] + x[6:14] + x[28:] + x[:6]
def chmul_e9eb8471(x):
    y = [ord(p) for p in '31e9c31eea23fd88ef8895ed6f1ebe5a6ef9']
    return [x[i] * y[i] for i in range(k)]
def deck_ac4c926d(x):
    # kek
    return x[7:11] + x[11:29] + x[:7] + x[29:]
def cadd_d3ea8638(x):
    return [x[i] + 2724260509 for i in range(k)]
def chunk_5fa20e0f(x):
    # encryption
    return x[10:] + x[:10]
def xor_d30c564f(x):
    # mucho encrypto
    y = [6227006567, 5098087015, 1090241971, 3775354114, 8554181012, 8787769628, 9149242735, 5035332710, 2567377471, 8903112950, 6346474048, 8041296953, 1493660979, 3363416295, 5950623914, 1408997670, 2459766889, 6929112476, 5059370811, 245577130, 2491034156, 2716093462, 6811373394, 7121578245, 2068457660, 2234991043, 1827808238, 9866615670, 5505421892, 3678882200, 138369011, 9985856061, 3131247215, 48251555, 8424637001, 4583288495]
    return [x[i] ^ y[i] for i in range(k)]
def add_eee1f715(x):
    # kek
    y = [2554864011, 2392444658, 133526861, 4141331212, 5574152080, 1602892431, 5263795926, 2072332635, 7074051420, 187650323, 2291361089, 3443037473, 5322839147, 865147029, 6109858653, 590536349, 8233174171, 8234958612, 4444622659, 1008126292, 3807400371, 3006299920, 8401690526, 2766558762, 5508081407, 2066766480, 9741016759, 9452762077, 1442032012, 781148337, 3030591346, 340515127, 969304938, 6670957992, 3521736708, 6961029784]
    return [x[i] + y[i] for i in range(k)]
def chunk_07e06228(x):
    return x[13:] + x[:13]
def deck_698eca56(x):
    # the best
    return x[3:20] + x[31:] + x[20:31] + x[:3]
def csub_64c8c245(x):
    return [x[i] - 8723812433 for i in range(k)]
def chadd_cf40e026(x):
    y = [ord(p) for p in '32d226cf1a78ba410cf2a638a217893f050d']
    return [x[i] + y[i] for i in range(k)]
def chsub_8b936fd7(x):
    # just reverse it
    y = [ord(p) for p in '8a80041221f323e57e5e53cb2bf027f1ecad']
    return [x[i] - y[i] for i in range(k)]
def deck_1326f4eb(x):
    return x[14:24] + x[24:] + x[7:14] + x[:7]
def digsub_6be19c93(x):
    # shiet?
    return [int(str(n)[:1] + ''.join(['6', '7', '8', '4', '2', '1', '0', '5', '3', '9'][int(p)] for p in str(n)[1:])) for n in x]
def deck_0a120452(x):
    # so good
    return x[:10] + x[31:] + x[10:25] + x[25:31]
def cmul_135161b4(x):
    return [x[i] * 10 for i in range(k)]
def chsub_c6725cc1(x):
    y = [ord(p) for p in '72b429027ca447cfb896eeaf45f08a94686a']
    return [x[i] - y[i] for i in range(k)]
def deck_2fb290b1(x):
    # evil
    return x[4:6] + x[:4] + x[20:] + x[6:20]
def cadd_5acbd300(x):
    # shiet?
    return [x[i] + 96916642 for i in range(k)]
def xor_79919c11(x):
    # evil
    y = [1827553404, 9330215991, 989266347, 9349938727, 3883365352, 4693485594, 7455876790, 9886778877, 8570596746, 7890217635, 9519714079, 8420587384, 4407252151, 3660366041, 7607567467, 1228832672, 345180116, 4097600274, 9300985126, 3544045362, 3939034403, 9931120731, 904381967, 5402399632, 6380517923, 188455789, 7572537798, 211279076, 4331620660, 3856063114, 3805327885, 8850281163, 154581938, 2362319698, 4033112921, 82904593]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_f48a5878(x):
    # evil
    y = [ord(p) for p in '4146830adae2a97ab18378d6e3ce5f778d3d']
    return [x[i] * y[i] for i in range(k)]
def shuffle_d70b85e8(x):
    return [x[p] for p in [3, 29, 0, 23, 9, 19, 2, 33, 20, 18, 25, 16, 21, 31, 34, 4, 5, 26, 22, 1, 7, 6, 15, 8, 32, 13, 11, 24, 10, 30, 12, 27, 17, 28, 14, 35]]
def cadd_165a6cb3(x):
    return [x[i] + 2061094717 for i in range(k)]
def deck_7d9dd5ac(x):
    return x[32:] + x[:8] + x[29:32] + x[8:29]
def add_b4b55578(x):
    # the flag is flag{jk}
    y = [7802284105, 323997357, 1187623652, 1117652695, 3662642249, 9359734324, 3552034, 2335199178, 1271127244, 9888316695, 7482950486, 3455497191, 668323766, 8985807803, 9250118232, 440159616, 9590141505, 3561121812, 4060953996, 7059814159, 8489605768, 10593593, 853678709, 8915108168, 8600619594, 6589551510, 2022699160, 7722055697, 8699568983, 9476320130, 2360076089, 1538013784, 909755272, 3709432526, 1736455543, 5559833159]
    return [x[i] + y[i] for i in range(k)]
def cadd_de624ff2(x):
    return [x[i] + 7445986105 for i in range(k)]
def chmul_05459301(x):
    y = [ord(p) for p in '501363e1a475b13368340abe422ce2a506b0']
    return [x[i] * y[i] for i in range(k)]
def add_0cf48ce3(x):
    # just reverse it
    y = [1595291120, 9825114234, 4899451834, 4214522390, 6346158691, 7889884473, 1242486462, 6350258166, 4098057964, 3528110640, 9501253414, 9546874335, 1409799358, 1635630036, 844755042, 69404040, 4453362989, 7572578145, 166353646, 4810040248, 5190418008, 2865785235, 5306936805, 3964584700, 5194210865, 4655008608, 7188220521, 6162882488, 5655798400, 3632918786, 993308613, 4801626423, 683977663, 9129984209, 5932259478, 6274024185]
    return [x[i] + y[i] for i in range(k)]
def cmul_ae473405(x):
    return [x[i] * 7 for i in range(k)]
def digsub_34bac6be(x):
    # lel
    return [int(str(n)[:1] + ''.join(['6', '2', '4', '8', '5', '0', '7', '3', '1', '9'][int(p)] for p in str(n)[1:])) for n in x]
def chsub_70fd4908(x):
    y = [ord(p) for p in 'b2b204a5d4102a25b4fbfcaf66ec093d9143']
    return [x[i] - y[i] for i in range(k)]
def digsub_065e725d(x):
    return [int(str(n)[:1] + ''.join(['6', '7', '5', '3', '0', '9', '8', '2', '4', '1'][int(p)] for p in str(n)[1:])) for n in x]
def xor_ac535945(x):
    # kek
    y = [7549582850, 7348660015, 5743833516, 7450470893, 7702247124, 5413487510, 5824793997, 624288409, 1762202185, 4687759694, 4931950191, 9189718720, 6285928952, 8022604685, 6329394553, 6508003493, 996238532, 2516847315, 3445612063, 1879562705, 4336158956, 2868561650, 2596602288, 3406998828, 7844569845, 5056740892, 7832989622, 8898733478, 2273025763, 2938460923, 5787319406, 3620612262, 9421448830, 4761962754, 1865574311, 7477481948]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_855b33d8(x):
    y = [ord(p) for p in 'b44a867a298ab7c4947a0acdecb54c542fa0']
    return [x[i] ^ y[i] for i in range(k)]
def mul_6a51d006(x):
    y = [2, 3, 2, 3, 3, 2, 2, 2, 1, 3, 1, 1, 1, 3, 2, 1, 3, 2, 1, 2, 2, 1, 3, 3, 1, 3, 2, 2, 1, 2, 2, 1, 2, 3, 1, 3]
    return [x[i] * y[i] for i in range(k)]
def cadd_8bcff692(x):
    # encryption
    return [x[i] + 7789679280 for i in range(k)]
def xor_cc5d6b6d(x):
    y = [7747940560, 6996130562, 3188046950, 1854738410, 5834698681, 5130015333, 8748128474, 7007102493, 9788705870, 1862064032, 936778214, 2094899380, 2932165612, 1049635034, 9896045124, 8326472665, 2242715802, 9611385621, 8553944168, 2639851192, 5231245147, 7177954160, 8130673113, 9498763407, 4624461343, 2721536893, 871231765, 6411762086, 1216779376, 7550472088, 4775433428, 82742350, 7544614197, 5917593314, 6043786443, 6692220260]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_384134ae(x):
    y = [ord(p) for p in '5433b10699feb51652462ce80b260d1a59a6']
    return [x[i] * y[i] for i in range(k)]
def add_02bb294f(x):
    # the best
    y = [4697780131, 4870528716, 1551838949, 7967895551, 3677863775, 7112032860, 5829401444, 9590545646, 9901577952, 575953891, 6568920538, 6196789463, 9260792218, 5055011470, 7590648800, 3401573450, 4273014972, 9692382532, 4284405596, 7397855362, 6060559103, 4578447350, 7449666478, 4479685445, 5710184637, 4878987441, 4469886720, 9511433078, 2291681663, 9214598244, 2621320386, 2618485751, 5035200552, 9887702445, 7250261211, 5378948743]
    return [x[i] + y[i] for i in range(k)]
def chxor_55e4ace7(x):
    y = [ord(p) for p in '8e72af36ed7c86a7bf4eb9817d6351ddfe20']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_6c9a670f(x):
    return [x[p] for p in [18, 31, 23, 35, 27, 29, 2, 5, 17, 6, 12, 4, 9, 19, 3, 32, 34, 13, 26, 33, 21, 7, 28, 11, 0, 15, 25, 1, 14, 22, 10, 20, 16, 8, 24, 30]]
def shuffle_050ae2c2(x):
    # the best
    return [x[p] for p in [13, 12, 26, 21, 34, 7, 32, 9, 0, 25, 3, 23, 29, 28, 11, 8, 10, 17, 15, 6, 2, 30, 31, 24, 1, 18, 19, 14, 5, 16, 4, 27, 22, 33, 20, 35]]
def chsub_9b93213c(x):
    # the best
    y = [ord(p) for p in '8566298a0b62553ec2da16bc2f87bdc01f60']
    return [x[i] - y[i] for i in range(k)]
def chmul_7fdbddec(x):
    # the best
    y = [ord(p) for p in 'a47a1a8929eaf09dba942d8fa7b861230d48']
    return [x[i] * y[i] for i in range(k)]
def cxor_3db736ba(x):
    # the flag is flag{jk}
    return [x[i] ^ 9957652160 for i in range(k)]
def mul_54bc5eb1(x):
    y = [6, 1, 5, 7, 2, 2, 1, 4, 8, 7, 6, 2, 4, 3, 7, 2, 9, 7, 8, 5, 9, 3, 5, 9, 3, 5, 7, 1, 6, 3, 4, 2, 7, 2, 2, 5]
    return [x[i] * y[i] for i in range(k)]
def cadd_640c9c4d(x):
    return [x[i] + 6192845697 for i in range(k)]
def cxor_d339f91c(x):
    return [x[i] ^ 4955927105 for i in range(k)]
def csub_b73a0cb6(x):
    return [x[i] - 190096121 for i in range(k)]
def deck_b0972cc4(x):
    return x[:25] + x[26:32] + x[32:] + x[25:26]
def chadd_c2522c75(x):
    y = [ord(p) for p in 'fa300cbfcf724a2fd0bb68b5125739fb3d22']
    return [x[i] + y[i] for i in range(k)]
def chadd_1feaf785(x):
    y = [ord(p) for p in '767b8ae423484d6e0da947d4207a9c417925']
    return [x[i] + y[i] for i in range(k)]
def csub_bf7e54b2(x):
    return [x[i] - 3185917314 for i in range(k)]
def xor_7c90aa84(x):
    y = [9633194894, 9194149459, 5208109975, 6055764444, 4513880030, 3506834879, 6979295425, 8885160247, 5972680443, 2589225635, 9518339884, 7647847737, 7497007693, 9664291092, 4156888828, 9945295593, 2145002813, 3821537679, 9512100037, 2180033108, 6569707431, 4171031928, 7405928502, 8160966316, 4754787116, 4770843086, 8555976471, 5151287075, 6444890422, 8753253917, 8899611385, 3276047101, 1272636754, 2632545574, 3066896392, 2486965441]
    return [x[i] ^ y[i] for i in range(k)]
def sub_121bf4fc(x):
    # kek
    y = [3662371911, 5526375982, 6811868149, 2297857063, 9738503601, 1420998296, 92953747, 6965079079, 6416160343, 2676854370, 2011026487, 8902936787, 4927099208, 939818198, 518899553, 8333350172, 3604748038, 3058566166, 2836368233, 5955498877, 3783209356, 6688119772, 8399152486, 8171354270, 4260426187, 5378964161, 8029036203, 1266503321, 5504179305, 710990717, 3692868619, 7248211897, 9609206201, 7653416023, 3834928372, 2140954981]
    return [x[i] - y[i] for i in range(k)]
def cadd_ad85576d(x):
    return [x[i] + 9933703961 for i in range(k)]
def chmul_f8790cde(x):
    # just reverse it
    y = [ord(p) for p in 'a7f6064861ed5601aa26e416817b6ebf9204']
    return [x[i] * y[i] for i in range(k)]
def cadd_a4fd2ffb(x):
    # lel
    return [x[i] + 2418763145 for i in range(k)]
def chunk_41ac0046(x):
    # lel
    return x[6:] + x[:6]
def chunk_1045daa0(x):
    # rekt
    return x[6:] + x[:6]
def cadd_774989e3(x):
    # so good
    return [x[i] + 203605617 for i in range(k)]
def chxor_0f6be034(x):
    # lel
    y = [ord(p) for p in '2780795f61fe4c3883946667090287cf6720']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_65983a34(x):
    return [x[i] * 10 for i in range(k)]
def cxor_9eab5098(x):
    return [x[i] ^ 5733275829 for i in range(k)]
def chsub_d94b1450(x):
    y = [ord(p) for p in 'dde74f468d5f6a9782b209a4a9f4da5739f7']
    return [x[i] - y[i] for i in range(k)]
def mul_7fd5912a(x):
    y = [2, 4, 4, 2, 4, 2, 5, 6, 5, 3, 5, 1, 1, 6, 6, 1, 6, 5, 6, 1, 6, 2, 6, 1, 4, 5, 2, 5, 1, 5, 6, 6, 5, 5, 4, 3]
    return [x[i] * y[i] for i in range(k)]
def cadd_4d6936c6(x):
    # lel
    return [x[i] + 6060291740 for i in range(k)]
def chsub_cbfe2a72(x):
    # kek
    y = [ord(p) for p in 'cee69999a71d0acb5a868e30f0edc827b0ee']
    return [x[i] - y[i] for i in range(k)]
def chadd_f260ba56(x):
    # encryption
    y = [ord(p) for p in 'aea2509b9632975f0dfa9571aef2a7d273cf']
    return [x[i] + y[i] for i in range(k)]
def mul_9dbf3796(x):
    y = [4, 7, 1, 3, 6, 4, 4, 1, 4, 3, 5, 7, 4, 5, 3, 5, 2, 1, 5, 1, 1, 7, 7, 7, 1, 3, 4, 2, 6, 7, 1, 6, 7, 4, 7, 3]
    return [x[i] * y[i] for i in range(k)]
def chxor_e11d30ee(x):
    # encryption
    y = [ord(p) for p in '477f8a35a2371e728983bc3b92bb4f005382']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_425fc483(x):
    return [x[p] for p in [31, 25, 20, 35, 33, 26, 15, 10, 3, 16, 34, 5, 24, 12, 6, 19, 2, 7, 23, 29, 17, 22, 14, 0, 8, 9, 1, 13, 28, 30, 11, 21, 18, 32, 27, 4]]
def chunk_a5854668(x):
    return x[36:] + x[:36]
def chsub_b9c56acf(x):
    # lel
    y = [ord(p) for p in 'c22d2220b87220272d269148199c7b49818e']
    return [x[i] - y[i] for i in range(k)]
def csub_db2c770b(x):
    return [x[i] - 3352132127 for i in range(k)]
def add_e3a56377(x):
    y = [4666834455, 1053484010, 151451150, 9198953327, 8090030564, 4395439768, 8470844997, 167608883, 5026304655, 9969788938, 5774894511, 7366860234, 5012573815, 4789166490, 9216041647, 6183761383, 6690418158, 7992352626, 7474176645, 467159151, 2681997917, 6390509134, 4494094064, 247215161, 813974412, 1864926597, 6549484352, 4679500311, 9706267776, 9021095077, 728193729, 8317207583, 4824865183, 8369029734, 491916710, 7218208273]
    return [x[i] + y[i] for i in range(k)]
def shuffle_b1134b2a(x):
    # kek
    return [x[p] for p in [25, 3, 33, 9, 30, 21, 12, 28, 13, 26, 15, 35, 4, 10, 2, 34, 32, 20, 1, 0, 19, 11, 31, 5, 24, 8, 17, 7, 29, 18, 14, 27, 6, 22, 23, 16]]
def chxor_aa6e4431(x):
    # so good
    y = [ord(p) for p in '68435c55bd2ef8f93e78bd3c7e55ddd4b7fd']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_d8404029(x):
    # encryption
    return [x[i] ^ 7960148316 for i in range(k)]
def chsub_d05da0d8(x):
    y = [ord(p) for p in 'fa6c685f79642d3e911a7f7a13bb5d94bcd1']
    return [x[i] - y[i] for i in range(k)]
def csub_2b0ae6b8(x):
    # the flag is flag{jk}
    return [x[i] - 6917884475 for i in range(k)]
def chxor_ce40491b(x):
    y = [ord(p) for p in '4cc035274db37eff5b763c76a7fe55f716fc']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_ac3a4598(x):
    return x[9:] + x[:9]
def cxor_d1f287be(x):
    return [x[i] ^ 9142384833 for i in range(k)]
def cadd_363ab440(x):
    # the best
    return [x[i] + 215850815 for i in range(k)]
def csub_37af1f58(x):
    return [x[i] - 2541974798 for i in range(k)]
def chunk_65bd8d47(x):
    # lmaooo
    return x[35:] + x[:35]
def chadd_c58d2df9(x):
    # evil
    y = [ord(p) for p in 'a7297390c9d0eb5d6195f0e4c3310a1a6419']
    return [x[i] + y[i] for i in range(k)]
def chsub_85be1feb(x):
    y = [ord(p) for p in 'bae518a54ecc534c62a197db73cc6f9b05df']
    return [x[i] - y[i] for i in range(k)]
def chsub_4cadc753(x):
    y = [ord(p) for p in '109831e239ce6429b296360f9055049cc8de']
    return [x[i] - y[i] for i in range(k)]
def xor_b3655f1c(x):
    # evil
    y = [3379959091, 7654667368, 3498756753, 4686788242, 3968750104, 7918905861, 8292848429, 1791699939, 9983431520, 5649331524, 9798760055, 7326842249, 6957928666, 4227390213, 189278547, 7540774433, 4051817057, 2809066439, 6238148563, 900880397, 5943486085, 9298697880, 2328386784, 7509998881, 1795099289, 345301569, 336715401, 6946856718, 4449010027, 8048758606, 6405855324, 2509724321, 7298953991, 815926928, 3692689563, 263354334]
    return [x[i] ^ y[i] for i in range(k)]
def chadd_e5b699cb(x):
    # lmaooo
    y = [ord(p) for p in '04fd18117e3c8bcb12c210a102272611f152']
    return [x[i] + y[i] for i in range(k)]
def chxor_be9a01b5(x):
    y = [ord(p) for p in '36cbea758e402d236fcee20f18f4017dc6d3']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_e4593d98(x):
    # mucho encrypto
    y = [ord(p) for p in 'cff195470b5b8d4180ec47c56462892ffab0']
    return [x[i] ^ y[i] for i in range(k)]
def chsub_8fa33f3e(x):
    y = [ord(p) for p in '0b1c8d20964f2e7a4897a84c9f43c10b9820']
    return [x[i] - y[i] for i in range(k)]
def mul_194ab633(x):
    y = [2, 4, 2, 4, 2, 1, 2, 1, 4, 2, 3, 4, 3, 4, 1, 1, 3, 4, 4, 3, 2, 2, 1, 1, 3, 4, 2, 1, 2, 3, 2, 3, 1, 4, 2, 1]
    return [x[i] * y[i] for i in range(k)]
def cadd_97daaa50(x):
    return [x[i] + 554763708 for i in range(k)]
def chmul_d62489f9(x):
    # so good
    y = [ord(p) for p in '71066e333fb8e6b142b7ef5b52e936f215f2']
    return [x[i] * y[i] for i in range(k)]
def chxor_69637723(x):
    y = [ord(p) for p in '26588d91a75015112d987acf8b2b1425bf18']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_ce24a612(x):
    return x[34:] + x[:34]
def cxor_4cb585c4(x):
    return [x[i] ^ 4244766012 for i in range(k)]
def cxor_6c5cd5c7(x):
    return [x[i] ^ 4714389036 for i in range(k)]
def chmul_451b1e6b(x):
    y = [ord(p) for p in '31351d746a224d799055798b37c24bb74a51']
    return [x[i] * y[i] for i in range(k)]
def digsub_b8659438(x):
    # the best
    return [int(str(n)[:1] + ''.join(['3', '6', '0', '1', '8', '5', '4', '2', '9', '7'][int(p)] for p in str(n)[1:])) for n in x]
def sub_f1ab5525(x):
    # the flag is flag{jk}
    y = [4181083352, 1310416147, 4590178602, 3816712883, 4628838945, 5245830411, 36041386, 7016374350, 7059370794, 1702098785, 1388133813, 9422623215, 7447724239, 4023502560, 6149995916, 39204880, 457303210, 5031304351, 7040308510, 3818861784, 1233876870, 8744030424, 8503216631, 7050575455, 3210824127, 3638038981, 3213930996, 9755615365, 1002994102, 528199145, 6301902502, 150189646, 2665560605, 4040496696, 9949833785, 3299369261]
    return [x[i] - y[i] for i in range(k)]
def chadd_c23de33f(x):
    # rekt
    y = [ord(p) for p in '5cb866f967410a58a7d0cc21ee0c4a572bef']
    return [x[i] + y[i] for i in range(k)]
def cxor_95401b5f(x):
    # kek
    return [x[i] ^ 9147477935 for i in range(k)]
def cmul_8c0028d4(x):
    # lmaooo
    return [x[i] * 7 for i in range(k)]
def chmul_b28ec3c8(x):
    # mucho encrypto
    y = [ord(p) for p in '4d7da7bbdba07ebd5cc40c8ea136b098a791']
    return [x[i] * y[i] for i in range(k)]
def chsub_22f9d42d(x):
    y = [ord(p) for p in 'fdb0836958971a70e92e110cbdb77370915c']
    return [x[i] - y[i] for i in range(k)]
def cxor_29df8c0e(x):
    # the flag is flag{jk}
    return [x[i] ^ 5101800729 for i in range(k)]
def sub_5730f691(x):
    y = [1022268040, 9022616910, 9871850592, 1762073974, 1515489412, 2851415767, 1008204564, 8414110246, 8538176846, 2394567185, 6794855683, 7435377840, 7318263836, 6493573191, 9238925270, 369291835, 6003355139, 7685844076, 9278407786, 2805336256, 3186366145, 2301272687, 8160473819, 9379685947, 6577130502, 6961484799, 8878358685, 6531557178, 9098275787, 2566718131, 6171276668, 2200905241, 9002521960, 1373264634, 5328749756, 3434671363]
    return [x[i] - y[i] for i in range(k)]
def chsub_49c13ad0(x):
    # mucho encrypto
    y = [ord(p) for p in '4eae32ce3156bd0987e432e828a08aadb06d']
    return [x[i] - y[i] for i in range(k)]
def chunk_0046d260(x):
    return x[23:] + x[:23]
def deck_1b9f4481(x):
    # encryption
    return x[19:22] + x[22:] + x[:13] + x[13:19]
def cxor_6eabaf02(x):
    # the best
    return [x[i] ^ 405497092 for i in range(k)]
def shuffle_1676c2c9(x):
    # kek
    return [x[p] for p in [33, 35, 24, 30, 16, 26, 21, 32, 9, 6, 0, 7, 23, 5, 31, 15, 3, 14, 28, 19, 20, 27, 4, 29, 10, 22, 18, 2, 12, 13, 25, 34, 8, 1, 17, 11]]
def xor_3d2b41ae(x):
    # kek
    y = [8910892, 7777898397, 5094564086, 7859464859, 2482948584, 3805742830, 4107132764, 1237720091, 2362399357, 9163714264, 8718138705, 2007973595, 3353786475, 9562042848, 5891432023, 3647897234, 2912595160, 4629962204, 4188610951, 4815656735, 8908288590, 7112582115, 7068005117, 8610760834, 3011824782, 7760976461, 7315626348, 7410362754, 7207366860, 5502154162, 7851643200, 517534578, 2475278422, 970916095, 1389695935, 8025207900]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_97c3e5f8(x):
    y = [ord(p) for p in 'abd5b65de8cdae5803f993818b0e53cbe2cb']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_52640d1f(x):
    # encryption
    y = [ord(p) for p in 'c36a3c4d93762ad6d1ee6bb9ac85789db114']
    return [x[i] + y[i] for i in range(k)]
def chsub_c48765e6(x):
    # the flag is flag{jk}
    y = [ord(p) for p in 'afa7e73eaa1429070ea2dae192ab97b9efde']
    return [x[i] - y[i] for i in range(k)]
def sub_4277a989(x):
    y = [2139471733, 3286797140, 6511544902, 2800918837, 9396956617, 6228448575, 6557251791, 9965429032, 4577448702, 634110409, 1084878947, 6081625040, 2536265716, 5115195205, 3469313847, 5884207449, 8797312477, 1957349294, 7476573575, 3832872572, 4940635785, 5617590145, 4511204518, 1352556843, 9450531795, 1580839064, 8648815992, 7077028375, 5016497665, 3689848962, 4406642139, 3172244360, 4505420274, 7314275532, 7243887720, 6496399134]
    return [x[i] - y[i] for i in range(k)]
def chmul_78f70640(x):
    # lel
    y = [ord(p) for p in '6b884c27a33c9c6bc40c7f7a555ace0a5dc6']
    return [x[i] * y[i] for i in range(k)]
def sub_ce128c36(x):
    y = [33109030, 3067536226, 7624885356, 5497681561, 2629351444, 680251865, 9206571384, 3908152016, 4097692036, 4088744715, 7982415085, 7641799980, 8927334350, 659780935, 5477088936, 857721069, 4845438567, 3788372301, 3656193497, 2138711099, 4330351862, 8642739209, 3628909566, 8034200715, 9547182458, 2863546357, 3979871123, 8896924291, 4120390574, 8973943045, 1615489184, 8986936299, 6028238181, 4383039842, 6316989384, 9987373866]
    return [x[i] - y[i] for i in range(k)]
def csub_1951cfda(x):
    return [x[i] - 9909714203 for i in range(k)]
def deck_0660324c(x):
    # just reverse it
    return x[28:29] + x[:14] + x[29:] + x[14:28]
def csub_f291b39b(x):
    return [x[i] - 7314049062 for i in range(k)]
def cxor_03f5597b(x):
    return [x[i] ^ 612855101 for i in range(k)]
def cmul_fe6ecce9(x):
    return [x[i] * 5 for i in range(k)]
def cadd_e3f803ca(x):
    # the best
    return [x[i] + 116326533 for i in range(k)]
def chmul_0db588dd(x):
    # lmaooo
    y = [ord(p) for p in '2a8cdcc1908545d8ecef1496207d44ef373d']
    return [x[i] * y[i] for i in range(k)]
def xor_31c0451b(x):
    # shiet?
    y = [3513422216, 5066971907, 2191468836, 3105471919, 2514307585, 2621852668, 6421070233, 4606204878, 3458596320, 6857105377, 4234456455, 8776805387, 1787300009, 8871395628, 1582201192, 3504589538, 9218959223, 9104356649, 4317664022, 5333307204, 6640626172, 7728908572, 5356393868, 7064025607, 8692839995, 7128538550, 6200684946, 2786509085, 4650042815, 7641021684, 9028557339, 8288929719, 96902516, 1967513711, 8747659045, 2614656570]
    return [x[i] ^ y[i] for i in range(k)]
def csub_61a277c4(x):
    return [x[i] - 3100942517 for i in range(k)]
def digsub_3316ff72(x):
    return [int(str(n)[:1] + ''.join(['1', '5', '8', '2', '3', '9', '0', '7', '4', '6'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_30915728(x):
    # lel
    return [x[p] for p in [22, 10, 20, 14, 2, 23, 6, 33, 9, 25, 16, 11, 24, 7, 15, 0, 13, 1, 18, 28, 21, 17, 31, 30, 32, 4, 26, 35, 3, 12, 8, 5, 27, 34, 19, 29]]
def chsub_7178b8f3(x):
    y = [ord(p) for p in 'c01eb28fd64c41271c89189fe1b52761ac3e']
    return [x[i] - y[i] for i in range(k)]
def cmul_0b1c712d(x):
    # kek
    return [x[i] * 6 for i in range(k)]
def digsub_f8ed932c(x):
    # so good
    return [int(str(n)[:1] + ''.join(['6', '3', '1', '8', '2', '7', '0', '5', '9', '4'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_f3f19079(x):
    # so good
    y = [ord(p) for p in '9802dec22058ebd45c537875fd66bb748eb4']
    return [x[i] * y[i] for i in range(k)]
def deck_2f91b821(x):
    # lmaooo
    return x[:7] + x[12:36] + x[7:12] + x[36:]
def chadd_c2c2b7f7(x):
    # the best
    y = [ord(p) for p in 'a2c8101c393def23a96ed166536d7560889a']
    return [x[i] + y[i] for i in range(k)]
def sub_d4145101(x):
    y = [7540800896, 511992559, 748657495, 4344153655, 4651788603, 2163795860, 4339211820, 2382086386, 7531541708, 8832537811, 5864999247, 4310929194, 1081820027, 763589973, 6172227375, 5969543671, 6126770175, 2451563659, 3320206909, 9335426175, 1805844857, 1481072935, 2792362860, 8276003961, 597417953, 1600880858, 4370576010, 5924372976, 974512321, 7541799573, 8668389572, 6435647435, 2070882181, 2505561194, 6957428920, 3997400187]
    return [x[i] - y[i] for i in range(k)]
def chadd_fed374e0(x):
    y = [ord(p) for p in 'a334538314b4d6448d51740d4a6ec02518f4']
    return [x[i] + y[i] for i in range(k)]
def chmul_215a2fee(x):
    y = [ord(p) for p in '405752bdf92a5433714ea5fb122c3295f527']
    return [x[i] * y[i] for i in range(k)]
def cadd_86ca3121(x):
    return [x[i] + 8015394059 for i in range(k)]
def chxor_cc8c61bf(x):
    # encryption
    y = [ord(p) for p in 'fef0412b662aa936827b1825ca91bde206e9']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_41c79131(x):
    # kek
    y = [ord(p) for p in '087ad03e0a8166af02843b72a82249498260']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_709ceb61(x):
    return [x[i] + 3459206544 for i in range(k)]
def chxor_36059956(x):
    # encryption
    y = [ord(p) for p in '71641d9a55b1fedc867124ab0f4c36c8487e']
    return [x[i] ^ y[i] for i in range(k)]
def xor_77377fa6(x):
    # just reverse it
    y = [8296928612, 3670923288, 6492187869, 6133680030, 7362812791, 7557788124, 6881468981, 1593430617, 8924001667, 6238187748, 4295411799, 9914370231, 8792906706, 3469773056, 625226988, 9155520663, 905433741, 3624600797, 2780587707, 871394019, 3020579707, 1177576189, 3424829297, 4983164723, 2699134700, 8130655121, 4732086502, 2191561328, 1450694334, 9801274899, 4566813194, 8922516458, 8493842134, 5850258398, 3660937782, 3012293383]
    return [x[i] ^ y[i] for i in range(k)]
def xor_eca7972f(x):
    # rekt
    y = [3924341697, 1373348533, 5099653346, 8043221820, 707710029, 7263832914, 4904553148, 7214499284, 5431166923, 1493015501, 8538052209, 4494717424, 711126532, 4567965058, 1799162009, 1520345261, 8188717119, 5940468488, 4632268407, 4254646138, 2926979738, 5533801593, 4008630164, 993273558, 7134999208, 4792154742, 7107269931, 8774800403, 621796714, 6458585228, 6754639857, 2779816482, 8633981397, 2777376345, 1934482891, 9673694519]
    return [x[i] ^ y[i] for i in range(k)]
def xor_9fab62d4(x):
    # so good
    y = [6241847881, 1130350394, 2260100769, 9878722786, 2652335894, 5340177871, 4168539373, 2300726977, 78015693, 3388645253, 8488693800, 7124410740, 7102373883, 2281550046, 1387404822, 3316259028, 2655729158, 3556859040, 3214921895, 2394531545, 2278270543, 6069821618, 384797675, 4159773095, 7980081953, 5029736524, 309846812, 9388452498, 1963571183, 9406086314, 5587164300, 6378360420, 1225807285, 4865094663, 8890395855, 1182412723]
    return [x[i] ^ y[i] for i in range(k)]
def sub_ac9927d6(x):
    y = [2404540850, 6088063811, 6770969602, 9205779734, 3036229845, 9624540996, 6973059516, 6561131960, 6044863153, 7396035195, 4220123987, 3705153253, 2573305746, 7333901601, 8753192121, 5211461410, 9573632593, 9764103275, 6841585091, 887158881, 3142479157, 7482664184, 374310876, 3096026388, 1126022116, 7123594616, 9739608232, 9947767188, 5631235345, 4599063989, 36011383, 1778754155, 7435589158, 1885476217, 2080065132, 319020088]
    return [x[i] - y[i] for i in range(k)]
def digsub_b7608cd0(x):
    # lmaooo
    return [int(str(n)[:1] + ''.join(['4', '2', '7', '8', '1', '3', '6', '5', '9', '0'][int(p)] for p in str(n)[1:])) for n in x]
def chsub_827fc456(x):
    y = [ord(p) for p in '0a212a54191d1d026e0dbae1c934fd036212']
    return [x[i] - y[i] for i in range(k)]
def chunk_91f40280(x):
    return x[2:] + x[:2]
def xor_f41b0fa6(x):
    # just reverse it
    y = [8877029890, 443303334, 6872783279, 1101817498, 1148450714, 1535496094, 8610737039, 6464169629, 6479577465, 1630681006, 4359845408, 993986472, 2265102111, 7019547441, 5011416832, 3569578114, 3881252625, 5415724337, 6044725525, 892625812, 3871166283, 3573562584, 4258209325, 319454610, 2081397191, 8613225941, 3058550882, 5289969904, 55412105, 5900253782, 8410049574, 5481261158, 1037809595, 7200377311, 5840347799, 5112712207]
    return [x[i] ^ y[i] for i in range(k)]
def csub_f4c94d76(x):
    # just reverse it
    return [x[i] - 4354921614 for i in range(k)]
def csub_83d96569(x):
    # lmaooo
    return [x[i] - 8685991605 for i in range(k)]
def mul_74c39d4d(x):
    # mucho encrypto
    y = [1, 10, 6, 5, 5, 7, 10, 2, 4, 10, 9, 8, 3, 6, 4, 1, 3, 9, 4, 4, 2, 8, 4, 4, 3, 9, 6, 1, 7, 8, 6, 10, 6, 8, 6, 1]
    return [x[i] * y[i] for i in range(k)]
def cxor_5fa90da0(x):
    return [x[i] ^ 7634460147 for i in range(k)]
def chmul_df642f23(x):
    # just reverse it
    y = [ord(p) for p in '5803b8dfac5f5e3fb5e1043edbc892ac4f7c']
    return [x[i] * y[i] for i in range(k)]
def shuffle_40f99305(x):
    # evil
    return [x[p] for p in [33, 4, 14, 5, 16, 7, 2, 28, 11, 8, 32, 22, 27, 24, 0, 30, 35, 26, 10, 6, 19, 31, 13, 1, 29, 23, 17, 21, 9, 15, 25, 3, 20, 34, 18, 12]]
def chmul_0ef7cc5e(x):
    # lel
    y = [ord(p) for p in 'db3743547e29011f2ee0375a1097e1eed907']
    return [x[i] * y[i] for i in range(k)]
def chsub_4d7b9897(x):
    y = [ord(p) for p in '252fecb66f0a54fb8742c87b25655b942030']
    return [x[i] - y[i] for i in range(k)]
def csub_46c4ad67(x):
    # shiet?
    return [x[i] - 7423472352 for i in range(k)]
def add_e0bbf910(x):
    # so good
    y = [167348151, 596041404, 7350194150, 6494961365, 3259391441, 1560057671, 8414557955, 2385390716, 7996930492, 8795091385, 1803537564, 7709163789, 694954745, 9667691589, 8883578862, 3236578504, 202996062, 7781377718, 1745800664, 2798724754, 5120581796, 1180144995, 9667636081, 8454550904, 9830404691, 9583814172, 8933935133, 9739239362, 2407295361, 4492152614, 7230865269, 538791645, 311981799, 111999133, 2009838295, 9704016719]
    return [x[i] + y[i] for i in range(k)]
def chadd_f137e21d(x):
    # lel
    y = [ord(p) for p in '9c744b43a8356b2b051639424e9a2b5235dc']
    return [x[i] + y[i] for i in range(k)]
def chsub_24c471c0(x):
    # rekt
    y = [ord(p) for p in '477b5c94c8a241c7959dca288e1e9e07c740']
    return [x[i] - y[i] for i in range(k)]
def chadd_6b07665a(x):
    # evil
    y = [ord(p) for p in '13a0370cf89e55c2fdf1193afa5fc824f15f']
    return [x[i] + y[i] for i in range(k)]
def sub_b5dac8cd(x):
    # shiet?
    y = [1913199732, 2146063701, 8640566597, 914226400, 9843747791, 5858624337, 4449829990, 4805207824, 5852098611, 5469829122, 8788729059, 5426293595, 6895147565, 3898717229, 1006888593, 655737616, 7487607552, 5452295672, 3009436182, 2489417084, 2340127107, 2805491623, 7311485704, 9147047614, 1186361926, 5976212601, 666815637, 8079145618, 994168181, 9778871789, 8716901731, 3579603234, 8538940594, 1827636956, 4898906895, 578918766]
    return [x[i] - y[i] for i in range(k)]
def chsub_f57de7cd(x):
    y = [ord(p) for p in 'fe44fee936472db2ced1648bf1bdc3e1966c']
    return [x[i] - y[i] for i in range(k)]
def digsub_67b6032a(x):
    # just reverse it
    return [int(str(n)[:1] + ''.join(['0', '9', '2', '1', '3', '7', '6', '5', '4', '8'][int(p)] for p in str(n)[1:])) for n in x]
def chunk_aee13a4a(x):
    # evil
    return x[23:] + x[:23]
def chxor_a8789254(x):
    # evil
    y = [ord(p) for p in '8fdb62a5fe0fc698813dc5cb7786f63d8299']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_606c6cc5(x):
    # the flag is flag{jk}
    return [x[i] * 5 for i in range(k)]
def sub_6bf5673d(x):
    # evil
    y = [4010259897, 3170493439, 8491766548, 2801886031, 2363866273, 2963028859, 6984925414, 7548224298, 7265411151, 7613831566, 8976279992, 7992847485, 6992374193, 8017024914, 4134700895, 1479479494, 1568079744, 6938064395, 2257809306, 7244440744, 2931208757, 817042777, 6022919197, 3281056729, 604041182, 6528429847, 9351341977, 2879903606, 8525139199, 1805055073, 2810982253, 2418032015, 227572605, 6073736902, 6014331595, 3591717410]
    return [x[i] - y[i] for i in range(k)]
def digsub_dae4f397(x):
    return [int(str(n)[:1] + ''.join(['1', '4', '7', '6', '0', '8', '5', '9', '2', '3'][int(p)] for p in str(n)[1:])) for n in x]
def chsub_063a5399(x):
    y = [ord(p) for p in '990d383c5f776b66392214cb401bd94e4277']
    return [x[i] - y[i] for i in range(k)]
def csub_9560b32f(x):
    # kek
    return [x[i] - 1110766503 for i in range(k)]
def add_6ad8ed33(x):
    y = [3532656463, 6249173984, 8561296917, 7234844295, 5617184365, 6201415318, 2099073262, 8508564461, 533652385, 7103191093, 7630273018, 5437308037, 8946556029, 9127805643, 9802925589, 1192348812, 8952703677, 5780154762, 5201799469, 8796616968, 3489081696, 1755111745, 1215645612, 899103184, 3004283421, 9013856545, 3847787980, 5512663969, 4002739768, 8777309876, 9997551658, 7417169478, 2357763576, 3711906859, 6543478057, 8212102069]
    return [x[i] + y[i] for i in range(k)]
def deck_b688821e(x):
    # rekt
    return x[30:35] + x[:18] + x[18:30] + x[35:]
def digsub_5a1f6d2f(x):
    # the best
    return [int(str(n)[:1] + ''.join(['5', '4', '1', '6', '9', '3', '2', '8', '0', '7'][int(p)] for p in str(n)[1:])) for n in x]
def cadd_9a06eb38(x):
    return [x[i] + 3301659170 for i in range(k)]
def chadd_acce32b7(x):
    y = [ord(p) for p in 'de5b6f351b05f0c5bbd96c4a11ce4456a050']
    return [x[i] + y[i] for i in range(k)]
def sub_92f79353(x):
    y = [7154488937, 5785538357, 4703041751, 183843841, 7346769328, 2529603550, 589881031, 7957205513, 1348128694, 2638334179, 5285587247, 7386542573, 994254406, 5709993574, 8799709804, 1056573519, 9285262221, 5340194469, 3351523080, 6608887983, 9744068844, 4959088889, 966189819, 7427309328, 7909889325, 8260676491, 7105146466, 2208798949, 4906942613, 2072932564, 4423381780, 3480324673, 2995806567, 106878294, 2841409298, 7183114801]
    return [x[i] - y[i] for i in range(k)]
def chsub_a70db66e(x):
    y = [ord(p) for p in 'a7699b688bf60bbb87e1ef78a52796673045']
    return [x[i] - y[i] for i in range(k)]
def chxor_65aad212(x):
    # shiet?
    y = [ord(p) for p in '1ad7ea207d4562d54c1ae1bd1662e493f431']
    return [x[i] ^ y[i] for i in range(k)]
def csub_0f54d33d(x):
    # the best
    return [x[i] - 6817182813 for i in range(k)]
def cmul_16ddfa97(x):
    return [x[i] * 6 for i in range(k)]
def deck_746bb1be(x):
    return x[35:] + x[20:31] + x[31:35] + x[:20]
def add_74483928(x):
    # evil
    y = [3634115321, 3620146344, 6229255327, 7415394160, 3428824897, 1223987619, 1290988730, 9555210640, 7814801295, 6502447939, 7649830437, 719484085, 5457438272, 4589084895, 7540438743, 5630079357, 5606121375, 3701691388, 3621353158, 2338117537, 403848917, 5244406892, 4092843117, 5452307220, 2004417147, 1500207962, 2217292751, 4601217764, 2878945340, 6121194570, 5092707505, 4341164405, 2328227982, 857419198, 510148085, 9124576645]
    return [x[i] + y[i] for i in range(k)]
def chxor_3c2c0416(x):
    y = [ord(p) for p in '67b0d1ac69a2a1727cc29851e68610c36e4c']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_b38e11c1(x):
    # the best
    return [x[i] + 6715134678 for i in range(k)]
def csub_ee940cd2(x):
    return [x[i] - 9044097867 for i in range(k)]
def shuffle_2a87a3a3(x):
    return [x[p] for p in [32, 21, 33, 11, 15, 26, 23, 20, 1, 28, 18, 29, 4, 12, 9, 30, 17, 25, 24, 13, 31, 35, 34, 0, 3, 6, 14, 27, 2, 5, 22, 16, 8, 10, 7, 19]]
def chsub_8809f725(x):
    # so good
    y = [ord(p) for p in 'f134f44d917407c98acc6bc9917e2fc96e3c']
    return [x[i] - y[i] for i in range(k)]
def csub_23f2ff18(x):
    # encryption
    return [x[i] - 7665319957 for i in range(k)]
def cmul_5193391a(x):
    # evil
    return [x[i] * 9 for i in range(k)]
def chunk_e42e1b84(x):
    # evil
    return x[28:] + x[:28]
def add_1269779e(x):
    y = [8599116624, 5620871301, 8461913497, 7752099862, 5250389121, 1648130249, 9377617539, 8208717209, 6160595381, 5121714386, 7616771597, 2808131019, 2383520224, 4746357188, 7017001064, 7583042596, 2069107076, 1127722253, 5180380525, 2398335425, 1915892164, 3670995585, 8092966835, 2248734683, 9373498951, 8523907314, 927872893, 8164315645, 7123133105, 6019319515, 8919302378, 2502200689, 6090110372, 7819827543, 5484130051, 1943846531]
    return [x[i] + y[i] for i in range(k)]
def chunk_e5aaf751(x):
    return x[25:] + x[:25]
def deck_7e075c64(x):
    # the best
    return x[22:31] + x[:16] + x[31:] + x[16:22]
def chmul_18ecaa08(x):
    y = [ord(p) for p in '921884a11f205505209d4fa23760b8103e9f']
    return [x[i] * y[i] for i in range(k)]
def chmul_414bc877(x):
    y = [ord(p) for p in 'ec56703ca7a78b1446a978890e5c37e94981']
    return [x[i] * y[i] for i in range(k)]
def xor_19983c03(x):
    y = [8609980618, 2286936194, 5999845596, 8459382307, 7017056430, 41937551, 1708881933, 1223415399, 8135273014, 4113299064, 5075296963, 8572485683, 2188982123, 7655433243, 6874886396, 7609465390, 7518154401, 4714538065, 8588786226, 3732291191, 8838533607, 3714933949, 7753114623, 8643276091, 7130333770, 9663723234, 589100060, 4169794893, 101407485, 8781692737, 935325973, 1667207327, 4574800276, 5564659657, 5983449807, 6116652748]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_6fa30167(x):
    return x[22:] + x[:22]
def chsub_0063bc32(x):
    y = [ord(p) for p in 'a4536a6078b6680bf348ecce16d002f4169c']
    return [x[i] - y[i] for i in range(k)]
def chxor_6fdbabf9(x):
    # mucho encrypto
    y = [ord(p) for p in 'af01ed590ac7c7015221481ce5c940f6e9fb']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_edb8a938(x):
    return [x[p] for p in [31, 20, 27, 29, 9, 7, 22, 35, 18, 14, 11, 33, 32, 3, 8, 4, 10, 1, 30, 28, 23, 6, 5, 21, 24, 16, 19, 0, 26, 15, 25, 17, 12, 34, 13, 2]]
def chsub_15fcbd3c(x):
    # so good
    y = [ord(p) for p in '3e558a311f8ba42c2400228f3d80a9d56dca']
    return [x[i] - y[i] for i in range(k)]
def sub_3cb32b59(x):
    # lel
    y = [9009271618, 110547646, 5736393174, 7172797111, 9803285406, 3112033054, 7299998066, 1552254312, 8762208438, 125127899, 9157444122, 3229215625, 5268303719, 1598300120, 6530512282, 3775533882, 7575674860, 2371583573, 9911896715, 7765919869, 3830518610, 9986084916, 4117737244, 5436399268, 4169700570, 8296114079, 4506950984, 8556722654, 6058683401, 4881640658, 9391769046, 8692284362, 1055058842, 3609684553, 3726141765, 6696694169]
    return [x[i] - y[i] for i in range(k)]
def xor_ddf28b31(x):
    # lmaooo
    y = [1953181550, 4531799508, 2404864445, 6990590572, 5823964615, 7437906080, 4760663356, 8468105766, 4471961218, 1260915393, 7246257377, 5260272924, 4404643544, 2206318950, 2208582043, 6885018425, 8187978611, 1084936137, 6322863429, 5017983439, 7563767949, 8891664705, 5712459385, 5734117669, 522402968, 2216722037, 9078154441, 8433021523, 9966147796, 3590601397, 6479060089, 5019942493, 8344492147, 8150303323, 7811084312, 7651090784]
    return [x[i] ^ y[i] for i in range(k)]
def mul_60fbc31e(x):
    # lel
    y = [4, 3, 6, 3, 1, 2, 5, 6, 1, 6, 6, 5, 6, 1, 3, 2, 3, 1, 5, 6, 3, 2, 4, 1, 4, 1, 6, 4, 6, 2, 2, 3, 2, 1, 1, 5]
    return [x[i] * y[i] for i in range(k)]
def xor_e9151d45(x):
    # so good
    y = [8623020384, 4214024434, 8031052357, 3622117741, 7708593486, 4452467489, 1142373247, 1914360283, 248399475, 374025595, 7791449073, 2520567306, 8104111724, 4132287160, 2321624483, 1453189100, 5735536569, 3777845728, 9311968564, 3898063517, 8357526282, 2894777561, 5440035042, 7134706816, 2300590307, 2460223495, 7335551435, 8322943827, 6744809592, 5201715643, 9802520227, 6366325773, 7773303718, 4364522713, 3380936198, 5711697397]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_6b9010a5(x):
    # mucho encrypto
    return [int(str(n)[:1] + ''.join(['5', '4', '9', '0', '6', '3', '7', '2', '8', '1'][int(p)] for p in str(n)[1:])) for n in x]
def sub_2dfefd1b(x):
    # lel
    y = [1514060620, 318974612, 5864951603, 2023653007, 3322872640, 8590515168, 8602692963, 4591066528, 7953364125, 9947919748, 3549681685, 2775823492, 6254809368, 91720640, 3448465807, 1797429586, 1311252976, 1700403592, 7025911466, 9299627227, 2309745730, 481199857, 334868815, 6428170089, 9765047802, 9718639442, 1178000906, 6059023475, 5381516427, 5487750309, 5005084621, 146432533, 7183449012, 2894557882, 554207787, 7447028400]
    return [x[i] - y[i] for i in range(k)]
def csub_0b003b96(x):
    # rekt
    return [x[i] - 5580478116 for i in range(k)]
def cadd_f1e2dc73(x):
    return [x[i] + 4253991876 for i in range(k)]
def sub_91d3d73f(x):
    y = [3259209091, 2424313109, 7734341046, 9570708503, 7169585825, 7866633219, 8855889878, 3475582879, 2357656286, 8949583466, 4954211362, 6853516937, 7847718476, 4253689369, 8463143557, 4988847251, 4564793663, 1358719853, 506643641, 4739554293, 2128402804, 7367025735, 6204542672, 8133087145, 9945667720, 1946961062, 5916664726, 945555817, 9202407168, 3256931881, 681491037, 4960508965, 2073682017, 2605009251, 9941714216, 7881347996]
    return [x[i] - y[i] for i in range(k)]
def deck_346294ab(x):
    # the flag is flag{jk}
    return x[5:13] + x[15:] + x[:5] + x[13:15]
def chadd_28036696(x):
    # rekt
    y = [ord(p) for p in '4f65a47cc3eca57724c1f45ce18ea2fdc20e']
    return [x[i] + y[i] for i in range(k)]
def cadd_d629e9a0(x):
    return [x[i] + 2589019949 for i in range(k)]
def add_c176d98f(x):
    y = [1141680754, 222247060, 8854718306, 1695768354, 3229157197, 5677469908, 5021089063, 2983040850, 9138115995, 622233698, 9450545271, 9963448066, 6469011787, 9682191303, 2512491769, 3642771551, 3355347697, 1195559394, 5218022565, 7065935299, 8891017175, 5492583472, 9078029806, 6145529250, 8067467007, 1910578930, 3147960890, 1759744628, 716899111, 2600617766, 43753674, 2557732158, 7469405333, 3142013389, 4989262504, 5334275292]
    return [x[i] + y[i] for i in range(k)]
def xor_5baa6117(x):
    # the flag is flag{jk}
    y = [8545327249, 7310325757, 640586002, 8795882026, 8474044746, 3795200758, 2516963396, 8663716324, 6296171747, 8380999557, 5439822842, 2203491364, 5363935184, 4524526744, 4778970954, 2748064572, 358953580, 643933096, 5623547763, 6064093684, 94789881, 1751847725, 8083681060, 2538859283, 693217710, 7923393343, 403530840, 884716321, 2953979769, 6411286780, 7612908188, 9086681921, 3190724869, 3314446896, 7627906059, 6481329970]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_968aab31(x):
    y = [ord(p) for p in '192c076b05f652276b462126fade11d2301d']
    return [x[i] - y[i] for i in range(k)]
def chxor_6b786c2e(x):
    y = [ord(p) for p in '831954509bbdc9e85a949e7c398f92f7be54']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_0d19b008(x):
    return [x[i] ^ 9976485473 for i in range(k)]
def digsub_2b3a8dfd(x):
    # rekt
    return [int(str(n)[:1] + ''.join(['5', '6', '2', '4', '7', '3', '0', '9', '8', '1'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_893e1b56(x):
    return [x[i] * 3 for i in range(k)]
def sub_53dd4b93(x):
    # mucho encrypto
    y = [6633969645, 7682172450, 7820477271, 7421714011, 9762881719, 239202805, 4398214414, 4644102531, 9083610669, 5409816839, 5624594096, 6486084873, 9473271640, 8676694308, 3835861937, 168777871, 9456406222, 9109104988, 7379697590, 3483819743, 5915924151, 8199960567, 8368091108, 6999122842, 3038295466, 3332144550, 772902131, 7540020204, 7885000614, 3211042877, 4484470354, 3165891873, 9013261198, 6291742345, 5121214690, 5382652647]
    return [x[i] - y[i] for i in range(k)]
def deck_5779e567(x):
    return x[:1] + x[11:27] + x[1:11] + x[27:]
def csub_61350fa4(x):
    return [x[i] - 6913056240 for i in range(k)]
def cxor_ebeaa56d(x):
    return [x[i] ^ 7134832011 for i in range(k)]
def chsub_587b045c(x):
    y = [ord(p) for p in '9f4299a61cb69a9234bb1df8b7d166e4fade']
    return [x[i] - y[i] for i in range(k)]
def cadd_0228ee52(x):
    return [x[i] + 7615703549 for i in range(k)]
def csub_77053211(x):
    return [x[i] - 8346665535 for i in range(k)]
def csub_642b1701(x):
    return [x[i] - 9043617644 for i in range(k)]
def add_35671a57(x):
    y = [6474364411, 2482470041, 8099870266, 285828745, 3845334363, 916661446, 4668883988, 86547332, 8257418303, 2971148819, 3351174358, 3356694414, 7882949896, 2503434530, 6307961234, 1253049477, 1444445861, 3001031401, 6192986143, 1166585869, 4578973459, 1107280872, 9419275580, 5492331926, 8316788785, 6014568712, 3975272845, 3298767765, 361963736, 2433172791, 1451787224, 2752462324, 792336648, 4639112047, 8723019538, 3364929014]
    return [x[i] + y[i] for i in range(k)]
def mul_a43ce0da(x):
    y = [3, 8, 10, 2, 8, 7, 4, 1, 2, 6, 2, 2, 5, 9, 9, 8, 7, 6, 9, 8, 9, 8, 7, 5, 8, 8, 8, 10, 7, 3, 3, 6, 5, 6, 10, 4]
    return [x[i] * y[i] for i in range(k)]
def sub_c8b31549(x):
    # evil
    y = [9634141914, 6488961174, 4739477080, 3175795054, 862687406, 5442104196, 6582897537, 9950638399, 1996627745, 8846431254, 4041626484, 2387788622, 3554478157, 6610403364, 9809481630, 8885614331, 2757927578, 5901906419, 842062626, 7201565154, 2867516969, 6237012938, 4208445700, 4056572246, 8118661850, 5609061429, 3697904376, 429124996, 1960926976, 3662113193, 5302083083, 9700614451, 7453191603, 3014692629, 267271738, 9697395556]
    return [x[i] - y[i] for i in range(k)]
def add_e4570f19(x):
    y = [7194643176, 7887125666, 4513756328, 5972817538, 8993290398, 2119788586, 8948573103, 5389871179, 4404458386, 8861451520, 704960976, 3086832762, 620869107, 6001035021, 9951535259, 1815706303, 8774640296, 5811387324, 7709364370, 319619436, 3141103256, 507591667, 1605316418, 1033089186, 4546193806, 3029567039, 7747418289, 9819089744, 8215079240, 8668903937, 5393085527, 2774916666, 8088876407, 5467185739, 7327465609, 6861433906]
    return [x[i] + y[i] for i in range(k)]
def deck_ed174d66(x):
    # the best
    return x[14:15] + x[29:] + x[15:29] + x[:14]
def chadd_5816fd7f(x):
    y = [ord(p) for p in 'e9398cd9977ea2202cb4aea972b82cb1e728']
    return [x[i] + y[i] for i in range(k)]
def cadd_ffecf556(x):
    # lel
    return [x[i] + 7058442410 for i in range(k)]
def chxor_d7d9bf32(x):
    y = [ord(p) for p in 'dac159bc8ecfa27f0b32e0d43f27ee628927']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_663d5067(x):
    # shiet?
    y = [ord(p) for p in 'e67271bf464a5d377ffb40c9bae6339791b5']
    return [x[i] * y[i] for i in range(k)]
def cadd_8c4577cf(x):
    return [x[i] + 8535684980 for i in range(k)]
def sub_27d844ff(x):
    y = [1064065218, 1653349197, 2923057464, 6261764879, 7074985496, 2730763202, 6340178797, 6214792677, 2996516886, 5402380935, 3206759865, 839748169, 9467300971, 2900870466, 3379015944, 4244616210, 8461263321, 6884749623, 4306799168, 219795120, 6500591870, 8862349792, 5362923346, 5284971879, 2765130157, 2265438915, 9894111759, 6637008662, 374854139, 7040120638, 7012714031, 109770114, 782637701, 5665659372, 3464107314, 6773494922]
    return [x[i] - y[i] for i in range(k)]
def cxor_aaa07a69(x):
    # just reverse it
    return [x[i] ^ 4751464911 for i in range(k)]
def sub_5810de75(x):
    y = [6321926750, 1568358614, 6821204512, 7153159050, 3528109194, 6490865695, 1591824366, 2328101145, 5111230944, 8328337519, 6965020853, 5605427632, 3193047327, 6058018135, 9066604118, 6213972515, 4619428796, 6376145103, 7568384241, 3497130752, 3307282185, 7365782063, 3675506379, 7919871482, 2249319361, 9616410017, 4819705495, 6377170929, 2704195653, 9934378061, 1721322512, 6284714942, 5303452058, 8782079452, 3486759869, 5540982036]
    return [x[i] - y[i] for i in range(k)]
def deck_ea4f0b4e(x):
    return x[:3] + x[3:24] + x[29:] + x[24:29]
def xor_7c3bd1e8(x):
    y = [3606508340, 2407042218, 8623268420, 3560356397, 4783151059, 5504340288, 7896647162, 1411763881, 7958040147, 5032849493, 4503091242, 5034892026, 5157301466, 914486764, 3857400425, 1851237833, 3552282900, 5474732827, 4405501363, 9871055283, 1301800313, 1627695561, 1811775615, 7378536095, 3388212042, 841054788, 6896800149, 8388429298, 598620311, 5886207593, 3921329015, 8671116759, 2380363460, 7635107056, 1766663222, 9874144328]
    return [x[i] ^ y[i] for i in range(k)]
def chadd_969cf400(x):
    # so good
    y = [ord(p) for p in '775aafb5ef14bf85c7299571bf4eaf81818f']
    return [x[i] + y[i] for i in range(k)]
def deck_4a82aca6(x):
    return x[31:] + x[18:28] + x[28:31] + x[:18]
def add_059f9292(x):
    # lmaooo
    y = [316992470, 1443179621, 2094974405, 5570005463, 4693679146, 4748146619, 1294258820, 6470874935, 5999252488, 5583455429, 9257999792, 6211219597, 7666883523, 8557941466, 8421795474, 3679108971, 4951129665, 2499809337, 3500229817, 2185189238, 3018669402, 4627181070, 3597515017, 400670852, 4630815460, 8139671675, 3365740987, 8900506479, 2335159684, 4317945616, 6474349056, 4507850865, 5302270986, 2553365463, 667817544, 848385331]
    return [x[i] + y[i] for i in range(k)]
def chunk_26bea2d1(x):
    return x[33:] + x[:33]
def sub_36eea33a(x):
    # the flag is flag{jk}
    y = [5897904779, 2240811149, 7746671436, 4292716153, 3317936664, 6007233739, 3006977295, 6896057692, 3233219106, 9486658603, 637139432, 6238553546, 1463671091, 769858035, 1502151148, 8007762846, 7576646960, 1835840442, 7540949030, 1844173607, 3135539245, 9749363523, 8608755559, 4259054118, 8667893074, 994543941, 1882564498, 2460600821, 8902544482, 1281466489, 4476938806, 2294839468, 5656797927, 256735529, 703370765, 1047956531]
    return [x[i] - y[i] for i in range(k)]
def csub_d14c716c(x):
    # the best
    return [x[i] - 3264117835 for i in range(k)]
def chunk_d4a3f365(x):
    # mucho encrypto
    return x[28:] + x[:28]
def cadd_432be002(x):
    # encryption
    return [x[i] + 3124370719 for i in range(k)]
def cxor_f125fa8a(x):
    return [x[i] ^ 1870656259 for i in range(k)]
def chadd_e1175475(x):
    # lel
    y = [ord(p) for p in 'a72e2405f1e2e6d807c3f6ad1ede1e954f4b']
    return [x[i] + y[i] for i in range(k)]
def cadd_23594983(x):
    return [x[i] + 3447880309 for i in range(k)]
def add_8a75fd19(x):
    # rekt
    y = [2738329382, 4408426629, 9367610208, 8789766507, 7390618688, 2145735109, 4898477631, 2582360664, 3259180935, 4051699093, 4893907551, 6479249371, 3707241401, 8000186115, 4126283188, 2747105159, 1669190222, 9372878592, 5030064460, 5726172350, 9871087654, 8843018799, 3374563222, 1737492954, 856085539, 2122025550, 6691043503, 5395314276, 2651295748, 3131451246, 168888268, 4944556726, 1571819018, 2806770787, 3705146383, 2841128512]
    return [x[i] + y[i] for i in range(k)]
def cmul_3152eceb(x):
    return [x[i] * 10 for i in range(k)]
def mul_bc486461(x):
    # lel
    y = [4, 4, 2, 1, 1, 3, 4, 4, 6, 2, 5, 2, 3, 6, 2, 4, 1, 2, 4, 5, 6, 6, 6, 3, 6, 4, 5, 2, 2, 4, 6, 3, 3, 3, 4, 1]
    return [x[i] * y[i] for i in range(k)]
def cmul_7a36ad1f(x):
    # encryption
    return [x[i] * 6 for i in range(k)]
def shuffle_4ae1874a(x):
    return [x[p] for p in [20, 35, 34, 24, 18, 22, 23, 6, 26, 14, 8, 25, 17, 33, 27, 29, 21, 15, 31, 5, 0, 7, 11, 12, 10, 3, 2, 4, 28, 30, 16, 9, 13, 19, 1, 32]]
def csub_e904b187(x):
    return [x[i] - 9437742108 for i in range(k)]
def cmul_e953e2ca(x):
    # lmaooo
    return [x[i] * 9 for i in range(k)]
def chunk_8476d997(x):
    return x[27:] + x[:27]
def deck_8d38fb8c(x):
    return x[:18] + x[18:25] + x[29:] + x[25:29]
def chxor_db85cf59(x):
    # shiet?
    y = [ord(p) for p in 'e0ed69a48ee9f054ca13e8f4f0730e2639ee']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_f5fbcae0(x):
    # evil
    y = [ord(p) for p in 'f410382866f539d4e05e82768945959ba62b']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_64907dea(x):
    # shiet?
    return x[9:] + x[:9]
def xor_7ede4fd2(x):
    # evil
    y = [3919041064, 799049557, 868620993, 7982259968, 2294313361, 1526005427, 5671776690, 9263194247, 9040773591, 7448433793, 6809779668, 7458844659, 8292699694, 7508851879, 9196788412, 7785595900, 7491765415, 4199368403, 8345050658, 5596498671, 8938191357, 6656364972, 175702274, 5822947381, 2781818600, 4971913491, 4373340403, 3128333035, 5224565950, 9422584338, 244076577, 4069316996, 4789679104, 6083286384, 9752896791, 9785026275]
    return [x[i] ^ y[i] for i in range(k)]
def xor_8a3ad979(x):
    y = [7460976424, 5776994040, 5954718187, 1833045235, 1774173171, 4870773857, 7173936725, 5542204230, 239191843, 2952707199, 1846115762, 801973334, 3953490198, 354752073, 2557592591, 9172067828, 3808658968, 3974957704, 5741264451, 1172143930, 5560284210, 6057423492, 4971084518, 2302962582, 9353496959, 8638463085, 7202294403, 3225842703, 2422851159, 3815998832, 8260292819, 6656905843, 7753885133, 3237977484, 7959794079, 371777116]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_21c1f0e1(x):
    return [int(str(n)[:1] + ''.join(['5', '2', '0', '6', '9', '8', '1', '4', '7', '3'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_67fd8ca7(x):
    # shiet?
    return [x[i] * 3 for i in range(k)]
def csub_ed2f200a(x):
    return [x[i] - 469637882 for i in range(k)]
def chsub_b4abe193(x):
    # the best
    y = [ord(p) for p in '625106fc324ac407f4d6c02bfe03463fbf0f']
    return [x[i] - y[i] for i in range(k)]
def xor_b055d8c5(x):
    y = [549380607, 6539935209, 7184980786, 5987199342, 6218446605, 2962537602, 6918722568, 1712255974, 6593842401, 9380759923, 102571590, 5748650703, 6875645181, 1923414060, 6366151849, 9186693910, 4650249906, 9502716916, 9988187253, 2180334039, 5322342393, 3940057627, 1202676748, 5004269554, 1255418395, 48062521, 2873498342, 2736400216, 2603786297, 6174885916, 9974535990, 713577966, 7272641377, 9982036838, 8138776341, 1755537123]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_6d29d2c8(x):
    y = [ord(p) for p in '39a0240e66f0481952bd4a46578497914bd2']
    return [x[i] * y[i] for i in range(k)]
def shuffle_14e44222(x):
    # mucho encrypto
    return [x[p] for p in [31, 26, 9, 32, 27, 0, 17, 12, 25, 11, 28, 15, 30, 22, 5, 1, 21, 4, 19, 10, 2, 7, 18, 34, 33, 24, 6, 29, 8, 13, 20, 16, 23, 3, 14, 35]]
def xor_a175d05f(x):
    # mucho encrypto
    y = [7927511935, 5850238114, 810532585, 1297533565, 9969925533, 9918685632, 8183960523, 4320871462, 1513694969, 2271610973, 3412255061, 2673189785, 6067062008, 2760550886, 9434679204, 1730001084, 7088205861, 4138263269, 8658273150, 5947948405, 59297746, 7428573047, 5634864116, 6222145067, 4337577949, 5547761474, 9610796267, 5881614832, 1629392645, 5861829232, 6531013405, 9128741976, 1559634205, 2079944192, 7827317078, 2226543803]
    return [x[i] ^ y[i] for i in range(k)]
def xor_68464c0d(x):
    y = [5969186490, 812387475, 3090506418, 7190136532, 6635061529, 7791448428, 6765501652, 4037909362, 6445342636, 4238697003, 7682125953, 837663396, 3318083568, 1856668205, 5380118564, 1007414928, 7585025485, 552346534, 7457483786, 7506865170, 4821251840, 586516067, 6081382674, 2441862844, 6264114504, 1766506061, 3450180737, 2844094026, 3624169683, 913241061, 9185367312, 9922246411, 5709000443, 5561549414, 5451970915, 6495066112]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_63dc4ebb(x):
    # kek
    return [int(str(n)[:1] + ''.join(['9', '7', '3', '4', '5', '8', '6', '1', '2', '0'][int(p)] for p in str(n)[1:])) for n in x]
def sub_7198b6a2(x):
    # lel
    y = [3004047959, 1230471267, 1019676279, 8114455347, 187678760, 5200622904, 9559598015, 7596519108, 4655668137, 7490762896, 2679097947, 2485813058, 7191943649, 51972624, 61040044, 3730068187, 1637139193, 2807548471, 9862880656, 8514577847, 1863056811, 5495785796, 9673600476, 6153737241, 4303689663, 5318217044, 7176231795, 8234863540, 1702459727, 4403815694, 466394288, 5565880959, 1673837427, 9600665901, 8864039802, 9110080772]
    return [x[i] - y[i] for i in range(k)]
def csub_fc0bc142(x):
    return [x[i] - 9353886255 for i in range(k)]
def chadd_81dfe861(x):
    # lmaooo
    y = [ord(p) for p in 'ffdbc0738c0b1bf90605a2e70ac1a53adb11']
    return [x[i] + y[i] for i in range(k)]
def cadd_22e59670(x):
    # lmaooo
    return [x[i] + 9199350660 for i in range(k)]
def chmul_ee75a8f1(x):
    # encryption
    y = [ord(p) for p in '0da94b8141234267b7a42d1ed255dc055996']
    return [x[i] * y[i] for i in range(k)]
def csub_fe63b620(x):
    return [x[i] - 7461252683 for i in range(k)]
def mul_bdb89cce(x):
    # the flag is flag{jk}
    y = [1, 1, 2, 2, 2, 5, 5, 3, 4, 3, 3, 5, 6, 3, 1, 4, 6, 5, 6, 5, 4, 2, 6, 1, 5, 3, 2, 2, 2, 4, 3, 4, 5, 2, 6, 2]
    return [x[i] * y[i] for i in range(k)]
def xor_35ce8bcd(x):
    y = [3504415741, 4940833130, 6628974101, 6747647427, 2047185364, 8659736480, 1071748267, 1217200761, 2244523803, 1542969321, 9178371251, 2832055010, 7182742451, 1482938790, 3380984997, 2002651209, 2944240865, 7220981129, 9229905865, 5755645325, 6960949655, 3869786653, 8411872896, 4972546142, 4196184840, 3353523650, 7180658923, 6043486145, 5247232362, 949721158, 7661374507, 8362835411, 2757782736, 7559365906, 8446369291, 5394323310]
    return [x[i] ^ y[i] for i in range(k)]
def cmul_630424de(x):
    # just reverse it
    return [x[i] * 10 for i in range(k)]
def deck_97418725(x):
    return x[7:8] + x[:7] + x[33:] + x[8:33]
def chmul_75d42cab(x):
    # encryption
    y = [ord(p) for p in '2c8b0ac2194650d62936d01bbcb992ed10c1']
    return [x[i] * y[i] for i in range(k)]
def xor_0ec01206(x):
    y = [4265099201, 952589345, 3159481485, 2170592933, 9909100321, 3670325075, 1958000341, 6824122111, 7478828796, 2330244056, 5050696303, 2892655146, 9429473777, 4933210609, 5583965548, 929993989, 5415627748, 2173532631, 5911771382, 6106696550, 9456960168, 7577029703, 5529596680, 5906002004, 2648041238, 4503206553, 7066071904, 1463710160, 4153751107, 9537411587, 2658070172, 607108798, 3740219983, 9948827490, 8428047865, 7226796711]
    return [x[i] ^ y[i] for i in range(k)]
def chadd_4d98bf27(x):
    # rekt
    y = [ord(p) for p in '89bb48d5184cf4452ccd5416d569e8d8c98e']
    return [x[i] + y[i] for i in range(k)]
def digsub_2a3c141d(x):
    # encryption
    return [int(str(n)[:1] + ''.join(['5', '3', '1', '7', '2', '6', '8', '0', '9', '4'][int(p)] for p in str(n)[1:])) for n in x]
def chxor_dbb28a03(x):
    y = [ord(p) for p in 'cddf17a06df4b99d760f09a479b0513e5231']
    return [x[i] ^ y[i] for i in range(k)]
def deck_bdad0a3b(x):
    return x[14:32] + x[32:] + x[8:14] + x[:8]
def xor_c1194f5a(x):
    # so good
    y = [9993214964, 2445536199, 8874022567, 8498350042, 6215422682, 3947762250, 4541134809, 1187882385, 7674269278, 5884108505, 1567109829, 1805636867, 7128702734, 7878220210, 5862644957, 9557149181, 4305119976, 7855138734, 1797499564, 6623555607, 6659683426, 7945053828, 8067691946, 4815138049, 7832217632, 5318003123, 7255679001, 7246575023, 8427045523, 1385477960, 8348780089, 4186728600, 1410523868, 3295427770, 9558399766, 4781994322]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_05980501(x):
    # shiet?
    return x[22:] + x[:22]
def add_ec1d658a(x):
    # the best
    y = [5835766862, 4174177538, 189332996, 1040220020, 9379988570, 850004913, 3000597126, 146438769, 4158835197, 3394205431, 5125763879, 8714925872, 5683830421, 4965209468, 5429149737, 8634796784, 1820488131, 640593493, 7680937226, 6398885784, 97351522, 4226075577, 165282661, 5798634882, 1493072277, 3272679323, 2822248925, 435812385, 7300648998, 8068479971, 7421259391, 2481960019, 9544910927, 6835610334, 679768927, 9790857632]
    return [x[i] + y[i] for i in range(k)]
def add_022bab8d(x):
    # encryption
    y = [3053048711, 9692687336, 5432460574, 6750172057, 2885855158, 6170088660, 4006155119, 4843332254, 6275412062, 6274268707, 2483764668, 3484131438, 9218342534, 564867564, 6116846826, 9553634667, 4474926344, 7325117883, 3107632841, 7222305516, 6426469587, 3443337514, 4295851970, 8235576193, 4683926414, 5045754841, 9006655003, 1563454096, 9221269191, 3076410749, 5951510847, 5754924906, 9991712813, 3053836765, 1947612349, 7892442275]
    return [x[i] + y[i] for i in range(k)]
def csub_1ca516a7(x):
    # the flag is flag{jk}
    return [x[i] - 3192003828 for i in range(k)]
def cadd_d04bb716(x):
    return [x[i] + 2599247735 for i in range(k)]
def cadd_fd1d6bfc(x):
    # the best
    return [x[i] + 4578465075 for i in range(k)]
def cadd_57a83163(x):
    return [x[i] + 4856877761 for i in range(k)]
def chunk_16728eb8(x):
    # so good
    return x[19:] + x[:19]
def chadd_a4967b6b(x):
    # so good
    y = [ord(p) for p in '8a68bc8fee2090cfa3e0c77c194493122b81']
    return [x[i] + y[i] for i in range(k)]
def chunk_3f96f374(x):
    return x[19:] + x[:19]
def chmul_330af750(x):
    # mucho encrypto
    y = [ord(p) for p in '15f22d6ca015d4f4a4b12b7a7ff544cee6b1']
    return [x[i] * y[i] for i in range(k)]
def shuffle_b08c994e(x):
    # rekt
    return [x[p] for p in [4, 11, 17, 28, 12, 9, 6, 32, 18, 31, 2, 13, 35, 20, 27, 16, 21, 29, 24, 10, 25, 14, 8, 30, 15, 26, 22, 1, 0, 23, 3, 34, 7, 19, 5, 33]]
def chmul_50a23c29(x):
    # mucho encrypto
    y = [ord(p) for p in '30cfd4ef90a7cd4d89e190b94cff3dee3ae1']
    return [x[i] * y[i] for i in range(k)]
def chxor_ce07c0ad(x):
    # so good
    y = [ord(p) for p in '25966fd0254fc7e2aaba86be61bceb2a59fb']
    return [x[i] ^ y[i] for i in range(k)]
def chsub_3cc05763(x):
    y = [ord(p) for p in '348d54a07c7cb95f7f7206d24bfd7b75e0f1']
    return [x[i] - y[i] for i in range(k)]
def cxor_d05587bc(x):
    return [x[i] ^ 8070781302 for i in range(k)]
def chunk_9ce2d01b(x):
    # kek
    return x[16:] + x[:16]
def cadd_ca2e862f(x):
    # kek
    return [x[i] + 3499591396 for i in range(k)]
def cmul_d4928d34(x):
    # rekt
    return [x[i] * 7 for i in range(k)]
def cxor_5ab74c0d(x):
    # the best
    return [x[i] ^ 3085375362 for i in range(k)]
def cxor_7be08bad(x):
    # evil
    return [x[i] ^ 7901183043 for i in range(k)]
def xor_22aa0e90(x):
    # the flag is flag{jk}
    y = [8809331517, 4113694708, 1785320122, 1421374220, 9512719531, 6121594183, 9436137833, 4373749212, 525761724, 8229125540, 7821836003, 936547318, 3004936821, 7149178669, 3593932490, 8879034231, 1332154563, 9822297379, 2454636386, 1882645061, 3426683778, 162283707, 1326481990, 295616316, 4305057199, 1839027168, 5696746818, 5378690624, 441870809, 7726744353, 7673679472, 5358959759, 5474090284, 8156176706, 8735986431, 6365119049]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_aea954dc(x):
    # so good
    return [x[i] ^ 8641472211 for i in range(k)]
def xor_4e31efc2(x):
    y = [7170888227, 1429347916, 3910635036, 3887351173, 1889982433, 7586152033, 6413055373, 9968531938, 655363808, 580766442, 9641754271, 5500727620, 8027719604, 2702442128, 2542329271, 7149968005, 4953562329, 2043030052, 1337792025, 1445030986, 458702570, 161958477, 8476771498, 3119262384, 9654706248, 573039326, 8124550962, 5752392934, 6002557343, 2609400022, 2664988105, 6310123180, 2209219529, 7910899880, 9679655451, 3706456751]
    return [x[i] ^ y[i] for i in range(k)]
def mul_34d9a702(x):
    # lmaooo
    y = [2, 2, 3, 3, 1, 3, 3, 1, 3, 2, 1, 1, 1, 3, 3, 2, 2, 1, 1, 2, 1, 1, 3, 3, 1, 3, 2, 3, 1, 1, 3, 3, 3, 2, 2, 3]
    return [x[i] * y[i] for i in range(k)]
def cadd_fd35b517(x):
    return [x[i] + 9771413348 for i in range(k)]
def cadd_54b12cd0(x):
    return [x[i] + 1506904482 for i in range(k)]
def digsub_41290eb4(x):
    return [int(str(n)[:1] + ''.join(['3', '2', '5', '4', '7', '8', '0', '1', '6', '9'][int(p)] for p in str(n)[1:])) for n in x]
def chadd_9e80333c(x):
    # kek
    y = [ord(p) for p in 'b4e94acba9287bcd2ee2668539d6da9b0ba4']
    return [x[i] + y[i] for i in range(k)]
def chunk_aac2455e(x):
    return x[1:] + x[:1]
def digsub_03f54ba3(x):
    return [int(str(n)[:1] + ''.join(['4', '1', '2', '5', '8', '7', '6', '9', '3', '0'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_7b0890d6(x):
    return [x[i] * 5 for i in range(k)]
def chmul_6834bec9(x):
    # kek
    y = [ord(p) for p in '8193c2fd7b12f7dbdf7bcfd8b4cabb002ed4']
    return [x[i] * y[i] for i in range(k)]
def chxor_de5cf1af(x):
    # so good
    y = [ord(p) for p in '6601045ac61480bfb6e7125a15298e13d7ce']
    return [x[i] ^ y[i] for i in range(k)]
def csub_20a768aa(x):
    return [x[i] - 9894730891 for i in range(k)]
def cxor_f4c61b89(x):
    return [x[i] ^ 2663923642 for i in range(k)]
def cadd_2b51aac8(x):
    # mucho encrypto
    return [x[i] + 3539141359 for i in range(k)]
def chsub_5f8a214c(x):
    y = [ord(p) for p in '66e0ef0354403c13d6ec8c2ff2d65b785c9a']
    return [x[i] - y[i] for i in range(k)]
def chsub_f80492fd(x):
    # encryption
    y = [ord(p) for p in '20ff6b65d03dd01fa44684ca0ed1602285dd']
    return [x[i] - y[i] for i in range(k)]
def cadd_53f37c7e(x):
    return [x[i] + 6025582451 for i in range(k)]
def sub_29f5a027(x):
    # encryption
    y = [7201738283, 4040638531, 3085931230, 7215068340, 5406013744, 8363155631, 4162983912, 2019706180, 36661310, 175292065, 4760280234, 2432630465, 6845841092, 5273371704, 8680413674, 7867468650, 2943445463, 8541871639, 2913844917, 1061195964, 7840428062, 4812075643, 3226725580, 753768733, 1208890231, 2727144503, 5709565376, 4531910873, 1504125327, 5803488693, 2916380455, 2606884659, 2026106720, 1627378077, 5045088600, 8035328107]
    return [x[i] - y[i] for i in range(k)]
def chxor_f8174daf(x):
    # lmaooo
    y = [ord(p) for p in '09d7e5fc697d16d066f196dca4cd0ec0b538']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_3e5a5794(x):
    # kek
    return [x[i] * 4 for i in range(k)]
def chsub_07a262a0(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '0c5ff5b5a40d579ea796a673a3dd362f3214']
    return [x[i] - y[i] for i in range(k)]
def cmul_5f59af38(x):
    return [x[i] * 10 for i in range(k)]
def chunk_45c083a0(x):
    return x[19:] + x[:19]
def cxor_85556ac5(x):
    return [x[i] ^ 3271883454 for i in range(k)]
def cadd_a79fc94c(x):
    return [x[i] + 2194801827 for i in range(k)]
def chsub_3832a22b(x):
    y = [ord(p) for p in '7ee8bdbe7d79b669e48eb143f9dcc91652fa']
    return [x[i] - y[i] for i in range(k)]
def chmul_c3fa7120(x):
    y = [ord(p) for p in 'f99662c23748da58f4c77c6f0e3884e6dc42']
    return [x[i] * y[i] for i in range(k)]
def xor_dfe62c40(x):
    # the best
    y = [831233335, 8487690508, 26260442, 7307458301, 2806606348, 1233791128, 5515814062, 8940236963, 3029853644, 4809690031, 9037438485, 7175290244, 1208987672, 5479979436, 5609411710, 9558311307, 8199369131, 1896825813, 8833030307, 8638281794, 1047604704, 5162244549, 9289694133, 9696246990, 4582978288, 6959694887, 5817469512, 1221183112, 737782360, 3447066871, 7447051418, 706721659, 4619313650, 5912477526, 3129514307, 3304494389]
    return [x[i] ^ y[i] for i in range(k)]
def sub_381e766c(x):
    # just reverse it
    y = [9533748301, 6420024221, 3704651286, 871004820, 1301042053, 6417007694, 2214027647, 9228211009, 1683950957, 7939716227, 9535312237, 4520310221, 4946559217, 623380928, 4425040145, 4314766908, 8069916839, 253008682, 6289828805, 4313035238, 3835636441, 2726565243, 1065623112, 7232715039, 995332228, 2655743650, 4637609468, 9094189591, 8702539904, 4510188214, 2119521329, 8269780523, 5476043224, 9138284656, 132474258, 7872996302]
    return [x[i] - y[i] for i in range(k)]
def deck_1c28f810(x):
    return x[3:28] + x[:3] + x[36:] + x[28:36]
def cmul_ca478228(x):
    return [x[i] * 5 for i in range(k)]
def chadd_6128a54c(x):
    y = [ord(p) for p in '6dabead680182cf2f0cb3f61cf9b1304b68e']
    return [x[i] + y[i] for i in range(k)]
def cmul_4b4ceaf4(x):
    # lmaooo
    return [x[i] * 6 for i in range(k)]
def chmul_0bc227c2(x):
    y = [ord(p) for p in '11ace2e5ba932bee37a4583ee2569cf61ca6']
    return [x[i] * y[i] for i in range(k)]
def chxor_23fb4dc2(x):
    y = [ord(p) for p in '692e1d2848bc81fa4e07f8b89051ce44084d']
    return [x[i] ^ y[i] for i in range(k)]
def sub_d3158d9a(x):
    y = [2189970704, 3963977939, 1496994841, 1012562277, 264369549, 8653385159, 4941616870, 3977111683, 6122867919, 4598611636, 4919070631, 7357059518, 5539642878, 7667891210, 4081638567, 2838217426, 6834453713, 6047008312, 3224580868, 5870880592, 3421778871, 4313857579, 9456578342, 7967086267, 6132154564, 2061387554, 6632835407, 1951887167, 783507065, 1037305137, 723626116, 2948405438, 7346602679, 8433443915, 4063722397, 8840606245]
    return [x[i] - y[i] for i in range(k)]
def chsub_0b185319(x):
    y = [ord(p) for p in '16f1af0d30be8b5f4c5f19a2f67a669f4cfa']
    return [x[i] - y[i] for i in range(k)]
def chsub_3d2428ad(x):
    y = [ord(p) for p in '19ef969791a7ec50d0ea9a42a9282eb3321f']
    return [x[i] - y[i] for i in range(k)]
def cmul_8872db98(x):
    return [x[i] * 9 for i in range(k)]
def xor_53ec0b4a(x):
    y = [59323353, 233224379, 2627129323, 4322827283, 3029568838, 1316938227, 9369635641, 4599594905, 8735910650, 5553376693, 4383970994, 3234701268, 8258675106, 4636133782, 457849496, 5398595485, 7626840797, 2052382776, 1416126590, 4692251359, 404208781, 5617998051, 5723017319, 285620326, 7564249463, 2213844114, 904114337, 9365138508, 6768303502, 5978236392, 4900970610, 4013213960, 1177451828, 2431842396, 403908457, 749452331]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_6ab37400(x):
    # evil
    return [int(str(n)[:1] + ''.join(['7', '3', '9', '5', '4', '1', '0', '2', '6', '8'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_49d9640f(x):
    # shiet?
    y = [ord(p) for p in 'fdef9f072548474b9536280984b5b4244dca']
    return [x[i] * y[i] for i in range(k)]
def cxor_a0fe64b3(x):
    return [x[i] ^ 2040447802 for i in range(k)]
def add_ea0e7dc4(x):
    y = [852537286, 6287648872, 6490559195, 7494292315, 3184742729, 4047244765, 2115026262, 6140643126, 1338924709, 6921730545, 2157231348, 7541327864, 22674340, 5093828147, 6933380580, 8128854824, 2677579142, 6887065333, 517403294, 5210343402, 9957658556, 6552998993, 7437308059, 116273333, 4349618219, 8689044495, 2449783322, 1560139979, 8639646844, 1057132633, 6133901292, 8300945744, 4462554836, 1380283734, 3654965415, 9660514367]
    return [x[i] + y[i] for i in range(k)]
def cxor_c2fd3f28(x):
    return [x[i] ^ 8025357205 for i in range(k)]
def cmul_38d68804(x):
    return [x[i] * 7 for i in range(k)]
def chmul_5f9891b6(x):
    y = [ord(p) for p in 'ed33a6c286b9a85c47647c677258cd5eab4e']
    return [x[i] * y[i] for i in range(k)]
def digsub_b6c1346d(x):
    return [int(str(n)[:1] + ''.join(['7', '5', '3', '9', '1', '8', '2', '0', '6', '4'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_94531f44(x):
    return [x[i] * 9 for i in range(k)]
def cmul_9ea3f862(x):
    # encryption
    return [x[i] * 4 for i in range(k)]
def xor_11dd9cd2(x):
    y = [2451956467, 2714739483, 6517835802, 981913160, 9572916869, 7138839541, 5314692412, 7683457113, 8199882264, 5222179968, 9786921395, 163845064, 1984330589, 2898606382, 9633560204, 5893795228, 8713093558, 2872656024, 7444999821, 2375290172, 2527089627, 5315783102, 3487742312, 6197613764, 2767080148, 447507366, 9607048061, 209796621, 1691331397, 942500989, 5621273842, 6134242654, 5781364849, 5753095716, 2229552200, 8034776892]
    return [x[i] ^ y[i] for i in range(k)]
def cadd_6fbe94f5(x):
    # the flag is flag{jk}
    return [x[i] + 3119086408 for i in range(k)]
def chmul_aae03452(x):
    y = [ord(p) for p in '621156e7bfe9ec5e8642655ba37a443bf853']
    return [x[i] * y[i] for i in range(k)]
def shuffle_86331a49(x):
    return [x[p] for p in [1, 31, 29, 33, 15, 8, 0, 34, 11, 18, 7, 21, 25, 22, 19, 28, 3, 13, 35, 26, 27, 23, 20, 14, 6, 2, 16, 10, 9, 32, 24, 17, 12, 30, 4, 5]]
def shuffle_d65597c5(x):
    # kek
    return [x[p] for p in [12, 20, 18, 16, 22, 0, 29, 25, 10, 14, 5, 32, 4, 34, 9, 19, 30, 24, 7, 3, 21, 31, 2, 26, 23, 6, 1, 35, 13, 33, 27, 15, 11, 8, 17, 28]]
def chmul_ff76516d(x):
    y = [ord(p) for p in '232555f4c69007051666ea5a986e4efb8daa']
    return [x[i] * y[i] for i in range(k)]
def chsub_e4b39d3b(x):
    y = [ord(p) for p in '7cbc67ea35d289cdbb8699fad9c2f98a39cb']
    return [x[i] - y[i] for i in range(k)]
def add_e6d0a399(x):
    # the best
    y = [4372020758, 7532509418, 404640494, 2420932079, 9858037607, 2615217360, 5382861333, 5283281387, 6367595572, 6874650672, 380641199, 560782038, 4203921686, 4503678155, 5565566695, 1755366984, 2573818188, 7013028841, 2377943196, 8287826515, 4926064686, 1917742134, 48349940, 3672623453, 8898178242, 4208607283, 8118199976, 1762382879, 2572860109, 962685538, 4200661385, 1366273636, 9995387453, 5247558036, 484058092, 9679277453]
    return [x[i] + y[i] for i in range(k)]
def chmul_71128504(x):
    y = [ord(p) for p in 'cb5e24d3ace7bd5d7518987cdcc9e8a2554d']
    return [x[i] * y[i] for i in range(k)]
def chmul_67bd77bc(x):
    y = [ord(p) for p in '3a53403ffd41646fbd25a705ae4ebada0058']
    return [x[i] * y[i] for i in range(k)]
def chadd_6662b275(x):
    # just reverse it
    y = [ord(p) for p in 'a5c5592bf35570b762f927e35a5f7d4df6c7']
    return [x[i] + y[i] for i in range(k)]
def mul_3af98615(x):
    # lel
    y = [4, 10, 3, 7, 1, 8, 1, 5, 6, 2, 6, 5, 1, 2, 6, 9, 10, 10, 4, 5, 5, 7, 3, 5, 8, 4, 8, 3, 3, 9, 6, 1, 7, 5, 4, 4]
    return [x[i] * y[i] for i in range(k)]
def csub_bce4bb70(x):
    # so good
    return [x[i] - 35680298 for i in range(k)]
def cxor_fa552213(x):
    # lmaooo
    return [x[i] ^ 915484311 for i in range(k)]
def chmul_ecae31b8(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '83837e3ab64dbf738f47a32202b37c7e9cb5']
    return [x[i] * y[i] for i in range(k)]
def chmul_50bf6425(x):
    y = [ord(p) for p in '030a211079590227b485724ccb5cda0f2bae']
    return [x[i] * y[i] for i in range(k)]
def sub_2f70dd6e(x):
    # lel
    y = [8514424309, 4528231921, 6449825845, 8973628443, 4872401841, 5806427065, 8411414010, 1050020409, 2569168369, 8938239045, 8045670977, 8128123673, 921589472, 7944844151, 7735044128, 14178665, 5964800427, 748854684, 1385341483, 4534784632, 9905823642, 3217671196, 5279109828, 9734127839, 7156671530, 2715382862, 9208564493, 7383669916, 2493715078, 339433240, 7003146715, 1390935123, 8578553794, 7121468455, 4526956648, 7936993812]
    return [x[i] - y[i] for i in range(k)]
def chadd_163fc505(x):
    y = [ord(p) for p in 'f52da28c85d693f55ad146ac7810734bf931']
    return [x[i] + y[i] for i in range(k)]
def chadd_97096590(x):
    # kek
    y = [ord(p) for p in 'b3b82dcd1cbcef1c00073972a7f8ab8d830f']
    return [x[i] + y[i] for i in range(k)]
def csub_3564220e(x):
    return [x[i] - 727539434 for i in range(k)]
def shuffle_41cfb8d7(x):
    # evil
    return [x[p] for p in [10, 33, 7, 14, 24, 31, 26, 13, 23, 27, 1, 17, 29, 5, 15, 16, 28, 34, 19, 18, 8, 25, 21, 11, 6, 12, 2, 0, 32, 30, 4, 9, 22, 20, 35, 3]]
def cadd_6d7e714e(x):
    return [x[i] + 919080491 for i in range(k)]
def deck_b288f00b(x):
    # so good
    return x[:3] + x[3:5] + x[5:13] + x[13:]
def sub_9514a3ce(x):
    # lmaooo
    y = [1783881664, 8328827257, 5866864338, 3350492669, 4127118223, 8730285116, 5675936324, 4221382049, 7783831778, 2716387394, 6336666904, 2231148085, 7662826010, 8336596648, 3576359608, 1441499458, 603557867, 7469923840, 3245546163, 6954839590, 3579124028, 3948375202, 2509509719, 8431699640, 6780250908, 2654935902, 8110531040, 5255701092, 8939329689, 9156132659, 6922980171, 1443008036, 8281542522, 9330268940, 7656883989, 6990894657]
    return [x[i] - y[i] for i in range(k)]
def deck_3ed1fe60(x):
    # so good
    return x[8:21] + x[21:24] + x[24:] + x[:8]
def csub_70a8e307(x):
    return [x[i] - 8702214038 for i in range(k)]
def cmul_6fb2378c(x):
    return [x[i] * 8 for i in range(k)]
def digsub_5c02cf5d(x):
    # kek
    return [int(str(n)[:1] + ''.join(['2', '3', '4', '5', '9', '1', '0', '6', '8', '7'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_012b5eb8(x):
    return [x[i] * 5 for i in range(k)]
def xor_94f0d244(x):
    y = [6211311334, 7481529583, 9969784820, 6355768924, 3392535236, 9659256763, 6762981216, 3101218891, 3777691604, 2679073675, 6916941955, 8257062051, 2104576110, 4742649691, 7123443684, 5585882550, 7595036221, 1960865337, 1523468689, 8740840451, 7162344773, 2603080011, 4671855979, 5814899673, 3494324060, 406721797, 8669082595, 8670099881, 6639795463, 4325308811, 5427410142, 4920354744, 6332209915, 8930576257, 5778714128, 8070409904]
    return [x[i] ^ y[i] for i in range(k)]
def sub_d37c6c7c(x):
    # rekt
    y = [7177542715, 395166357, 2279972309, 8629969439, 8089156354, 152057360, 6535244661, 417384035, 655947680, 8993050434, 4007573080, 2979997631, 8991453478, 1195917569, 8407172644, 3460591390, 1672129148, 7611809294, 945820783, 4190182773, 7948971496, 962030678, 8801695755, 2080251222, 1748970360, 2556303034, 1347543054, 101139489, 5306634252, 1758434373, 9459452709, 7542762388, 4629011582, 9523957383, 2887302695, 9266492690]
    return [x[i] - y[i] for i in range(k)]
def add_9e15da4e(x):
    # the flag is flag{jk}
    y = [4680529915, 8886497071, 6398801812, 2515645291, 7360016367, 1022495665, 2204784713, 3209226782, 2217003404, 6113034889, 77144454, 2358857047, 2947327633, 8739745310, 3721788012, 6776255939, 2914853820, 8816721740, 3303457306, 5189811456, 4155455471, 3035732702, 530433335, 4211001234, 9808349617, 1174032781, 2562189407, 4753481005, 5904792501, 347622227, 1657568049, 9432023640, 8233349408, 7508892975, 1968102046, 170949579]
    return [x[i] + y[i] for i in range(k)]
def chmul_584b1b88(x):
    # evil
    y = [ord(p) for p in 'fe650babfc27f9f564c1a4b36d979b215dd0']
    return [x[i] * y[i] for i in range(k)]
def chsub_0e10b13d(x):
    # so good
    y = [ord(p) for p in '773286948298681807638ba5e7f2d51fcfb0']
    return [x[i] - y[i] for i in range(k)]
def chadd_0fbbf4b8(x):
    # lmaooo
    y = [ord(p) for p in 'd25a07677b962b4d3452e349ab50efadb363']
    return [x[i] + y[i] for i in range(k)]
def shuffle_16d074d1(x):
    # just reverse it
    return [x[p] for p in [5, 33, 0, 27, 25, 17, 4, 29, 13, 31, 8, 24, 10, 19, 23, 14, 7, 6, 35, 12, 22, 15, 20, 3, 11, 28, 9, 21, 16, 34, 2, 1, 30, 18, 32, 26]]
def cadd_441443f1(x):
    # lel
    return [x[i] + 2243609312 for i in range(k)]
def deck_bbc4bef1(x):
    return x[:12] + x[30:32] + x[32:] + x[12:30]
def chmul_615c46c1(x):
    # rekt
    y = [ord(p) for p in '7d90addf294249aeced6b9a99386489145e5']
    return [x[i] * y[i] for i in range(k)]
def deck_8c17db9f(x):
    # evil
    return x[2:10] + x[:2] + x[31:] + x[10:31]
def cadd_ae1d750b(x):
    # lel
    return [x[i] + 9503244110 for i in range(k)]
def sub_51e1902d(x):
    y = [3639864574, 8179075680, 7122831970, 6724485492, 282973191, 4214931298, 5157801649, 4750386336, 1051024910, 6331792839, 3966729123, 3901272202, 1417478102, 4738812341, 2786013899, 6194505958, 2955998129, 823893717, 5866447416, 8634914039, 837409662, 4644456349, 6932643053, 2956950572, 4604434352, 959730766, 4450692400, 497667502, 7004373087, 8352883926, 7872260358, 1729672554, 8927995790, 7108274151, 1348304004, 2461740665]
    return [x[i] - y[i] for i in range(k)]
def csub_7f9b642d(x):
    # the best
    return [x[i] - 7373017744 for i in range(k)]
def csub_19752fd1(x):
    # mucho encrypto
    return [x[i] - 9919246635 for i in range(k)]
def sub_e0ca897d(x):
    y = [4592642153, 9703837618, 6073291487, 134656836, 1378803207, 6327249122, 195548419, 4134648857, 3940326551, 6252825125, 6305015637, 8353719308, 4316245346, 8740744012, 3738762259, 4850071420, 6168170726, 760996017, 1943574071, 3988761546, 1489976312, 1788039473, 4062336245, 8081490470, 1033700673, 5414273130, 3958212576, 435934877, 2615985757, 5072875163, 9488972196, 9314570457, 2788205300, 5857173590, 306352287, 6633792802]
    return [x[i] - y[i] for i in range(k)]
def cxor_d42f4ceb(x):
    # evil
    return [x[i] ^ 3735398634 for i in range(k)]
def add_34a7ffc5(x):
    y = [4524698958, 5883514219, 4541170637, 9855170797, 6472800378, 4737851480, 7249421806, 5370710671, 3385760740, 4313817801, 2254109936, 5480788108, 6555690623, 4490942512, 6306763749, 4232987029, 2824301242, 5996132949, 3445250504, 7735615457, 9729267022, 7176960920, 1084718294, 2695045574, 8735348521, 1581531784, 8953771063, 5472790930, 9596101981, 4056114500, 7289823382, 570116657, 3622746531, 9341104682, 3211098718, 8683151583]
    return [x[i] + y[i] for i in range(k)]
def add_867182be(x):
    y = [7879745034, 7994091875, 3437211407, 9438578298, 1044756924, 3130810748, 3254625857, 2308942633, 7589827862, 1469323711, 2954826955, 4295739878, 1942634120, 6213787186, 1823074769, 3393673190, 2785857016, 805434195, 7386891936, 504846539, 3952539081, 4761788012, 2345010604, 9655740065, 1475120115, 4762363883, 7826914508, 3556561426, 5384010468, 8703614432, 3812244509, 4248618000, 5833940247, 7750031389, 5696097703, 3554343182]
    return [x[i] + y[i] for i in range(k)]
def add_c0abe07c(x):
    # evil
    y = [4829456543, 1707552382, 3324257887, 7753422808, 616715696, 1604550043, 8539152204, 55438214, 4536529825, 2341109696, 5007155790, 9905773237, 9839359231, 513160589, 5391260867, 6104617279, 3072549153, 338558203, 1165165513, 6953174712, 7978699778, 7640567029, 3235736931, 9511211800, 5207243964, 749059081, 1901294773, 8081932447, 6878064634, 631325436, 6866289571, 6108755062, 3435432242, 8521647681, 6975373953, 1138470603]
    return [x[i] + y[i] for i in range(k)]
def mul_3d2d3c98(x):
    # kek
    y = [2, 1, 2, 3, 2, 3, 3, 3, 2, 2, 1, 3, 1, 2, 2, 2, 1, 2, 1, 3, 1, 1, 2, 3, 1, 2, 2, 1, 3, 1, 3, 2, 1, 3, 1, 3]
    return [x[i] * y[i] for i in range(k)]
def chadd_7c0c3e14(x):
    # rekt
    y = [ord(p) for p in 'ddc54ffdcd409681cc9cd3f1f96c09019ede']
    return [x[i] + y[i] for i in range(k)]
def cadd_a495112c(x):
    # just reverse it
    return [x[i] + 8785130606 for i in range(k)]
def chadd_977a0637(x):
    y = [ord(p) for p in '0a62127e242d4e5ab2d004e437ff53b01391']
    return [x[i] + y[i] for i in range(k)]
def cxor_695c7de2(x):
    # the best
    return [x[i] ^ 1168506400 for i in range(k)]
def cadd_03187d75(x):
    return [x[i] + 9173260105 for i in range(k)]
def add_1dc9ccaa(x):
    # rekt
    y = [2836553668, 1438895386, 8092532466, 2166379833, 8853051558, 6888054209, 160215473, 5091472910, 2183112939, 5347530447, 3030620800, 9627537734, 2582634610, 5680166308, 105048599, 9687901106, 4539235769, 8698272776, 7659677696, 1311291420, 6815696295, 5368637963, 4583934204, 2286617222, 8744071841, 133309864, 1628857851, 851830656, 7134496547, 7715346520, 7190871928, 6445716923, 8630574390, 2839273398, 8174351562, 5976993012]
    return [x[i] + y[i] for i in range(k)]
def chunk_db078de2(x):
    # the best
    return x[29:] + x[:29]
def shuffle_d9cf5546(x):
    # shiet?
    return [x[p] for p in [5, 17, 29, 19, 11, 22, 13, 32, 12, 24, 25, 28, 0, 20, 18, 26, 9, 2, 10, 35, 21, 7, 16, 8, 34, 3, 6, 1, 4, 33, 27, 23, 30, 14, 31, 15]]
def digsub_be5397e9(x):
    # kek
    return [int(str(n)[:1] + ''.join(['4', '3', '7', '5', '9', '8', '0', '6', '1', '2'][int(p)] for p in str(n)[1:])) for n in x]
def chxor_e6a0d155(x):
    y = [ord(p) for p in '8d70d4ca967e5f733431c9dc5f66405b9b4f']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_0afe7e7a(x):
    return [x[i] ^ 474787367 for i in range(k)]
def chxor_65fb61d8(x):
    y = [ord(p) for p in '96a71bb472bc0e53822b9e9bdfa6bb400c91']
    return [x[i] ^ y[i] for i in range(k)]
def mul_b9305b76(x):
    y = [4, 4, 4, 1, 3, 1, 3, 1, 2, 1, 2, 3, 4, 4, 3, 2, 4, 2, 1, 3, 2, 2, 1, 3, 4, 1, 1, 4, 2, 3, 2, 1, 2, 2, 2, 2]
    return [x[i] * y[i] for i in range(k)]
def chunk_97573788(x):
    # mucho encrypto
    return x[24:] + x[:24]
def deck_99ec85f7(x):
    # lel
    return x[:13] + x[14:25] + x[25:] + x[13:14]
def deck_c462259b(x):
    return x[3:8] + x[20:] + x[:3] + x[8:20]
def deck_f8c43375(x):
    # the best
    return x[:7] + x[10:24] + x[24:] + x[7:10]
def chmul_33c1cd0d(x):
    # lel
    y = [ord(p) for p in '9686753b1bf3762dd08f353517b18b9fc283']
    return [x[i] * y[i] for i in range(k)]
def chxor_ffb48f69(x):
    # lmaooo
    y = [ord(p) for p in '142a73fc48f57ef97898c80cf85b75ba82e7']
    return [x[i] ^ y[i] for i in range(k)]
def chsub_74d9532d(x):
    # mucho encrypto
    y = [ord(p) for p in '88701ce2537ec11140c6cf9acf8eb6242a6c']
    return [x[i] - y[i] for i in range(k)]
def xor_9e9f7a8b(x):
    # the flag is flag{jk}
    y = [395618998, 6253962296, 4094805199, 7586149521, 8288036957, 8447142578, 8296378201, 1062830605, 6740869964, 857904638, 8051076312, 7056900962, 9247565641, 471751706, 5126970671, 5441041535, 3546852973, 245337842, 5851900100, 9351734867, 8676417135, 405211784, 3917468699, 3110942581, 7398962254, 3146915511, 4041368293, 7951290121, 3258916976, 8091182246, 8443013203, 1414366590, 1584621427, 4019363481, 2005270428, 4852539518]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_7e45d909(x):
    y = [ord(p) for p in '565459f6d4ee39619eb956a72484bba5b236']
    return [x[i] - y[i] for i in range(k)]
def shuffle_5cd09bb7(x):
    # kek
    return [x[p] for p in [18, 23, 12, 19, 13, 3, 35, 0, 7, 24, 20, 25, 33, 31, 27, 10, 22, 34, 14, 26, 6, 16, 2, 8, 29, 30, 4, 21, 17, 11, 1, 5, 15, 9, 32, 28]]
def chmul_3267fabc(x):
    # shiet?
    y = [ord(p) for p in '4642166ee6a03405f4b3b11f723ae36ae716']
    return [x[i] * y[i] for i in range(k)]
def csub_fdf338ac(x):
    # just reverse it
    return [x[i] - 692366355 for i in range(k)]
def sub_c9bfeab0(x):
    y = [7360847701, 1131431760, 1720027153, 6916111490, 569646714, 7248584350, 5630262739, 6870551071, 3229657128, 810045506, 9859328893, 3242018227, 2563426117, 3797458524, 4516106133, 208604586, 9001737181, 9387010920, 2258917888, 8513839238, 8719331907, 9601570048, 3650845893, 74151786, 8158079217, 4624972873, 7674170004, 7274756355, 3798983440, 30031744, 1655661887, 3671185600, 4780195990, 9903770517, 9293506425, 9573629725]
    return [x[i] - y[i] for i in range(k)]
def chmul_d6a4e65e(x):
    y = [ord(p) for p in '518b9cc2ad33d2774a76087edaad7c0c6077']
    return [x[i] * y[i] for i in range(k)]
def cxor_56b535b1(x):
    return [x[i] ^ 3581234417 for i in range(k)]
def xor_6a599f5a(x):
    # lel
    y = [5191878984, 3701870310, 5769658938, 7124510071, 5901462069, 9986399313, 4048866318, 814240122, 6865517592, 3311358506, 2273768305, 2970097548, 2237470910, 8048024601, 7009946788, 5683283098, 893504845, 1364519453, 1530555299, 6946682134, 1814904909, 1818624732, 5405462156, 5152607626, 5742721071, 2571305279, 1935917711, 3889505143, 7320639056, 6245864467, 4384467534, 5669451816, 1099759046, 8059100109, 787595157, 7272346211]
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_ffe4fef7(x):
    return [x[p] for p in [5, 14, 27, 17, 7, 24, 33, 6, 26, 30, 19, 20, 0, 4, 15, 11, 13, 31, 10, 35, 34, 16, 32, 12, 9, 1, 23, 25, 21, 18, 29, 2, 28, 3, 8, 22]]
def xor_41405d72(x):
    # just reverse it
    y = [489722416, 6685177777, 3672035272, 5661405687, 3153750679, 2843743903, 2415080643, 3731518499, 3739052203, 9724017238, 8151763303, 946744399, 7758146469, 1459336185, 1103651890, 8032030516, 1901686865, 1505503749, 5108476163, 8773106532, 6501892569, 4235209269, 9001770268, 3791610004, 9689366118, 5168907971, 2861746523, 4488730859, 2620863693, 2484764614, 6064805936, 2256190239, 4100147830, 5167882937, 4693485828, 2923151972]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_b4cd4919(x):
    y = [ord(p) for p in 'b15f7fbdc857c3eef738423ba3351d903b1f']
    return [x[i] ^ y[i] for i in range(k)]
def sub_0ac2ba9f(x):
    y = [3090956101, 9544159095, 9247551629, 5709373239, 1367596434, 6516042917, 6309383002, 517768987, 4199681716, 9480523856, 221689309, 54919036, 343044665, 4498410180, 7293907474, 1340189969, 5354227800, 7452636758, 9812766011, 2242758551, 1522377288, 4742769832, 2526219932, 949979042, 2412403217, 7101552960, 4790072531, 6044350467, 1709040332, 7242884166, 8592410761, 5409515829, 1424449564, 1749699578, 9622139779, 2377549829]
    return [x[i] - y[i] for i in range(k)]
def mul_e8d4d029(x):
    y = [9, 2, 8, 5, 4, 5, 1, 9, 7, 1, 6, 9, 7, 4, 7, 8, 1, 4, 2, 3, 3, 5, 9, 8, 2, 9, 1, 2, 3, 8, 5, 4, 2, 6, 6, 3]
    return [x[i] * y[i] for i in range(k)]
def cmul_bf506846(x):
    return [x[i] * 6 for i in range(k)]
def add_f66fdb75(x):
    y = [6270896560, 8195600814, 2585987288, 6198008599, 7607658151, 6269248496, 9061041119, 3764727238, 3196738828, 9724012352, 3248364020, 6982739469, 5806009932, 917514779, 3042703749, 6334844714, 4575592030, 398751947, 8971119305, 8273977433, 9642930358, 1886418407, 291765131, 2405732378, 2589756113, 6109605881, 7293504677, 2394808185, 9183423010, 2464047915, 2294929426, 6361826518, 7364645012, 1017630356, 3099723245, 7539849281]
    return [x[i] + y[i] for i in range(k)]
def deck_9bbd8a15(x):
    # lel
    return x[2:10] + x[:2] + x[10:23] + x[23:]
def deck_b67fe633(x):
    return x[11:20] + x[:11] + x[29:] + x[20:29]
def chmul_8d98c6d1(x):
    # mucho encrypto
    y = [ord(p) for p in '10b3f456ecdbccd4b7536473d99430d083fb']
    return [x[i] * y[i] for i in range(k)]
def sub_f1819d8e(x):
    # encryption
    y = [1298237993, 7725027088, 6271148678, 5446530580, 8453157157, 3997703581, 6101174661, 6357225128, 7112159877, 7360132697, 4835647078, 6439685598, 4029006378, 140142219, 130169089, 9150587850, 5509900928, 2150578004, 8980051892, 3640574355, 3294476116, 9105092431, 3341857411, 9676741609, 3258704726, 7994562636, 1537497898, 2703135397, 597349023, 2463645050, 5483918128, 1054876400, 6703648177, 4499833536, 3304894247, 5830148415]
    return [x[i] - y[i] for i in range(k)]
def chunk_44d36e8a(x):
    # so good
    return x[12:] + x[:12]
def csub_a76aeaed(x):
    return [x[i] - 1078508397 for i in range(k)]
def mul_ca0cc32d(x):
    # kek
    y = [1, 1, 4, 5, 3, 2, 7, 5, 6, 3, 6, 2, 7, 6, 3, 3, 3, 6, 2, 4, 7, 4, 3, 2, 2, 4, 5, 5, 5, 1, 3, 3, 2, 2, 1, 5]
    return [x[i] * y[i] for i in range(k)]
def add_c8330084(x):
    y = [7584767745, 3324982418, 3075239121, 1158142402, 1058769988, 1679822064, 6212901553, 8490092003, 1878957974, 5700516351, 2815745421, 1510347507, 6076560036, 1225055204, 7538091089, 8055558452, 1906922561, 4890233994, 6755840566, 6713357713, 6654974246, 3340348427, 6386957737, 7878371506, 5300767505, 3764807412, 4393380094, 443020288, 929387872, 190254965, 865511534, 9185449945, 6086195876, 7185947668, 8368319032, 7194138205]
    return [x[i] + y[i] for i in range(k)]
def digsub_081fcfe8(x):
    return [int(str(n)[:1] + ''.join(['1', '5', '2', '8', '6', '0', '4', '7', '3', '9'][int(p)] for p in str(n)[1:])) for n in x]
def digsub_269bf7d5(x):
    # shiet?
    return [int(str(n)[:1] + ''.join(['2', '7', '0', '8', '3', '5', '6', '1', '4', '9'][int(p)] for p in str(n)[1:])) for n in x]
def deck_22fbd7fb(x):
    return x[27:] + x[11:11] + x[:11] + x[11:27]
def cadd_c2498f1a(x):
    # just reverse it
    return [x[i] + 2426680754 for i in range(k)]
def csub_5bd78a36(x):
    # mucho encrypto
    return [x[i] - 2930608476 for i in range(k)]
def chmul_53f7c783(x):
    y = [ord(p) for p in 'b5aacfdb0ca055cc908abfc3dbc02f51c721']
    return [x[i] * y[i] for i in range(k)]
def chadd_10d426ca(x):
    # just reverse it
    y = [ord(p) for p in '2c054b203fba66c8b838734b83fb64cf86e0']
    return [x[i] + y[i] for i in range(k)]
def add_e051c869(x):
    y = [2306122466, 7847855567, 5013078772, 6666807733, 2894968400, 7529691840, 2669723427, 982858435, 2490505694, 6539745282, 9927411449, 3754551386, 9428588278, 4454937086, 1742589501, 15522803, 7958266104, 9846707358, 356595132, 5796834267, 3752017844, 9226738959, 7347255280, 2126622471, 2313338386, 2670400429, 3014515278, 6931103709, 3959351189, 3737832597, 8498198113, 5245895727, 8436832513, 8156161952, 6043308661, 6055332100]
    return [x[i] + y[i] for i in range(k)]
def mul_fac797c0(x):
    # just reverse it
    y = [3, 6, 3, 3, 4, 3, 2, 2, 1, 1, 7, 8, 2, 7, 3, 4, 6, 6, 5, 5, 1, 7, 5, 7, 5, 7, 8, 4, 5, 2, 5, 6, 1, 3, 1, 4]
    return [x[i] * y[i] for i in range(k)]
def sub_d674ee07(x):
    y = [6515405887, 1057002380, 6179026409, 5776919770, 3997682803, 9013739832, 4298837187, 6443542133, 8636059837, 2167419938, 4842442192, 7033010905, 1576790838, 7236450383, 7568161222, 4705676448, 3830243269, 1531140764, 1412475037, 232674372, 7944080926, 6875480962, 6779671392, 5472476723, 4535850866, 2688051116, 5060515181, 489530226, 3356145841, 8995346342, 9863602373, 8669683393, 3079175397, 6680560782, 7634169965, 246743476]
    return [x[i] - y[i] for i in range(k)]
def chadd_2fa4c3aa(x):
    y = [ord(p) for p in 'd31f57a6da6b35c12f31c9920c9600fba8e5']
    return [x[i] + y[i] for i in range(k)]
def sub_d67a4b16(x):
    # the best
    y = [688455526, 4038265192, 6004750534, 8922757767, 6943589772, 8474885175, 944104639, 2199583562, 793851865, 1899841802, 9488840351, 6716526566, 2824765529, 5833092480, 7706415910, 1987974154, 9025626993, 2976073959, 336108321, 4105815778, 2175148519, 7840665815, 4506350731, 7351995159, 6541842659, 3848767286, 137439472, 3391766906, 3980184232, 1570233833, 803468775, 4455408784, 9045758754, 7881474194, 8402605465, 6649103607]
    return [x[i] - y[i] for i in range(k)]
def mul_c5467b19(x):
    y = [2, 1, 1, 3, 1, 2, 1, 3, 1, 2, 3, 1, 1, 1, 1, 3, 1, 3, 3, 3, 3, 1, 1, 1, 2, 3, 2, 1, 3, 2, 1, 2, 2, 2, 1, 1]
    return [x[i] * y[i] for i in range(k)]
def deck_0da30813(x):
    # just reverse it
    return x[25:31] + x[8:25] + x[:8] + x[31:]
def sub_73623d40(x):
    y = [137852313, 9120912675, 7781315368, 2694961409, 8031849516, 3920355205, 9122345666, 9681576942, 3734728726, 834723404, 8918344556, 2317564016, 2359730715, 1942741313, 4980202751, 2206427022, 7139568012, 9711181091, 6150857581, 2866867438, 3462349433, 3670068425, 2307374257, 2661062087, 9710681699, 75410385, 2643725690, 2133318287, 7229221017, 9471933478, 1481380470, 931280187, 8827232196, 7847653320, 7811945630, 3267234425]
    return [x[i] - y[i] for i in range(k)]
def cadd_0c2307f0(x):
    return [x[i] + 8092959696 for i in range(k)]
def cxor_46b69f72(x):
    return [x[i] ^ 5881231350 for i in range(k)]
def xor_f68eb9b6(x):
    # mucho encrypto
    y = [3388984219, 5676199470, 6914990596, 7006864393, 6653560693, 9647959269, 6285413039, 2794739891, 4133301323, 7871348190, 2797420663, 3757006470, 8509091222, 2804208928, 5041393449, 3699065193, 103479101, 1047308790, 523020260, 7296160362, 198106804, 1954724128, 7135448726, 9613460649, 3597776799, 7558242603, 5932714269, 9822990585, 7731408579, 7899062400, 1105127849, 2083322581, 7371597073, 1902629360, 1862534256, 6011260383]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_61dd20a0(x):
    # just reverse it
    return [int(str(n)[:1] + ''.join(['9', '6', '3', '0', '5', '8', '4', '1', '2', '7'][int(p)] for p in str(n)[1:])) for n in x]
def cadd_e9d43d97(x):
    return [x[i] + 1113865108 for i in range(k)]
def cadd_cf6071d3(x):
    return [x[i] + 7948231237 for i in range(k)]
def digsub_ec12ae2a(x):
    # the flag is flag{jk}
    return [int(str(n)[:1] + ''.join(['3', '9', '4', '5', '7', '8', '6', '2', '0', '1'][int(p)] for p in str(n)[1:])) for n in x]
def chxor_7bd8fe19(x):
    y = [ord(p) for p in '80b0392329cd93cb7982e8d87d5855c1fdf1']
    return [x[i] ^ y[i] for i in range(k)]
def deck_9d984927(x):
    return x[1:28] + x[34:] + x[:1] + x[28:34]
def cxor_da9ff7d9(x):
    return [x[i] ^ 4859645956 for i in range(k)]
def chmul_c35fb5e9(x):
    y = [ord(p) for p in 'be00edef4132db94dad2294c365ac1a962f1']
    return [x[i] * y[i] for i in range(k)]
def sub_50bd0d23(x):
    # lmaooo
    y = [2010218114, 7597484392, 7894356604, 9339238433, 7968199624, 6231742553, 7996158518, 4930090564, 9745721218, 7505562479, 8131855618, 1970784653, 3249698649, 9505111492, 5755636577, 3807275337, 324016037, 3048687321, 5828124849, 6952350403, 2371897796, 1192503554, 839097841, 4247267878, 5845341456, 4268988988, 42464464, 5584951640, 6455607778, 1240111666, 8281168205, 1295189450, 552932109, 7473918181, 2584276953, 7968104304]
    return [x[i] - y[i] for i in range(k)]
def cadd_f61d1530(x):
    # lel
    return [x[i] + 2630868161 for i in range(k)]
def chadd_f78e9fb5(x):
    y = [ord(p) for p in '7264a3f5663e7ae255034329e789d184c605']
    return [x[i] + y[i] for i in range(k)]
def chmul_20654021(x):
    y = [ord(p) for p in '00d1d719678afc575ee23464c6e1775c1f34']
    return [x[i] * y[i] for i in range(k)]
def digsub_af2d37bc(x):
    # lmaooo
    return [int(str(n)[:1] + ''.join(['1', '8', '2', '0', '4', '3', '6', '9', '5', '7'][int(p)] for p in str(n)[1:])) for n in x]
def deck_34ba8c5d(x):
    return x[11:35] + x[35:] + x[10:11] + x[:10]
def shuffle_1ff845ef(x):
    # evil
    return [x[p] for p in [4, 22, 13, 35, 33, 27, 26, 3, 7, 14, 11, 10, 28, 29, 18, 16, 21, 24, 2, 30, 34, 20, 23, 19, 6, 25, 9, 5, 15, 0, 17, 31, 8, 1, 12, 32]]
def cadd_16cd7d25(x):
    return [x[i] + 5871823496 for i in range(k)]
def mul_ce14d872(x):
    y = [3, 2, 1, 3, 4, 4, 1, 2, 3, 1, 4, 3, 2, 3, 2, 1, 4, 1, 2, 3, 3, 4, 2, 3, 1, 2, 4, 4, 4, 4, 1, 3, 2, 1, 2, 4]
    return [x[i] * y[i] for i in range(k)]
def mul_589a2ea6(x):
    # lmaooo
    y = [3, 2, 5, 7, 3, 9, 2, 2, 9, 9, 5, 5, 7, 3, 1, 6, 5, 4, 2, 4, 3, 4, 1, 4, 3, 9, 7, 2, 6, 6, 4, 7, 2, 5, 9, 3]
    return [x[i] * y[i] for i in range(k)]
def sub_dbea1d09(x):
    # the best
    y = [726383053, 7627461468, 6651960682, 5922486754, 1166542652, 1058207555, 599006469, 908828629, 1434978718, 3042741843, 8834805213, 3141354950, 5613377310, 293154116, 1462519677, 7760120584, 5660792007, 4940728098, 2169141815, 3696829256, 7730136858, 7556956864, 4225192871, 9306046332, 4071047424, 6001740059, 1920991089, 8922811048, 5600218413, 9416599009, 6671849806, 3350475303, 7400095594, 2759649598, 8333531575, 9295223467]
    return [x[i] - y[i] for i in range(k)]
def chmul_dd1920ab(x):
    y = [ord(p) for p in 'fe049a98fbab5d1c31a4baf28542b9e2efbf']
    return [x[i] * y[i] for i in range(k)]
def chxor_001e807f(x):
    # shiet?
    y = [ord(p) for p in 'b7eb740a41704a87afe3c03dede21470f1bb']
    return [x[i] ^ y[i] for i in range(k)]
def xor_53ca0b45(x):
    # kek
    y = [1986078084, 8296140749, 7544226624, 1533816495, 467994296, 5090003732, 3585810056, 8368237621, 8858656585, 6933940544, 1170669542, 9396377060, 7789790086, 2930788299, 2309956996, 2367897945, 3562488399, 6359022169, 7389549801, 1500825815, 9282937878, 240464335, 1148497962, 4478425012, 1778534421, 4011261539, 6630589460, 4739755490, 3244811768, 6602036037, 9200534616, 7018650394, 472631052, 1014848638, 5628976370, 8301460214]
    return [x[i] ^ y[i] for i in range(k)]
def mul_49cd764a(x):
    y = [2, 2, 4, 4, 6, 3, 3, 6, 5, 3, 2, 1, 2, 6, 3, 4, 4, 1, 2, 1, 4, 4, 5, 4, 6, 2, 5, 5, 6, 4, 3, 6, 4, 6, 5, 2]
    return [x[i] * y[i] for i in range(k)]
def xor_3edbcd7c(x):
    y = [9220394979, 6803978733, 6568210092, 8334852425, 9258818883, 721081860, 425232737, 3672003785, 3370361744, 6972645484, 7437638182, 2054982486, 9979157221, 8844310644, 9076021857, 500590856, 6783872024, 7241120786, 5955477633, 5162166005, 2910532476, 7891796376, 1913384765, 3335316180, 4890721981, 2294880940, 8660504599, 3863117811, 6760504768, 4366934380, 9288943621, 5452613207, 7486636571, 8579327919, 3306448740, 5015460462]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_09e2622c(x):
    # just reverse it
    y = [ord(p) for p in 'cd9fa8c05a1a1592ec98658e5fa77713a051']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_8d584727(x):
    # lmaooo
    return [x[i] ^ 8574101110 for i in range(k)]
def chadd_5290e7f2(x):
    y = [ord(p) for p in '1e0ec7a8537d1197cadb4008ce9d2bf02de0']
    return [x[i] + y[i] for i in range(k)]
def add_4584979d(x):
    # lmaooo
    y = [7936808893, 3242684276, 2167735955, 4654735466, 6540401617, 5920599307, 9231552096, 143451223, 4721478286, 9953319965, 2368144261, 2149494167, 4537710102, 8997649272, 5849492436, 6777815632, 1168843976, 3417078332, 8005461038, 8422285747, 3385704103, 8181894000, 3880394293, 1924880586, 4969350074, 8565238393, 5517567127, 5274439293, 2239448566, 1994420365, 8491331444, 4178533371, 4678420826, 3021572350, 9491044251, 5713262499]
    return [x[i] + y[i] for i in range(k)]
def chmul_6d4f5527(x):
    y = [ord(p) for p in '67469a747309ad728b8038a53e3c7e5b1535']
    return [x[i] * y[i] for i in range(k)]
def mul_78cdcde8(x):
    # kek
    y = [1, 1, 3, 2, 2, 2, 1, 1, 2, 1, 2, 3, 1, 3, 2, 3, 3, 3, 1, 2, 2, 1, 3, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 3, 2, 2]
    return [x[i] * y[i] for i in range(k)]
def cxor_fb665168(x):
    return [x[i] ^ 566412187 for i in range(k)]
def cadd_503cc573(x):
    # just reverse it
    return [x[i] + 1945791477 for i in range(k)]
def chunk_1ba6912f(x):
    # rekt
    return x[36:] + x[:36]
def shuffle_9294cfce(x):
    return [x[p] for p in [8, 12, 0, 18, 4, 20, 22, 25, 1, 19, 16, 34, 29, 9, 26, 24, 32, 23, 33, 6, 10, 21, 35, 14, 5, 7, 31, 3, 2, 28, 11, 13, 27, 17, 15, 30]]
def chmul_9fbf4859(x):
    # mucho encrypto
    y = [ord(p) for p in '704e4a1c490a7467b396a93df1513e178374']
    return [x[i] * y[i] for i in range(k)]
def xor_26dc7003(x):
    y = [7093948847, 1273899437, 2906245191, 8972334475, 1959377811, 8021824098, 3670336666, 2172177906, 9491310741, 2313650776, 4139649459, 6243257607, 547891599, 2181518172, 2546404140, 8310066659, 9456079139, 8194441122, 9154907145, 9493153685, 2092575549, 5915523686, 9454031007, 957376476, 9807532929, 7682329724, 2362785731, 6891437799, 1365735923, 4783814929, 4929717308, 391207532, 1956271643, 6803433611, 5716005048, 6067314010]
    return [x[i] ^ y[i] for i in range(k)]
def xor_278fef34(x):
    y = [6917489695, 1832456014, 547578008, 274380758, 8303067983, 9228312329, 9418830854, 1781122853, 3702448129, 9574260824, 9977418257, 4022815422, 5413918838, 3977324881, 7826314625, 2890708949, 3996502495, 1938166156, 1162785069, 1128343287, 5698063365, 692145317, 5773994782, 2340544585, 3513560453, 4234342439, 6524500221, 1073335404, 7541715124, 2006523701, 151607007, 8397271885, 9619445434, 8176812955, 8948501658, 576480750]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_c9c75462(x):
    return [x[i] ^ 7057538011 for i in range(k)]
def chadd_7d40b8f2(x):
    y = [ord(p) for p in 'b8c49280a1495d92f59896266422afc57ccc']
    return [x[i] + y[i] for i in range(k)]
def chxor_3569bd0b(x):
    # shiet?
    y = [ord(p) for p in 'fb50922239f6de6c7bcdc551584d6a776d19']
    return [x[i] ^ y[i] for i in range(k)]
def csub_d77927e4(x):
    # kek
    return [x[i] - 8935560653 for i in range(k)]
def cadd_007b2c57(x):
    # lmaooo
    return [x[i] + 1426111792 for i in range(k)]
def deck_e5f9f783(x):
    # lel
    return x[12:21] + x[36:] + x[:12] + x[21:36]
def add_b7f3fb09(x):
    # encryption
    y = [7103714311, 4390414735, 9074423355, 8753256624, 2971404418, 9387189844, 5504423250, 107746914, 6982884329, 8757942634, 5692111362, 7378456042, 3867973475, 7302793070, 8204262295, 9539809056, 7786543705, 7930730782, 273754657, 4341563528, 1115001430, 1940703646, 5960130657, 6950561335, 5443150227, 7471231701, 8699852599, 2271108969, 8440606429, 2453228684, 962981222, 8946272841, 1914080176, 2731624987, 9932436635, 3286986775]
    return [x[i] + y[i] for i in range(k)]
def chadd_37bb2c71(x):
    y = [ord(p) for p in '40d9e293ea1a73509116ccd24485e316d165']
    return [x[i] + y[i] for i in range(k)]
def chxor_d62951fc(x):
    # lmaooo
    y = [ord(p) for p in '3f780bfb0383b8c6e72f7360a804be3f2d15']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_b6779950(x):
    # the best
    return [x[p] for p in [3, 31, 25, 5, 8, 17, 24, 34, 16, 7, 19, 12, 32, 4, 33, 30, 6, 27, 0, 26, 21, 20, 23, 18, 22, 35, 13, 11, 14, 15, 28, 2, 10, 29, 9, 1]]
def cxor_93784217(x):
    # lmaooo
    return [x[i] ^ 585790282 for i in range(k)]
def chadd_f2f53a63(x):
    # shiet?
    y = [ord(p) for p in 'c6a4a5ae86e90404e524f6d7f45cbe051707']
    return [x[i] + y[i] for i in range(k)]
def csub_81ef0c4c(x):
    # encryption
    return [x[i] - 6365412399 for i in range(k)]
def deck_2d90f0e3(x):
    # the flag is flag{jk}
    return x[5:8] + x[28:] + x[:5] + x[8:28]
def cmul_2a677be7(x):
    # rekt
    return [x[i] * 9 for i in range(k)]
def mul_92b1b71e(x):
    # mucho encrypto
    y = [6, 7, 5, 5, 5, 4, 1, 2, 1, 5, 1, 4, 1, 3, 6, 7, 7, 1, 2, 7, 5, 5, 7, 7, 7, 5, 1, 4, 1, 3, 5, 1, 3, 6, 5, 6]
    return [x[i] * y[i] for i in range(k)]
def mul_53e2ce11(x):
    y = [1, 7, 5, 6, 6, 8, 3, 9, 7, 4, 3, 7, 5, 7, 6, 7, 3, 10, 5, 1, 7, 4, 4, 9, 7, 7, 1, 2, 2, 7, 6, 8, 7, 3, 5, 8]
    return [x[i] * y[i] for i in range(k)]
def cmul_06a86517(x):
    # lmaooo
    return [x[i] * 3 for i in range(k)]
def digsub_61a694a2(x):
    return [int(str(n)[:1] + ''.join(['6', '4', '8', '0', '9', '2', '7', '5', '1', '3'][int(p)] for p in str(n)[1:])) for n in x]
def xor_00e48dde(x):
    y = [6494770385, 8229128133, 7282577490, 1991583929, 6321315656, 9624223278, 1422089347, 1890960027, 5833553773, 1729080319, 2500321257, 2368081092, 1339646760, 3340191460, 7634299011, 3275776691, 6346630179, 3484481615, 4731378971, 9626887389, 6312086512, 7381811840, 524085611, 5093963511, 7855323645, 585200260, 2715015160, 8216524925, 1005632704, 9786919549, 6419574454, 565980608, 9361284909, 8241174351, 4002189490, 660682649]
    return [x[i] ^ y[i] for i in range(k)]
def mul_41bd61f2(x):
    y = [1, 6, 8, 5, 6, 4, 3, 8, 7, 2, 3, 4, 4, 1, 3, 1, 3, 4, 2, 1, 6, 1, 5, 4, 7, 2, 1, 8, 4, 8, 7, 7, 7, 6, 7, 7]
    return [x[i] * y[i] for i in range(k)]
def cmul_859e8b2d(x):
    return [x[i] * 4 for i in range(k)]
def chsub_76771162(x):
    # so good
    y = [ord(p) for p in '985af42c6255d174ae7ced00fb9e16d89199']
    return [x[i] - y[i] for i in range(k)]
def csub_fbcb846c(x):
    return [x[i] - 7780974627 for i in range(k)]
def chadd_75030af7(x):
    # just reverse it
    y = [ord(p) for p in '6eda755a5f29c0812377271943c362b4fec3']
    return [x[i] + y[i] for i in range(k)]
def chadd_88d19b3c(x):
    y = [ord(p) for p in '8a4319b79e13ce1f72e0823a0af3c82f7c0b']
    return [x[i] + y[i] for i in range(k)]
def sub_f3be4e25(x):
    # evil
    y = [7545815597, 8853774856, 6247888186, 503433811, 2760775024, 2724638885, 4516802162, 1195178916, 4254349866, 2421230493, 7107738818, 9687249534, 1532257135, 6245159459, 8941137551, 5014306952, 8443954215, 2739979422, 532777376, 2245317666, 9000437246, 8725144806, 7438015580, 6505364506, 663182168, 4429028344, 4651413736, 9473348746, 560468196, 8604091776, 4330945614, 4359208137, 4655068272, 1661406010, 122949965, 8101763786]
    return [x[i] - y[i] for i in range(k)]
def xor_b81a4467(x):
    y = [2195733625, 1938698964, 3881249055, 7889092343, 347710133, 2370468381, 4069859647, 6539278247, 1087063277, 1235973014, 7054201795, 8125471826, 6200383894, 3961560722, 6333115227, 691137958, 2508798041, 3293843940, 3725723023, 4011773825, 7920012371, 1175467182, 8556252073, 3079543803, 9112747653, 4810600889, 3798971937, 9054472874, 4975369718, 9064581746, 8730740834, 2086915468, 3561987653, 9172877338, 2496895879, 515926253]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_b1f55538(x):
    return x[23:] + x[:23]
def chsub_dfabe48a(x):
    # so good
    y = [ord(p) for p in '1de50a98c35f619f4693826061457f6fac5f']
    return [x[i] - y[i] for i in range(k)]
def deck_606869ab(x):
    # kek
    return x[25:] + x[:7] + x[7:24] + x[24:25]
def shuffle_8dc55f06(x):
    # encryption
    return [x[p] for p in [28, 12, 22, 16, 5, 33, 3, 23, 21, 8, 17, 13, 18, 35, 34, 7, 6, 26, 10, 27, 19, 30, 4, 29, 31, 1, 20, 15, 32, 2, 25, 0, 9, 11, 14, 24]]
def deck_7d84294d(x):
    return x[2:4] + x[4:] + x[:2] + x[2:2]
def shuffle_45b62e3f(x):
    return [x[p] for p in [21, 3, 4, 6, 16, 8, 28, 0, 34, 10, 20, 25, 17, 5, 18, 23, 9, 29, 26, 27, 1, 33, 12, 31, 2, 11, 13, 35, 19, 24, 32, 7, 15, 30, 14, 22]]
def shuffle_8cc50403(x):
    # the best
    return [x[p] for p in [15, 14, 16, 32, 25, 17, 27, 6, 22, 2, 26, 29, 20, 21, 4, 31, 13, 18, 9, 1, 8, 7, 0, 34, 10, 11, 33, 28, 23, 35, 30, 19, 12, 24, 3, 5]]
def cmul_13cd66b9(x):
    # shiet?
    return [x[i] * 6 for i in range(k)]
def add_c871a926(x):
    y = [6584946879, 8103913849, 1830907373, 9804730859, 3084639779, 1483765996, 2230631301, 752006028, 1619949423, 2198684988, 5624383792, 8551546770, 7354319997, 7295138108, 5783179268, 5749197223, 8517697003, 4592654302, 8422352083, 7907388952, 5410340905, 8610232377, 7808148035, 401127321, 348838247, 4311071080, 126485960, 8414682266, 3181880741, 9903141690, 2222709999, 5847092191, 1239812022, 1665089569, 8902478665, 3418448333]
    return [x[i] + y[i] for i in range(k)]
def shuffle_b38ea8bc(x):
    # encryption
    return [x[p] for p in [15, 25, 0, 19, 5, 7, 24, 11, 26, 29, 35, 4, 9, 12, 32, 18, 20, 34, 3, 30, 6, 28, 22, 27, 2, 13, 1, 17, 14, 21, 33, 10, 8, 16, 31, 23]]
def cadd_652099bf(x):
    # the flag is flag{jk}
    return [x[i] + 2488531465 for i in range(k)]
def chmul_6a2ac61f(x):
    y = [ord(p) for p in 'e83b161eaa3d5aaa61e1a68cc3f4fe9c344b']
    return [x[i] * y[i] for i in range(k)]
def chmul_78c19c03(x):
    y = [ord(p) for p in '703358441c63267063813e31cf4f204fc95a']
    return [x[i] * y[i] for i in range(k)]
def add_565903f4(x):
    y = [5342686662, 8847485711, 4766326734, 1055602106, 9901976412, 7422345779, 7694434186, 5627553027, 7536709555, 9036613423, 8615692484, 8428156944, 982583518, 8317137800, 4680067577, 8219321905, 9302237610, 8101126699, 4757497895, 8738910799, 4268765071, 2141303015, 7507724097, 3294853035, 7037340873, 4824764912, 6621212850, 5616742180, 2526218047, 7547077524, 9829564904, 495665591, 3008574606, 1555497674, 1300678391, 2279371272]
    return [x[i] + y[i] for i in range(k)]
def cadd_bbf43e6f(x):
    # the best
    return [x[i] + 5687086980 for i in range(k)]
def chmul_b5dab014(x):
    y = [ord(p) for p in 'fefdfd9ddc94340eaa1203cad38bfbcf7a36']
    return [x[i] * y[i] for i in range(k)]
def cmul_f3c9bff2(x):
    return [x[i] * 9 for i in range(k)]
def chunk_5e4cee28(x):
    # the flag is flag{jk}
    return x[9:] + x[:9]
def cxor_4b979532(x):
    return [x[i] ^ 3256154131 for i in range(k)]
def sub_1a66408e(x):
    y = [1496010975, 3997665109, 5164632086, 858983921, 9499000397, 3953247433, 1525859638, 8638419644, 4230188772, 2216050921, 8060818171, 8530587441, 4383740797, 2775960335, 5260414350, 2721229599, 1065309219, 9246942664, 5618442359, 3593434052, 2718139275, 4118464567, 9534616994, 5051299874, 74352380, 2064577643, 1919915623, 2725815284, 181616784, 7367626636, 8155337406, 5838278159, 793206538, 5666196540, 6261915291, 6272818093]
    return [x[i] - y[i] for i in range(k)]
def cxor_21574829(x):
    # encryption
    return [x[i] ^ 7594228154 for i in range(k)]
def chxor_b96f779c(x):
    # evil
    y = [ord(p) for p in 'e02089a9121ca5fc186b3c41048a6c3a579f']
    return [x[i] ^ y[i] for i in range(k)]
def sub_032906d0(x):
    y = [450653878, 2433450605, 7286188092, 2532652434, 1041028273, 505835775, 6798005117, 9447373611, 5504093821, 3080945415, 7302953834, 4922702103, 1086982504, 1591182964, 8503355112, 7417731127, 5011470106, 7031679281, 3513831427, 7439401445, 7980836200, 4663112335, 2981298925, 8131450173, 5981569527, 8783400451, 4943312298, 1785889047, 6962477943, 243605561, 3464823637, 3003018906, 2944178386, 6040619185, 1988894748, 706165633]
    return [x[i] - y[i] for i in range(k)]
def cmul_7630284a(x):
    return [x[i] * 8 for i in range(k)]
def cmul_cd2eddf4(x):
    return [x[i] * 4 for i in range(k)]
def cmul_b805737d(x):
    return [x[i] * 8 for i in range(k)]
def chxor_31c39495(x):
    # lel
    y = [ord(p) for p in 'a96ae3288ee8d5b28f1ba2861b49dc5d89ef']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_0c42d6fc(x):
    # mucho encrypto
    y = [ord(p) for p in 'aaedbc04d53e2fff2d07f2f545b4775eabec']
    return [x[i] * y[i] for i in range(k)]
def chadd_e92d3462(x):
    y = [ord(p) for p in 'b970b6b4b0e138c2fc934a579cea60ec8590']
    return [x[i] + y[i] for i in range(k)]
def digsub_4c404e0f(x):
    return [int(str(n)[:1] + ''.join(['8', '7', '5', '3', '1', '0', '9', '6', '4', '2'][int(p)] for p in str(n)[1:])) for n in x]
def deck_4def372f(x):
    # just reverse it
    return x[8:23] + x[23:35] + x[:8] + x[35:]
def csub_bbb7d7ae(x):
    # just reverse it
    return [x[i] - 1369981519 for i in range(k)]
def add_bb299925(x):
    y = [9761337338, 108382052, 4032523991, 2206947406, 3748933468, 5277172567, 8379687907, 6546898142, 8257562687, 8589948382, 1380552044, 9082385805, 339927868, 6492491696, 7569660671, 102699590, 962603768, 3882094499, 4863505714, 5612271581, 7007464540, 1013580547, 9089238525, 6633948205, 3196883671, 817070452, 9005265883, 3697927400, 5012440886, 7662409463, 153069487, 9533874690, 7600299236, 3144426782, 5694833524, 4172502438]
    return [x[i] + y[i] for i in range(k)]
def chsub_36aaf90a(x):
    y = [ord(p) for p in '086265df70e8dcf15c4bb86f6c646d1320ff']
    return [x[i] - y[i] for i in range(k)]
def chadd_14d93540(x):
    # rekt
    y = [ord(p) for p in 'b02dc8a2e90ec55c0f6c73a5dcad265b9db6']
    return [x[i] + y[i] for i in range(k)]
def digsub_aecf9a86(x):
    # encryption
    return [int(str(n)[:1] + ''.join(['3', '5', '6', '7', '8', '1', '4', '9', '2', '0'][int(p)] for p in str(n)[1:])) for n in x]
def cxor_5ac6b756(x):
    return [x[i] ^ 6435957737 for i in range(k)]
def chmul_cee9aae6(x):
    y = [ord(p) for p in '6e7cadeee5b0d0b3d3c2398d506f82d3f74a']
    return [x[i] * y[i] for i in range(k)]
def chunk_c72fb6c4(x):
    # the best
    return x[25:] + x[:25]
def chmul_47a26e6f(x):
    y = [ord(p) for p in '771278974e3fc54842a6c6ae1895df54153c']
    return [x[i] * y[i] for i in range(k)]
def chsub_b591ca37(x):
    y = [ord(p) for p in 'a45a50dda6e0aae49f481902b18134343483']
    return [x[i] - y[i] for i in range(k)]
def chunk_e006d845(x):
    # shiet?
    return x[9:] + x[:9]
def chxor_3946db75(x):
    y = [ord(p) for p in '61957fdf790bacfe2eca7caffe40bbc91fa5']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_04ef3ad8(x):
    y = [ord(p) for p in 'c5d960004b522b20b5d3dee85e9aeb2df26b']
    return [x[i] + y[i] for i in range(k)]
def sub_90d65932(x):
    y = [7570867812, 464490257, 4249073028, 49741292, 1549006030, 3027191727, 8890007406, 7031994532, 4153900104, 8181597426, 3511278826, 5413250496, 9838294671, 2793561744, 7183117993, 1261147860, 6708364771, 8085094322, 7443717579, 9118294163, 3004930453, 1110536061, 111061421, 1990081230, 8350342488, 9951935836, 1905530657, 1326992348, 5009228605, 8104058204, 9029314907, 6988259261, 1147008618, 3080610531, 4534971988, 1384707569]
    return [x[i] - y[i] for i in range(k)]
def chxor_29db699e(x):
    # the flag is flag{jk}
    y = [ord(p) for p in 'e1df03b235920a21b62a224832be0d71b356']
    return [x[i] ^ y[i] for i in range(k)]
def chsub_c1db5393(x):
    y = [ord(p) for p in '19c2d5d72c1c159f109437dff6dd1c2665fb']
    return [x[i] - y[i] for i in range(k)]
def chmul_fa12100c(x):
    # encryption
    y = [ord(p) for p in 'da359ffffa89aa75bcf9dd30d15e05e60081']
    return [x[i] * y[i] for i in range(k)]
def chxor_6ae1cc6a(x):
    # lel
    y = [ord(p) for p in 'c301f36dd2a65abaf0d0c795e6c462641c96']
    return [x[i] ^ y[i] for i in range(k)]
def sub_4efcb7e6(x):
    # mucho encrypto
    y = [2004974934, 6270096680, 8285767547, 9575061712, 5889007747, 6689060318, 9666454294, 8944314106, 5361171329, 2369043439, 8473086320, 9551254925, 8753727522, 9253856004, 2196639605, 1561239393, 6668550234, 1221184059, 9288737141, 2230278768, 9419912420, 8057930452, 7316479912, 1512006509, 1493629438, 6992662127, 7547148873, 7309556823, 4084680395, 2386312561, 8062461104, 2882159749, 865012371, 153879072, 5543319159, 9091042764]
    return [x[i] - y[i] for i in range(k)]
def deck_eb2d2a67(x):
    # lmaooo
    return x[14:] + x[12:14] + x[:8] + x[8:12]
def chadd_5544e38e(x):
    # encryption
    y = [ord(p) for p in '10e512c29d66768bd403049165b5ef9f2c16']
    return [x[i] + y[i] for i in range(k)]
def chunk_e172109d(x):
    return x[27:] + x[:27]
def cadd_6d037df0(x):
    # rekt
    return [x[i] + 9820680393 for i in range(k)]
def cmul_f579357e(x):
    # lmaooo
    return [x[i] * 4 for i in range(k)]
def cxor_025cbbe3(x):
    # so good
    return [x[i] ^ 3099510823 for i in range(k)]
def cadd_eca08b2e(x):
    # lmaooo
    return [x[i] + 1783359969 for i in range(k)]
def mul_d23185db(x):
    y = [5, 6, 4, 3, 3, 2, 3, 3, 2, 3, 4, 5, 4, 1, 3, 5, 1, 4, 4, 5, 5, 1, 1, 6, 1, 6, 4, 6, 6, 4, 2, 2, 6, 2, 3, 4]
    return [x[i] * y[i] for i in range(k)]
def cxor_974a0f64(x):
    # evil
    return [x[i] ^ 4271602537 for i in range(k)]
def deck_caa27400(x):
    # encryption
    return x[29:32] + x[32:] + x[16:29] + x[:16]
def xor_3c17deae(x):
    y = [6411255248, 6310547898, 933176936, 162228977, 1169467732, 9178410934, 7380044776, 6259428090, 1421780861, 1756839387, 1284159372, 6961265718, 5284743833, 4091243385, 5628939098, 4048717926, 746588303, 2649845410, 4230316888, 378754948, 4128845727, 8653982382, 9878413159, 4773800511, 3535538058, 3105966069, 2754874500, 1827649261, 5977065966, 553156140, 977545351, 4274520767, 781213757, 4091644835, 5505074100, 859607391]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_cb1a7d77(x):
    return x[5:] + x[:5]
def sub_297255e0(x):
    y = [7547175245, 7962524477, 9963732166, 986748806, 4224413750, 9786148342, 8801109526, 1940201496, 804768346, 3208214949, 1250696434, 5166324485, 5993542441, 7704601950, 398989216, 2596301775, 7633683701, 6350969935, 4836932559, 9759804010, 4076677271, 6914455674, 8193689629, 407705560, 5203227861, 5409079166, 2269432192, 1229291280, 4864233809, 2283661517, 7764466404, 2736956277, 7107244657, 652849939, 3993807203, 4091142583]
    return [x[i] - y[i] for i in range(k)]
def xor_4849bd77(x):
    y = [5816963127, 1662373918, 3040210425, 5420268988, 8860523411, 3126674009, 5973285951, 7142931371, 9614766548, 6848368601, 1891549098, 5673169115, 7146627865, 5479051186, 1659579281, 5366675272, 5612945195, 6648814330, 4048136966, 6839156680, 9110928111, 9264893271, 2593453140, 9606600942, 6557781874, 8353594049, 1957824138, 9336931969, 1351174544, 4818692204, 2771565983, 7536589417, 4584164612, 646362631, 1612571342, 9713960661]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_cd07c1c5(x):
    # the flag is flag{jk}
    return [int(str(n)[:1] + ''.join(['8', '3', '5', '0', '7', '1', '4', '6', '9', '2'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_65dc26f9(x):
    # encryption
    return [x[i] * 5 for i in range(k)]
def add_71df7f95(x):
    y = [5497017025, 3358929308, 8376186225, 8741367255, 4470181497, 9773431189, 5785285672, 6860385202, 7930897400, 2874008378, 2045944628, 5998265911, 6448989342, 8652866688, 657869634, 3080045426, 2917899273, 880943036, 9790051710, 1963715393, 4221957977, 6445165897, 8081162292, 5168979106, 4008027953, 5126051834, 6786964772, 6185262826, 1419304273, 863849437, 2358943027, 4015740490, 1482599109, 7814527177, 9395352666, 4991958937]
    return [x[i] + y[i] for i in range(k)]
def chmul_998ab1ea(x):
    # lel
    y = [ord(p) for p in '44628eabd91c09c1394606322906be0bbf0d']
    return [x[i] * y[i] for i in range(k)]
def sub_43f562fe(x):
    # rekt
    y = [625368338, 5371108024, 6267972884, 5712905953, 6275472805, 6594517230, 2626109914, 6627816748, 6838523740, 1159731384, 9939842145, 473597309, 9504256872, 3250398770, 336701043, 6920278843, 8969022753, 6232814701, 7658395904, 9850201006, 1087933822, 7061319160, 105415034, 658194413, 2033036904, 2072922316, 646230345, 8888516021, 3860240956, 7173131420, 6970625654, 3063779824, 6873123496, 8242746924, 5787097841, 2570547879]
    return [x[i] - y[i] for i in range(k)]
def chsub_27ecb709(x):
    # encryption
    y = [ord(p) for p in '3f68db92a2d501d21430b1ca5af38b4ff905']
    return [x[i] - y[i] for i in range(k)]
def cadd_5162d960(x):
    # just reverse it
    return [x[i] + 6353767637 for i in range(k)]
def chadd_16ea1a60(x):
    y = [ord(p) for p in 'c3465043efd203617398db80c7d7908e4c6d']
    return [x[i] + y[i] for i in range(k)]
def shuffle_03c855c6(x):
    # encryption
    return [x[p] for p in [18, 2, 27, 13, 23, 5, 0, 24, 34, 16, 30, 32, 4, 26, 31, 10, 12, 19, 17, 7, 33, 15, 20, 9, 14, 25, 28, 8, 22, 11, 3, 21, 1, 6, 29, 35]]
def xor_3366a9d3(x):
    y = [5108296060, 1625655839, 6678949652, 370459857, 6850861466, 8912795725, 7265355687, 2587329326, 1671494427, 6999110067, 505049888, 5715437763, 7562523448, 6058482822, 2469489143, 7974472907, 1928770637, 9248211032, 6493838855, 2690872123, 841204039, 7830715172, 4564540318, 1434450416, 2334415823, 4898194969, 9636443232, 6137483508, 8925899494, 5248727767, 1351708259, 6441702455, 2595525070, 7608393175, 7253760924, 9233372841]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_6ff2c5bf(x):
    # evil
    y = [ord(p) for p in 'caebf69785643140ec015ca1bd7c3f0cc416']
    return [x[i] - y[i] for i in range(k)]
def cxor_a1a8de03(x):
    # evil
    return [x[i] ^ 6145413996 for i in range(k)]
def sub_ab090f1a(x):
    # rekt
    y = [4624134550, 8360238011, 4359178765, 9122473723, 8842763644, 1606536249, 313950248, 8016835528, 6793674757, 7587688264, 4965083757, 1868225900, 7277018615, 4885767391, 2583197019, 5715698478, 1302706068, 2190466712, 2859091915, 6664441677, 1559827286, 2950936502, 533151175, 1664414134, 381852932, 7467190116, 7786916022, 6685373415, 7580915470, 5403544778, 7849612013, 7286706855, 7704645409, 1988224653, 8496691778, 214762262]
    return [x[i] - y[i] for i in range(k)]
def chadd_83a5c6be(x):
    # lel
    y = [ord(p) for p in 'df81cec451d2177d1fcbb42955fad3d9d0e7']
    return [x[i] + y[i] for i in range(k)]
def chunk_bd36eb6a(x):
    return x[31:] + x[:31]
def chadd_e678a699(x):
    # rekt
    y = [ord(p) for p in '758b87f86981297ba4776d7dade3ec9edab6']
    return [x[i] + y[i] for i in range(k)]
def chunk_4d08c9d5(x):
    # lel
    return x[12:] + x[:12]
def csub_2cc5f209(x):
    # the best
    return [x[i] - 1884439730 for i in range(k)]
def xor_cc33196e(x):
    y = [6913589679, 3691091232, 7999251559, 145334400, 8908361844, 3276813150, 7461345518, 7103688007, 2314204610, 7847892374, 2840394507, 789953857, 4681430577, 362529210, 5761865931, 2017141126, 6484698344, 5085778248, 2981716820, 8236124250, 9945562585, 9771193551, 1208560772, 9243250614, 7160491627, 6497648322, 2372780913, 1754981777, 9328688719, 7757547930, 6971610734, 7753201156, 4171012889, 3886405586, 7614392122, 850612840]
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_e56a1778(x):
    # rekt
    return [x[p] for p in [6, 4, 30, 1, 20, 3, 14, 17, 18, 12, 15, 19, 28, 0, 33, 26, 11, 23, 24, 2, 29, 35, 22, 25, 16, 21, 13, 9, 8, 34, 32, 10, 31, 5, 7, 27]]
def chadd_abc266d5(x):
    y = [ord(p) for p in '8b7e4433338110e9e7effdd568d00056b2ad']
    return [x[i] + y[i] for i in range(k)]
def mul_6a63acf6(x):
    # rekt
    y = [7, 6, 1, 3, 5, 7, 3, 5, 1, 6, 5, 5, 5, 4, 2, 7, 2, 3, 2, 6, 2, 2, 7, 7, 1, 3, 1, 2, 6, 7, 7, 5, 5, 7, 2, 4]
    return [x[i] * y[i] for i in range(k)]
def csub_68308d55(x):
    # kek
    return [x[i] - 833148819 for i in range(k)]
def chmul_70ce2001(x):
    y = [ord(p) for p in '0d17c32abd96e27ea47d1a74143448687741']
    return [x[i] * y[i] for i in range(k)]
def cmul_8a7021fa(x):
    return [x[i] * 7 for i in range(k)]
def deck_4f9c0f2b(x):
    # evil
    return x[20:33] + x[33:] + x[:2] + x[2:20]
def sub_149a7d50(x):
    y = [9891136212, 5286384852, 5816043723, 9118196293, 6903414105, 819939843, 7850587425, 286225512, 8763547445, 7219732809, 6296289160, 3992324297, 3573239481, 1158282930, 5046694774, 2528077310, 5134446935, 192294407, 9866416388, 7944941996, 2045821293, 8143666120, 6769218382, 1675750416, 7772321614, 5890947147, 3230506613, 6846337280, 3381318266, 5777551230, 204276711, 3662471100, 9043613237, 6033393807, 2887887589, 431124088]
    return [x[i] - y[i] for i in range(k)]
def chadd_a3542df8(x):
    y = [ord(p) for p in '83646c7dc57eec2c13698dcaafcddc3877e0']
    return [x[i] + y[i] for i in range(k)]
def csub_f765621d(x):
    return [x[i] - 522113196 for i in range(k)]
def chxor_f309545e(x):
    y = [ord(p) for p in '4b7d0829c6a7a5a982705ded290b14c1c3c8']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_bbb676d2(x):
    return [x[p] for p in [19, 14, 32, 3, 20, 33, 5, 15, 23, 8, 34, 31, 11, 4, 35, 21, 26, 16, 7, 0, 17, 10, 13, 18, 24, 29, 2, 12, 28, 30, 1, 25, 27, 22, 9, 6]]
def digsub_703bfb0c(x):
    # lel
    return [int(str(n)[:1] + ''.join(['1', '9', '3', '0', '2', '6', '8', '4', '5', '7'][int(p)] for p in str(n)[1:])) for n in x]
def xor_875a544d(x):
    # lel
    y = [6144621261, 4704968913, 3641877278, 8029759010, 1230173365, 7480694910, 729854157, 3415546616, 8027541775, 9901498513, 8556360192, 5862159720, 1823096721, 972435215, 7494240682, 985716584, 7986350995, 5862558104, 4965428844, 7113625186, 8403158231, 4879646577, 6805814447, 9386414144, 3166401677, 1944037347, 2425919030, 8599451448, 848292910, 7845385905, 3330051255, 6278458777, 596842593, 2148560588, 4443649198, 1481100148]
    return [x[i] ^ y[i] for i in range(k)]
def sub_71bf262c(x):
    y = [6231475236, 2587150518, 5757796197, 8516018996, 276497232, 3538449515, 6475208009, 9555466907, 5028239986, 9751446075, 5999854394, 1949078847, 1617421216, 5594410599, 6536778269, 4017421885, 141386785, 9713314203, 9798229749, 3440572644, 1198608432, 3549100741, 7131400147, 3637841495, 4705163644, 4352671402, 926130808, 4935297692, 1069490110, 6960520505, 4762149674, 8827027056, 8801056506, 9253542600, 2753702798, 9156274538]
    return [x[i] - y[i] for i in range(k)]
def deck_9ef9ec36(x):
    return x[26:] + x[11:26] + x[:9] + x[9:11]
def shuffle_4e66918e(x):
    return [x[p] for p in [9, 19, 33, 31, 20, 13, 4, 27, 18, 32, 34, 29, 28, 15, 30, 25, 10, 24, 5, 22, 0, 23, 2, 21, 35, 8, 26, 6, 11, 16, 1, 14, 7, 12, 17, 3]]
def csub_44ad5428(x):
    return [x[i] - 126442638 for i in range(k)]
def xor_4bd4b2d3(x):
    # kek
    y = [891375661, 7386324690, 9548462749, 3335312124, 5519068326, 3635507669, 4087322685, 3572348969, 6219634618, 1407062760, 68476394, 4227596131, 3440419459, 3487991568, 7491439568, 4769049850, 5663116517, 5064650749, 7612990475, 3139865406, 970337081, 8080068034, 2644432466, 3923174549, 6793738339, 6964574343, 2375970158, 9277700366, 819561150, 6646167631, 848804577, 4754255434, 3630952288, 6251129041, 8213273289, 9289552917]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_ab174f4a(x):
    # the flag is flag{jk}
    return x[18:] + x[:18]
def cadd_d957f629(x):
    return [x[i] + 1048155192 for i in range(k)]
def shuffle_6c33ee33(x):
    # encryption
    return [x[p] for p in [4, 1, 25, 29, 12, 3, 30, 26, 18, 2, 31, 19, 11, 20, 27, 23, 32, 34, 22, 13, 5, 15, 33, 7, 6, 9, 28, 35, 8, 21, 14, 17, 10, 16, 24, 0]]
def chmul_44c9b2ed(x):
    # just reverse it
    y = [ord(p) for p in '38a87e338868287770ba516684d10467305c']
    return [x[i] * y[i] for i in range(k)]
def chsub_d8e7f937(x):
    # lmaooo
    y = [ord(p) for p in '6ca913f58748b65149df97844ca27a4dad42']
    return [x[i] - y[i] for i in range(k)]
def chmul_7ebba446(x):
    y = [ord(p) for p in '2baf8afd940d06277ad48e2567cb7524b46e']
    return [x[i] * y[i] for i in range(k)]
def chxor_cc620f44(x):
    # kek
    y = [ord(p) for p in '77d6bfbac4baa5113af9482931297cabff36']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_3a3f3b47(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '7446a32e30496a6bbc169fa1e2beb6b67b26']
    return [x[i] + y[i] for i in range(k)]
def shuffle_3cf7a793(x):
    return [x[p] for p in [31, 4, 12, 11, 8, 25, 1, 7, 17, 14, 22, 20, 32, 30, 2, 21, 3, 9, 5, 15, 18, 13, 29, 19, 0, 27, 35, 6, 28, 34, 24, 23, 33, 16, 10, 26]]
def csub_4392ba2f(x):
    # evil
    return [x[i] - 8812890634 for i in range(k)]
def chadd_76b3ac4f(x):
    # lmaooo
    y = [ord(p) for p in 'e0336b1d68af20a4846d9a0010517d47d3ef']
    return [x[i] + y[i] for i in range(k)]
def chmul_61efa118(x):
    # just reverse it
    y = [ord(p) for p in '2cdfdf40663ef885e8498535d8dffc16d118']
    return [x[i] * y[i] for i in range(k)]
def digsub_ef43a4f8(x):
    # encryption
    return [int(str(n)[:1] + ''.join(['3', '6', '0', '1', '2', '9', '4', '8', '7', '5'][int(p)] for p in str(n)[1:])) for n in x]
def csub_76313df2(x):
    # lel
    return [x[i] - 6977949128 for i in range(k)]
def add_ee203fd4(x):
    y = [6536088587, 5381482223, 7549011554, 3350998333, 2237632664, 4865524218, 9772432111, 9192740230, 6584398993, 2830148027, 5086835050, 602558441, 1790716726, 2874057158, 6240917987, 3715601426, 3061704428, 5934069155, 1228144589, 3993766598, 8378050905, 9102745116, 6034929786, 798495532, 6906133073, 5849816880, 8540471813, 5131012682, 9409989273, 6574073780, 8498526876, 4038565738, 550362866, 2038537976, 1657876641, 5057957119]
    return [x[i] + y[i] for i in range(k)]
def sub_609bbd1a(x):
    y = [9113685702, 3082835269, 2878139374, 3501172594, 8976255214, 6799950324, 5339871855, 3122884066, 6511528760, 3394295534, 1500720086, 6367459485, 8519099788, 3033123226, 9135490650, 8285748642, 7270015209, 9426704429, 4152841538, 2448531279, 7905552048, 3411893893, 5044510921, 96946086, 3777301802, 1117922833, 94423363, 933129947, 7664865510, 2899318495, 8947682601, 6539448630, 5741347983, 6649374145, 2237788503, 7232018467]
    return [x[i] - y[i] for i in range(k)]
def chmul_49e5e1c7(x):
    y = [ord(p) for p in '579293a84bce83816e60118af9f17ff33ede']
    return [x[i] * y[i] for i in range(k)]
def chunk_6a5424b4(x):
    return x[16:] + x[:16]
def digsub_b93022b5(x):
    return [int(str(n)[:1] + ''.join(['6', '1', '4', '9', '5', '0', '7', '2', '8', '3'][int(p)] for p in str(n)[1:])) for n in x]
def cxor_0017f17c(x):
    # the flag is flag{jk}
    return [x[i] ^ 5037201503 for i in range(k)]
def digsub_46d7afa7(x):
    return [int(str(n)[:1] + ''.join(['3', '2', '7', '1', '8', '0', '4', '6', '9', '5'][int(p)] for p in str(n)[1:])) for n in x]
def sub_38bfe22f(x):
    y = [6992997215, 733695697, 1892195001, 6930884478, 1021557143, 46887663, 9999875342, 9183693342, 594163388, 2543063955, 5090437842, 4611149139, 8949699428, 6742008237, 3951832295, 4548872579, 9030713467, 6291684443, 8299138745, 3011110258, 673341120, 7847282855, 1984028191, 7780606798, 9255184469, 6885466185, 7052714067, 1626211115, 8195326401, 7300684654, 9617920648, 350646646, 8488210965, 6285990589, 3459330094, 8036595476]
    return [x[i] - y[i] for i in range(k)]
def digsub_f2fb52b7(x):
    return [int(str(n)[:1] + ''.join(['5', '6', '0', '7', '2', '9', '1', '8', '4', '3'][int(p)] for p in str(n)[1:])) for n in x]
def digsub_1867cc00(x):
    return [int(str(n)[:1] + ''.join(['6', '9', '1', '8', '7', '3', '5', '2', '0', '4'][int(p)] for p in str(n)[1:])) for n in x]
def cadd_6b0bc3e3(x):
    return [x[i] + 9483621196 for i in range(k)]
def chxor_e23f2cfd(x):
    y = [ord(p) for p in '4381d9fbb0d5f808ce54d352fb920da23469']
    return [x[i] ^ y[i] for i in range(k)]
def add_f26d8b4c(x):
    # shiet?
    y = [9281503867, 8463630507, 9812594142, 5681406558, 4188061031, 1981063643, 4469201059, 9199955252, 5165139459, 8861209726, 9737846432, 3355834284, 830352666, 5236151196, 4517379841, 6967463557, 942293253, 4631568035, 3830258766, 598403085, 7208954769, 5462759708, 7969382918, 4742553341, 1636142034, 7564418568, 8042434191, 9843982448, 4727518787, 2907277496, 9096702846, 6072149620, 5694638413, 7908806210, 2141937697, 4230252240]
    return [x[i] + y[i] for i in range(k)]
def sub_f29558b8(x):
    # evil
    y = [6109326450, 407549952, 325477115, 7055351995, 4167209526, 7747375218, 6001411629, 569600801, 9937872589, 7966475469, 4156706228, 8401415250, 9258106823, 5302403909, 2771137101, 3268368333, 7652916770, 1829602267, 701458461, 6181488524, 3383889579, 5683252974, 7018764870, 1688059534, 6813447254, 5711817143, 7003234992, 4583361480, 2339423006, 5548772384, 8917971606, 9456874949, 8158056509, 6310985699, 8147780197, 6440404877]
    return [x[i] - y[i] for i in range(k)]
def sub_5e831919(x):
    y = [6246374105, 6613241153, 2448298202, 1651558281, 8682943179, 7844045302, 1803492426, 9375275008, 3019467049, 7860688988, 341114779, 298102100, 146723480, 5678830373, 9656389983, 2163263158, 9976188077, 2821323723, 5060624884, 1985830749, 3134310128, 4009139127, 9657587118, 8162186919, 9470692692, 2640795132, 9410410001, 5527799965, 765168313, 598196077, 2549515723, 9931792749, 1351862178, 3317906450, 6420092456, 2325690011]
    return [x[i] - y[i] for i in range(k)]
def deck_47b7fb46(x):
    return x[0:21] + x[21:22] + x[:0] + x[22:]
def digsub_20744944(x):
    return [int(str(n)[:1] + ''.join(['2', '6', '4', '7', '9', '1', '8', '0', '3', '5'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_af64f7e0(x):
    y = [ord(p) for p in '93337a4ae810788291e8e80301df09866ac0']
    return [x[i] * y[i] for i in range(k)]
def chadd_93c92f11(x):
    # lmaooo
    y = [ord(p) for p in 'cb87f94000bcd114d0a7e0da9b38b220ccc5']
    return [x[i] + y[i] for i in range(k)]
def chunk_aeecc76a(x):
    return x[32:] + x[:32]
def add_02374137(x):
    # rekt
    y = [2560622320, 8900555265, 8924025962, 4440613199, 2464728648, 8047311598, 3773506974, 2846231090, 3700423294, 9456387551, 9340436601, 3755421841, 9616160922, 1657068562, 9427151819, 9671792232, 4641024240, 9424161239, 1330302938, 2354865742, 2753412938, 2464748688, 1506003704, 6387504625, 3967712141, 3593259893, 3863522002, 4058176361, 2194383741, 1444026750, 9365819260, 2722126438, 5291313835, 1288648797, 2108147233, 3175423788]
    return [x[i] + y[i] for i in range(k)]
def chmul_e513d3af(x):
    # evil
    y = [ord(p) for p in '5c396af221871dff2dbbdabf55049bdf1009']
    return [x[i] * y[i] for i in range(k)]
def cxor_c74d1258(x):
    return [x[i] ^ 2826746364 for i in range(k)]
def cmul_2d4425ba(x):
    return [x[i] * 6 for i in range(k)]
def cmul_b6542da7(x):
    return [x[i] * 8 for i in range(k)]
def shuffle_3113cb7a(x):
    # shiet?
    return [x[p] for p in [7, 27, 18, 10, 15, 22, 33, 29, 8, 24, 17, 13, 11, 34, 20, 4, 14, 19, 1, 0, 32, 28, 21, 9, 26, 25, 31, 5, 6, 35, 16, 23, 30, 3, 12, 2]]
def cxor_454d9bad(x):
    # the flag is flag{jk}
    return [x[i] ^ 1414144390 for i in range(k)]
def shuffle_eb45c1f4(x):
    # lmaooo
    return [x[p] for p in [29, 3, 23, 6, 16, 5, 11, 18, 14, 32, 7, 4, 1, 34, 21, 25, 17, 12, 27, 10, 19, 15, 28, 22, 2, 33, 0, 35, 8, 26, 20, 9, 31, 30, 13, 24]]
def chmul_1c0bdb7a(x):
    y = [ord(p) for p in '0b65b4d71af3b62918e7d5d7d61b5de51766']
    return [x[i] * y[i] for i in range(k)]
def shuffle_a09d75d9(x):
    return [x[p] for p in [16, 3, 15, 30, 12, 10, 7, 32, 14, 19, 5, 33, 0, 18, 35, 20, 21, 31, 8, 23, 27, 17, 11, 22, 34, 28, 29, 2, 1, 25, 13, 24, 6, 9, 4, 26]]
def chadd_163d8ed7(x):
    # rekt
    y = [ord(p) for p in '5dc33c46bfd33184297cc0587f87798803d3']
    return [x[i] + y[i] for i in range(k)]
def cadd_8b78f764(x):
    # kek
    return [x[i] + 6297646560 for i in range(k)]
def chmul_11d3795c(x):
    y = [ord(p) for p in '0e3b73af16112d7ec5ba54e06363b02d5a45']
    return [x[i] * y[i] for i in range(k)]
def chunk_158dd2b2(x):
    # shiet?
    return x[18:] + x[:18]
def chxor_cf758070(x):
    y = [ord(p) for p in '0d0e12333a8ebce4b2a744c2a23a2d54ab97']
    return [x[i] ^ y[i] for i in range(k)]
def xor_abff1870(x):
    y = [2856541333, 701709626, 6185278555, 1639960300, 1693906670, 7918418619, 5637529994, 1597990064, 6634852537, 7155001766, 3112873183, 409432786, 438767120, 8725283389, 3389529030, 2895196669, 7893354493, 5211093407, 7822509122, 6310055124, 3951950831, 2012079749, 1250162370, 4152234700, 9157165056, 8428441229, 4739784872, 8530349041, 955618560, 7684175848, 7990644814, 9608740080, 4579902007, 618870382, 8996932291, 2418331448]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_c24462ab(x):
    # evil
    return [int(str(n)[:1] + ''.join(['6', '7', '3', '8', '0', '9', '4', '1', '2', '5'][int(p)] for p in str(n)[1:])) for n in x]
def add_0a6cff9e(x):
    y = [2188100736, 7413126158, 3878456800, 5711914719, 1084654279, 5041900907, 5727233881, 7268155628, 6121063835, 6420455060, 3147283338, 260960347, 1563716330, 9898478451, 8552554979, 4238242425, 3183035618, 7881269045, 7739939916, 9894923239, 9234106417, 8390188588, 974319291, 4333472977, 6565638230, 7039019179, 501843377, 7207091194, 562211554, 8262542679, 8359627917, 115328427, 5880529816, 7016369704, 3336944500, 4749099400]
    return [x[i] + y[i] for i in range(k)]
def chadd_3c9e0be9(x):
    y = [ord(p) for p in '7b51c974be935bd82b60ed26a7574c911ce4']
    return [x[i] + y[i] for i in range(k)]
def shuffle_5ea1f654(x):
    # evil
    return [x[p] for p in [7, 32, 24, 17, 4, 3, 14, 20, 27, 16, 33, 25, 13, 35, 5, 19, 2, 10, 26, 29, 0, 1, 34, 30, 31, 21, 12, 8, 28, 15, 18, 6, 23, 11, 9, 22]]
def add_0f283710(x):
    y = [4409630346, 9614632662, 6314311740, 2346687259, 7617053044, 4920693383, 9522891625, 8178194123, 415512313, 3206351129, 9459079506, 950332254, 1410605893, 8124311711, 688864026, 980959693, 4201761837, 8460601698, 1368878991, 3222160528, 1894964246, 7553059753, 7707505304, 4671761714, 5102795063, 2163918516, 6706711167, 8239015087, 5709234232, 1984110097, 5958308819, 2496745812, 8728889196, 3291991526, 7659777298, 2825946096]
    return [x[i] + y[i] for i in range(k)]
def chmul_dac3ab2b(x):
    # the best
    y = [ord(p) for p in '1d4a52483331bf1ebb44a4a8147c80c62ef3']
    return [x[i] * y[i] for i in range(k)]
def digsub_54057ff2(x):
    return [int(str(n)[:1] + ''.join(['9', '2', '7', '1', '8', '5', '4', '3', '0', '6'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_9076b7e7(x):
    # encryption
    return [x[p] for p in [7, 14, 25, 18, 10, 28, 6, 32, 21, 8, 17, 33, 11, 4, 1, 5, 31, 12, 2, 20, 24, 0, 23, 27, 16, 9, 22, 15, 3, 30, 35, 26, 19, 13, 34, 29]]
def csub_4e221287(x):
    # lmaooo
    return [x[i] - 8909477619 for i in range(k)]
def deck_3f2162c7(x):
    return x[:9] + x[9:10] + x[23:] + x[10:23]
def cmul_93bd1510(x):
    return [x[i] * 6 for i in range(k)]
def deck_5037f129(x):
    return x[:4] + x[5:11] + x[11:] + x[4:5]
def xor_38573e9d(x):
    # lel
    y = [3209578045, 2336368311, 2201202012, 3230178729, 75544919, 5362162061, 1230344330, 2235937353, 3490694028, 6016142713, 1926980675, 4493426992, 8009804992, 3294273879, 6771041900, 9351926770, 1489015381, 7811547293, 7991171217, 6604639766, 4094698651, 6309249903, 1402780537, 5051910618, 3667652222, 3954434398, 9357801123, 2640380228, 4304581449, 1932572994, 9383413821, 1598413670, 3918451095, 6209479752, 4719882418, 9837228524]
    return [x[i] ^ y[i] for i in range(k)]
def csub_d37a1bf3(x):
    # the best
    return [x[i] - 5251814889 for i in range(k)]
def xor_5af6d272(x):
    # mucho encrypto
    y = [3505938065, 5058079189, 4240880679, 3126286028, 5392416410, 7938185577, 7839863248, 9199347518, 7212577150, 1656787249, 8254285647, 6595991389, 420342474, 6695142611, 4541340726, 4414841639, 2698879089, 6703793111, 3940434213, 4257076021, 7893769476, 6542658353, 9516260343, 2739369304, 3277016431, 8704536971, 3145417831, 9500094938, 9079054128, 387649322, 3745676387, 8600920303, 3038996315, 781741952, 7479312577, 9669154335]
    return [x[i] ^ y[i] for i in range(k)]
def xor_28c1cc46(x):
    y = [7425814174, 6526026866, 2200892049, 7185705707, 6994995417, 4835764572, 2068003919, 6328305725, 6505421373, 1533559306, 9299009994, 6261639011, 926620195, 5048385586, 2093337389, 378771647, 4120753130, 8814417665, 3664298075, 9433239300, 9334049876, 5247012234, 216376978, 1139934949, 2232876707, 6953462687, 8599598983, 9801186582, 7635583672, 7577960786, 57043592, 4082420268, 5274526171, 8182492158, 607369036, 1160326717]
    return [x[i] ^ y[i] for i in range(k)]
def xor_9b985733(x):
    y = [5207275727, 4111688398, 3185650952, 1663285311, 5798706381, 1838765954, 1457403286, 8464135850, 7605597729, 9771851282, 2019411305, 1353079012, 6627276279, 1405274241, 8034738755, 1325529253, 8538871091, 4298869188, 2678354230, 2339751082, 1787085036, 7900361206, 3740953551, 991339768, 7727219266, 6706049962, 6415595060, 5189981905, 7047409090, 2297550323, 2943347962, 2242729285, 7641447499, 1430045189, 9842779055, 6114466626]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_ef3c36c5(x):
    # evil
    return [int(str(n)[:1] + ''.join(['6', '2', '5', '3', '1', '8', '4', '7', '0', '9'][int(p)] for p in str(n)[1:])) for n in x]
def digsub_79a3f207(x):
    # lmaooo
    return [int(str(n)[:1] + ''.join(['8', '9', '4', '5', '2', '3', '0', '1', '6', '7'][int(p)] for p in str(n)[1:])) for n in x]
def cadd_d6913038(x):
    return [x[i] + 7131366552 for i in range(k)]
def csub_3c2b1960(x):
    return [x[i] - 2367614047 for i in range(k)]
def cadd_bc61cc65(x):
    return [x[i] + 2407158386 for i in range(k)]
def mul_d4fa63d2(x):
    # just reverse it
    y = [4, 7, 5, 3, 2, 4, 2, 5, 8, 1, 7, 8, 5, 2, 5, 1, 8, 2, 5, 8, 7, 1, 8, 5, 4, 7, 4, 3, 1, 1, 3, 3, 2, 6, 6, 8]
    return [x[i] * y[i] for i in range(k)]
def mul_94dd1b49(x):
    y = [1, 2, 1, 3, 4, 1, 4, 1, 1, 2, 1, 4, 1, 2, 4, 3, 4, 2, 2, 4, 4, 4, 4, 3, 3, 1, 2, 2, 3, 1, 1, 4, 3, 3, 2, 4]
    return [x[i] * y[i] for i in range(k)]
def add_1eefd08b(x):
    # shiet?
    y = [1109041804, 2133612799, 1438328132, 4291104378, 5897191302, 5233581335, 7600830804, 9017645426, 3750687607, 9397135919, 7172909013, 3004561658, 7645521528, 4097231161, 4369686291, 7214231030, 7281979367, 775633579, 8083255941, 2518892158, 4743155277, 5549734169, 8031397623, 3442128969, 6603555362, 4179268370, 3744484960, 9453219153, 2842656238, 2648750902, 2030248078, 1098345113, 5186552425, 864475804, 850532440, 2054548836]
    return [x[i] + y[i] for i in range(k)]
def cadd_4836ae77(x):
    return [x[i] + 318537645 for i in range(k)]
def chxor_c05fc484(x):
    # encryption
    y = [ord(p) for p in 'fecc574a9bfc04f2b48f6d21a6b381748469']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_0fb9e0bd(x):
    # the flag is flag{jk}
    return [x[i] + 5787982811 for i in range(k)]
def cxor_7645272c(x):
    # kek
    return [x[i] ^ 2569522619 for i in range(k)]
def cmul_f851d67c(x):
    return [x[i] * 8 for i in range(k)]
def chadd_91feb455(x):
    y = [ord(p) for p in 'baeac6f0d51bf912c726e2765626ad934f50']
    return [x[i] + y[i] for i in range(k)]
def chunk_754adf93(x):
    # the flag is flag{jk}
    return x[4:] + x[:4]
def chmul_db134c2c(x):
    y = [ord(p) for p in '6027d723034be19de5522caf4314dcfb5aa1']
    return [x[i] * y[i] for i in range(k)]
def chadd_53eb2419(x):
    # lel
    y = [ord(p) for p in '698a30339d91757b0e1fc065ffddf9c5e0bc']
    return [x[i] + y[i] for i in range(k)]
def cadd_9a96d521(x):
    return [x[i] + 6522640507 for i in range(k)]
def digsub_be47e356(x):
    # shiet?
    return [int(str(n)[:1] + ''.join(['3', '6', '0', '5', '9', '1', '4', '2', '8', '7'][int(p)] for p in str(n)[1:])) for n in x]
def chunk_1d45076c(x):
    # encryption
    return x[34:] + x[:34]
def chxor_efcd55a0(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '5b5dc14e363177156c6ba499754e9ae61c4a']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_b4a5b937(x):
    # lmaooo
    return [x[i] ^ 7733316167 for i in range(k)]
def cxor_ffad6101(x):
    # lel
    return [x[i] ^ 8100565115 for i in range(k)]
def cxor_060ce4e2(x):
    # just reverse it
    return [x[i] ^ 240665259 for i in range(k)]
def add_39899af6(x):
    y = [6201959879, 3536419284, 2411031687, 8130478827, 1447404230, 2600809353, 9044515521, 1436136360, 4820675199, 1661053451, 6223466668, 7924818067, 2946030511, 194083219, 4872915171, 2208246277, 3046356035, 2584599755, 4594161598, 5079658637, 5600594577, 325585089, 9193240645, 791265927, 3749912021, 5969319193, 3111800077, 138058925, 6838889815, 6555515827, 1717340677, 6999447529, 1811670320, 4200922314, 7632745977, 4236418171]
    return [x[i] + y[i] for i in range(k)]
def deck_3b089433(x):
    # rekt
    return x[11:22] + x[22:27] + x[:11] + x[27:]
def cmul_9ebbf06f(x):
    return [x[i] * 10 for i in range(k)]
def digsub_7aec5b80(x):
    return [int(str(n)[:1] + ''.join(['0', '3', '7', '5', '9', '6', '4', '1', '8', '2'][int(p)] for p in str(n)[1:])) for n in x]
def mul_f2813d64(x):
    # shiet?
    y = [3, 2, 5, 2, 3, 4, 3, 4, 4, 4, 3, 1, 5, 1, 1, 3, 1, 2, 2, 5, 5, 4, 2, 4, 3, 5, 3, 2, 5, 4, 1, 2, 2, 4, 1, 1]
    return [x[i] * y[i] for i in range(k)]
def chxor_28f8a717(x):
    y = [ord(p) for p in '3900fc456c9f8c64e98c1083f5a59c3b9cbf']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_3f9d1ce8(x):
    return [x[p] for p in [8, 22, 24, 9, 14, 3, 35, 11, 28, 0, 12, 17, 27, 5, 21, 23, 29, 31, 26, 20, 15, 6, 34, 13, 33, 4, 32, 7, 10, 16, 2, 1, 25, 19, 30, 18]]
def chadd_da1b4b19(x):
    y = [ord(p) for p in 'b0871fc14888bcb6c66eb24562728d185384']
    return [x[i] + y[i] for i in range(k)]
def chunk_e20796de(x):
    # encryption
    return x[36:] + x[:36]
def cxor_18c1314e(x):
    # rekt
    return [x[i] ^ 6300890345 for i in range(k)]
def shuffle_d0a6fda1(x):
    return [x[p] for p in [7, 4, 14, 34, 21, 35, 8, 17, 0, 28, 15, 3, 18, 16, 29, 32, 10, 11, 12, 2, 13, 22, 1, 33, 25, 30, 26, 19, 6, 5, 27, 24, 31, 23, 20, 9]]
def chsub_934ba014(x):
    # so good
    y = [ord(p) for p in '4f208d2339251b16af7bb47afbc022ad96a0']
    return [x[i] - y[i] for i in range(k)]
def digsub_f2e8b007(x):
    return [int(str(n)[:1] + ''.join(['1', '6', '9', '8', '4', '7', '5', '0', '3', '2'][int(p)] for p in str(n)[1:])) for n in x]
def xor_e437e0ae(x):
    y = [7084436451, 3630740401, 945023720, 310373010, 2480842371, 5391751029, 8822056022, 4052438099, 4031773064, 2945139769, 4283730330, 7853373149, 93787721, 3146063872, 7530855858, 157160667, 804288500, 1168812963, 2125555214, 3492306958, 2711851690, 3349997120, 6738300770, 8443577355, 1180160449, 5345596860, 5752281287, 5767915717, 2080375901, 3031239334, 6828589874, 5549213606, 3489999146, 4889346313, 6335093725, 8298260018]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_607218b8(x):
    # kek
    return x[12:] + x[:12]
def cxor_a009b999(x):
    # kek
    return [x[i] ^ 9086438542 for i in range(k)]
def chadd_d7cdb5da(x):
    # so good
    y = [ord(p) for p in 'dbb8af0d05292e0e3c65beaf4485e224e473']
    return [x[i] + y[i] for i in range(k)]
def chunk_0b804480(x):
    # mucho encrypto
    return x[26:] + x[:26]
def chunk_7ee32000(x):
    return x[13:] + x[:13]
def cxor_3e27fbe8(x):
    return [x[i] ^ 6041947852 for i in range(k)]
def deck_487ae032(x):
    return x[22:34] + x[8:22] + x[34:] + x[:8]
def cadd_e9f8600c(x):
    # rekt
    return [x[i] + 1951763016 for i in range(k)]
def chunk_e0f4eb85(x):
    # the flag is flag{jk}
    return x[4:] + x[:4]
def xor_18093134(x):
    # lel
    y = [7892866460, 1523977236, 2215229550, 3720964024, 6034139577, 8516594401, 2510431725, 2889444546, 2038924257, 9732463510, 5268549834, 1656670215, 4900674775, 658211884, 5044782882, 4874678574, 4783135178, 2148041589, 772300202, 1347564450, 6463419076, 1285518999, 384809184, 9660342612, 8144424770, 2549891579, 9438824537, 9013510522, 5597197882, 4366360288, 9727868023, 363726697, 76772138, 72569438, 4977811041, 5858297212]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_6c610e81(x):
    # shiet?
    y = [ord(p) for p in 'cb279e32ee07633cef496f896ed179fac051']
    return [x[i] * y[i] for i in range(k)]
def deck_890897f8(x):
    return x[26:29] + x[11:26] + x[29:] + x[:11]
def xor_f98f4d97(x):
    # rekt
    y = [3953579961, 2210947562, 3811207039, 6930238887, 5033940695, 1697005595, 3625673487, 515492172, 7360381297, 6352026229, 1242670063, 1317913156, 671147295, 9274646596, 3863507466, 3527377161, 5362467776, 2298784398, 5046339306, 6238001846, 2298932449, 5178679133, 4376547157, 1718831668, 2411330459, 6209354507, 9237590175, 8726737528, 2720509621, 8032018386, 9098304241, 3977701551, 7037585441, 8079840437, 8183022051, 9123136396]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_18bbd248(x):
    # rekt
    y = [ord(p) for p in '400edacdb708e2b385a6ec893c6b9a6c7f54']
    return [x[i] * y[i] for i in range(k)]
def chsub_dbb4ae01(x):
    # mucho encrypto
    y = [ord(p) for p in '360645cb17d18e0f216a2717725ba55ad755']
    return [x[i] - y[i] for i in range(k)]
def sub_a8ed3df9(x):
    y = [3404866518, 2497569359, 797861230, 5387090759, 4488859908, 3482838905, 6719888854, 2366649830, 140110998, 1034115841, 665610066, 8263404018, 1377593769, 1770265467, 7973409402, 3179416300, 6179658739, 2247403695, 8392498331, 7391828066, 8938240679, 4461888544, 9824339856, 1431330346, 1369378462, 8465619508, 7108344179, 2110269455, 3671383873, 3382258889, 6711547113, 1648053442, 4413130189, 5167934405, 1844731562, 6299428107]
    return [x[i] - y[i] for i in range(k)]
def chadd_e5be5f3f(x):
    y = [ord(p) for p in 'fc860b04b9ca296a03c07f938645127660fc']
    return [x[i] + y[i] for i in range(k)]
def sub_72e0ad9e(x):
    y = [7489523183, 8875102429, 3996855209, 6590305982, 9166256447, 8333827356, 7223311748, 9437466473, 1220860111, 5105839110, 5054311021, 9630409211, 6810122180, 4101518597, 2569008026, 2945462726, 4158204005, 7980510154, 7764321970, 1242113125, 9317496068, 9389893687, 3183355313, 8341107188, 8210773528, 8804367357, 3285466821, 6950237225, 4488496363, 3908475074, 3082256854, 5382357385, 5226873639, 2481669081, 2986721054, 1821022451]
    return [x[i] - y[i] for i in range(k)]
def add_66171335(x):
    y = [1174717229, 8079224632, 6337336342, 1378921532, 2794428421, 8852272322, 7966486519, 8882891819, 6455655747, 2549889232, 2531450689, 7330968625, 7925761596, 9548397383, 7905394598, 9302094110, 386423043, 1642821062, 4436256922, 424634792, 9934785019, 4040514047, 7804648413, 6382251384, 8151580628, 1259136562, 918897111, 8406065591, 1920224616, 2703357355, 313575875, 4083316414, 7680860009, 7643940023, 9567238368, 8913812130]
    return [x[i] + y[i] for i in range(k)]
def chmul_32362a1d(x):
    # shiet?
    y = [ord(p) for p in 'eba513f7330417ee1e2ace7dfb6eab12bab9']
    return [x[i] * y[i] for i in range(k)]
def mul_c4baebe4(x):
    y = [5, 7, 5, 1, 7, 3, 3, 4, 4, 7, 6, 2, 1, 6, 6, 1, 4, 3, 2, 5, 5, 3, 1, 1, 5, 4, 2, 6, 3, 4, 2, 1, 2, 6, 7, 3]
    return [x[i] * y[i] for i in range(k)]
def chmul_14ccb396(x):
    y = [ord(p) for p in '1b78824fd0fe7645a0a589dc6184ff273cd5']
    return [x[i] * y[i] for i in range(k)]
def deck_3e07a804(x):
    # encryption
    return x[5:19] + x[31:] + x[19:31] + x[:5]
def cxor_2b349478(x):
    # encryption
    return [x[i] ^ 9453244290 for i in range(k)]
def cadd_f1510001(x):
    # shiet?
    return [x[i] + 7880660123 for i in range(k)]
def cxor_6953d2a7(x):
    # the best
    return [x[i] ^ 4027024807 for i in range(k)]
def shuffle_eeea5e4e(x):
    # rekt
    return [x[p] for p in [7, 30, 27, 12, 3, 14, 21, 10, 33, 4, 28, 26, 15, 16, 19, 18, 22, 31, 13, 34, 20, 5, 1, 8, 2, 6, 0, 32, 17, 25, 29, 35, 11, 24, 9, 23]]
def chsub_66a6c561(x):
    # encryption
    y = [ord(p) for p in '0cdc044733a82090c749461e984b7a3182ce']
    return [x[i] - y[i] for i in range(k)]
def cmul_45c479ca(x):
    return [x[i] * 8 for i in range(k)]
def cadd_09d85417(x):
    return [x[i] + 894526313 for i in range(k)]
def sub_44011266(x):
    # lmaooo
    y = [5228721356, 6049546074, 4814843668, 7811878621, 6055926160, 6248451497, 4849481586, 4194514903, 4219832178, 9553157512, 3915615214, 7000883234, 3855657781, 7042105582, 959069018, 4396276644, 4969663611, 4027207215, 1274430214, 7956322620, 4792469381, 4822497265, 2144799928, 8330975572, 313576710, 3421128067, 2856746019, 8395675062, 2667237789, 6602375342, 1043656227, 4284570005, 7101820712, 5783897943, 7831287706, 80289111]
    return [x[i] - y[i] for i in range(k)]
def cadd_8db3f2f3(x):
    # the best
    return [x[i] + 8193143865 for i in range(k)]
def chxor_bbf3589a(x):
    y = [ord(p) for p in '2c0f504a2efa471f8c254698518d23f36682']
    return [x[i] ^ y[i] for i in range(k)]
def deck_e9085cae(x):
    return x[28:34] + x[:10] + x[10:28] + x[34:]
def shuffle_3a497842(x):
    return [x[p] for p in [9, 17, 5, 22, 29, 28, 3, 10, 11, 18, 21, 13, 15, 6, 30, 25, 7, 20, 0, 14, 4, 16, 23, 1, 32, 8, 19, 26, 34, 12, 35, 33, 31, 2, 24, 27]]
def xor_b8479b53(x):
    y = [2970268695, 128010723, 4081680545, 1612199040, 3530508585, 8412696997, 3098159141, 8410991587, 8516033711, 1641848944, 5355901900, 774950102, 1468652327, 8574696075, 513644648, 3073629912, 2301168010, 274229887, 9466703526, 6912883551, 6878624840, 5219034831, 115010657, 9989637160, 3350495421, 8912537476, 5509518439, 4676005748, 9120953693, 3340459179, 3094276724, 3374327241, 4236674498, 6448994523, 6623218622, 6671191453]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_a2fdcc3b(x):
    y = [ord(p) for p in '97d004969548bf8de83d57ff83e44f1fb95f']
    return [x[i] - y[i] for i in range(k)]
def chmul_695202ac(x):
    y = [ord(p) for p in '7c86ec26f477064bd4514b350917b72ab5b3']
    return [x[i] * y[i] for i in range(k)]
def cadd_2bb6b4bc(x):
    return [x[i] + 41238519 for i in range(k)]
def chunk_649c4eba(x):
    # kek
    return x[12:] + x[:12]
def chmul_b11a8b8c(x):
    y = [ord(p) for p in 'c429936cadf74bc53c79201e6d99a7b5abc9']
    return [x[i] * y[i] for i in range(k)]
def chunk_29281be2(x):
    # encryption
    return x[15:] + x[:15]
def deck_96aed79e(x):
    return x[:12] + x[20:36] + x[12:20] + x[36:]
def deck_3161676e(x):
    return x[29:] + x[20:29] + x[8:20] + x[:8]
def cadd_4003b254(x):
    return [x[i] + 7112907935 for i in range(k)]
def chadd_967b4961(x):
    # the best
    y = [ord(p) for p in '76f9c95abbb0e2becca28a00f4d90a3008c8']
    return [x[i] + y[i] for i in range(k)]
def mul_1926f102(x):
    y = [6, 4, 4, 6, 5, 3, 4, 3, 1, 6, 3, 6, 2, 2, 3, 3, 6, 5, 2, 2, 3, 4, 6, 1, 4, 2, 5, 5, 6, 3, 4, 3, 4, 6, 3, 1]
    return [x[i] * y[i] for i in range(k)]
def chsub_76cedeac(x):
    # evil
    y = [ord(p) for p in '3b56e3e247ea41f7c416afd0627b75c1b901']
    return [x[i] - y[i] for i in range(k)]
def add_cfe45120(x):
    y = [6308284630, 3630920984, 9823599444, 6621799601, 4274850343, 4048839371, 2377602242, 6239374804, 8120689246, 385460333, 3708920554, 6466039192, 4630943494, 6703683510, 9576742853, 9114720751, 1010785287, 2689980734, 7618800881, 9575331889, 428852044, 8701618256, 8459690413, 5167573205, 3687433939, 6230259155, 1653181053, 5253799498, 6188149432, 869434571, 4757460160, 2664482945, 4291363118, 8564076142, 4315299740, 2853778479]
    return [x[i] + y[i] for i in range(k)]
def cxor_25ff2742(x):
    return [x[i] ^ 8761929202 for i in range(k)]
def mul_62a37d48(x):
    # kek
    y = [3, 2, 4, 5, 3, 3, 6, 3, 4, 3, 4, 2, 3, 6, 3, 6, 6, 6, 4, 5, 6, 4, 3, 6, 4, 4, 3, 6, 1, 6, 6, 4, 5, 4, 5, 5]
    return [x[i] * y[i] for i in range(k)]
def shuffle_74725db2(x):
    return [x[p] for p in [34, 5, 18, 25, 13, 17, 11, 28, 1, 29, 8, 15, 4, 23, 7, 14, 27, 0, 3, 22, 21, 33, 10, 19, 31, 6, 26, 24, 20, 9, 12, 30, 2, 35, 32, 16]]
def chunk_f5aa64b7(x):
    return x[8:] + x[:8]
def sub_2e2758dc(x):
    y = [7310086416, 7543788578, 2308218788, 7685957325, 174306983, 1203059012, 1355914250, 1616956208, 1953070152, 8558166455, 9398712194, 2844811170, 4754662426, 684953396, 8517921903, 5108969649, 5742018255, 2332003989, 5640867210, 9677751260, 4621471473, 9876514679, 8033948849, 1097871457, 5885384705, 4252179770, 4711059816, 9388672195, 2597734336, 2137521466, 3574574519, 7448359890, 3768614861, 6841092878, 3745679978, 6020240642]
    return [x[i] - y[i] for i in range(k)]
def cmul_b57f5cfc(x):
    return [x[i] * 8 for i in range(k)]
def chadd_50e33e22(x):
    # evil
    y = [ord(p) for p in 'ef7e8e12e3ca56d236093b65dd79df85ea59']
    return [x[i] + y[i] for i in range(k)]
def shuffle_6136bc5b(x):
    # the best
    return [x[p] for p in [20, 30, 26, 23, 6, 9, 31, 22, 19, 17, 16, 5, 32, 18, 24, 28, 25, 4, 12, 11, 34, 14, 8, 13, 2, 29, 27, 3, 33, 15, 7, 0, 35, 1, 21, 10]]
def deck_c8ff6877(x):
    # lmaooo
    return x[:8] + x[15:35] + x[35:] + x[8:15]
def cmul_e9c3d090(x):
    return [x[i] * 4 for i in range(k)]
def chadd_adaa5d2b(x):
    y = [ord(p) for p in '48ae5a4c7d270d4e93f18dadf660cc32cae1']
    return [x[i] + y[i] for i in range(k)]
def csub_d47c197e(x):
    return [x[i] - 9077799668 for i in range(k)]
def digsub_ba829062(x):
    # lel
    return [int(str(n)[:1] + ''.join(['6', '1', '5', '4', '9', '2', '8', '7', '0', '3'][int(p)] for p in str(n)[1:])) for n in x]
def deck_d9d0a063(x):
    # encryption
    return x[:14] + x[28:] + x[14:16] + x[16:28]
def xor_a6213de5(x):
    # mucho encrypto
    y = [6335977680, 400413354, 9309788108, 7134452734, 3127105927, 6454761810, 5597824897, 2790607862, 1380971777, 9468889033, 2238777758, 1272921359, 8804384488, 6694347032, 3622032363, 1699778405, 5400439018, 3137437044, 2240553041, 7658789464, 6916614695, 3224946684, 4268564982, 1310965468, 2215677675, 5985408559, 4100032476, 4380840337, 2324510124, 4265953259, 5227397753, 7993341667, 387100514, 6279719277, 9669163489, 5545815486]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_1b9caedc(x):
    return [int(str(n)[:1] + ''.join(['6', '9', '3', '8', '0', '2', '7', '4', '5', '1'][int(p)] for p in str(n)[1:])) for n in x]
def chxor_85f13098(x):
    # rekt
    y = [ord(p) for p in 'd2503e0837f38e1041ace01f6e9f23263971']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_5c39207d(x):
    # lmaooo
    y = [ord(p) for p in '0bb52563ccf5067807f98b41eb10688e66f0']
    return [x[i] * y[i] for i in range(k)]
def digsub_ff462c4a(x):
    return [int(str(n)[:1] + ''.join(['9', '4', '0', '3', '5', '2', '8', '7', '6', '1'][int(p)] for p in str(n)[1:])) for n in x]
def digsub_b0591b22(x):
    return [int(str(n)[:1] + ''.join(['6', '5', '0', '2', '4', '9', '7', '1', '3', '8'][int(p)] for p in str(n)[1:])) for n in x]
def sub_a62e014f(x):
    # so good
    y = [1560195730, 33992117, 2809016139, 5629073168, 1892265067, 5746435076, 9240984151, 9154314782, 8060342202, 289735912, 4818174496, 599579554, 9390442740, 2474922862, 5307750647, 5357799765, 5479998035, 6174816960, 5078879840, 6346491263, 7194465210, 779452396, 8535389369, 6772673936, 6641368340, 7664068722, 9651103420, 4493386514, 5848826561, 8253633162, 2433471519, 6656901554, 9182094097, 9241243102, 8529864707, 9216345163]
    return [x[i] - y[i] for i in range(k)]
def mul_eb559523(x):
    # kek
    y = [5, 1, 3, 6, 3, 2, 6, 6, 1, 4, 1, 6, 2, 2, 5, 3, 5, 1, 1, 4, 1, 6, 4, 4, 5, 2, 5, 4, 3, 5, 1, 1, 3, 2, 4, 3]
    return [x[i] * y[i] for i in range(k)]
def chsub_aad79c73(x):
    y = [ord(p) for p in '37f7ad533e13307e0e1a36eb229f5e859f1d']
    return [x[i] - y[i] for i in range(k)]
def csub_965ea16b(x):
    # kek
    return [x[i] - 4057569054 for i in range(k)]
def chsub_7a75b07e(x):
    y = [ord(p) for p in 'dffaa0a1005718e61f2cd7f5dc98a5831489']
    return [x[i] - y[i] for i in range(k)]
def chsub_f7d05960(x):
    y = [ord(p) for p in '311ee190b5b6841bd2ac22fcaf6b7b2a1c9f']
    return [x[i] - y[i] for i in range(k)]
def add_51b5d61d(x):
    # rekt
    y = [4218708583, 9039651196, 915476322, 5743819583, 9729126956, 5164981459, 5457460505, 4081021871, 3191882647, 587242261, 2860957429, 2128658406, 6539918693, 2663805220, 4446304909, 3860503342, 1969208904, 464226007, 2024643678, 9615546524, 1421228629, 8238533521, 8415144397, 365636592, 7788952780, 2374231002, 7099283669, 1459287735, 6243578605, 7861375579, 2794506897, 4596292885, 6461759678, 388571670, 170236554, 4809913266]
    return [x[i] + y[i] for i in range(k)]
def sub_e1d8193c(x):
    y = [4206488285, 6252955148, 1947723951, 8147758495, 9408706902, 3521977014, 3658990923, 6276456840, 686433951, 5501163029, 3703493241, 6548637146, 9766570695, 510346893, 9887403376, 8633783189, 6308512174, 8169439086, 8871910831, 377448779, 5929016182, 8378636168, 510830298, 8490763369, 5856170550, 2895578580, 9030637694, 1824199933, 3715457156, 7070777086, 1866138997, 3074652320, 9070145858, 9585785226, 3871086126, 2248916531]
    return [x[i] - y[i] for i in range(k)]
def xor_6ee9de87(x):
    # so good
    y = [8371533359, 6973907121, 8975414531, 139459347, 8024867552, 157075036, 9469898641, 8114985975, 8561466599, 7952007931, 5976036118, 8051658309, 6944968733, 476019983, 5464855945, 3183057430, 37538941, 7532951847, 6330984621, 383661112, 7227951649, 1655259984, 1337880619, 1176013478, 3209023155, 2675532585, 9837863835, 5902332391, 6976511567, 6036986910, 8611338684, 8815164686, 8393404072, 204431055, 3904063299, 9600171562]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_4bf09cb4(x):
    # shiet?
    y = [ord(p) for p in 'd5d51308ae4991acf8974f4e23b981eebdef']
    return [x[i] * y[i] for i in range(k)]
def shuffle_77f02835(x):
    # shiet?
    return [x[p] for p in [34, 7, 33, 26, 14, 28, 15, 3, 21, 18, 25, 16, 6, 2, 20, 35, 27, 12, 32, 9, 19, 10, 1, 24, 17, 0, 5, 13, 22, 4, 23, 11, 29, 31, 8, 30]]
def xor_b741c18e(x):
    # evil
    y = [9055342680, 480305883, 3091705577, 9010227952, 1182769945, 1826428936, 868697264, 4815174454, 4372304286, 3361617110, 1753376943, 7875809128, 1942052365, 8940221516, 8981236230, 1086508929, 7297512424, 5945414654, 1541285662, 7997001535, 8062548014, 3529296826, 9273014415, 8693914240, 5481235719, 2882794063, 4871923578, 3282115545, 6749998824, 5810424277, 3421807155, 7547895999, 9210495451, 1787486477, 9227997586, 4540168172]
    return [x[i] ^ y[i] for i in range(k)]
def chadd_8e51c71d(x):
    y = [ord(p) for p in '6be75364864c321ebe65d51ecf1996492026']
    return [x[i] + y[i] for i in range(k)]
def csub_32783b79(x):
    return [x[i] - 8914776085 for i in range(k)]
def sub_4a2fd9ee(x):
    # just reverse it
    y = [6797661719, 214911551, 5572872741, 6257579723, 1055214579, 988225752, 1149604418, 422609492, 5815465384, 138205077, 7316635754, 303784964, 353425925, 9590770274, 5802256580, 4823596582, 9941842925, 3150149704, 9505122056, 4554150800, 4967356278, 1473593602, 7421583711, 3869436309, 2100264981, 4182992139, 1214352798, 8329048442, 1721957029, 281884718, 7788834525, 6148578143, 1011677353, 7961730527, 7857058770, 4177934801]
    return [x[i] - y[i] for i in range(k)]
def deck_4a07397a(x):
    # shiet?
    return x[31:35] + x[:12] + x[35:] + x[12:31]
def cxor_c9bff23d(x):
    # lmaooo
    return [x[i] ^ 4322073213 for i in range(k)]
def shuffle_3f68185e(x):
    return [x[p] for p in [21, 24, 10, 27, 26, 35, 22, 2, 5, 29, 11, 18, 17, 6, 30, 9, 34, 32, 31, 4, 1, 7, 8, 12, 0, 16, 13, 20, 15, 19, 14, 23, 25, 3, 28, 33]]
def shuffle_e75b3905(x):
    return [x[p] for p in [16, 22, 11, 8, 32, 27, 24, 1, 3, 29, 12, 4, 15, 25, 10, 34, 30, 2, 21, 14, 7, 13, 33, 26, 18, 9, 6, 0, 28, 5, 17, 20, 35, 23, 31, 19]]
def xor_cb183615(x):
    y = [5927996821, 3199952622, 7524967636, 573303935, 8854774441, 5649249841, 541816140, 5205118833, 8465928401, 312928209, 8125226421, 3036342549, 5875999574, 475834590, 3530090041, 4950805740, 6226192293, 1889140886, 6507014405, 6721024291, 6028803864, 1317507718, 8925883386, 5317489979, 6797601364, 7464277751, 9296677828, 2154010411, 2849075246, 3218099081, 6917813951, 125834772, 7698873551, 1289961165, 3678343109, 2824787209]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_b646f68b(x):
    return [x[i] ^ 1176581575 for i in range(k)]
def csub_1bf63629(x):
    # just reverse it
    return [x[i] - 5445155083 for i in range(k)]
def cmul_9edf8822(x):
    # just reverse it
    return [x[i] * 10 for i in range(k)]
def shuffle_b0e9c01f(x):
    # lmaooo
    return [x[p] for p in [30, 33, 18, 14, 7, 27, 25, 32, 4, 8, 2, 29, 19, 11, 6, 20, 16, 28, 10, 15, 24, 34, 35, 31, 22, 1, 12, 17, 26, 21, 5, 9, 3, 23, 0, 13]]
def sub_f5f7ee7a(x):
    # mucho encrypto
    y = [5114104428, 4732401371, 6280568267, 4988623850, 8256345731, 9163732986, 9180153441, 5294168339, 4194503698, 8474611691, 1703261511, 7445493625, 2890688977, 1916267369, 4623705917, 268026718, 1475071862, 9900550735, 8194907295, 7811222558, 9835218537, 6911476326, 231081300, 1460103051, 1555287872, 5242698332, 879514350, 3969758224, 6232075469, 7811570069, 42316543, 5122011251, 9766882220, 535632675, 8604456440, 7473782153]
    return [x[i] - y[i] for i in range(k)]
def chxor_68adccd3(x):
    # the flag is flag{jk}
    y = [ord(p) for p in 'bf3ba984ea096ea6acc185db1fac005641bc']
    return [x[i] ^ y[i] for i in range(k)]
def mul_8710992d(x):
    y = [9, 4, 8, 7, 7, 8, 2, 6, 8, 8, 4, 1, 3, 8, 5, 4, 1, 7, 9, 4, 3, 5, 7, 6, 1, 4, 5, 7, 7, 4, 9, 5, 7, 4, 6, 7]
    return [x[i] * y[i] for i in range(k)]
def shuffle_0d458069(x):
    return [x[p] for p in [1, 27, 16, 32, 25, 26, 17, 22, 11, 7, 0, 5, 2, 9, 13, 34, 4, 18, 19, 14, 3, 30, 15, 33, 24, 29, 12, 23, 20, 28, 8, 31, 10, 21, 6, 35]]
def chadd_31ab6514(x):
    y = [ord(p) for p in '75409496da1ffdeba058e2e9268f77ba0da8']
    return [x[i] + y[i] for i in range(k)]
def cadd_d279898b(x):
    return [x[i] + 9460124214 for i in range(k)]
def add_c908a5f4(x):
    y = [7699495939, 6307008923, 67887940, 5010203107, 4945984099, 4070736582, 7695234280, 6140294942, 3802047147, 7238501366, 6204199131, 890748343, 6150770937, 2109218926, 9500684764, 8228709114, 6275209926, 2421065864, 660782893, 6820761332, 1599551919, 1799193259, 6877260647, 6202225093, 6895973881, 3737520673, 5499988230, 2401070502, 3749203450, 7859696378, 4665023687, 2358436616, 3766387474, 3992599416, 3669562875, 3684366440]
    return [x[i] + y[i] for i in range(k)]
def chsub_a81063be(x):
    # mucho encrypto
    y = [ord(p) for p in '332c27175278ebd3118e545a7e65a56146a8']
    return [x[i] - y[i] for i in range(k)]
def add_9dad90bf(x):
    y = [9713681990, 9977155860, 9948270690, 7794496922, 8259703695, 2233525921, 879367153, 2060832725, 3388313226, 6286091065, 8107638836, 2743207478, 7859593909, 3746278454, 961012872, 597056989, 7065248350, 413029875, 260534857, 6165963375, 5026668019, 1554080493, 6036125988, 8714392307, 1556621640, 1699734488, 3812051708, 8212136156, 3876431726, 6257195696, 4589027653, 4396764729, 5015304636, 9884755047, 2373028104, 7225992662]
    return [x[i] + y[i] for i in range(k)]
def add_278192d9(x):
    y = [1116975014, 4341274534, 8428352403, 9010597370, 76828706, 8086805116, 345069386, 4754475751, 1693308698, 5978275376, 1165444504, 9088326579, 2553171912, 2088284042, 7772494506, 2232343200, 5407973679, 7927880488, 9961102412, 6853916419, 9443079756, 663632519, 9969579812, 3433134107, 7292549386, 6689502239, 8906368276, 3172973634, 2082229017, 9482505715, 7426498841, 582787626, 2224567544, 7854339500, 121910672, 3897599312]
    return [x[i] + y[i] for i in range(k)]
def chadd_b29ed32e(x):
    y = [ord(p) for p in 'e52d718c75af62ffe5f9ac7555caed627dbf']
    return [x[i] + y[i] for i in range(k)]
def cmul_f289fa35(x):
    return [x[i] * 8 for i in range(k)]
def chadd_a6e32549(x):
    y = [ord(p) for p in 'c55ca74dd317ffefca0d003cd3abe5b5d028']
    return [x[i] + y[i] for i in range(k)]
def deck_d60a8868(x):
    # lmaooo
    return x[30:] + x[17:20] + x[:17] + x[20:30]
def chmul_bfab997d(x):
    y = [ord(p) for p in 'c572cb9567234f7a715423eec32e9d213a48']
    return [x[i] * y[i] for i in range(k)]
def digsub_4c6a11c2(x):
    # encryption
    return [int(str(n)[:1] + ''.join(['5', '0', '9', '2', '3', '7', '8', '6', '1', '4'][int(p)] for p in str(n)[1:])) for n in x]
def mul_9536d3d7(x):
    # so good
    y = [4, 3, 6, 6, 3, 2, 7, 1, 2, 2, 5, 5, 1, 5, 7, 1, 6, 2, 5, 4, 2, 1, 1, 2, 2, 5, 7, 3, 7, 2, 7, 1, 2, 6, 4, 7]
    return [x[i] * y[i] for i in range(k)]
def csub_d79026ba(x):
    return [x[i] - 622503107 for i in range(k)]
def chmul_ba6b991f(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '0310070fe2ee67e7fbd73cbb1d9b5bb13082']
    return [x[i] * y[i] for i in range(k)]
def add_fc842ea7(x):
    y = [1122868686, 7908338120, 6839155035, 3355842431, 7020928981, 9505313336, 507492437, 7303396527, 8656758686, 286489501, 7219449937, 3640426736, 1350751384, 548182459, 8108657558, 8298824893, 8120454184, 457767908, 8791358327, 3387574255, 422430831, 750088919, 1730395968, 2669443567, 6064876282, 7533526258, 3495910820, 7051387281, 7685374514, 8017813625, 4743400010, 4350249220, 5865321203, 7569555952, 4851011956, 1979731310]
    return [x[i] + y[i] for i in range(k)]
def shuffle_f4ee3eb0(x):
    return [x[p] for p in [21, 0, 35, 33, 9, 25, 5, 12, 8, 16, 20, 4, 26, 17, 28, 14, 18, 3, 11, 10, 2, 15, 34, 13, 22, 1, 32, 23, 19, 31, 6, 30, 7, 29, 27, 24]]
def sub_5044b2cf(x):
    # rekt
    y = [7427858470, 2839273308, 2586210522, 1818571940, 2286721097, 5547821604, 9234151406, 9019066211, 890685038, 524125854, 4631775021, 4196493767, 8481365821, 9556516637, 3444980139, 2340745104, 6731818952, 4881548513, 6882038152, 1546029867, 522961275, 2854032263, 2826916056, 1009746302, 8178257721, 5188705732, 6723550094, 3275663577, 5950170609, 854834743, 698914495, 4164354399, 9010115830, 9222454599, 2122947487, 5683864845]
    return [x[i] - y[i] for i in range(k)]
def csub_702f94e1(x):
    return [x[i] - 3961025425 for i in range(k)]
def shuffle_1139f911(x):
    # the best
    return [x[p] for p in [16, 7, 34, 30, 1, 14, 18, 9, 26, 5, 17, 2, 35, 32, 11, 0, 31, 10, 13, 6, 23, 20, 29, 27, 22, 28, 15, 25, 24, 33, 21, 4, 12, 8, 3, 19]]
def cxor_faa42ed7(x):
    return [x[i] ^ 2567363942 for i in range(k)]
def chunk_957ebc7b(x):
    # the flag is flag{jk}
    return x[33:] + x[:33]
def cmul_303b4073(x):
    return [x[i] * 7 for i in range(k)]
def digsub_e4e90033(x):
    # encryption
    return [int(str(n)[:1] + ''.join(['3', '8', '5', '4', '9', '2', '1', '6', '7', '0'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_ddef00cb(x):
    return [x[i] * 7 for i in range(k)]
def chsub_fb961764(x):
    y = [ord(p) for p in 'b3b7b436df311ee40c01f4637130b2b69c28']
    return [x[i] - y[i] for i in range(k)]
def cxor_5161196f(x):
    return [x[i] ^ 2500904131 for i in range(k)]
def cmul_9f53e257(x):
    # lel
    return [x[i] * 7 for i in range(k)]
def chmul_0c946b47(x):
    # rekt
    y = [ord(p) for p in '7b21052db1ebba218c79b932fb066e0468c8']
    return [x[i] * y[i] for i in range(k)]
def mul_e2b49085(x):
    # just reverse it
    y = [3, 3, 1, 1, 2, 2, 3, 2, 1, 2, 2, 1, 3, 1, 1, 2, 2, 1, 2, 1, 2, 3, 2, 1, 1, 2, 1, 3, 3, 3, 1, 3, 3, 1, 1, 3]
    return [x[i] * y[i] for i in range(k)]
def cadd_97b622f1(x):
    return [x[i] + 236191699 for i in range(k)]
def cadd_6f6cf5cb(x):
    # shiet?
    return [x[i] + 2677888234 for i in range(k)]
def chunk_b78988b6(x):
    # evil
    return x[32:] + x[:32]
def digsub_18fc0c9e(x):
    return [int(str(n)[:1] + ''.join(['3', '9', '7', '8', '4', '0', '2', '5', '1', '6'][int(p)] for p in str(n)[1:])) for n in x]
def csub_9707b66b(x):
    return [x[i] - 739879946 for i in range(k)]
def digsub_af816cb4(x):
    return [int(str(n)[:1] + ''.join(['8', '1', '2', '0', '7', '3', '5', '6', '9', '4'][int(p)] for p in str(n)[1:])) for n in x]
def digsub_1d28a867(x):
    # just reverse it
    return [int(str(n)[:1] + ''.join(['2', '5', '7', '6', '8', '9', '1', '0', '4', '3'][int(p)] for p in str(n)[1:])) for n in x]
def deck_62c9820d(x):
    return x[5:13] + x[:5] + x[13:17] + x[17:]
def cadd_b6aa1a21(x):
    return [x[i] + 5678960637 for i in range(k)]
def chxor_835e69ad(x):
    # mucho encrypto
    y = [ord(p) for p in 'a0ce38a52901f64b53a26aa6ec214c92c188']
    return [x[i] ^ y[i] for i in range(k)]
def xor_ec9f1bc5(x):
    y = [6408769754, 760004295, 2214294344, 4588492394, 1084706424, 4514934281, 5900934580, 8112160754, 9548434966, 7167836578, 8963914141, 2079925727, 2200037532, 1552684616, 7704532213, 6289279422, 896216489, 6824810516, 8612393757, 6804876992, 7416856845, 3727948851, 5293479049, 2269218631, 7166625144, 2918738397, 7687163132, 2125899930, 4283401617, 5784547617, 8424518147, 7464911860, 2364540069, 5311193987, 9344035028, 490851933]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_db13869f(x):
    return [int(str(n)[:1] + ''.join(['0', '5', '6', '4', '9', '1', '3', '7', '8', '2'][int(p)] for p in str(n)[1:])) for n in x]
def chsub_48f17d05(x):
    y = [ord(p) for p in '0d5bb2e6edab57367a20f61e6b0f289740d5']
    return [x[i] - y[i] for i in range(k)]
def xor_77c70db2(x):
    # encryption
    y = [8650825327, 4862634298, 1056340335, 3246802861, 2753489034, 6770887477, 684545977, 8960148091, 4247756734, 142995992, 6705224018, 4996171270, 5782975149, 68850295, 7875116871, 8984280519, 1479810943, 3065292732, 908407340, 7392939215, 2464605135, 6870155908, 3106080487, 7942298581, 4102554813, 5148602464, 2579867825, 5380794575, 3049764068, 845566410, 6973634486, 5529909668, 9953568411, 1697561453, 7043732442, 10719436]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_57848b7a(x):
    # rekt
    y = [ord(p) for p in '86692b60e1ce9a76e38691c93ccb706adf54']
    return [x[i] * y[i] for i in range(k)]
def xor_cfc75b41(x):
    # shiet?
    y = [5565882450, 629364562, 4001541360, 8261858507, 8966322241, 4396761269, 8659537374, 5067720148, 9902272057, 4762969736, 1631758949, 1419357438, 8963553362, 9287618228, 7498165587, 4580094562, 4640806508, 8264188562, 6927480237, 9106126075, 3572850865, 7477313338, 5630364376, 7492048257, 5035974252, 7918594814, 9373666565, 8215724800, 4909848465, 8608411092, 7481351864, 6489327770, 6013358240, 192329521, 6904013444, 9313262787]
    return [x[i] ^ y[i] for i in range(k)]
def sub_0b42484c(x):
    # kek
    y = [1378333164, 2529632550, 732448826, 3834815996, 1598161495, 6854236436, 397985269, 3127554768, 5880722318, 7137910671, 3886808978, 9373039246, 1783910418, 3204278467, 3053027247, 495701163, 5723434395, 6447880522, 3703495587, 5477754118, 9764781904, 1310542615, 6598221852, 675214413, 9673951685, 9694475933, 1045431801, 5461391751, 331008064, 2332509194, 4364871031, 266590229, 1634826867, 9216068964, 237006678, 2049136743]
    return [x[i] - y[i] for i in range(k)]
def xor_860fd005(x):
    y = [1299832022, 3552418300, 4800429047, 396254822, 8835488231, 9393761545, 7265185141, 3454767889, 2849328644, 2468213186, 4620704771, 9843485937, 7409145391, 8419484795, 2660609649, 3924097988, 8098402575, 7270066555, 8357744034, 9019634830, 9290828123, 4006959541, 8736927189, 1099117533, 8118246632, 3091528957, 4167226345, 5884493780, 6132405727, 4531091934, 6855363933, 5437290266, 2934185419, 6004476551, 9778511978, 2216181622]
    return [x[i] ^ y[i] for i in range(k)]
def deck_5e36e1fb(x):
    return x[15:] + x[:6] + x[6:10] + x[10:15]
def mul_7fa6ac59(x):
    y = [1, 2, 1, 1, 5, 1, 2, 1, 5, 4, 4, 5, 4, 3, 2, 2, 3, 1, 2, 4, 4, 2, 5, 6, 2, 2, 6, 3, 6, 3, 5, 1, 3, 5, 4, 4]
    return [x[i] * y[i] for i in range(k)]
def shuffle_5de0aca9(x):
    # lmaooo
    return [x[p] for p in [4, 19, 6, 15, 9, 7, 21, 2, 29, 16, 34, 13, 33, 25, 5, 24, 1, 20, 26, 23, 11, 28, 0, 17, 35, 14, 18, 12, 3, 10, 27, 30, 31, 22, 32, 8]]
def add_49cf2359(x):
    # the flag is flag{jk}
    y = [4406296451, 521402486, 7024564302, 6677928850, 9871420712, 5912153255, 4785888891, 7435204900, 1768145453, 9251256089, 5906772275, 3102373120, 5838130477, 6330161104, 6652202917, 5250877428, 8548943298, 2248948515, 7014730769, 979031857, 8408733321, 6317562196, 25414429, 3038648277, 8794681390, 4994613786, 2036234185, 6127358684, 8492269828, 2651480539, 3164238682, 3438101875, 9875252388, 3962541742, 1681975823, 8719936621]
    return [x[i] + y[i] for i in range(k)]
def chunk_530108df(x):
    return x[17:] + x[:17]
def add_0e1d894a(x):
    y = [4598732009, 8969403491, 9040140175, 4313602324, 5628476447, 7560896254, 4410040342, 8024123160, 1528334883, 7836535619, 9806944807, 8434023194, 2466323306, 2194420885, 4825227370, 7273628320, 5234762263, 1468387405, 3113315648, 2736243366, 9797753832, 2871760794, 4319147366, 6766544439, 597992912, 2033825475, 9901857691, 7470975877, 6785004009, 7894766234, 84564671, 8969819548, 8552216874, 2521600286, 9349096961, 2326184623]
    return [x[i] + y[i] for i in range(k)]
def chmul_a156d55d(x):
    y = [ord(p) for p in '3fcbc4858bda2141ca96d7e822ef36e4c8ba']
    return [x[i] * y[i] for i in range(k)]
def cmul_7fe479fd(x):
    # shiet?
    return [x[i] * 3 for i in range(k)]
def cadd_e86a7e16(x):
    # just reverse it
    return [x[i] + 651236065 for i in range(k)]
def csub_8cff1d96(x):
    # lel
    return [x[i] - 3812855544 for i in range(k)]
def shuffle_ee0a30fd(x):
    # evil
    return [x[p] for p in [27, 1, 2, 25, 32, 22, 17, 4, 12, 20, 23, 31, 26, 16, 19, 8, 29, 7, 15, 35, 0, 33, 18, 9, 6, 11, 5, 34, 24, 14, 10, 13, 30, 3, 21, 28]]
def chsub_c1275525(x):
    # the flag is flag{jk}
    y = [ord(p) for p in 'f94750010677cccb2807cd7fd6938bb6b0e9']
    return [x[i] - y[i] for i in range(k)]
def csub_08317493(x):
    # the best
    return [x[i] - 7507819693 for i in range(k)]
def cmul_5ae914fe(x):
    # encryption
    return [x[i] * 5 for i in range(k)]
def digsub_6e4a7a18(x):
    return [int(str(n)[:1] + ''.join(['9', '0', '6', '3', '5', '2', '4', '8', '1', '7'][int(p)] for p in str(n)[1:])) for n in x]
def mul_f44aa210(x):
    y = [4, 3, 3, 4, 3, 8, 1, 1, 5, 6, 3, 6, 4, 2, 3, 7, 7, 2, 8, 5, 2, 5, 4, 4, 4, 5, 3, 5, 2, 7, 6, 3, 7, 4, 4, 1]
    return [x[i] * y[i] for i in range(k)]
def xor_cd4a30ee(x):
    y = [7035831466, 6779668821, 3844381505, 6176125030, 5523584551, 5164858385, 4893850017, 8968619932, 5731928449, 357637779, 154563790, 2518657269, 5438726880, 8089470267, 5336681570, 5932057817, 2384812141, 2130020785, 6775352370, 7721984001, 8021240905, 8448448365, 6066589571, 9845285970, 7025421948, 9263278437, 3730645009, 976778213, 87041343, 36864288, 6264187763, 4307351943, 7897585864, 7269915135, 4084795474, 2098859937]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_0e01916d(x):
    # evil
    return [int(str(n)[:1] + ''.join(['6', '0', '9', '1', '8', '3', '4', '7', '5', '2'][int(p)] for p in str(n)[1:])) for n in x]
def cadd_c2e41a30(x):
    # rekt
    return [x[i] + 2954417387 for i in range(k)]
def add_31efa65a(x):
    # kek
    y = [1582790620, 825379106, 9587961718, 9267147591, 5954027428, 8891216066, 5035944967, 1023209350, 8680524004, 4579340246, 3660734678, 4714365547, 1684270294, 5505042664, 6395324354, 7691912126, 2152780474, 5487141950, 3765375081, 9951256577, 6471734653, 9308785637, 1681471067, 2002875098, 961488414, 7164163317, 7526943559, 6387717201, 7131859484, 5561636466, 1505707369, 1954404219, 9176050609, 5074163989, 2323365848, 9920272196]
    return [x[i] + y[i] for i in range(k)]
def chunk_40051429(x):
    return x[32:] + x[:32]
def digsub_bb512531(x):
    return [int(str(n)[:1] + ''.join(['5', '6', '0', '1', '7', '2', '9', '3', '8', '4'][int(p)] for p in str(n)[1:])) for n in x]
def xor_df1ffac5(x):
    # rekt
    y = [5257472034, 9163395179, 332329819, 722626769, 7977242564, 4997118420, 3083744748, 1575229818, 8861865893, 3685068962, 7421905924, 2685677693, 3957468999, 8998222588, 750928409, 510788270, 7568649199, 6190768548, 1022714172, 8733838096, 3475743057, 7647349719, 6518011485, 6432616054, 8134811407, 9208344546, 9528265099, 8196723374, 5407025238, 2652333457, 7083045233, 6496450624, 2300221718, 7536828272, 5010959711, 2326637655]
    return [x[i] ^ y[i] for i in range(k)]
def cadd_0083dd15(x):
    # kek
    return [x[i] + 2560366746 for i in range(k)]
def chadd_88f9bb2d(x):
    y = [ord(p) for p in '913f149e6412a8fe18c69f34893ca52bd168']
    return [x[i] + y[i] for i in range(k)]
def chxor_f6c4d9ae(x):
    # lmaooo
    y = [ord(p) for p in '47dd7ae09d601cdf65a38cc07cff2ee164fc']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_1a40fd7d(x):
    # so good
    y = [ord(p) for p in '47234a03990861761b75c68d9ad3b93a4094']
    return [x[i] + y[i] for i in range(k)]
def mul_30a2cd61(x):
    # rekt
    y = [4, 6, 5, 2, 4, 4, 1, 4, 3, 3, 2, 2, 5, 3, 1, 2, 1, 2, 4, 1, 4, 5, 5, 5, 1, 3, 1, 6, 4, 4, 5, 3, 1, 6, 3, 5]
    return [x[i] * y[i] for i in range(k)]
def cmul_70fa9f12(x):
    return [x[i] * 3 for i in range(k)]
def sub_5e361569(x):
    y = [7175695113, 6802053987, 9574883337, 9512003147, 6192628467, 5963099007, 8315683042, 5160315940, 767168956, 375422485, 8730120000, 2666781147, 2440667015, 7546828138, 4525812570, 396902581, 8553532503, 5325326781, 9900162360, 7603793373, 3874804466, 5969918543, 6172083284, 6291288862, 5974879890, 1543736717, 4294185877, 3124146900, 2528574522, 5236694866, 232695056, 6936612777, 3135932985, 8490751056, 1804986458, 1197612216]
    return [x[i] - y[i] for i in range(k)]
def chunk_e20352cb(x):
    return x[13:] + x[:13]
def cmul_57e3d5bf(x):
    return [x[i] * 10 for i in range(k)]
def cadd_9406ad37(x):
    return [x[i] + 3825252512 for i in range(k)]
def xor_f80d29fb(x):
    y = [4238713541, 3423464335, 3239402130, 4196821363, 7181727730, 3505672776, 3438033881, 1109711818, 2510801693, 2859745796, 1624219246, 4153938017, 2053395944, 7627951671, 5743246411, 4602750058, 9975443095, 8677293644, 5219254537, 1798710531, 3693361313, 234753059, 2429000119, 4992769171, 2003244188, 3279761004, 7028922386, 9654517617, 3047672027, 274612409, 4838271194, 4246891681, 1945936516, 9913514554, 6422526846, 1322818341]
    return [x[i] ^ y[i] for i in range(k)]
def xor_e35626c5(x):
    # so good
    y = [821238346, 6964045967, 5716828333, 6141795240, 1278030217, 7751424916, 9470728801, 9195348600, 6240273542, 806352759, 2193290417, 4191206630, 8047352724, 7975566924, 4563861601, 8151146962, 1255699278, 674353896, 7592571108, 144724893, 5724944647, 9039668331, 7287366218, 2611572371, 3929479913, 7585870589, 679683856, 3534024525, 1405517673, 5776121037, 3881356650, 5187410308, 2671587858, 6866085143, 9401522211, 157765300]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_71a4351f(x):
    return [x[i] ^ 3712961176 for i in range(k)]
def chxor_4659a736(x):
    # rekt
    y = [ord(p) for p in '940711e453b729131ace679016f8e7315cdb']
    return [x[i] ^ y[i] for i in range(k)]
def mul_6d210a06(x):
    y = [6, 5, 6, 7, 2, 6, 6, 6, 2, 2, 3, 3, 2, 2, 5, 5, 6, 1, 7, 4, 6, 6, 7, 7, 4, 5, 6, 5, 2, 2, 4, 7, 4, 4, 3, 5]
    return [x[i] * y[i] for i in range(k)]
def chxor_7af39ede(x):
    y = [ord(p) for p in '4f012ca2255f5d53716fb2d13fd88d66b1fe']
    return [x[i] ^ y[i] for i in range(k)]
def mul_0fc3ddc1(x):
    y = [1, 5, 3, 2, 5, 2, 5, 3, 1, 1, 3, 5, 5, 3, 5, 4, 1, 5, 2, 3, 1, 3, 3, 4, 3, 1, 2, 2, 1, 5, 5, 4, 3, 5, 5, 3]
    return [x[i] * y[i] for i in range(k)]
def chunk_f037e109(x):
    # lmaooo
    return x[4:] + x[:4]
def chxor_8a775b98(x):
    # shiet?
    y = [ord(p) for p in 'c5e7218ad2c7be4f20486ac1be4086f9f293']
    return [x[i] ^ y[i] for i in range(k)]
def add_eac32141(x):
    # shiet?
    y = [8769811985, 4970249928, 8998827585, 9916717428, 310165229, 9331974274, 6635361372, 7961192589, 5708989714, 4295531836, 8880624096, 1142390212, 5794020597, 6969385297, 9964583616, 8719822245, 6298415128, 4509884027, 7656956229, 8409769347, 643903842, 7539659453, 2983904815, 2701863228, 5776341355, 167898575, 9924922156, 4106633584, 7546453369, 826760666, 6401124154, 8250044901, 8326677282, 8760459462, 1299651010, 1272904408]
    return [x[i] + y[i] for i in range(k)]
def chsub_e164464b(x):
    y = [ord(p) for p in '5f902d34e47cd08afa02dc0a011a8c0fb7de']
    return [x[i] - y[i] for i in range(k)]
def add_c1c20de3(x):
    # mucho encrypto
    y = [6326451383, 3748974951, 557660361, 2995723434, 4533668009, 4081148783, 9234691914, 5165467301, 184930412, 8421751431, 4251481371, 9096845521, 4367900985, 2168487052, 441635825, 4316847300, 420815479, 3852173898, 2000819439, 7666407482, 8361415151, 679276416, 6225494192, 4803982638, 7170814760, 5362987111, 1939381805, 7838421043, 6782730994, 8899121072, 6903361520, 6271385246, 7127234896, 8454313095, 5157352630, 9517106406]
    return [x[i] + y[i] for i in range(k)]
def chsub_a13b0c4e(x):
    y = [ord(p) for p in 'd968127d8fbe29333c7885407b9f8e1ccf2f']
    return [x[i] - y[i] for i in range(k)]
def digsub_8e44fdbd(x):
    # so good
    return [int(str(n)[:1] + ''.join(['9', '0', '2', '8', '1', '6', '7', '3', '4', '5'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_d69d2c9b(x):
    return [x[p] for p in [19, 24, 9, 35, 18, 1, 33, 13, 11, 8, 25, 30, 0, 6, 27, 5, 28, 4, 7, 23, 26, 32, 16, 3, 17, 21, 10, 12, 31, 2, 15, 34, 20, 29, 22, 14]]
def chadd_2b71c3ea(x):
    y = [ord(p) for p in 'a111c1cfbf492d60e413a74c3855e370ba3b']
    return [x[i] + y[i] for i in range(k)]
def chunk_e798b09f(x):
    # evil
    return x[12:] + x[:12]
def chadd_6c281254(x):
    y = [ord(p) for p in '44f6abc8c5bdcb3c2ea726bd266e6b753e24']
    return [x[i] + y[i] for i in range(k)]
def cmul_c9f8e5a1(x):
    return [x[i] * 9 for i in range(k)]
def cmul_36d19f08(x):
    # lel
    return [x[i] * 4 for i in range(k)]
def chunk_839a5ccb(x):
    # mucho encrypto
    return x[12:] + x[:12]
def csub_30ac2fb9(x):
    return [x[i] - 4064628388 for i in range(k)]
def xor_46b7d1d1(x):
    y = [2218403196, 6843624025, 8564892540, 1239830035, 9123999641, 7780255932, 2336615219, 4779753364, 8943148464, 4531220697, 5949655436, 6972289311, 2507502816, 7607609997, 3126330771, 8475583566, 9680670114, 4337347637, 9459990015, 3427115239, 695958121, 2537609073, 7781904438, 1760108831, 1162669297, 8526988586, 7900700681, 2972733232, 2276541389, 6813099993, 6981688852, 1725556311, 6068974787, 6475992165, 7425037726, 1580676725]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_03c94dae(x):
    # shiet?
    return [int(str(n)[:1] + ''.join(['1', '4', '5', '0', '9', '2', '7', '3', '6', '8'][int(p)] for p in str(n)[1:])) for n in x]
def chunk_697b441c(x):
    return x[11:] + x[:11]
def chmul_d3237ea8(x):
    # the flag is flag{jk}
    y = [ord(p) for p in 'dcee49c13c69b217471492003b7101b127e0']
    return [x[i] * y[i] for i in range(k)]
def digsub_1f6e32d7(x):
    # lel
    return [int(str(n)[:1] + ''.join(['0', '5', '7', '6', '1', '2', '4', '9', '3', '8'][int(p)] for p in str(n)[1:])) for n in x]
def csub_f8935355(x):
    return [x[i] - 9816270660 for i in range(k)]
def chunk_f25c6152(x):
    return x[11:] + x[:11]
def chmul_37406cbe(x):
    y = [ord(p) for p in '1019f328f07f621493bb94c16fb0083ff0e0']
    return [x[i] * y[i] for i in range(k)]
def cxor_98fe5771(x):
    return [x[i] ^ 2700032139 for i in range(k)]
def cadd_6ad54956(x):
    # encryption
    return [x[i] + 1074803216 for i in range(k)]
def add_6d8a2110(x):
    # encryption
    y = [2948170214, 4497684275, 1570532165, 6276091839, 3295165707, 7822351240, 9957612242, 6507268025, 2973069053, 9855417075, 1160501571, 5666741452, 4472178272, 1377740205, 377560603, 4363316028, 8049882565, 4820545033, 8626362649, 5312213835, 4582684843, 3828725432, 5619342473, 6573263282, 4240204353, 9063736107, 840561070, 9442864154, 2323774425, 81408495, 5847119092, 4136531979, 2798104416, 1346545177, 9705386822, 212903641]
    return [x[i] + y[i] for i in range(k)]
def cxor_0e701321(x):
    # encryption
    return [x[i] ^ 69245062 for i in range(k)]
def xor_49a34b54(x):
    # encryption
    y = [4985044289, 9239972488, 7097484273, 2225926626, 3880904637, 2067474711, 6008198340, 467599256, 7152234749, 4938063855, 8009439043, 1798964760, 755113993, 255642321, 9613206029, 2615925561, 428809208, 3178195104, 9616459581, 7542538687, 7099284634, 9013144489, 4795761167, 1663617000, 8729752254, 2398849586, 6196247922, 3848369287, 8024099299, 4285328467, 4157024789, 8623226727, 5067252208, 8917177430, 4451356359, 4911551305]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_43ad380e(x):
    return x[12:] + x[:12]
def chsub_99c4b363(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '3918be73bbd8fae2e1b34c6547adedb31362']
    return [x[i] - y[i] for i in range(k)]
def shuffle_b69552ce(x):
    # evil
    return [x[p] for p in [8, 12, 19, 21, 3, 33, 18, 7, 14, 9, 32, 28, 17, 1, 13, 34, 22, 35, 26, 30, 29, 0, 27, 25, 23, 15, 24, 31, 10, 2, 5, 16, 20, 11, 6, 4]]
def sub_d3dc3330(x):
    # the flag is flag{jk}
    y = [4452410678, 1609303848, 4836973752, 2174953320, 2640744769, 6190090147, 556864339, 6641470564, 4603903483, 4836001295, 5704239014, 7683594982, 6177905989, 9778752270, 9895814866, 805947951, 2001854385, 2082539489, 4006280649, 6325714392, 7872826520, 2607352158, 1145860633, 997225130, 4706011653, 4782608978, 5163819070, 3930365475, 5262278374, 1834389448, 1312815694, 9159761294, 221329971, 7830467082, 7420836855, 6216322133]
    return [x[i] - y[i] for i in range(k)]
def add_8f63cc91(x):
    # evil
    y = [1467184646, 6009144702, 1148660486, 9155963522, 7207918089, 9597802239, 4082360757, 3228933869, 2474012910, 8296261044, 7105059662, 6226976116, 2029173970, 3932991559, 152936331, 2479141517, 504419024, 5540509239, 7218473925, 216381388, 3349660868, 3215709147, 6565134100, 9208519568, 1580754897, 8988888066, 2106522429, 8389325190, 7438327306, 395784764, 4227618251, 3317248563, 184474611, 4193429867, 4013760184, 6221593184]
    return [x[i] + y[i] for i in range(k)]
def chxor_2e7e40ef(x):
    # lel
    y = [ord(p) for p in 'b315294c7d82ff9e902bb34828ea7829e1ce']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_4289061c(x):
    return [x[p] for p in [22, 1, 34, 4, 31, 13, 26, 24, 3, 5, 7, 35, 6, 33, 12, 8, 19, 29, 30, 15, 10, 28, 0, 25, 2, 14, 20, 18, 32, 21, 17, 23, 27, 16, 9, 11]]
def xor_131c6ed1(x):
    y = [9149608103, 3795275037, 3158588397, 1504853932, 2682092552, 8165341105, 7610456318, 1970626892, 6584643910, 9283628726, 1570599137, 3061373405, 2772456565, 3133280818, 156375791, 5674423172, 6352797515, 5921743001, 5408895731, 7469030710, 5504617096, 8561474134, 6520626950, 3093276997, 1541188739, 568742465, 3645857669, 4841355672, 6335592857, 4220631981, 4935180084, 9509942787, 4815845325, 4857313835, 2088781439, 2942591429]
    return [x[i] ^ y[i] for i in range(k)]
def mul_835fdfd8(x):
    y = [5, 5, 7, 7, 4, 2, 1, 4, 5, 5, 1, 7, 5, 3, 1, 2, 1, 5, 3, 8, 4, 4, 4, 3, 7, 1, 2, 7, 5, 4, 1, 6, 5, 2, 8, 1]
    return [x[i] * y[i] for i in range(k)]
def csub_160421ef(x):
    return [x[i] - 240274116 for i in range(k)]
def digsub_ecaa949d(x):
    return [int(str(n)[:1] + ''.join(['4', '0', '7', '3', '2', '9', '5', '8', '6', '1'][int(p)] for p in str(n)[1:])) for n in x]
def add_19eaf3b7(x):
    # the best
    y = [6619096837, 6339908381, 2444073509, 7062565862, 2799530742, 6671545518, 4082593607, 3811170261, 349429132, 6425233298, 1110387509, 30934147, 7890094195, 494061803, 8508482284, 2459986753, 561758429, 5670586699, 7696242582, 4462561200, 3461035292, 543454161, 4579847232, 9163419171, 4154759871, 7244083955, 86523160, 4789250255, 896482064, 4204056526, 66038019, 8395318607, 4097996642, 9894463455, 6487041760, 8404632471]
    return [x[i] + y[i] for i in range(k)]
def digsub_ea672c6d(x):
    # rekt
    return [int(str(n)[:1] + ''.join(['5', '9', '2', '3', '4', '7', '6', '8', '1', '0'][int(p)] for p in str(n)[1:])) for n in x]
def xor_e2704680(x):
    # so good
    y = [1547845754, 9322277514, 7579984795, 90222166, 8574153013, 9990742008, 7898066254, 4526918474, 7444211018, 1325958892, 7184909105, 8542625933, 7570634554, 5858027788, 5152025382, 811595600, 1311356796, 9060553706, 4769699795, 5722489972, 8548470040, 1303034174, 5267574242, 1428334981, 7549636927, 9877802594, 19378591, 3022387552, 4573851400, 99386941, 8560204025, 9064409640, 2767684907, 8285600441, 7070362368, 5789691168]
    return [x[i] ^ y[i] for i in range(k)]
def chadd_79e35c1e(x):
    # so good
    y = [ord(p) for p in 'd86fe33abb19fdd5e4acf2f6db87c920ee08']
    return [x[i] + y[i] for i in range(k)]
def sub_1ddf1ef7(x):
    # encryption
    y = [498594765, 7234604416, 5537194335, 1042068527, 1727230554, 3652052052, 9128017849, 5398372910, 6673985718, 2055569838, 3553025159, 5562845495, 5842206348, 5325523769, 4213029799, 5695008006, 7252991010, 5067953004, 3554517300, 5255076888, 206268602, 1579596683, 3923799633, 6206189584, 7197802557, 4885569600, 5478442387, 302171179, 2217789046, 4251497790, 6933353105, 1516028637, 6507038717, 8830175303, 7196609596, 538465416]
    return [x[i] - y[i] for i in range(k)]
def chadd_069e430a(x):
    # encryption
    y = [ord(p) for p in 'b916ebe36f01363bda8c318610b026d58315']
    return [x[i] + y[i] for i in range(k)]
def sub_02f68178(x):
    y = [3433028434, 415915565, 2053278522, 7433970767, 1901701957, 8346767144, 9415055392, 6956602794, 577724386, 789985617, 9125079889, 2319183773, 536593659, 4026364490, 6247318238, 5060107332, 6024114495, 9750806447, 2063471191, 6303996204, 9339520595, 3670534373, 7304212816, 2416770331, 4924193684, 4331990103, 5436271808, 6791126247, 2842435099, 9096143011, 8500541440, 9565039369, 9897347480, 2351049624, 5842062346, 9894223890]
    return [x[i] - y[i] for i in range(k)]
def mul_18205495(x):
    y = [1, 3, 1, 3, 3, 2, 2, 2, 2, 1, 1, 4, 2, 4, 4, 1, 1, 2, 1, 1, 1, 4, 1, 3, 2, 4, 3, 4, 3, 2, 3, 3, 2, 3, 4, 2]
    return [x[i] * y[i] for i in range(k)]
def xor_a6e7fa68(x):
    # mucho encrypto
    y = [3607897045, 7634420962, 2976798585, 4812838910, 8092514476, 7133022969, 1616480325, 8738677965, 6640041918, 5322309129, 2267752940, 9686337771, 8184911235, 3523081704, 8504502546, 4405867430, 4909885290, 3678465482, 6063761797, 7921812786, 40086989, 6521076875, 9001089335, 1475166347, 3384681440, 9625810673, 6187056686, 8369326712, 6764492254, 9914673542, 3089888759, 3968143616, 3822252838, 2374725837, 8931032587, 431010499]
    return [x[i] ^ y[i] for i in range(k)]
def deck_1ecbfc5e(x):
    # kek
    return x[7:18] + x[18:20] + x[:7] + x[20:]
def deck_e3eb7056(x):
    return x[:7] + x[7:10] + x[10:27] + x[27:]
def chsub_21d8fc5d(x):
    y = [ord(p) for p in '27fc4c32f75cfbc811a379416df8c80686f1']
    return [x[i] - y[i] for i in range(k)]
def digsub_afa62336(x):
    return [int(str(n)[:1] + ''.join(['6', '8', '7', '0', '9', '4', '1', '3', '5', '2'][int(p)] for p in str(n)[1:])) for n in x]
def add_1e3629e5(x):
    # rekt
    y = [3204518112, 7840975135, 695971890, 2585585837, 2818583103, 234214795, 7217757257, 3128879762, 3941852782, 947533891, 299765537, 7851446530, 4065061545, 9817002200, 6119531457, 8239861435, 6227283181, 5392963140, 9116846917, 9684276385, 306744866, 4919292600, 6621463245, 2011428846, 5554857452, 91995604, 9222048957, 3151423117, 7989424825, 7120070490, 3277227436, 2667991302, 7490732082, 927092120, 5535265840, 9507929784]
    return [x[i] + y[i] for i in range(k)]
def add_20baca93(x):
    y = [9391301279, 3350379626, 4523123854, 6013893574, 6679652233, 1414908588, 5339516773, 2219184115, 7596015779, 6956195957, 5656072688, 752267827, 7379124464, 6276472740, 6525645275, 2529580572, 7895704650, 2988422426, 8762059658, 4572026339, 6355970214, 6022384332, 903503414, 7808283269, 2639002424, 4620531482, 1070745136, 8664091456, 1242267334, 3117892768, 8917070577, 1670177829, 2050085388, 166884334, 6052487550, 2018165797]
    return [x[i] + y[i] for i in range(k)]
def chmul_faead8d0(x):
    y = [ord(p) for p in 'c9a333a6815614412bd20168e4834c50b1e2']
    return [x[i] * y[i] for i in range(k)]
def chxor_3c678c19(x):
    # evil
    y = [ord(p) for p in '39259260725ba00f2444cfd47a9e99083d37']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_21515ec1(x):
    # so good
    return x[4:] + x[:4]
def chmul_735407e2(x):
    # lel
    y = [ord(p) for p in 'b25365526d97a00f1d5f4d6a43f68915f3c0']
    return [x[i] * y[i] for i in range(k)]
def chadd_5171aa72(x):
    # kek
    y = [ord(p) for p in '9bc836d68923f348e1fa08668d037f5701a8']
    return [x[i] + y[i] for i in range(k)]
def chxor_947d449e(x):
    y = [ord(p) for p in 'f55a0b7a7010cb06ed3e753fb8ba0506cf46']
    return [x[i] ^ y[i] for i in range(k)]
def deck_f7351960(x):
    # kek
    return x[9:] + x[7:9] + x[2:7] + x[:2]
def add_8aaefd6e(x):
    # just reverse it
    y = [6516135860, 7733331246, 9431047409, 7329153169, 5595480881, 1662735276, 4399533895, 2501054206, 1850432042, 3364037952, 4360923985, 3130924659, 5450689077, 5863478727, 304329026, 6749400401, 9082140451, 1915897286, 5823017098, 7107902172, 7608973520, 1313772976, 8443967660, 7712988637, 4294813212, 3313556659, 9924927688, 5202008559, 4960196305, 7122769904, 8662532420, 6279901207, 9676185613, 4194720726, 7108852709, 8583285408]
    return [x[i] + y[i] for i in range(k)]
def add_85e81d17(x):
    # just reverse it
    y = [9200014831, 401438868, 9982632217, 4817808151, 9126076539, 9553645098, 9706023844, 7644077400, 5171963965, 4511234059, 2742299248, 7542052434, 3837753314, 722795555, 2354486213, 4658245182, 6012140624, 4418393713, 5694373607, 1651080389, 9103024342, 4406169875, 2400420646, 2048130997, 2537794150, 9795213999, 3683501924, 1084832442, 1817825681, 8822144871, 1388178552, 9100269380, 5558737502, 8248218089, 5247581246, 346026225]
    return [x[i] + y[i] for i in range(k)]
def chunk_7d26cddb(x):
    return x[11:] + x[:11]
def chunk_f46f605c(x):
    return x[34:] + x[:34]
def chsub_38e8f84c(x):
    # lmaooo
    y = [ord(p) for p in '007709150d336e6656ad090c17958749247e']
    return [x[i] - y[i] for i in range(k)]
def chxor_dbe47d55(x):
    y = [ord(p) for p in '8eaab44699656310224c901fe72d575593db']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_16644eba(x):
    return [x[i] * 7 for i in range(k)]
def chsub_64d91494(x):
    # lmaooo
    y = [ord(p) for p in '4d579ae41da7fcb0da453f1c030e4c64aaef']
    return [x[i] - y[i] for i in range(k)]
def chsub_e0feb99d(x):
    y = [ord(p) for p in '92339ab13453e4691381c6964fee013811be']
    return [x[i] - y[i] for i in range(k)]
def xor_9d5176ea(x):
    # the best
    y = [5857151454, 3009718290, 8304394606, 7007549653, 8144901155, 6183937395, 8457984369, 1648229052, 9086285592, 1106894912, 6078347193, 3597151688, 3627430736, 5167491156, 3550280153, 5515326811, 2140805590, 546932037, 1085221953, 7647861548, 7355399379, 5098927907, 9394050054, 2979732239, 4335176058, 4996520110, 8047192199, 3157479141, 4487950364, 7807336655, 6876289063, 7430235611, 4412688372, 5729231965, 2084433477, 7163929133]
    return [x[i] ^ y[i] for i in range(k)]
def csub_c128716f(x):
    # the best
    return [x[i] - 6975423286 for i in range(k)]
def csub_ef41ffb0(x):
    # lmaooo
    return [x[i] - 79725903 for i in range(k)]
def digsub_e2dd946e(x):
    return [int(str(n)[:1] + ''.join(['1', '9', '2', '6', '4', '5', '0', '3', '8', '7'][int(p)] for p in str(n)[1:])) for n in x]
def chxor_d3897d6a(x):
    # the best
    y = [ord(p) for p in '21b090df7c7db1e660507854750b8476717b']
    return [x[i] ^ y[i] for i in range(k)]
def csub_fe2f121a(x):
    # lel
    return [x[i] - 8538134547 for i in range(k)]
def chsub_c10f331f(x):
    # encryption
    y = [ord(p) for p in '016b1d75ff18580b87cc221cde0c56766d85']
    return [x[i] - y[i] for i in range(k)]
def cmul_054249fc(x):
    # the flag is flag{jk}
    return [x[i] * 5 for i in range(k)]
def cxor_9064d63f(x):
    return [x[i] ^ 242986963 for i in range(k)]
def cmul_99a00a24(x):
    return [x[i] * 4 for i in range(k)]
def chadd_4ea6bda9(x):
    y = [ord(p) for p in 'a8153200bed202540347ece78dbf5afb776b']
    return [x[i] + y[i] for i in range(k)]
def deck_b533b0e5(x):
    return x[12:27] + x[27:30] + x[30:] + x[:12]
def mul_f41b15dd(x):
    # mucho encrypto
    y = [2, 4, 1, 2, 3, 1, 3, 1, 4, 1, 2, 3, 4, 1, 4, 2, 1, 2, 3, 2, 1, 4, 1, 4, 1, 4, 1, 2, 1, 4, 2, 1, 3, 4, 2, 4]
    return [x[i] * y[i] for i in range(k)]
def chmul_c4c465cb(x):
    # just reverse it
    y = [ord(p) for p in '9537ce137204984d0a14a6a67c2834ed2d1b']
    return [x[i] * y[i] for i in range(k)]
def mul_c4479db6(x):
    y = [3, 5, 2, 2, 3, 2, 4, 1, 2, 4, 5, 2, 1, 4, 2, 3, 2, 3, 4, 2, 3, 2, 5, 1, 2, 3, 2, 3, 2, 2, 4, 2, 1, 1, 2, 1]
    return [x[i] * y[i] for i in range(k)]
def chadd_3940932e(x):
    y = [ord(p) for p in '5102670ed7862aaf87e31e41a6650607d737']
    return [x[i] + y[i] for i in range(k)]
def chadd_3fbbddb8(x):
    # lel
    y = [ord(p) for p in '6b81d667ff80c941ccbad96fdb8f880f85a5']
    return [x[i] + y[i] for i in range(k)]
def xor_f80064d0(x):
    # lel
    y = [1751792657, 6775673626, 8795206528, 77741005, 2279080587, 9144093460, 2674794818, 2418827589, 5371917520, 6409325946, 4318455560, 5489212916, 6872826646, 1098811627, 7891809229, 1348739970, 2324007471, 6079290902, 5256772460, 2883951046, 9389526620, 6766124586, 735469005, 4204486666, 3433467095, 3456898514, 6770665077, 7516603783, 6561582029, 3658547899, 8377958389, 8200964737, 6459278622, 5555083818, 5823467331, 41682580]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_7c1ad68d(x):
    y = [ord(p) for p in '65c4822cae977a00a370cd210242f1bc67fe']
    return [x[i] ^ y[i] for i in range(k)]
def add_e7bb6b2d(x):
    y = [1654900572, 9906890593, 3918356069, 5128083513, 2979266091, 2804220651, 988692720, 3974173962, 5396776240, 8602882216, 2091178120, 7311908924, 1793973737, 7822335457, 4538411717, 840379376, 6564831133, 108412983, 4735031514, 3539017920, 6428635488, 1770492736, 8600378609, 272446338, 5126143831, 3748047881, 5576094797, 1964264857, 7786497939, 6437589631, 8656417772, 5788566582, 4289258392, 6647888669, 3405284986, 4408695587]
    return [x[i] + y[i] for i in range(k)]
def cadd_eb1a77e6(x):
    # just reverse it
    return [x[i] + 4673886646 for i in range(k)]
def chadd_0b49bf84(x):
    # the best
    y = [ord(p) for p in 'eca7e67209072f750214692973c06f53c9be']
    return [x[i] + y[i] for i in range(k)]
def shuffle_028022fe(x):
    # just reverse it
    return [x[p] for p in [34, 9, 11, 5, 23, 1, 20, 2, 19, 14, 24, 8, 13, 7, 33, 3, 15, 31, 18, 27, 25, 0, 28, 22, 26, 10, 16, 4, 21, 32, 6, 17, 29, 12, 35, 30]]
def mul_3a6b9086(x):
    # encryption
    y = [3, 5, 5, 1, 4, 2, 2, 2, 2, 1, 2, 5, 2, 5, 4, 4, 4, 3, 4, 5, 5, 2, 5, 1, 1, 4, 1, 5, 5, 4, 2, 1, 2, 5, 1, 5]
    return [x[i] * y[i] for i in range(k)]
def xor_c7130619(x):
    # rekt
    y = [7940713933, 4238039549, 1631734993, 4892814872, 4535859239, 6350296647, 2148690480, 5384215940, 9834478312, 1671176006, 6215019503, 6816016765, 9161103706, 6628518188, 411812677, 6921305821, 3802163, 5900378301, 8606635627, 5619245506, 8933492608, 5187843139, 1855629494, 3519849181, 7394279932, 2844810931, 4386918650, 8966920209, 8638134812, 5320558848, 5476559989, 9150124495, 2879468737, 79769744, 4288129811, 6900662153]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_0e5f27e0(x):
    # just reverse it
    return x[15:] + x[:15]
def cadd_5c3e86ea(x):
    return [x[i] + 6042361325 for i in range(k)]
def mul_01b0a78c(x):
    # lmaooo
    y = [5, 3, 2, 4, 2, 3, 3, 1, 2, 5, 5, 1, 4, 1, 1, 1, 4, 1, 4, 4, 4, 2, 5, 5, 2, 4, 1, 3, 5, 3, 2, 2, 2, 3, 2, 2]
    return [x[i] * y[i] for i in range(k)]
def cmul_be878186(x):
    return [x[i] * 10 for i in range(k)]
def cadd_50d8a8d3(x):
    # just reverse it
    return [x[i] + 9326224442 for i in range(k)]
def csub_4a29a9b1(x):
    # the best
    return [x[i] - 959454942 for i in range(k)]
def add_da6dae2b(x):
    # kek
    y = [4747429628, 570194421, 8390889962, 5634085929, 5339769970, 4533939093, 2254993290, 917441868, 6481289931, 2936641441, 8131402688, 7811075397, 1991221001, 6582110519, 1471393673, 3494842862, 2108644700, 7284637315, 8780560522, 2028966249, 1197087864, 8250627053, 5889358793, 8310326778, 70601741, 5750497760, 3647327568, 7498718359, 2829130777, 2715727645, 3733630188, 3961637712, 715709147, 9012104637, 8546632108, 5057793464]
    return [x[i] + y[i] for i in range(k)]
def sub_baf4594d(x):
    # kek
    y = [7458789935, 8339637791, 8127446627, 4328431809, 643874277, 6787937607, 1392073965, 848960187, 3290090880, 3515117236, 9494981563, 1159448428, 8917621256, 1791691179, 5146904818, 4699807283, 393766465, 7576040611, 3899664240, 5896765828, 7764648169, 8963070398, 8806642964, 4892532557, 7543126841, 9667143321, 4962728362, 4097300252, 7472053463, 2842655354, 7285461392, 8106655430, 3460788230, 8221864683, 1595223221, 1546304211]
    return [x[i] - y[i] for i in range(k)]
def csub_07dcceeb(x):
    return [x[i] - 2501035838 for i in range(k)]
def add_88ef453e(x):
    # lmaooo
    y = [522030548, 8501669551, 9328929813, 4799572966, 1290849574, 8654626508, 1364286208, 8852731360, 8275749391, 3132387398, 2116818385, 4773338473, 1610235743, 217428936, 5214824967, 6380426075, 4563950842, 6767444855, 7419527966, 272933850, 6433877439, 3604430553, 9102563087, 638293645, 8328487899, 1628197033, 2888474311, 785829245, 2188053955, 190408318, 4338558967, 4957193961, 9315446322, 4263274297, 3647968044, 227607228]
    return [x[i] + y[i] for i in range(k)]
def add_53fcaa0e(x):
    # so good
    y = [4146022101, 1493896299, 4416815335, 4697682811, 8924098973, 7546635123, 3680655936, 2635735424, 8634264810, 1449592288, 1641677312, 9442399993, 1925028504, 1264277573, 8075347936, 3092813476, 2863820558, 3675196075, 3143891308, 2188590796, 1737435220, 3502855933, 740655898, 5843496504, 247179968, 3749606825, 7048688886, 4936005398, 5153542984, 6474952910, 2113709250, 1874985538, 2223941654, 7304102075, 794091953, 1681511668]
    return [x[i] + y[i] for i in range(k)]
def chxor_5cda58cc(x):
    y = [ord(p) for p in '2ab45e1366bc5e62933c93a9a48ad4ae5013']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_8bc2cf3b(x):
    return [x[i] * 10 for i in range(k)]
def xor_895658c8(x):
    # kek
    y = [1819672290, 6764219717, 234937557, 3572625545, 8536377392, 6014785431, 1831230277, 8858002352, 7509810829, 2769115251, 8543771685, 960151830, 7204886036, 4561468026, 5675534302, 2813185971, 6288816693, 6416296509, 7661004076, 3089906303, 1779083640, 4496801635, 1419330771, 6631606530, 6172961093, 6040068434, 3511948717, 9589091836, 2769424094, 4440686755, 9096956607, 1897288128, 9155777978, 2575445787, 9125256418, 5677839180]
    return [x[i] ^ y[i] for i in range(k)]
def deck_a1be372b(x):
    return x[34:] + x[:15] + x[33:34] + x[15:33]
def shuffle_8e2c57eb(x):
    # the best
    return [x[p] for p in [20, 28, 10, 8, 29, 2, 18, 25, 14, 12, 16, 33, 13, 32, 23, 0, 1, 17, 11, 3, 26, 9, 19, 6, 4, 22, 34, 27, 30, 7, 15, 35, 31, 24, 5, 21]]
def chunk_a9c428c6(x):
    return x[32:] + x[:32]
def add_0090343e(x):
    # lmaooo
    y = [3305164173, 8839857565, 6335787597, 8148597309, 6065426849, 9656230780, 9524151205, 604499788, 850213500, 9097050359, 6012541276, 8815708211, 1581600681, 4406472391, 3197395897, 6995305508, 5782316813, 4980973657, 7733759317, 2955926229, 7026170638, 4685154930, 3656657120, 3188007465, 8187378906, 2182254959, 2648781380, 8022365430, 450485594, 6459473711, 1474219133, 1294822898, 7527797635, 9172239625, 9201742834, 3703673536]
    return [x[i] + y[i] for i in range(k)]
def csub_8278d2c0(x):
    return [x[i] - 9875774132 for i in range(k)]
def xor_060a0f63(x):
    y = [5438673917, 1134443075, 4318798396, 3641079427, 102976756, 5775859870, 4886328051, 100356091, 4494555289, 6695564935, 9810333678, 677874241, 6112156579, 1513436751, 1710651468, 6466501124, 9198513358, 8204111241, 1482410182, 2667431582, 2831289844, 2490170109, 7978933328, 3541440924, 1656130779, 9952603517, 6683565198, 5888130123, 1186695696, 9437251246, 9051968225, 2859623100, 1858904797, 3389717767, 1273477121, 9901527187]
    return [x[i] ^ y[i] for i in range(k)]
def add_d3cda0e4(x):
    y = [2652098233, 2776794474, 9952696805, 9413749062, 7106032648, 7687457635, 2471465565, 8839952689, 5842842428, 8503171607, 2639054693, 3478605375, 1793816940, 2599994569, 3279379835, 2175657023, 4229784874, 6663874778, 7478753803, 2706482823, 4168913916, 6310556260, 324731966, 562468627, 6930917044, 6548249354, 1437976604, 4254350868, 3078389831, 8533079, 565366389, 7474758571, 2874835549, 3387793515, 3597930015, 6195166090]
    return [x[i] + y[i] for i in range(k)]
def mul_89548da9(x):
    # encryption
    y = [6, 4, 4, 7, 3, 8, 5, 2, 6, 8, 5, 8, 8, 5, 3, 6, 9, 8, 1, 7, 8, 9, 1, 8, 4, 3, 6, 7, 8, 5, 8, 5, 4, 8, 5, 8]
    return [x[i] * y[i] for i in range(k)]
def cxor_e9ecb31a(x):
    return [x[i] ^ 7157958855 for i in range(k)]
def chmul_d1afe9b0(x):
    # rekt
    y = [ord(p) for p in '0b04eda7ec37339dcd1c91a9ad2f40a8185f']
    return [x[i] * y[i] for i in range(k)]
def chxor_d15e0d3f(x):
    y = [ord(p) for p in '1f8b4239d8c989c16d7377820c70281b555f']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_25c9a817(x):
    # rekt
    return x[17:] + x[:17]
def chadd_40293e24(x):
    # evil
    y = [ord(p) for p in 'c4fadbfb17d54e70aaf43d4fa52ea007596b']
    return [x[i] + y[i] for i in range(k)]
def cadd_88038a55(x):
    # evil
    return [x[i] + 3387369986 for i in range(k)]
def csub_b9b5b150(x):
    return [x[i] - 1396193063 for i in range(k)]
def chmul_97ccb142(x):
    y = [ord(p) for p in 'd4f7eccb9fb15f2ba72ee50b1e628f9ea7b3']
    return [x[i] * y[i] for i in range(k)]
def chmul_afd7fea6(x):
    # kek
    y = [ord(p) for p in '26d82a25ab8bd61bd4089c9533e5f65d2e4a']
    return [x[i] * y[i] for i in range(k)]
def csub_b1b08f24(x):
    return [x[i] - 2038968619 for i in range(k)]
def chadd_4162bfbe(x):
    # encryption
    y = [ord(p) for p in '2538f8e167ac8263a426550406056fb3eb16']
    return [x[i] + y[i] for i in range(k)]
def add_f22a99f3(x):
    y = [9020051420, 9190681827, 6199420498, 812247832, 2018566165, 472701413, 4023438101, 8835713242, 1392828295, 8162949598, 1737767790, 8411656962, 9660698505, 1100304432, 1265515704, 7003483643, 4998009856, 8459666976, 3679564158, 5164647331, 4282489128, 7801180523, 5040549753, 9166251382, 9389959583, 5771769639, 1486527581, 7631522160, 5838160993, 643657878, 8353262603, 3115486396, 506314029, 442550861, 2796398114, 6994433025]
    return [x[i] + y[i] for i in range(k)]
def chsub_d3796f81(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '30c121f47270f757b61c8f2357f4d8ffc5bb']
    return [x[i] - y[i] for i in range(k)]
def csub_d46575ec(x):
    # lmaooo
    return [x[i] - 9993812030 for i in range(k)]
def chadd_e3c33841(x):
    # lel
    y = [ord(p) for p in 'd9dbde74fa1c19e47764ca7f7d69201c17ef']
    return [x[i] + y[i] for i in range(k)]
def cmul_1871b99c(x):
    return [x[i] * 6 for i in range(k)]
def cmul_8ce7a691(x):
    return [x[i] * 5 for i in range(k)]
def cadd_1521484b(x):
    return [x[i] + 616053514 for i in range(k)]
def cxor_da3537d5(x):
    # kek
    return [x[i] ^ 2246555094 for i in range(k)]
def cxor_3ea0418e(x):
    return [x[i] ^ 9562530016 for i in range(k)]
def add_87ac44d1(x):
    y = [2958882171, 7886224433, 6577750705, 9376884375, 2252153069, 4586534514, 6973488616, 693202166, 9411733166, 3078522375, 4215191502, 2866703689, 7140235972, 1757481142, 6987697551, 3085221624, 1832240236, 7619558095, 9826998521, 1206040645, 6828314556, 1929319133, 6081522094, 9468445509, 1048414, 4637277363, 8102016293, 5196112795, 5329469981, 5121686784, 4218271938, 914018506, 7855021431, 977843152, 2482876041, 9716185794]
    return [x[i] + y[i] for i in range(k)]
def shuffle_3355fbaf(x):
    return [x[p] for p in [3, 25, 29, 4, 7, 16, 0, 23, 6, 20, 10, 11, 24, 5, 19, 1, 22, 33, 17, 8, 15, 21, 13, 12, 31, 32, 2, 26, 35, 34, 18, 28, 30, 9, 27, 14]]
def shuffle_29b39d8e(x):
    return [x[p] for p in [1, 2, 3, 16, 34, 25, 4, 13, 9, 12, 5, 29, 8, 26, 17, 0, 10, 27, 33, 15, 28, 6, 19, 18, 35, 22, 11, 30, 21, 7, 31, 24, 20, 23, 32, 14]]
def sub_58947fb5(x):
    y = [4963752073, 5346079448, 4282908671, 2216162796, 2867406267, 4635794287, 1238208396, 9393160770, 8833664772, 7647879756, 7500766653, 2671734513, 8237282017, 8998055986, 2423895781, 7868745519, 2904039703, 6158834164, 1527699535, 6374461734, 8029283441, 262804360, 3101369148, 2385486069, 2855570989, 360221838, 2654285039, 403531630, 3724063845, 30595356, 245359278, 8689566261, 5312777738, 2690300240, 4696736918, 948926420]
    return [x[i] - y[i] for i in range(k)]
def xor_df70e045(x):
    y = [1210566258, 7941014315, 6307633851, 1789018764, 974435860, 9766705423, 2286572314, 465518839, 40889209, 2428525444, 613819629, 832381089, 6167428794, 5179682808, 8009533607, 5612627704, 8242823953, 7875564800, 8108944438, 1713703564, 6041228343, 8110069652, 4509073670, 5035494808, 4305504845, 6663211208, 1104749220, 9768531189, 5928669694, 5757306889, 8094965523, 2704450733, 8714824657, 5919854052, 7857558270, 6872840650]
    return [x[i] ^ y[i] for i in range(k)]
def mul_1c457d63(x):
    # rekt
    y = [3, 3, 2, 1, 4, 1, 3, 4, 4, 1, 2, 3, 4, 3, 2, 4, 4, 3, 2, 3, 2, 4, 4, 3, 1, 2, 3, 2, 1, 4, 4, 1, 1, 2, 3, 4]
    return [x[i] * y[i] for i in range(k)]
def cadd_67f3772b(x):
    return [x[i] + 9930929822 for i in range(k)]
def chunk_2e1e8db3(x):
    # rekt
    return x[6:] + x[:6]
def cadd_a31d859b(x):
    # the flag is flag{jk}
    return [x[i] + 1382527087 for i in range(k)]
def xor_37922856(x):
    y = [2530190587, 8054369006, 3257719928, 8110977838, 6437746803, 9756339513, 8870910826, 6816964700, 2135204604, 815062776, 2098871989, 438340934, 2849362045, 227864907, 9327443271, 8760478588, 2619723260, 3327462732, 4221518700, 7721796794, 8088780502, 1225473834, 776491331, 643985841, 6650839871, 1597580699, 1887389549, 4158818894, 6818254880, 9693500094, 3555635887, 3166819940, 8029376333, 2286810284, 9530565734, 3160721376]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_99d03179(x):
    y = [ord(p) for p in 'e1973275678e3badbc35e304b0ba975808ca']
    return [x[i] * y[i] for i in range(k)]
def shuffle_dc438735(x):
    # rekt
    return [x[p] for p in [7, 16, 25, 26, 14, 19, 35, 18, 22, 8, 13, 12, 20, 33, 5, 15, 2, 30, 27, 29, 21, 34, 24, 23, 6, 1, 3, 28, 0, 10, 9, 31, 32, 4, 17, 11]]
def chunk_c2186f8f(x):
    # encryption
    return x[16:] + x[:16]
def cadd_d44bbdbd(x):
    return [x[i] + 8562703205 for i in range(k)]
def add_886697c1(x):
    # lel
    y = [7593954009, 6308308620, 1548699032, 6127728739, 2016814836, 9886414834, 1191762600, 1737527310, 3376112262, 1287903452, 6791068445, 4026939037, 9154831940, 9431086636, 9166199780, 6266448316, 3529154595, 6749182192, 4625286264, 7847700953, 8023339336, 1883008611, 6283469936, 7432050914, 4221712634, 8584823139, 4528074421, 2683919435, 7059067716, 3406334239, 2708438868, 391261233, 8723461512, 5535653651, 3035372892, 1906465136]
    return [x[i] + y[i] for i in range(k)]
def chadd_37ffbfed(x):
    # encryption
    y = [ord(p) for p in 'dd3907ff35a6f341ae0918f83586bb121203']
    return [x[i] + y[i] for i in range(k)]
def chadd_4b37b268(x):
    y = [ord(p) for p in '0a2631b81e70db2743b36afe984104af1844']
    return [x[i] + y[i] for i in range(k)]
def chxor_4427bf9d(x):
    # just reverse it
    y = [ord(p) for p in 'de838fc2e39c235f5be2729d879687e4137b']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_c51a19df(x):
    return [x[p] for p in [22, 2, 26, 32, 14, 11, 16, 24, 13, 1, 0, 20, 5, 7, 15, 33, 27, 34, 4, 3, 30, 18, 29, 28, 10, 12, 23, 19, 35, 6, 31, 25, 21, 9, 17, 8]]
def mul_619c394d(x):
    y = [5, 2, 6, 5, 3, 4, 5, 5, 5, 3, 7, 1, 5, 6, 3, 2, 6, 1, 7, 4, 6, 3, 7, 4, 4, 7, 2, 3, 7, 7, 5, 2, 6, 6, 5, 5]
    return [x[i] * y[i] for i in range(k)]
def chadd_186dd996(x):
    y = [ord(p) for p in '049bc443fc8b4da3b3cf2caa9497b33d7875']
    return [x[i] + y[i] for i in range(k)]
def digsub_4428ac60(x):
    return [int(str(n)[:1] + ''.join(['4', '6', '1', '3', '2', '0', '8', '7', '5', '9'][int(p)] for p in str(n)[1:])) for n in x]
def digsub_441e29b0(x):
    # lel
    return [int(str(n)[:1] + ''.join(['1', '9', '0', '4', '5', '6', '7', '2', '3', '8'][int(p)] for p in str(n)[1:])) for n in x]
def deck_e7fd91e5(x):
    # the flag is flag{jk}
    return x[:2] + x[2:14] + x[14:17] + x[17:]
def shuffle_a8092414(x):
    # evil
    return [x[p] for p in [0, 28, 1, 30, 25, 9, 18, 5, 6, 21, 15, 32, 16, 4, 10, 33, 29, 19, 17, 8, 20, 11, 34, 35, 2, 31, 23, 7, 13, 26, 24, 14, 3, 12, 27, 22]]
def deck_993a5ef9(x):
    return x[:11] + x[29:] + x[13:29] + x[11:13]
def cadd_603af25d(x):
    return [x[i] + 4750998160 for i in range(k)]
def add_502ea941(x):
    # encryption
    y = [4627835012, 4261545333, 8437379218, 2073845267, 2012164176, 6857076453, 8059543369, 2173501369, 4873360901, 451054427, 5257951751, 890120091, 2032921328, 7770869348, 5653425039, 9952888723, 9543978288, 939547975, 1523921971, 1367375055, 485462011, 3659792366, 5710328749, 1739957251, 3164231886, 6428887994, 6650899090, 9690111018, 6993795787, 7030013508, 3326622666, 4365666483, 3916518415, 7953369349, 6569635930, 6797123351]
    return [x[i] + y[i] for i in range(k)]
def cadd_1aff9833(x):
    # the flag is flag{jk}
    return [x[i] + 7372898156 for i in range(k)]
def xor_4e43f7ea(x):
    y = [2187149358, 5914324432, 5574818872, 6537347312, 5429303786, 5906909602, 122434662, 989887780, 2726805816, 2512346119, 8459091732, 7040448991, 6606823990, 1534879275, 9139732564, 5285174110, 2075747047, 8153675031, 2671698528, 7032355645, 699051986, 9409004649, 2689460911, 7225580706, 3364305087, 4376144024, 1892137231, 6700255299, 6028974983, 7377441172, 9520823427, 4819146522, 9187786708, 2200349874, 5252601031, 6140958783]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_26940e3b(x):
    y = [ord(p) for p in '66cfbf8dfd49f7c3729589f007676fb28f66']
    return [x[i] * y[i] for i in range(k)]
def deck_60619bc4(x):
    return x[14:16] + x[16:21] + x[:14] + x[21:]
def chsub_b090cf63(x):
    # shiet?
    y = [ord(p) for p in '36637f68431770f47a710f2407a6a8f3f901']
    return [x[i] - y[i] for i in range(k)]
def cadd_4f92ed7a(x):
    return [x[i] + 2548320943 for i in range(k)]
def cmul_029f5e8d(x):
    return [x[i] * 6 for i in range(k)]
def xor_96b234b4(x):
    # lel
    y = [2829302690, 2970480787, 3001701529, 5870278425, 2610034379, 7793995718, 2758386822, 7100842038, 4989355480, 3433133149, 3270753762, 6053277864, 652054231, 9804173825, 3908547242, 7259889586, 1687224923, 6284863690, 1005724307, 5617431100, 8172296421, 5756567336, 9930879841, 5755287863, 8518300821, 9738408849, 256448152, 848848611, 3140067056, 7466214460, 393937137, 6864027612, 6938905495, 5438541638, 247745287, 6797349130]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_8db15314(x):
    # encryption
    y = [ord(p) for p in '93f2de23dda7d0c1f99a13da1a89f796a9f7']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_6ef3ef24(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '38080d52274a10d60a07ecf16c4f479e4238']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_09e456ed(x):
    # just reverse it
    y = [ord(p) for p in '4a74171457483ed0475e8903f0f16be904e0']
    return [x[i] + y[i] for i in range(k)]
def cadd_4658d16e(x):
    return [x[i] + 9420976874 for i in range(k)]
def cxor_8e45b4c4(x):
    return [x[i] ^ 783173767 for i in range(k)]
def add_5f0798fd(x):
    # so good
    y = [6996053757, 9121875515, 380090031, 7726768154, 7586495461, 8927006806, 2149980575, 2928911467, 5520460769, 1681869049, 5021813935, 6256421594, 7433539074, 1412020892, 1616928285, 531902173, 3983971474, 467189393, 3277139718, 9437215498, 5751984702, 3754771232, 4746526497, 5876520958, 9366443978, 6585056613, 6497656436, 9289337091, 8433089917, 5072847067, 239942471, 9642359332, 4512059654, 3008935102, 2176866212, 2877918026]
    return [x[i] + y[i] for i in range(k)]
def chunk_e3f6d2ec(x):
    return x[23:] + x[:23]
def xor_310c33bd(x):
    y = [9759619586, 7224140018, 786683218, 2702485470, 4145194459, 7043946167, 6282374223, 5751323677, 6187635423, 4389238739, 2818857017, 6752435825, 9118957413, 2780283468, 4476014882, 845305954, 7610076285, 3143934528, 9799019879, 1617672842, 8795841323, 8403792925, 2485447930, 237065988, 5203116711, 1394814686, 165572691, 1563449676, 5461666630, 7004553896, 4409893310, 5458541666, 3343760127, 4902254130, 6854945121, 8611339811]
    return [x[i] ^ y[i] for i in range(k)]
def add_9573eecb(x):
    # so good
    y = [8213156119, 22286337, 978249292, 5449297134, 8372918298, 5982126880, 7260235299, 3816366571, 4561791064, 2534517905, 691614842, 1715840437, 2803674844, 2182962287, 9751247088, 480448756, 683295096, 1683044084, 5703806177, 151532257, 919018353, 6352877253, 5070200600, 2285013582, 7124052567, 7633400974, 5937350697, 7695137104, 9549325658, 6633328072, 8985349210, 6932125498, 140022803, 5576840201, 53363361, 6260666436]
    return [x[i] + y[i] for i in range(k)]
def cadd_ea8c28f4(x):
    # mucho encrypto
    return [x[i] + 310191484 for i in range(k)]
def cxor_4ff36064(x):
    return [x[i] ^ 4435736443 for i in range(k)]
def sub_3428aff7(x):
    y = [5376269570, 2488613386, 472592479, 2081367215, 3298024814, 9378089210, 9324846780, 2125990268, 3716629222, 4152993443, 7373862782, 8864623082, 242605822, 4974548252, 4498865557, 264903388, 9313527676, 2897185618, 6905526404, 4422179075, 1967621061, 8827384495, 8468714452, 5308105411, 5265755413, 4539911893, 4230717976, 5913899731, 6919177810, 6317940423, 14635978, 7970081335, 9730112306, 9328454684, 5863505980, 7946147348]
    return [x[i] - y[i] for i in range(k)]
def cxor_05f70989(x):
    return [x[i] ^ 3313344749 for i in range(k)]
def deck_c7f2d1f8(x):
    # evil
    return x[9:19] + x[:3] + x[19:] + x[3:9]
def chxor_02646472(x):
    y = [ord(p) for p in '1d294e849a29ae2d3f24774ad16aa73348f8']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_46d80275(x):
    y = [ord(p) for p in '1666d43e134f23f41af3da5eae950460b64b']
    return [x[i] ^ y[i] for i in range(k)]
def digsub_0d0244fc(x):
    # evil
    return [int(str(n)[:1] + ''.join(['1', '4', '0', '2', '6', '7', '9', '5', '3', '8'][int(p)] for p in str(n)[1:])) for n in x]
def mul_50110bad(x):
    # shiet?
    y = [4, 2, 3, 3, 1, 1, 3, 4, 2, 3, 3, 3, 3, 3, 2, 3, 2, 1, 1, 3, 2, 2, 2, 1, 2, 3, 4, 2, 3, 3, 3, 4, 2, 3, 3, 3]
    return [x[i] * y[i] for i in range(k)]
def chsub_f3a1330b(x):
    y = [ord(p) for p in '6c5348c43061b26f49a0c004dfd03b467367']
    return [x[i] - y[i] for i in range(k)]
def xor_9ec16d95(x):
    y = [2280065688, 4192136366, 8023700591, 4683533559, 9768867675, 6514509795, 37842534, 2262950880, 4914392850, 3180440143, 5062341288, 9483024894, 1866205715, 7310152773, 2376268046, 1592839892, 9656755476, 2962078910, 8162115175, 6042640031, 3196528650, 484575291, 2691037432, 2472324449, 7162168376, 7755153045, 5158168629, 8915885187, 7138488042, 7543871217, 6680443301, 2213732801, 921507134, 4511680966, 4478172988, 2430103850]
    return [x[i] ^ y[i] for i in range(k)]
def xor_93a9262d(x):
    # the best
    y = [9597611496, 8997641819, 1964870589, 2162927831, 2719309147, 905172200, 8213554767, 9405348874, 270633433, 9070714396, 2346134654, 397073793, 590892537, 8551691129, 5312136840, 5369658022, 3025132604, 2304716901, 6671105415, 7299165141, 9761785475, 9142407582, 5011756351, 4671987088, 5954187362, 1674181005, 527069529, 2686250045, 8713298504, 215231484, 1133479536, 7800550795, 6039918459, 5705810789, 6620889224, 5715128061]
    return [x[i] ^ y[i] for i in range(k)]
def csub_c323c891(x):
    return [x[i] - 8772869844 for i in range(k)]
def xor_4208a184(x):
    y = [7751127376, 9725145414, 1706653114, 1698077335, 6096159506, 7174847731, 8002987171, 2911852697, 2999549791, 2196898988, 3565477929, 7119784275, 6605419196, 963014704, 2249992349, 6952243460, 6794436882, 6994700269, 8536528276, 1607088404, 1920913795, 2010805943, 8603232763, 402581953, 6998744656, 6762996895, 9676432838, 5195708598, 3744971026, 5320824033, 455752946, 4676857711, 2584739995, 9932589642, 2706453778, 8410550145]
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_efb3207c(x):
    return [x[p] for p in [32, 24, 21, 6, 17, 33, 0, 16, 12, 18, 8, 23, 29, 19, 30, 7, 4, 20, 34, 25, 11, 14, 5, 15, 10, 9, 1, 3, 26, 28, 27, 13, 35, 2, 22, 31]]
def cmul_9513451d(x):
    # so good
    return [x[i] * 3 for i in range(k)]
def chadd_1e481fb6(x):
    # the best
    y = [ord(p) for p in '3caaac76392197735542f7d60fbc2d32becb']
    return [x[i] + y[i] for i in range(k)]
def digsub_a18b0d55(x):
    return [int(str(n)[:1] + ''.join(['3', '9', '1', '8', '5', '0', '4', '2', '7', '6'][int(p)] for p in str(n)[1:])) for n in x]
def chunk_e5cbb933(x):
    # so good
    return x[27:] + x[:27]
def chmul_eda95d12(x):
    # lel
    y = [ord(p) for p in '72c963bc276da4a18b7f8cacad2425b75393']
    return [x[i] * y[i] for i in range(k)]
def sub_2a18cec8(x):
    y = [1684701438, 5890080759, 4812007500, 3378563000, 7786804409, 2170244934, 4727457537, 1794356082, 5693845865, 7284219187, 3492936344, 9278904815, 3632066918, 5250503138, 6527763129, 2501435757, 1816046761, 9609769104, 3726646041, 7392222698, 992832464, 6341858085, 6633043290, 9309987684, 7626838578, 960655956, 1867981384, 1671840340, 7121980333, 842559539, 9667289636, 43882969, 2131030283, 4954464347, 190987061, 1223896426]
    return [x[i] - y[i] for i in range(k)]
def chunk_45336ad9(x):
    return x[17:] + x[:17]
def deck_0e8b4187(x):
    return x[8:] + x[4:6] + x[6:8] + x[:4]
def csub_564b5e2c(x):
    # lel
    return [x[i] - 5624086851 for i in range(k)]
def sub_8fbf82f1(x):
    y = [2181464375, 1521012697, 9225580825, 3621285775, 8844559636, 1637084019, 8753292771, 8934205069, 4809573223, 2152491304, 173568124, 3340545547, 4783750656, 4349371958, 1221989935, 1789385441, 2786347590, 2765025873, 8636781964, 2477025438, 3028972242, 5990802978, 9110197326, 7207334388, 9937521854, 1724212302, 7529501158, 4756431479, 2468774102, 6377953735, 2710771558, 4098325798, 9719796960, 6861875944, 5672338042, 83254862]
    return [x[i] - y[i] for i in range(k)]
def chunk_22bd5647(x):
    return x[14:] + x[:14]
def cadd_aef291ba(x):
    # encryption
    return [x[i] + 4318287614 for i in range(k)]
def cmul_b9b05446(x):
    return [x[i] * 10 for i in range(k)]
def csub_59c43ed1(x):
    # mucho encrypto
    return [x[i] - 3584686363 for i in range(k)]
def xor_f99e5d04(x):
    y = [9971014120, 1471573908, 303791184, 7001862456, 7969258493, 47107325, 9316074391, 3604975776, 1727674047, 8268155851, 7700284226, 2152417631, 4409612057, 7876294632, 1610533407, 6898816530, 6936936333, 7189985624, 3097735317, 1306374077, 9026405120, 4691989126, 7892321099, 7435727376, 2681808042, 2975943227, 7156092539, 2148190330, 9723839245, 9577511416, 4262980937, 4912004959, 2614696737, 6340695332, 5621646908, 4399320349]
    return [x[i] ^ y[i] for i in range(k)]
def deck_8c07d21a(x):
    return x[21:] + x[17:20] + x[20:21] + x[:17]
def chxor_b64d0435(x):
    y = [ord(p) for p in '2d3bb05cf86ce68416ae31575809ce259579']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_da354166(x):
    y = [ord(p) for p in '6a27c0e65b49797d9b2a8fabedd354c829cb']
    return [x[i] ^ y[i] for i in range(k)]
def add_16b704e9(x):
    y = [8315441362, 1848002266, 1037475592, 742575569, 139854772, 6555100448, 797062758, 487475982, 5457967317, 9138884355, 4174241476, 9142621169, 8968894249, 3818522328, 5899636336, 4500763448, 8717883355, 8606126981, 4946362348, 2358012994, 8693252004, 3232518570, 3144422941, 9820406888, 776402249, 1476477619, 8989803404, 1072894113, 7766710351, 9299494918, 4020497935, 138652457, 1425047880, 1357659753, 8708473261, 7028495878]
    return [x[i] + y[i] for i in range(k)]
def chmul_d43d0316(x):
    y = [ord(p) for p in '635b6d9eed76883c0605b7ba6a67e1b73c94']
    return [x[i] * y[i] for i in range(k)]
def cxor_30674cf4(x):
    return [x[i] ^ 134692324 for i in range(k)]
def mul_9ed02e6c(x):
    y = [8, 6, 3, 5, 9, 1, 7, 7, 8, 2, 7, 7, 2, 4, 6, 7, 4, 4, 3, 7, 6, 5, 8, 3, 9, 7, 2, 2, 6, 9, 2, 7, 2, 3, 5, 4]
    return [x[i] * y[i] for i in range(k)]
def chunk_69dd3db9(x):
    # shiet?
    return x[4:] + x[:4]
def cmul_ace3a215(x):
    return [x[i] * 10 for i in range(k)]
def cmul_69eb6792(x):
    # mucho encrypto
    return [x[i] * 4 for i in range(k)]
def add_db36360f(x):
    y = [4531923967, 4581496586, 1252571425, 9558796853, 8109434816, 5033270532, 1972188415, 419660426, 6160195747, 5067379364, 5666755017, 920844954, 1347017943, 29218244, 8051569849, 1335370175, 374506965, 8307558329, 2503709150, 3221235384, 5999108292, 551447896, 9741382118, 7879671211, 8745925552, 5909667564, 4995665718, 9411604698, 8366123400, 2249248140, 4744881896, 8404601581, 1548118303, 8325177762, 547978401, 4036046162]
    return [x[i] + y[i] for i in range(k)]
def xor_385da77c(x):
    # so good
    y = [8736783102, 5637958307, 7425120840, 6750757577, 1803689183, 331239322, 6229507454, 8073006634, 6166711195, 5358340885, 8767796911, 2871669936, 766197149, 4315788358, 2331725533, 4692660864, 1337107687, 4107781155, 2908350340, 9894219617, 8044190758, 9348731041, 9766091750, 9196181235, 233202623, 3239478771, 8472083053, 8725950342, 5563720149, 9144268022, 4041901161, 1841449286, 8663471973, 1267102108, 8487686116, 6694694354]
    return [x[i] ^ y[i] for i in range(k)]
def sub_0cb0697d(x):
    y = [7333383562, 6889884835, 4416557508, 2426546487, 2836569425, 186495922, 996773473, 2098715941, 9042557096, 7875296208, 2487422637, 3369143633, 1899010596, 9295649263, 1635443683, 951933959, 6820946447, 7503581771, 1905997956, 1575642146, 4728794541, 2044831930, 3003223167, 2450584449, 4787522594, 2533819191, 7328843259, 7393210365, 9145456254, 5491215288, 3732544373, 6550411202, 6433469214, 2872130806, 7684772675, 1583623794]
    return [x[i] - y[i] for i in range(k)]
def cmul_11e41b5d(x):
    # the best
    return [x[i] * 9 for i in range(k)]
def chunk_88f4a033(x):
    return x[16:] + x[:16]
def mul_51ffc146(x):
    # kek
    y = [2, 1, 4, 2, 1, 4, 3, 3, 2, 4, 3, 3, 4, 4, 3, 2, 4, 2, 1, 2, 2, 2, 4, 4, 4, 3, 1, 4, 4, 4, 2, 2, 3, 4, 3, 3]
    return [x[i] * y[i] for i in range(k)]
def cmul_2eb68781(x):
    # kek
    return [x[i] * 4 for i in range(k)]
def chunk_8ad268b9(x):
    # mucho encrypto
    return x[22:] + x[:22]
def sub_d6d53ea0(x):
    # the flag is flag{jk}
    y = [7755912128, 351310349, 1084390047, 1151565104, 7446405830, 7318470118, 4702684263, 9895694292, 4656253648, 9258764924, 6614200038, 3010813451, 7548100285, 8891790629, 8085274429, 9042427973, 8863444501, 3813808218, 196744428, 3746921293, 1564052586, 5323380969, 956758842, 4609392244, 5674846711, 1883899923, 5450928227, 200426966, 4447593270, 8724588871, 3282336272, 3633560883, 6035989208, 5551193710, 769012887, 7231404859]
    return [x[i] - y[i] for i in range(k)]
def chsub_74cf05a6(x):
    y = [ord(p) for p in 'e4d106d18f0227df9a9d4b706f776ef468d8']
    return [x[i] - y[i] for i in range(k)]
def chsub_7bc426c7(x):
    # just reverse it
    y = [ord(p) for p in '5f1f20327f89ed1d6d620db78dc5cbf56254']
    return [x[i] - y[i] for i in range(k)]
def cadd_3a2cd387(x):
    # mucho encrypto
    return [x[i] + 6207027008 for i in range(k)]
def chunk_9532fc70(x):
    # shiet?
    return x[35:] + x[:35]
def chxor_00408453(x):
    # lel
    y = [ord(p) for p in 'f0ac88a82a462129179cf80bdbb644795819']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_8231f9c2(x):
    y = [ord(p) for p in 'adac1c30fe8fb024fe5e8a2bd12b2d48907b']
    return [x[i] + y[i] for i in range(k)]
def chadd_99b8ad72(x):
    # rekt
    y = [ord(p) for p in 'c2bdc4255802acae336a66d36b004abd9c0d']
    return [x[i] + y[i] for i in range(k)]
def shuffle_87103ee1(x):
    return [x[p] for p in [27, 32, 13, 28, 6, 7, 16, 31, 18, 11, 25, 34, 33, 10, 1, 3, 20, 30, 0, 24, 15, 12, 35, 9, 29, 8, 17, 21, 23, 19, 22, 26, 5, 2, 14, 4]]
def xor_af966677(x):
    y = [6211392954, 394297909, 2425082661, 1385787185, 3305364140, 4368599819, 7009312591, 5260472036, 9506694050, 5341096808, 6101520222, 2322132095, 3937600275, 1773045710, 2111945986, 5768269455, 953176834, 9021168166, 364943022, 8145043331, 2170666724, 1796465607, 8531900593, 7824027798, 1517183745, 9046433980, 6091056342, 3932093009, 6402464337, 4806039856, 431005776, 6223880566, 1776731839, 2715707986, 2467462483, 8897047450]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_6712129e(x):
    # lmaooo
    y = [ord(p) for p in 'b20acd6f39ff53ca644f0d57b90142bd4c10']
    return [x[i] ^ y[i] for i in range(k)]
def mul_947580cb(x):
    # the best
    y = [3, 3, 3, 4, 3, 3, 1, 4, 4, 3, 2, 1, 4, 4, 3, 4, 3, 4, 4, 1, 2, 2, 1, 1, 4, 3, 3, 2, 3, 4, 2, 1, 2, 4, 2, 4]
    return [x[i] * y[i] for i in range(k)]
def chadd_0232afc0(x):
    # lmaooo
    y = [ord(p) for p in '5277b26a8662077b4bb7f3a506fecb78f41d']
    return [x[i] + y[i] for i in range(k)]
def chsub_244387c4(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '29280f6365a7bbc31cc8d965dc4ef19b70bc']
    return [x[i] - y[i] for i in range(k)]
def chadd_c8951761(x):
    y = [ord(p) for p in '820f65f68051525d3bfe23f39e30093671e5']
    return [x[i] + y[i] for i in range(k)]
def add_1c8d08f1(x):
    # mucho encrypto
    y = [7037874635, 3321678985, 3866843180, 6000077661, 6050206499, 516027648, 9224688305, 664888259, 1970083784, 648044424, 8863054526, 8280107269, 8896951111, 6499905567, 2654490803, 7986405490, 437413996, 7246012837, 2679649440, 5825153515, 7685999775, 2463048974, 6010995861, 6675782998, 387508444, 4292984156, 3811057155, 7333103253, 5910497048, 8275869768, 3240166616, 9066601298, 2149848296, 9538097381, 6465856400, 7856728635]
    return [x[i] + y[i] for i in range(k)]
def chadd_68273988(x):
    y = [ord(p) for p in 'fdb4c9fa7e12506d570826c36dc52ea9146b']
    return [x[i] + y[i] for i in range(k)]
def cadd_407bbf2e(x):
    return [x[i] + 7488363163 for i in range(k)]
def cxor_d2e5bfdf(x):
    return [x[i] ^ 7534381102 for i in range(k)]
def chunk_443df39a(x):
    # kek
    return x[7:] + x[:7]
def chsub_d866d58b(x):
    y = [ord(p) for p in '8c9e1c61897a279f8e38c5b4483e89239361']
    return [x[i] - y[i] for i in range(k)]
def cmul_108a5ff2(x):
    return [x[i] * 9 for i in range(k)]
def add_8db2a643(x):
    y = [8279446487, 255792467, 5895223960, 680051946, 2460761184, 2572641529, 7084567704, 5581214663, 71054684, 9252921248, 35663120, 4613664153, 4006491130, 2166138507, 5361963899, 3543580965, 6946828442, 5032795025, 7692204449, 7086335284, 3428748117, 1414000108, 9305459841, 2062876462, 1337866817, 8717849045, 9008862933, 9533261580, 4857106251, 7061266475, 2418921340, 9153873759, 5448366744, 6393742538, 6833626623, 1604522103]
    return [x[i] + y[i] for i in range(k)]
def cmul_94ed85b9(x):
    return [x[i] * 6 for i in range(k)]
def add_91bf6c2c(x):
    # evil
    y = [4586084375, 816553224, 2792699356, 8984273436, 7197535791, 143121887, 7933925492, 2288486000, 6997708020, 7239416064, 4078857632, 3762825342, 7314323491, 4088952774, 414998301, 1369134744, 3146802889, 5752168581, 3305255513, 9295460433, 9010917941, 3558770677, 5963867870, 4632216712, 8557965099, 6543636938, 8372711080, 1058120371, 5114141839, 9257227902, 9984938665, 2098755378, 2178526716, 4807611064, 2882364464, 9553246573]
    return [x[i] + y[i] for i in range(k)]
def chxor_b212e95c(x):
    y = [ord(p) for p in 'e74ed191dd5e18e21e7c40c4f47e9b9c041b']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_e256fb84(x):
    return [x[i] ^ 6523974080 for i in range(k)]
def chadd_932febde(x):
    y = [ord(p) for p in 'f58ea794763b2c1829ac929b4cb32ad58c12']
    return [x[i] + y[i] for i in range(k)]
def cadd_2a11e194(x):
    # rekt
    return [x[i] + 1400142584 for i in range(k)]
def chmul_743f98a5(x):
    # rekt
    y = [ord(p) for p in '4792608282033b9c4b208c4227327cea7ddb']
    return [x[i] * y[i] for i in range(k)]
def digsub_828ecd75(x):
    return [int(str(n)[:1] + ''.join(['4', '0', '5', '9', '6', '1', '3', '8', '2', '7'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_8c8dc376(x):
    # kek
    return [x[p] for p in [30, 4, 29, 24, 28, 15, 11, 22, 10, 32, 7, 9, 3, 17, 12, 35, 31, 26, 1, 14, 27, 16, 18, 0, 23, 8, 34, 20, 21, 25, 5, 6, 33, 2, 13, 19]]
def add_b6dbb476(x):
    y = [476881362, 7415763377, 4747431029, 1050150241, 2965509241, 3459991958, 9827812786, 5396442619, 6068170611, 9560716654, 9729600518, 6600471256, 8643307714, 8775348293, 4815132558, 6048558432, 9188811000, 8709494747, 6529653550, 5384646383, 7731458538, 6831446888, 8733402897, 4562963961, 2808268939, 2497918574, 8958733034, 1680266601, 5410534542, 948112162, 6156004520, 5621429357, 2323105683, 8908642644, 6157337077, 2324136985]
    return [x[i] + y[i] for i in range(k)]
def chsub_a85cba2a(x):
    y = [ord(p) for p in '13565a99a29e935a8f4f82c5086fea056cbd']
    return [x[i] - y[i] for i in range(k)]
def chadd_e884c28a(x):
    y = [ord(p) for p in 'd3aae6579bfdc78411a31480a56e4fa896b3']
    return [x[i] + y[i] for i in range(k)]
def chadd_226738ed(x):
    y = [ord(p) for p in 'a9057026170d67cb57c6b6c86ca95a32e53c']
    return [x[i] + y[i] for i in range(k)]
def chsub_3d7d2e18(x):
    # so good
    y = [ord(p) for p in '8cb5f52d4e81387273429638f8fb18142e5e']
    return [x[i] - y[i] for i in range(k)]
def cxor_5cb8c60b(x):
    return [x[i] ^ 9044652416 for i in range(k)]
def chmul_1a3d7c8c(x):
    y = [ord(p) for p in '223b3755bc3a966a3820fb4bbe8d480b7482']
    return [x[i] * y[i] for i in range(k)]
def deck_77c84eba(x):
    return x[29:] + x[:3] + x[3:9] + x[9:29]
def cxor_0673e3e4(x):
    # shiet?
    return [x[i] ^ 5752911668 for i in range(k)]
def cadd_15b9e74b(x):
    # the flag is flag{jk}
    return [x[i] + 4863507597 for i in range(k)]
def chunk_01c25ee4(x):
    # encryption
    return x[17:] + x[:17]
def digsub_d4a46520(x):
    return [int(str(n)[:1] + ''.join(['3', '0', '6', '7', '8', '5', '2', '4', '1', '9'][int(p)] for p in str(n)[1:])) for n in x]
def chxor_6371b750(x):
    # the flag is flag{jk}
    y = [ord(p) for p in 'f3c87c87f93c5c4fef233341071228e6c890']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_a8579f80(x):
    return x[6:] + x[:6]
def digsub_8e7fd683(x):
    # lel
    return [int(str(n)[:1] + ''.join(['7', '6', '9', '4', '2', '8', '0', '5', '1', '3'][int(p)] for p in str(n)[1:])) for n in x]
def chadd_fe09deb1(x):
    # so good
    y = [ord(p) for p in '69874a17300911fbd561e5f51de14e35091e']
    return [x[i] + y[i] for i in range(k)]
def deck_a38e5257(x):
    # encryption
    return x[8:14] + x[:8] + x[14:30] + x[30:]
def cxor_303b54c5(x):
    return [x[i] ^ 5456636574 for i in range(k)]
def cxor_bb8a990f(x):
    # evil
    return [x[i] ^ 3141563927 for i in range(k)]
def xor_bbeda458(x):
    y = [7853069052, 7057681370, 4986616334, 2501197419, 9617738685, 4570295924, 963693207, 1080185897, 3100619646, 9549644067, 7221336389, 9023754720, 8493224550, 9788073711, 1114779090, 2416191173, 4784627599, 8959949908, 3654099789, 2641666932, 9914267920, 4152796847, 4913023509, 9145311830, 8085022059, 4346389990, 4799022047, 323332760, 2184689812, 2165859966, 2876401210, 3588235830, 4670116669, 1476562370, 7505274424, 1971113251]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_74f95525(x):
    return [x[i] ^ 994064282 for i in range(k)]
def xor_82a4d513(x):
    # evil
    y = [8266752289, 2875023605, 7050902814, 5387883311, 583005115, 6654062458, 2753255842, 3264633013, 3686349494, 8961394256, 5966742107, 3238182269, 550291259, 4605924789, 4702038382, 776713918, 8732203965, 8702843152, 7675220841, 6578714501, 5660502891, 824080401, 4092644182, 7614850529, 4061801898, 4764576346, 3798856021, 3203140822, 6566029073, 9522295873, 6849762958, 350825197, 3139155138, 3160677156, 8878040295, 7867814669]
    return [x[i] ^ y[i] for i in range(k)]
def xor_2ac1f33e(x):
    # mucho encrypto
    y = [2736718706, 5295487900, 3723602720, 9929836046, 8238098491, 4811053333, 812907035, 596947405, 3103744094, 7013176209, 9809497908, 4846231230, 7952679927, 4509441214, 5844895009, 6362711693, 7288552210, 3904573999, 7655442179, 6627603321, 1143219185, 8091245828, 3211670108, 3600919241, 1446218853, 9869371917, 7963455836, 2898862683, 5546503970, 9424000517, 7263749282, 4013968646, 1473648828, 7506612025, 4369091758, 7443351638]
    return [x[i] ^ y[i] for i in range(k)]
def xor_ced10726(x):
    y = [6952719063, 3595139286, 776757604, 2584458389, 9081559223, 2490768291, 6695852340, 8803816292, 1547169862, 7211266847, 3733257875, 1312477716, 7392435477, 7079418322, 8535613937, 2844680251, 3759258056, 8530775847, 1944324341, 6186224640, 5750551809, 9514563243, 2271079185, 6133812445, 6175770711, 8791336724, 5161395946, 9301699103, 4189272301, 7653261656, 9730376516, 1470124996, 5845759617, 1780586132, 429477129, 354234048]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_a6995b41(x):
    # the best
    y = [ord(p) for p in '04319e3c64f61b9693fa83c6b16b1794c76a']
    return [x[i] ^ y[i] for i in range(k)]
def sub_6411cb05(x):
    y = [3605421363, 1943943999, 5023452393, 9274339442, 6200539864, 2125685042, 8732721351, 9596080947, 2186148242, 4382892662, 3120791600, 233328440, 5079809317, 1680588791, 9659705358, 5460705323, 3609770808, 831208465, 4208891372, 6836091334, 3542961818, 1864769631, 9476994867, 7729436124, 5231139605, 2885128996, 741809954, 6361245170, 938987167, 9747917466, 2406936929, 3686888139, 4250082973, 8639831696, 3972408239, 6169268133]
    return [x[i] - y[i] for i in range(k)]
def chunk_20e9ea05(x):
    return x[19:] + x[:19]
def chunk_e949207e(x):
    return x[7:] + x[:7]
def chmul_90f76848(x):
    # kek
    y = [ord(p) for p in 'bb5bb8454afea761e8782d203bda17d0ae7e']
    return [x[i] * y[i] for i in range(k)]
def cmul_c57ae7de(x):
    # mucho encrypto
    return [x[i] * 5 for i in range(k)]
def add_ebcc13ce(x):
    # just reverse it
    y = [935541293, 8344120767, 116167297, 4467372370, 6590782297, 2979719422, 1720410138, 2652548777, 188340435, 9616603923, 5880169919, 3721384596, 820426432, 586598140, 720478050, 2862899894, 5412157063, 4160696663, 9297549442, 5878389778, 7107461209, 4809994442, 9274775756, 780762805, 6636789466, 7472263096, 5129794748, 7296568943, 4924265613, 4508078102, 9489558282, 5736127769, 4987994871, 9700485598, 2834208094, 6453576556]
    return [x[i] + y[i] for i in range(k)]
def cmul_259fe9ec(x):
    # rekt
    return [x[i] * 7 for i in range(k)]
def csub_088507c1(x):
    # rekt
    return [x[i] - 3513778417 for i in range(k)]
def chunk_b9615aa9(x):
    return x[19:] + x[:19]
def chadd_36148017(x):
    y = [ord(p) for p in '9b74aa19e74409f92e8228a7dfefcd6d9b13']
    return [x[i] + y[i] for i in range(k)]
def cadd_fdc5f9f6(x):
    return [x[i] + 3663484391 for i in range(k)]
def cmul_b1a79f4a(x):
    # lel
    return [x[i] * 3 for i in range(k)]
def sub_fa8a3be1(x):
    y = [7152247200, 3895957065, 7936424526, 7863195643, 5053945444, 8646275390, 3182747380, 2390633195, 6930940863, 2997923552, 4544206098, 4550019610, 4937630255, 891817846, 3935947880, 2185036838, 9839006636, 8915560310, 5876444765, 2509908236, 368286244, 9469601551, 389911761, 7582063219, 4643380166, 7274535901, 3969212341, 2427790227, 2148037718, 5486019468, 5468845018, 8190768087, 6542309105, 7553418672, 3401453820, 8185749181]
    return [x[i] - y[i] for i in range(k)]
def cmul_8ef7a9fc(x):
    # kek
    return [x[i] * 7 for i in range(k)]
def cxor_8549d8eb(x):
    return [x[i] ^ 4190974861 for i in range(k)]
def xor_3b14c897(x):
    # kek
    y = [3850285, 2339256182, 4966720237, 4540513810, 7290894913, 6569454533, 1350547185, 6226278041, 7898886555, 6327532683, 3456851090, 9069145668, 477212550, 5291773947, 4065906378, 4634135837, 6227644004, 2870567588, 3906456075, 3271516303, 7845571326, 5150544961, 6801731980, 5908931234, 7077530361, 2191119500, 2867147979, 1880001282, 4977925195, 9611411777, 8870817877, 3287915148, 86250243, 4530764385, 1526001293, 7542333378]
    return [x[i] ^ y[i] for i in range(k)]
def chadd_7a20c681(x):
    # so good
    y = [ord(p) for p in '7a1690d2f1e3231e934facbcd0fe5edb868d']
    return [x[i] + y[i] for i in range(k)]
def chunk_406fc18b(x):
    return x[9:] + x[:9]
def sub_eacce1a2(x):
    y = [1776297924, 637582530, 5067428832, 117735109, 575709678, 9275188231, 2941002078, 8318184496, 249758614, 3770440787, 5913886986, 6746179949, 664472972, 1062347747, 7378630965, 1993368382, 8837765372, 9387240791, 256672012, 5228906336, 728134312, 5045316216, 9538583354, 518642139, 4864081168, 5475616738, 5481899259, 2619386072, 8057525773, 8421692960, 8019005976, 6246334561, 1456367657, 7510470420, 8312700342, 843494205]
    return [x[i] - y[i] for i in range(k)]
def chsub_be5f9d3f(x):
    y = [ord(p) for p in '18f32594f5cf8688a1edcb79b1909f56de4b']
    return [x[i] - y[i] for i in range(k)]
def chmul_0a614bf5(x):
    y = [ord(p) for p in 'd62d94a9be8910e4f85f1511d464a09c7afc']
    return [x[i] * y[i] for i in range(k)]
def chunk_b40e3bec(x):
    return x[30:] + x[:30]
def shuffle_5ad024ad(x):
    return [x[p] for p in [18, 9, 12, 11, 30, 10, 8, 28, 25, 24, 5, 1, 33, 17, 14, 19, 22, 27, 7, 20, 16, 29, 13, 34, 3, 21, 0, 35, 2, 15, 32, 26, 23, 31, 6, 4]]
def add_52b814e5(x):
    # the flag is flag{jk}
    y = [6768576538, 7945712693, 7648670129, 3831325402, 7234260023, 5979783130, 3475795973, 7684388280, 839731168, 690745532, 3379079547, 5121841605, 2042422063, 203731672, 2595427177, 9046197065, 9912253580, 2042762605, 7656486612, 4061366269, 9908945847, 5803708345, 7444319297, 9416999559, 2265509141, 4507303033, 6587960968, 1326745362, 4708291865, 5768511385, 96417643, 436822853, 6806453840, 9541082918, 7829066258, 8518129225]
    return [x[i] + y[i] for i in range(k)]
def sub_e6d0323d(x):
    y = [4605212351, 9012975559, 1738326645, 9873657219, 297179730, 9295171949, 9167663597, 460484175, 2479869328, 2730277626, 2161673778, 1089852742, 1145049205, 4024964153, 3642260713, 4110144206, 8272468136, 5825694733, 3563590076, 9851580560, 4727407513, 2410219252, 9108223056, 1198031811, 7877855633, 9969990375, 3809495183, 3585177691, 362778594, 917565208, 6332622442, 1091834552, 5852502044, 6047004336, 6472214837, 9945292391]
    return [x[i] - y[i] for i in range(k)]
def shuffle_9df52ad2(x):
    # lmaooo
    return [x[p] for p in [12, 4, 35, 19, 1, 15, 14, 8, 28, 11, 24, 3, 5, 16, 23, 20, 18, 30, 13, 0, 6, 17, 31, 25, 27, 10, 22, 26, 2, 7, 34, 21, 29, 9, 32, 33]]
def mul_9e94e89a(x):
    # rekt
    y = [1, 9, 5, 7, 9, 6, 4, 7, 3, 7, 9, 2, 7, 3, 4, 1, 3, 8, 5, 1, 7, 6, 9, 2, 8, 8, 5, 4, 1, 7, 8, 2, 9, 7, 5, 1]
    return [x[i] * y[i] for i in range(k)]
def chsub_e2d10a29(x):
    # so good
    y = [ord(p) for p in 'e6758ff2c0fc3cce4f141048cd6d3d445247']
    return [x[i] - y[i] for i in range(k)]
def shuffle_e666492b(x):
    return [x[p] for p in [29, 34, 4, 19, 17, 30, 32, 16, 11, 21, 0, 12, 1, 5, 26, 35, 33, 27, 18, 28, 3, 7, 24, 20, 9, 13, 10, 31, 22, 14, 15, 23, 6, 8, 25, 2]]
def deck_6ada863f(x):
    return x[25:] + x[5:7] + x[:5] + x[7:25]
def chsub_b448dac1(x):
    # evil
    y = [ord(p) for p in '855c1940f3c016fe1db8a947f05feb520bde']
    return [x[i] - y[i] for i in range(k)]
def chunk_3fec31ed(x):
    # lel
    return x[7:] + x[:7]
def chxor_79daeaf3(x):
    y = [ord(p) for p in 'cb3ab97cef28b8a11a6ff2b9dd7987d17ef4']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_cd1b98ab(x):
    y = [ord(p) for p in '97c8ed522f0cf73669f56eed56cb3361714f']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_87ecf0a7(x):
    return [x[i] ^ 2007393159 for i in range(k)]
def csub_f9d99859(x):
    return [x[i] - 9343117143 for i in range(k)]
def sub_361737a7(x):
    y = [4313268565, 5107788192, 6820565741, 7704359927, 9005590500, 3199410273, 4617676468, 6923502208, 2278707721, 7604963471, 1168886049, 5144686073, 7353864857, 3124146360, 6038500791, 4464071587, 6354372558, 4647737511, 4630309181, 2968452246, 1737054714, 8152981807, 6989400028, 6074364154, 5801841266, 276267616, 8207217676, 750914941, 9424850556, 5490270114, 466399843, 9799724512, 126076498, 7887608200, 4327298476, 758733556]
    return [x[i] - y[i] for i in range(k)]
def chsub_02fa3ce0(x):
    y = [ord(p) for p in '06cc114e6046eceafecfaa26be2f48703e5a']
    return [x[i] - y[i] for i in range(k)]
def sub_b4f35853(x):
    # kek
    y = [6385728211, 6655962407, 1381436834, 8934657939, 5536403987, 6640557605, 9321938131, 3802708048, 9708173749, 2431505961, 3381230562, 7333965051, 645430999, 1737131178, 3843167023, 3916673356, 2678914098, 7627171772, 7013878933, 2682349902, 5740093679, 9585169710, 5068849770, 3997781164, 7344706705, 5001967124, 4757271216, 8156758478, 4375271562, 1747721782, 2919375502, 2450597423, 7182077587, 852830394, 5292412058, 4033455644]
    return [x[i] - y[i] for i in range(k)]
def add_87dad6e0(x):
    # evil
    y = [5897763215, 1806931738, 8803664015, 3201179246, 6892871187, 5523990757, 2884349962, 3725040974, 3328200704, 1511386420, 6207556818, 7285109853, 9387110017, 4961166696, 7859394591, 4480752099, 8165788407, 4843176612, 6867927925, 2006575029, 6628598356, 7285537261, 9756040225, 2986079023, 3404101560, 982539199, 3332949685, 8602546693, 9700978378, 4919498382, 569475187, 2474845892, 3241879028, 4363822332, 8341519188, 5926763079]
    return [x[i] + y[i] for i in range(k)]
def shuffle_7b77028a(x):
    # so good
    return [x[p] for p in [18, 9, 1, 12, 5, 8, 11, 13, 28, 25, 29, 7, 34, 31, 26, 24, 35, 4, 23, 14, 6, 27, 16, 22, 10, 20, 19, 30, 33, 3, 2, 17, 32, 0, 15, 21]]
def chmul_9d6b502f(x):
    # evil
    y = [ord(p) for p in '3ec575b8bf8e6127b3a3df62ca0def3fbb97']
    return [x[i] * y[i] for i in range(k)]
def cadd_130f7b9b(x):
    # so good
    return [x[i] + 2760832871 for i in range(k)]
def chadd_5d344985(x):
    y = [ord(p) for p in '0e88b633057a8d62362dde7def36d29e5459']
    return [x[i] + y[i] for i in range(k)]
def cxor_f30be4dd(x):
    return [x[i] ^ 8712275341 for i in range(k)]
def chxor_2d0c7130(x):
    y = [ord(p) for p in 'f7725fedfddfc2cbe3385b80ee62e65ae8f0']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_028f229e(x):
    y = [ord(p) for p in '55d54491e1968786d5deabc3bc9b04012589']
    return [x[i] + y[i] for i in range(k)]
def digsub_4a75fccf(x):
    return [int(str(n)[:1] + ''.join(['4', '2', '3', '7', '1', '9', '0', '8', '6', '5'][int(p)] for p in str(n)[1:])) for n in x]
def chadd_f560a4d3(x):
    # the best
    y = [ord(p) for p in 'f9e443f645ac1e7ead69b3e7f5392c8615fe']
    return [x[i] + y[i] for i in range(k)]
def shuffle_3ef98f81(x):
    return [x[p] for p in [26, 14, 12, 35, 10, 15, 33, 3, 20, 24, 28, 18, 32, 21, 1, 22, 30, 4, 16, 19, 13, 0, 11, 34, 27, 25, 29, 7, 6, 17, 9, 23, 5, 2, 8, 31]]
def sub_be3b1a5a(x):
    # lmaooo
    y = [9310612126, 8791074575, 8701262503, 4955303716, 5726469393, 3265966411, 668024023, 4558210984, 1857023577, 6648115788, 2714563399, 4245503370, 5857018824, 5440685663, 3059747043, 3444590894, 7659424661, 9841846319, 9264957109, 7883256664, 7715098233, 1142227548, 2819473253, 2414358964, 3464652673, 17967494, 5161023168, 6680417753, 5116666721, 1277036266, 8610144894, 177702461, 9072434291, 6413407645, 7172000608, 4047447130]
    return [x[i] - y[i] for i in range(k)]
def cxor_71e7ff03(x):
    # lel
    return [x[i] ^ 4169911080 for i in range(k)]
def cmul_63b57c2a(x):
    # lmaooo
    return [x[i] * 3 for i in range(k)]
def chsub_906855b4(x):
    # just reverse it
    y = [ord(p) for p in '4ea5e0f8b1db9caa85a9a899c715b4b16dcd']
    return [x[i] - y[i] for i in range(k)]
def chsub_9ce25212(x):
    # lmaooo
    y = [ord(p) for p in '912244e7e83502568d668e698d8c621a42f1']
    return [x[i] - y[i] for i in range(k)]
def digsub_ecf47b8f(x):
    return [int(str(n)[:1] + ''.join(['5', '7', '3', '1', '0', '9', '4', '8', '2', '6'][int(p)] for p in str(n)[1:])) for n in x]
def csub_fda3f560(x):
    # lel
    return [x[i] - 3975235687 for i in range(k)]
def digsub_f9d31323(x):
    return [int(str(n)[:1] + ''.join(['1', '9', '6', '7', '2', '3', '0', '8', '4', '5'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_227b1b2a(x):
    y = [ord(p) for p in '0c56e2839b361de1a1a68e9ce8c1e0a76f38']
    return [x[i] * y[i] for i in range(k)]
def digsub_9adbb647(x):
    return [int(str(n)[:1] + ''.join(['8', '4', '0', '1', '7', '2', '9', '3', '6', '5'][int(p)] for p in str(n)[1:])) for n in x]
def xor_da634428(x):
    y = [9808567699, 7562216813, 505720860, 8122628394, 9818123168, 8700750300, 5885711192, 1641204442, 2294189504, 1616347150, 5642481087, 7960950061, 5837082900, 5550887326, 1753659657, 9093607807, 2497891009, 3311676250, 3990014020, 8941075192, 1836586981, 9334460744, 1601957462, 1408559968, 5411672279, 3668506946, 1450618010, 4493983867, 9417739429, 5070433634, 5878015147, 5403727565, 5995494939, 5088962849, 4621334740, 8296931532]
    return [x[i] ^ y[i] for i in range(k)]
def csub_137af0f7(x):
    # just reverse it
    return [x[i] - 8396734251 for i in range(k)]
def chunk_be4b9bb8(x):
    return x[34:] + x[:34]
def chadd_43e1206d(x):
    # just reverse it
    y = [ord(p) for p in '3f33d16ea12ac5c31f73e3015e3a1c04f39d']
    return [x[i] + y[i] for i in range(k)]
def sub_e8045aa7(x):
    y = [5397144770, 6373623712, 2067518425, 6622189642, 4532761038, 2697231533, 6375009573, 1704831470, 2646788531, 6242079994, 2749810231, 2158740897, 9723712751, 1277663196, 6405178528, 3787472258, 8608465836, 8558027620, 6175250158, 7291260009, 9443284655, 1218829512, 3813712777, 2258972474, 9518337727, 1157919783, 2098706881, 2981487624, 3120170282, 4750087235, 9301054608, 4241114951, 3870145440, 662899027, 2309697371, 6289359056]
    return [x[i] - y[i] for i in range(k)]
def chadd_1989b407(x):
    y = [ord(p) for p in 'ca687c805f4f3fce86067f73d528e17e462c']
    return [x[i] + y[i] for i in range(k)]
def chxor_e7a8f8ca(x):
    y = [ord(p) for p in '8456e130803e2bffa440ccdf9eeb9c3738df']
    return [x[i] ^ y[i] for i in range(k)]
def sub_79391e33(x):
    y = [7356575317, 3908450416, 6273826481, 2996510560, 2423054017, 130803487, 7685944990, 4806093252, 564937231, 3919608641, 1722109200, 858433857, 2373960364, 8847473795, 9792235246, 6540761575, 4351367246, 2623131631, 4248843159, 9963995175, 1163286767, 9187905873, 4040730871, 5618896383, 6990595810, 36238349, 1502466104, 4888593572, 3472578691, 2273612372, 3867894576, 5231932198, 5936526100, 711132116, 8389141070, 7851537138]
    return [x[i] - y[i] for i in range(k)]
def xor_5c62e4ce(x):
    y = [7120064271, 9550332906, 3584604266, 6993938003, 8581790850, 6587959860, 86225961, 6313651238, 8225942635, 4272368250, 3439544275, 8550640184, 4552913408, 8125849860, 3675183917, 4731645058, 7194658384, 4976246433, 8810516458, 2502974242, 6088808740, 9255831419, 7324150536, 3600828262, 9839600, 9601323509, 3295030047, 6972957316, 8896888312, 1004878738, 7791556639, 530146532, 4133161882, 3615933813, 8658846611, 6750166952]
    return [x[i] ^ y[i] for i in range(k)]
def add_a2c38523(x):
    y = [2039656025, 2947000562, 1114695820, 7645868102, 170335483, 9975593066, 5061206567, 6833932123, 4482772937, 961532911, 8875207520, 4008437458, 1510873268, 6900018245, 1979069157, 774261184, 1982844899, 4170487492, 9198560083, 3367655659, 2888931279, 2814518048, 9835221023, 7058130402, 9467723648, 6497615717, 431187889, 7067982544, 5142151209, 8719538576, 8206273663, 9931207100, 4684584098, 8567903453, 7357364461, 498988423]
    return [x[i] + y[i] for i in range(k)]
def xor_e689ffa0(x):
    # encryption
    y = [9491102271, 7549240996, 8026420961, 2158105724, 9298684694, 8525098046, 3042857199, 5290775068, 8406147667, 5519125016, 3140449562, 2703034922, 4373734188, 8863491097, 9168151907, 8925445873, 8519184418, 6896138188, 3067206093, 7217561288, 9646427550, 3504433525, 2211925299, 8021143989, 3085336166, 9153695031, 8405119981, 8721545125, 9204539107, 3506205074, 1696691563, 9590320195, 7995614380, 2039655908, 4583404704, 1132092911]
    return [x[i] ^ y[i] for i in range(k)]
def chadd_93e431eb(x):
    # just reverse it
    y = [ord(p) for p in '1d3356e4b4c9d1feb4014ac7e7bce56db74e']
    return [x[i] + y[i] for i in range(k)]
def cmul_b358c3b3(x):
    # the best
    return [x[i] * 3 for i in range(k)]
def chadd_0124a79d(x):
    # lmaooo
    y = [ord(p) for p in '9ec2e132dc4f8ccdf1e3b7e59d573b2a2d4a']
    return [x[i] + y[i] for i in range(k)]
def cxor_57e03f14(x):
    # mucho encrypto
    return [x[i] ^ 266785547 for i in range(k)]
def chmul_991b7825(x):
    # rekt
    y = [ord(p) for p in '41c702d3f91f433db2597eff4b7583442be4']
    return [x[i] * y[i] for i in range(k)]
def digsub_f0bd3d90(x):
    # evil
    return [int(str(n)[:1] + ''.join(['7', '5', '4', '2', '6', '1', '9', '0', '8', '3'][int(p)] for p in str(n)[1:])) for n in x]
def chunk_56a22d4f(x):
    return x[25:] + x[:25]
def chunk_ec01f5f0(x):
    # lel
    return x[33:] + x[:33]
def chmul_7cbf2205(x):
    y = [ord(p) for p in 'cbdbaba595a54142c11de6c52946819aeef0']
    return [x[i] * y[i] for i in range(k)]
def mul_cba48e57(x):
    y = [5, 3, 5, 1, 4, 7, 3, 1, 7, 4, 1, 4, 7, 1, 2, 1, 4, 4, 2, 2, 3, 7, 2, 2, 1, 4, 3, 2, 1, 3, 2, 4, 5, 6, 6, 2]
    return [x[i] * y[i] for i in range(k)]
def shuffle_7b370edd(x):
    return [x[p] for p in [0, 10, 34, 18, 22, 13, 8, 12, 15, 14, 16, 6, 31, 4, 2, 28, 5, 9, 24, 35, 3, 23, 29, 11, 33, 30, 25, 17, 20, 19, 1, 27, 26, 7, 32, 21]]
def chsub_b335ae97(x):
    y = [ord(p) for p in '6eff07e0831887c27158e1572e9a56ea5939']
    return [x[i] - y[i] for i in range(k)]
def digsub_6899cdac(x):
    return [int(str(n)[:1] + ''.join(['6', '7', '4', '8', '5', '9', '0', '3', '2', '1'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_b5cd94ca(x):
    # kek
    y = [ord(p) for p in '5a4d3b5328671ad4b5e230013ebbc78a18e3']
    return [x[i] * y[i] for i in range(k)]
def add_e0500d96(x):
    # evil
    y = [925392389, 2888670615, 4043950676, 6353565024, 106905314, 7097751335, 1551510154, 7088064497, 3312666394, 4963127625, 1247714271, 9210401423, 9334234751, 1176231528, 6112026498, 6833766838, 5914091255, 3387720536, 5430666774, 3698316464, 9722618594, 4799318424, 9845608294, 7603716096, 4336982660, 5967006470, 2938718091, 6513067751, 6821135201, 8984060306, 8346191488, 6879070803, 9667498246, 4584998048, 4606312699, 7661043231]
    return [x[i] + y[i] for i in range(k)]
def chadd_df001d38(x):
    y = [ord(p) for p in '708e0253439aec014320b57a54fc68276c31']
    return [x[i] + y[i] for i in range(k)]
def cmul_0b6d9f9a(x):
    return [x[i] * 9 for i in range(k)]
def csub_f6ee0768(x):
    # shiet?
    return [x[i] - 5573596910 for i in range(k)]
def cxor_1039bf70(x):
    return [x[i] ^ 9158321156 for i in range(k)]
def csub_8c481c30(x):
    return [x[i] - 6957589340 for i in range(k)]
def chsub_8396a9b9(x):
    y = [ord(p) for p in 'f00350230b5db7a60825b67ac8925491bfbd']
    return [x[i] - y[i] for i in range(k)]
def mul_87965a17(x):
    y = [2, 3, 1, 2, 1, 3, 3, 1, 2, 2, 2, 3, 1, 2, 3, 2, 3, 3, 2, 2, 1, 2, 3, 3, 1, 3, 2, 2, 1, 2, 3, 2, 2, 3, 2, 1]
    return [x[i] * y[i] for i in range(k)]
def chadd_d9f375ba(x):
    # rekt
    y = [ord(p) for p in 'd7e8502c9304ac3fb1cd77aa6491727444ca']
    return [x[i] + y[i] for i in range(k)]
def xor_c0bb5777(x):
    # so good
    y = [1936123903, 8353988013, 1035440332, 7354502764, 167414632, 8822337020, 2309681241, 3904264353, 172400396, 1345890741, 8637306921, 2224168475, 6727947363, 4993782105, 9922898921, 7422067776, 1392494865, 6839709044, 1850232469, 3882213979, 7384777607, 9873583179, 1170574215, 3034076578, 3315798959, 9799919638, 9146564690, 6594646948, 1738456184, 4992651704, 5144039465, 2643083125, 886262496, 64941718, 9213414744, 4678566627]
    return [x[i] ^ y[i] for i in range(k)]
def mul_31e8499c(x):
    y = [3, 2, 1, 1, 2, 2, 1, 1, 3, 2, 2, 4, 2, 3, 1, 5, 4, 2, 2, 2, 4, 5, 3, 1, 2, 3, 5, 3, 4, 4, 3, 5, 4, 5, 2, 4]
    return [x[i] * y[i] for i in range(k)]
def add_758d2268(x):
    # lel
    y = [380461506, 6299692844, 4964674242, 8713506534, 8855046829, 2302009527, 3890068729, 8026990306, 9407984338, 9671816136, 8751806753, 6329218666, 3773174391, 1598252401, 4340810643, 8086173625, 7022510686, 2919253557, 2009564033, 6182626600, 6851581941, 3622643314, 6747033894, 2683919479, 2122216803, 1498025962, 8313690801, 2300931490, 3653734945, 675759878, 162104122, 846984699, 4398446780, 2550780488, 5625559790, 5249231814]
    return [x[i] + y[i] for i in range(k)]
def chsub_f850c36b(x):
    y = [ord(p) for p in 'fcd093762b7d0cdacc6bd11bf5dfa204f4e9']
    return [x[i] - y[i] for i in range(k)]
def chsub_86f783b0(x):
    y = [ord(p) for p in 'd5340566ebf91387c6dc45280f51e531e843']
    return [x[i] - y[i] for i in range(k)]
def chunk_c154a4b0(x):
    return x[9:] + x[:9]
def chmul_9455da11(x):
    y = [ord(p) for p in '62776e3448f1c2aa670bd70bfcb75fd92ca7']
    return [x[i] * y[i] for i in range(k)]
def chxor_cc5079e5(x):
    y = [ord(p) for p in '82d9f378b2d8e403aaf20808828d2293a900']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_cc7ef037(x):
    return [x[i] ^ 3848684871 for i in range(k)]
def chunk_bb0e25ea(x):
    # the best
    return x[23:] + x[:23]
def shuffle_2de78ecc(x):
    return [x[p] for p in [7, 18, 4, 16, 28, 8, 2, 34, 19, 31, 1, 27, 15, 35, 11, 5, 22, 32, 21, 12, 13, 24, 17, 20, 14, 30, 6, 10, 9, 25, 3, 33, 23, 29, 26, 0]]
def xor_46eb3b29(x):
    y = [6495883519, 9749513772, 5635186414, 5146656324, 21173954, 3044312861, 534185813, 9504485156, 1064725764, 7345727059, 5568063981, 4797723857, 9980599667, 8510418301, 9172830587, 858864352, 9592910208, 6210252644, 2126124549, 4771200114, 9151005620, 2436373058, 2555594843, 9548075046, 9669708406, 6202743643, 1373673870, 4138799871, 2079611293, 5502297974, 8500912374, 4689140443, 8452289771, 4025493061, 5568947871, 2001394159]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_b9bc1a28(x):
    # so good
    y = [ord(p) for p in '7d0d729e15bd60e64bda7c5e6b622b7c5c98']
    return [x[i] * y[i] for i in range(k)]
def cxor_e59dc6e0(x):
    return [x[i] ^ 6391296373 for i in range(k)]
def chunk_6b35af69(x):
    # evil
    return x[3:] + x[:3]
def chunk_6f47d8f4(x):
    return x[32:] + x[:32]
def chunk_e2c320ee(x):
    # mucho encrypto
    return x[13:] + x[:13]
def cxor_b9faaea4(x):
    # just reverse it
    return [x[i] ^ 3608151112 for i in range(k)]
def add_8eb87b67(x):
    y = [4535546612, 9394205083, 1225541692, 664224560, 9114561929, 7216334640, 1669360450, 1831899088, 5119598347, 624575987, 2581692687, 2393480248, 9310171275, 4384353494, 326334050, 4537227055, 5821733929, 3717860199, 571881062, 1209270715, 3651917862, 3743753633, 256840134, 1393516222, 1477163305, 5258890552, 4727653585, 7390309442, 8375976195, 2567874796, 3873684195, 6503967143, 2504551925, 8691682084, 4244951352, 3203448645]
    return [x[i] + y[i] for i in range(k)]
def sub_7d90f9de(x):
    y = [4818431913, 872271687, 8241286478, 2968160068, 4318685266, 6152043413, 2391299419, 5602275907, 4006295484, 5365610569, 9175060688, 2635275275, 2354070268, 3844812060, 8258193634, 3886200211, 7493604301, 2967954044, 2011712638, 3930621186, 4069548362, 2844345599, 5373352271, 5758091914, 40037575, 9550941373, 2724672687, 5851415599, 4436105928, 5015700718, 6586991649, 8656796989, 9322473782, 1883389063, 8645100166, 4262374689]
    return [x[i] - y[i] for i in range(k)]
def chadd_84fac9b1(x):
    # evil
    y = [ord(p) for p in 'd75315c82b11801ddf15bbf27473f935e322']
    return [x[i] + y[i] for i in range(k)]
def cmul_c9b92e36(x):
    return [x[i] * 6 for i in range(k)]
def chsub_258a5c14(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '38cfa15b6adc9a4f5bfa9c623deb6e5a00aa']
    return [x[i] - y[i] for i in range(k)]
def chmul_63977e71(x):
    y = [ord(p) for p in 'aaa3d21ce569cface920160ea409316e8c6e']
    return [x[i] * y[i] for i in range(k)]
def xor_27199205(x):
    y = [1002715801, 9769202457, 1347385124, 8417248892, 1589180505, 3092188108, 2309997380, 8884696421, 6142798539, 5924388512, 3947747902, 8634208980, 4959218326, 3431537418, 8987824607, 6393923634, 2496454282, 1677830901, 5053779526, 2879809482, 7907142325, 9482446366, 1655525977, 2672384385, 6157001197, 1236288180, 2706147404, 5916554041, 5327348307, 4970750090, 5721915209, 5452753232, 3951663048, 8822991441, 1479971366, 1330076294]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_bc251ec0(x):
    y = [ord(p) for p in '92f78cc34fdeb1423ceebfe22d29c63087da']
    return [x[i] * y[i] for i in range(k)]
def chunk_85747b20(x):
    return x[2:] + x[:2]
def deck_85093bf7(x):
    # encryption
    return x[:3] + x[3:4] + x[4:30] + x[30:]
def csub_6cc93d0b(x):
    return [x[i] - 4339404474 for i in range(k)]
def digsub_4034f057(x):
    return [int(str(n)[:1] + ''.join(['1', '2', '8', '0', '5', '6', '3', '9', '7', '4'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_8ef21d96(x):
    y = [ord(p) for p in '712f9aa8d39b5157ebe9b2b876a2ce518f6d']
    return [x[i] * y[i] for i in range(k)]
def cmul_63effb36(x):
    return [x[i] * 10 for i in range(k)]
def chxor_85f3bf12(x):
    y = [ord(p) for p in '8b9838d2867962d8c5529aa5ccd73f6cee87']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_1c95a906(x):
    y = [ord(p) for p in '3233d14fa188e1a2f5b2bf6a20ad7b31c61e']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_16d7f1e9(x):
    return [x[i] * 7 for i in range(k)]
def add_7af2fe07(x):
    # the best
    y = [2523271599, 5893885869, 6853692637, 709862666, 9380442340, 5299642405, 7480423356, 4991135942, 9719741723, 6335009407, 409828499, 3794325794, 5099277064, 278239084, 3766744679, 8241035528, 4451723462, 151969677, 8563153040, 2748293854, 6684486563, 6764704012, 6327201394, 2470770185, 5670344919, 295046220, 34087067, 2376932212, 4797237514, 4117183741, 3134080737, 7932353560, 8185929504, 4404238724, 8226043920, 2965602323]
    return [x[i] + y[i] for i in range(k)]
def csub_22d4400c(x):
    # just reverse it
    return [x[i] - 1910396769 for i in range(k)]
def mul_2f486d74(x):
    # evil
    y = [4, 2, 4, 3, 2, 3, 1, 2, 4, 3, 5, 3, 3, 4, 2, 1, 5, 4, 3, 1, 3, 3, 4, 5, 1, 3, 2, 4, 5, 1, 5, 2, 2, 1, 4, 1]
    return [x[i] * y[i] for i in range(k)]
def deck_5dc7bc9c(x):
    return x[29:] + x[4:5] + x[:4] + x[5:29]
def deck_10f0cbf0(x):
    # so good
    return x[14:21] + x[21:] + x[:2] + x[2:14]
def shuffle_63f494ea(x):
    # encryption
    return [x[p] for p in [23, 18, 15, 7, 21, 1, 24, 26, 34, 20, 5, 8, 31, 17, 13, 27, 19, 29, 3, 12, 9, 35, 14, 33, 0, 25, 4, 10, 30, 16, 28, 6, 22, 2, 32, 11]]
def chadd_74c2ec36(x):
    y = [ord(p) for p in 'de105cdeae083b62b67f603b49f4d58c4d49']
    return [x[i] + y[i] for i in range(k)]
def cmul_931552a6(x):
    # just reverse it
    return [x[i] * 4 for i in range(k)]
def chsub_66269564(x):
    y = [ord(p) for p in 'b6956905c5513de4798e4bcd415f03b1025b']
    return [x[i] - y[i] for i in range(k)]
def add_0572be2d(x):
    # evil
    y = [2177423930, 1019183226, 7068261952, 4219172443, 8147920140, 4585024627, 5232991042, 1879502236, 4728070555, 882317207, 2030733171, 6753240246, 6078032595, 5064240648, 642563977, 5096575944, 4573479877, 2493601669, 6347759273, 9867246388, 4721493420, 3250206093, 8660135179, 9149583704, 6751740453, 6394201359, 209865415, 5693363361, 7558932558, 6075936084, 6054367503, 573969601, 4430201982, 7969865546, 5813448601, 6235211505]
    return [x[i] + y[i] for i in range(k)]
def chunk_f87a2350(x):
    return x[25:] + x[:25]
def chxor_d48b7863(x):
    y = [ord(p) for p in '1513e449fbd5288c37d99056038b48cb0555']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_9b06c74b(x):
    # rekt
    y = [ord(p) for p in '1ff5d39d9132876a96fc61fc69f28b6936bd']
    return [x[i] * y[i] for i in range(k)]
def chsub_e1ab9cb3(x):
    # lmaooo
    y = [ord(p) for p in '051a475e29fc20a4f6acac717eaa6bf56924']
    return [x[i] - y[i] for i in range(k)]
def chmul_9cb342ae(x):
    y = [ord(p) for p in '82422e2d09ad5c28a4bae653d503d055c68e']
    return [x[i] * y[i] for i in range(k)]
def add_f4bd902e(x):
    y = [9227324788, 4194997867, 4756419485, 6516781983, 6359462780, 2007580293, 2509666293, 9899048346, 5269849297, 9631228537, 3940747563, 6142051006, 2636685519, 8400957621, 5902843221, 8450811655, 3115240779, 5439560000, 8718231899, 7584016181, 8241231049, 2139583666, 9438343154, 9105756959, 4705702509, 1034914666, 1115031031, 9853035251, 6623136878, 9139153308, 3431734187, 6560497260, 9861197327, 9669350936, 1424544969, 5442471403]
    return [x[i] + y[i] for i in range(k)]
def xor_5250859e(x):
    y = [8938019509, 3503244256, 1641465906, 4361222196, 1090133396, 7278492786, 8285351647, 6397527900, 968933987, 8841922709, 1345873423, 5051426849, 3891055838, 5328543154, 1677585846, 1713985062, 3780159612, 6380848074, 4615124018, 3566511260, 537012699, 2513366483, 6974808747, 6111282398, 6600395056, 1237335806, 3342981865, 4957353827, 5523224291, 138323836, 5402390105, 3231379750, 7424861295, 3083067525, 4587069946, 428062061]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_02aa625d(x):
    y = [ord(p) for p in 'bb648c46fde8302eefe692157b7cf8e990fc']
    return [x[i] ^ y[i] for i in range(k)]
def csub_eea95b8f(x):
    return [x[i] - 6369957412 for i in range(k)]
def deck_37ef7462(x):
    # mucho encrypto
    return x[14:36] + x[36:] + x[7:14] + x[:7]
def chadd_658a720b(x):
    # rekt
    y = [ord(p) for p in '72f45130124d332608cf310cd5694b609b4c']
    return [x[i] + y[i] for i in range(k)]
def mul_5486cc62(x):
    # encryption
    y = [6, 5, 8, 6, 5, 2, 7, 4, 7, 3, 4, 8, 7, 1, 7, 2, 7, 4, 5, 6, 3, 5, 6, 4, 7, 1, 2, 4, 8, 2, 2, 6, 7, 7, 6, 1]
    return [x[i] * y[i] for i in range(k)]
def shuffle_987eaf21(x):
    return [x[p] for p in [0, 33, 21, 12, 4, 30, 28, 25, 17, 7, 11, 8, 13, 15, 10, 2, 35, 18, 22, 6, 26, 9, 16, 32, 19, 23, 29, 34, 27, 20, 5, 1, 24, 31, 14, 3]]
def chsub_2b33e666(x):
    # rekt
    y = [ord(p) for p in '5dc82fb48891bcb0658f1703fc40bfaf17d8']
    return [x[i] - y[i] for i in range(k)]
def chadd_bf6edb8a(x):
    # the best
    y = [ord(p) for p in 'a97ed5f0883d2e57837d484e3f2e6362816d']
    return [x[i] + y[i] for i in range(k)]
def cmul_b0b395c7(x):
    # shiet?
    return [x[i] * 10 for i in range(k)]
def deck_b22cbe31(x):
    return x[3:3] + x[17:] + x[:3] + x[3:17]
def add_06c4c375(x):
    # so good
    y = [6375474971, 2489646798, 2318280594, 3058526282, 5897729600, 2866828858, 4870370982, 2525949563, 2306729125, 1493119820, 7530905244, 4920165166, 9443697501, 5057484524, 3381753753, 291790852, 5831714737, 3679942428, 3266647926, 5828361466, 507011438, 5117623076, 7501503792, 5365570450, 6794157303, 6653450916, 7910173567, 817172957, 6727602491, 1539158857, 2249612591, 7106958225, 5187085452, 1006550150, 9030327139, 2608467857]
    return [x[i] + y[i] for i in range(k)]
def digsub_ac841ac3(x):
    return [int(str(n)[:1] + ''.join(['8', '5', '9', '0', '7', '2', '4', '1', '6', '3'][int(p)] for p in str(n)[1:])) for n in x]
def sub_aabddf03(x):
    # encryption
    y = [3546388968, 9317227820, 3795592222, 5779573486, 2800405608, 8664851673, 2214579567, 881004685, 6514832053, 5244877987, 8722446141, 5462716790, 501423814, 5847268972, 5033793352, 7135023790, 1387274222, 6717387434, 1830038725, 5325322951, 8128353502, 823185116, 4791657505, 5231907248, 6298526501, 8287328850, 9189724153, 9441577414, 4382438978, 2744298337, 2722181481, 3937968542, 119164443, 9295481031, 5757930923, 5471214345]
    return [x[i] - y[i] for i in range(k)]
def chsub_e112aa83(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '7a2bf2ec7b77f44a16eae0f645b1a9ee45c4']
    return [x[i] - y[i] for i in range(k)]
def digsub_ddee790f(x):
    return [int(str(n)[:1] + ''.join(['4', '0', '3', '9', '7', '5', '1', '6', '2', '8'][int(p)] for p in str(n)[1:])) for n in x]
def chunk_fe7fd1c6(x):
    return x[14:] + x[:14]
def cadd_8fd791e9(x):
    return [x[i] + 7261973602 for i in range(k)]
def sub_46493b1b(x):
    # rekt
    y = [7429171963, 1619801317, 3127078889, 91201572, 6535213622, 2425862268, 172367794, 3052180049, 9940195410, 6952378469, 9531794682, 2546277039, 3899114725, 1451862928, 6478332435, 3471679239, 5751076800, 8525631663, 4249670850, 5872161760, 8705161043, 5015697552, 9147924535, 715964450, 5049073222, 5591935329, 445025533, 8210735827, 8039230969, 8191372816, 5445809770, 6094979301, 7216954282, 4416326978, 6682154025, 5563437646]
    return [x[i] - y[i] for i in range(k)]
def cadd_bf9e62c2(x):
    # just reverse it
    return [x[i] + 4457256720 for i in range(k)]
def digsub_ef724e8c(x):
    return [int(str(n)[:1] + ''.join(['9', '2', '7', '4', '3', '0', '1', '8', '5', '6'][int(p)] for p in str(n)[1:])) for n in x]
def digsub_5513d3dd(x):
    return [int(str(n)[:1] + ''.join(['2', '0', '1', '6', '9', '8', '3', '7', '5', '4'][int(p)] for p in str(n)[1:])) for n in x]
def deck_4f5e15c2(x):
    return x[:19] + x[22:26] + x[26:] + x[19:22]
def chsub_e01faa71(x):
    # encryption
    y = [ord(p) for p in '66cd9c4b8fd3b489c9a1e31b88e7989170a7']
    return [x[i] - y[i] for i in range(k)]
def add_331118ba(x):
    y = [8475508272, 4652598228, 9336562319, 8166740722, 9496140485, 7124901036, 7776462649, 9947879268, 3320736337, 2824228198, 2644475356, 1289285610, 864977936, 4503934667, 500630845, 6372742326, 4532543647, 9957287370, 2852758038, 1742174485, 4225458366, 171063389, 8596160381, 6041467392, 34677967, 2522166123, 1699747799, 1830785906, 4266762214, 7596400425, 2583737784, 5250003445, 3411175344, 5409729627, 5442754615, 4881240465]
    return [x[i] + y[i] for i in range(k)]
def digsub_81042cb1(x):
    # encryption
    return [int(str(n)[:1] + ''.join(['6', '3', '7', '1', '2', '5', '4', '8', '9', '0'][int(p)] for p in str(n)[1:])) for n in x]
def add_42869331(x):
    # lmaooo
    y = [5989346678, 5856544401, 9447818846, 1190600638, 580847887, 2851445176, 9673884145, 6630377905, 9309719972, 1514427342, 9905969003, 2607597602, 4017536205, 1445052957, 9058664779, 644229283, 4395048257, 4903503328, 9651909385, 36571003, 6025322626, 8033815580, 7992388924, 1176997774, 7605501464, 6358264585, 6066032520, 2629056799, 6142037893, 9041126860, 2956237266, 7103549278, 3067035558, 8626395415, 9773441804, 4865531549]
    return [x[i] + y[i] for i in range(k)]
def deck_7c93de02(x):
    # evil
    return x[22:] + x[:15] + x[15:17] + x[17:22]
def cadd_cab4819e(x):
    # encryption
    return [x[i] + 4182642654 for i in range(k)]
def cxor_eb72bf39(x):
    # the best
    return [x[i] ^ 455689503 for i in range(k)]
def chmul_221b0f47(x):
    # the best
    y = [ord(p) for p in '41b4824fe7df59da8301ce156b4d672d031f']
    return [x[i] * y[i] for i in range(k)]
def add_28d6777c(x):
    y = [2352863514, 6841135557, 6265904179, 8910102866, 5338270553, 2527341596, 8685663000, 6583425894, 8961515985, 2507071343, 6277263567, 1206150964, 4889993424, 1144129868, 4080351213, 3133431419, 575637354, 4658390259, 6363366359, 6843862090, 1211697922, 3170376035, 5602033805, 7774894540, 3794465737, 934762425, 4831820127, 5098562617, 1516912438, 8576295045, 1005836829, 6868255262, 260979060, 3767317535, 8147054711, 7169662860]
    return [x[i] + y[i] for i in range(k)]
def digsub_efd7a1ee(x):
    return [int(str(n)[:1] + ''.join(['2', '0', '9', '8', '7', '1', '6', '5', '3', '4'][int(p)] for p in str(n)[1:])) for n in x]
def xor_d5273bd6(x):
    y = [1836755027, 1566735350, 9364494508, 179660382, 5856778719, 6749877435, 8632381153, 7645030215, 928984917, 6093297695, 1616120868, 2527941990, 3268581043, 8914250811, 3913279292, 46237351, 3638051180, 4826722235, 9190992373, 3553171541, 4246935220, 8263997197, 3352652198, 1330747169, 3039464387, 8693999754, 9772940114, 6203113960, 9186772874, 3940614553, 4992087960, 7173728582, 6524927310, 1689500777, 8462742519, 3429648302]
    return [x[i] ^ y[i] for i in range(k)]
def sub_9de672fa(x):
    y = [319969847, 962469807, 7448847600, 3534515290, 3342160349, 9357470498, 8776452981, 3532652511, 3217382949, 6646073919, 1821114990, 3102940902, 78255234, 997350415, 9332931962, 5278715585, 5980615715, 8565985472, 4571515169, 7836030026, 9519159447, 3999837821, 2982218739, 3700192235, 3933659186, 7226163638, 239210836, 3375743584, 9819807440, 702183910, 8070675674, 4007895739, 7640879009, 3186380095, 3925872386, 291828778]
    return [x[i] - y[i] for i in range(k)]
def chunk_af869716(x):
    # mucho encrypto
    return x[23:] + x[:23]
def cxor_6476b200(x):
    # just reverse it
    return [x[i] ^ 6341020828 for i in range(k)]
def chmul_9cbb8a7f(x):
    y = [ord(p) for p in '5fda1748098f3a49721ee9202c6f70f2eade']
    return [x[i] * y[i] for i in range(k)]
def digsub_d5cf3761(x):
    return [int(str(n)[:1] + ''.join(['5', '7', '6', '8', '9', '2', '4', '0', '1', '3'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_a924ad8b(x):
    return [x[p] for p in [29, 16, 27, 28, 24, 6, 2, 35, 8, 20, 12, 1, 18, 14, 30, 25, 21, 5, 31, 32, 22, 13, 7, 19, 15, 9, 3, 33, 17, 0, 26, 10, 23, 11, 34, 4]]
def add_0ed21bd0(x):
    # just reverse it
    y = [7910527357, 1232080533, 6255898825, 5746080571, 9304004448, 3194321347, 964547597, 2375138931, 1713546103, 6661070236, 43311792, 6419641102, 5837915229, 8741106130, 7030712434, 6320384611, 6163443260, 3740256350, 1433368711, 1917872269, 2304285634, 8013539908, 3531219550, 8732299057, 8070378356, 7349002082, 5845040581, 7216363018, 4253774082, 1784823233, 365598900, 6407421134, 9940526374, 5407777176, 6083600709, 3755854442]
    return [x[i] + y[i] for i in range(k)]
def cadd_f288775d(x):
    return [x[i] + 9196567183 for i in range(k)]
def deck_353604b3(x):
    return x[34:] + x[3:27] + x[:3] + x[27:34]
def xor_fd001add(x):
    # mucho encrypto
    y = [2806868703, 5481887071, 8873894974, 6239500512, 4109719156, 827352801, 5297004155, 8425613988, 8049253474, 3816327133, 8121101391, 7255503613, 814552203, 3915498429, 3115305441, 6048838991, 2316080153, 3944148684, 6330001175, 8376160030, 1976084302, 1763413526, 64704486, 637709919, 5559754753, 8429628288, 1947137017, 3060431898, 8493214766, 7401037353, 23711868, 7086083535, 7398262152, 2375772204, 8814215599, 5895552102]
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_dec87fe1(x):
    return [x[p] for p in [4, 32, 30, 34, 17, 19, 27, 22, 16, 0, 12, 6, 11, 24, 25, 28, 18, 7, 31, 14, 5, 21, 15, 26, 29, 8, 2, 23, 10, 3, 13, 9, 20, 1, 35, 33]]
def chsub_83dc3951(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '68a5ed8b96a1bd0a1bc35b65cd0fc1d999b1']
    return [x[i] - y[i] for i in range(k)]
def digsub_9dafa980(x):
    return [int(str(n)[:1] + ''.join(['9', '2', '7', '6', '0', '4', '3', '8', '1', '5'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_43decbdf(x):
    return [x[p] for p in [22, 2, 33, 31, 26, 10, 18, 16, 30, 0, 7, 14, 23, 29, 28, 24, 34, 25, 1, 8, 20, 21, 11, 17, 4, 6, 9, 19, 13, 15, 32, 3, 5, 35, 27, 12]]
def shuffle_2d9fffb5(x):
    # shiet?
    return [x[p] for p in [19, 34, 25, 30, 5, 9, 21, 18, 11, 26, 8, 16, 7, 33, 3, 35, 4, 20, 10, 29, 22, 13, 12, 1, 15, 2, 6, 31, 14, 23, 24, 32, 17, 27, 0, 28]]
def chmul_07a19689(x):
    # so good
    y = [ord(p) for p in 'ae0f41b5209429cdc530e34a3377b077fa96']
    return [x[i] * y[i] for i in range(k)]
def sub_65dfc4a9(x):
    y = [9377672405, 1379218528, 7421096599, 4249567654, 529160448, 446235046, 2531058737, 2929762264, 5832625775, 6439485304, 8082900447, 7966994528, 8631003561, 1645789459, 9198972149, 2913659570, 2970140365, 6432940765, 1358400021, 1420385161, 2164010652, 7020361080, 610129094, 4724352983, 4714833432, 1529509597, 9625036982, 6942427829, 6319609886, 8884006678, 9398110420, 492251966, 9225322659, 1779645766, 5077003061, 5202546271]
    return [x[i] - y[i] for i in range(k)]
def chmul_bc8c721f(x):
    y = [ord(p) for p in 'deaf32c82910c4f899f734d7d1ec975d6a67']
    return [x[i] * y[i] for i in range(k)]
def deck_23ebfc27(x):
    # evil
    return x[:14] + x[14:18] + x[18:31] + x[31:]
def mul_384fbf08(x):
    y = [5, 5, 4, 3, 1, 2, 2, 4, 5, 1, 1, 2, 5, 5, 3, 2, 2, 4, 2, 4, 3, 3, 4, 4, 5, 1, 5, 1, 3, 4, 1, 4, 3, 2, 3, 1]
    return [x[i] * y[i] for i in range(k)]
def chadd_bbfef485(x):
    # the best
    y = [ord(p) for p in '14618ae8a9195ef2469fab9ea93dccd4d9e5']
    return [x[i] + y[i] for i in range(k)]
def cmul_cd1aad88(x):
    return [x[i] * 8 for i in range(k)]
def add_f11cd945(x):
    # rekt
    y = [3057646894, 3169443821, 3700186183, 908330162, 1991479684, 4549091447, 3961305412, 4263872365, 7877813963, 6752040633, 5273625642, 2716148835, 2416567450, 6136842276, 967777234, 7121113093, 3292684235, 4053408336, 9169609198, 2895053978, 3169023863, 3695734568, 7541562756, 5738933848, 5278132843, 6070509592, 5093630415, 2263785932, 2549777616, 1947203245, 3868619927, 315727161, 3583034692, 1973548168, 7315098453, 3081885695]
    return [x[i] + y[i] for i in range(k)]
def sub_61538669(x):
    y = [44234641, 3744621461, 7324387706, 9298699270, 9396160143, 9782773708, 4780789352, 840678283, 1258842682, 7314406828, 76747891, 1589458798, 8833781929, 5381779716, 735466292, 826028224, 5025123307, 6024385017, 4094646716, 1743526317, 3256475059, 5131681994, 169073085, 2726780691, 3845673514, 1137404748, 4162870507, 4996069863, 9871664910, 4111711876, 3825575546, 79745690, 6432027339, 3675188915, 582210673, 6122446986]
    return [x[i] - y[i] for i in range(k)]
def cxor_dd1d60a4(x):
    return [x[i] ^ 776777679 for i in range(k)]
def xor_3d551e50(x):
    y = [1871279001, 3062772128, 5045240335, 8643992928, 9695615278, 204504307, 9366972621, 103379820, 5450288731, 6649387289, 8401742283, 963983680, 88501220, 5026223681, 4590513856, 1050802682, 2120852888, 3012955196, 4219507860, 4930631650, 7520370786, 8933043804, 9651164947, 2097758292, 5572546817, 4410878890, 5558613693, 279469093, 3198579527, 3007603188, 932125122, 7281028499, 2390348851, 5465225101, 3761343661, 4061053681]
    return [x[i] ^ y[i] for i in range(k)]
def cmul_60deac9a(x):
    # the flag is flag{jk}
    return [x[i] * 8 for i in range(k)]
def chadd_2da7db06(x):
    # lmaooo
    y = [ord(p) for p in '0d314f59796070733e35f11ddbae0c50258b']
    return [x[i] + y[i] for i in range(k)]
def chunk_39378691(x):
    # evil
    return x[32:] + x[:32]
def mul_4bf9810d(x):
    # encryption
    y = [1, 7, 4, 7, 4, 7, 9, 2, 7, 7, 8, 1, 9, 4, 8, 8, 5, 9, 2, 8, 4, 1, 9, 4, 2, 3, 1, 4, 5, 7, 3, 9, 5, 8, 7, 9]
    return [x[i] * y[i] for i in range(k)]
def mul_d63192f4(x):
    y = [4, 3, 7, 1, 2, 6, 8, 6, 1, 8, 8, 8, 5, 3, 5, 2, 4, 5, 5, 2, 1, 4, 7, 8, 8, 6, 1, 1, 7, 3, 6, 4, 5, 4, 8, 8]
    return [x[i] * y[i] for i in range(k)]
def cxor_eaaa00cc(x):
    # the flag is flag{jk}
    return [x[i] ^ 5055317797 for i in range(k)]
def csub_9856c97f(x):
    return [x[i] - 8887937851 for i in range(k)]
def deck_d9030129(x):
    return x[29:] + x[:1] + x[1:27] + x[27:29]
def sub_0d81146a(x):
    # just reverse it
    y = [741335336, 1370779971, 3427281407, 5598008536, 3283302207, 7233099735, 4024141980, 5635417371, 4996418057, 1042201440, 3124544696, 5561358758, 2837694600, 1497054618, 7699689124, 9265315712, 9122718008, 6263025465, 4817279387, 4207517789, 4549349605, 2591017121, 9416425603, 7849563487, 8645530481, 9724237796, 555525837, 8532735082, 7917023766, 1654846474, 3364967280, 8025546506, 7269780684, 8481975423, 1349014319, 6003827085]
    return [x[i] - y[i] for i in range(k)]
def chadd_8d7aa344(x):
    # the flag is flag{jk}
    y = [ord(p) for p in 'f467da35a7ff8fe4c202a58a4479a6c4a499']
    return [x[i] + y[i] for i in range(k)]
def mul_bb31d66d(x):
    # evil
    y = [3, 2, 3, 9, 9, 7, 10, 9, 5, 2, 9, 3, 4, 4, 8, 5, 2, 1, 5, 6, 4, 9, 3, 4, 5, 2, 5, 7, 1, 4, 10, 4, 4, 1, 8, 5]
    return [x[i] * y[i] for i in range(k)]
def cadd_2bb5025e(x):
    # so good
    return [x[i] + 9062656947 for i in range(k)]
def chsub_4c1e3f38(x):
    y = [ord(p) for p in 'f70b11fca6e8a529ae03b36da5e3079fb4f9']
    return [x[i] - y[i] for i in range(k)]
def cmul_2f1c4ba6(x):
    # evil
    return [x[i] * 4 for i in range(k)]
def digsub_211a2fee(x):
    # lel
    return [int(str(n)[:1] + ''.join(['7', '8', '6', '2', '5', '9', '0', '1', '3', '4'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_880f9e67(x):
    # kek
    return [x[i] * 7 for i in range(k)]
def cxor_73c5cfae(x):
    # kek
    return [x[i] ^ 6739649518 for i in range(k)]
def digsub_ff82e274(x):
    return [int(str(n)[:1] + ''.join(['9', '2', '5', '8', '6', '7', '1', '4', '0', '3'][int(p)] for p in str(n)[1:])) for n in x]
def xor_813cf8a0(x):
    # the flag is flag{jk}
    y = [651005250, 1724403070, 2352669140, 2969257262, 3964439965, 373464240, 4031608711, 9874833902, 3502226451, 6693544641, 16139420, 1516888395, 5290495668, 504142373, 7559039623, 2631652111, 3976704796, 4615959566, 1576142799, 7789283512, 4174846470, 2168564334, 9404422880, 5910818711, 1783082591, 5395465792, 3062745285, 8319206405, 3836280231, 3660579365, 4778917570, 1347437036, 2429821052, 1450400280, 5062070835, 4844941393]
    return [x[i] ^ y[i] for i in range(k)]
def add_6056a4c7(x):
    y = [6318312655, 8919575931, 9574896935, 3732680312, 6535140880, 4941408689, 9600276808, 4892877928, 3242475026, 2011317699, 533201969, 2409277900, 550894976, 7009845769, 8726380154, 859217920, 3077232323, 108017334, 4300638072, 1394203562, 3521279842, 8049668686, 8529087379, 3744493398, 7007186288, 1612955851, 4947770346, 1592896713, 2305800446, 3595643698, 672346645, 9732652492, 3878831758, 4668730509, 3124076686, 9601812366]
    return [x[i] + y[i] for i in range(k)]
def digsub_0c60c240(x):
    return [int(str(n)[:1] + ''.join(['2', '8', '6', '3', '7', '5', '0', '9', '4', '1'][int(p)] for p in str(n)[1:])) for n in x]
def cxor_31cd7c00(x):
    return [x[i] ^ 2754282165 for i in range(k)]
def chunk_b0f88afb(x):
    # just reverse it
    return x[16:] + x[:16]
def csub_d3a63092(x):
    # mucho encrypto
    return [x[i] - 6345863283 for i in range(k)]
def cadd_69879170(x):
    # lel
    return [x[i] + 6197367988 for i in range(k)]
def digsub_0eb180b8(x):
    return [int(str(n)[:1] + ''.join(['3', '5', '9', '8', '0', '4', '7', '6', '2', '1'][int(p)] for p in str(n)[1:])) for n in x]
def sub_b28bd4f8(x):
    y = [5662474510, 6915740866, 3558827794, 3956302706, 2369111973, 3782842025, 9601483537, 8760152664, 9191746800, 9151524022, 81385138, 948055765, 8055670240, 6598024200, 4044957385, 8461212749, 3704036137, 6372373132, 6177085597, 9272644626, 9916859566, 4702334441, 7944023200, 3361550293, 4476856910, 6490536642, 3387808692, 7706632674, 8952716336, 9464906073, 7063089586, 210006871, 9480205557, 4728588324, 692202672, 664127612]
    return [x[i] - y[i] for i in range(k)]
def sub_d625c555(x):
    y = [7285960629, 9060803881, 7253633495, 42327976, 8093362973, 4591414435, 4246136182, 8934409576, 3928656102, 2024670706, 4612714974, 9513539619, 5763621631, 7443141667, 9323406814, 3179740275, 3306622374, 7278091381, 1242915693, 8829882517, 427895011, 8409361147, 8116883775, 2485691609, 8971473385, 8600857213, 2860872232, 6269121275, 4574980207, 6731067949, 1513787159, 1454131269, 3446160421, 1661328766, 3521009877, 2687480985]
    return [x[i] - y[i] for i in range(k)]
def digsub_15856403(x):
    return [int(str(n)[:1] + ''.join(['6', '0', '8', '1', '9', '7', '3', '2', '4', '5'][int(p)] for p in str(n)[1:])) for n in x]
def mul_87b720f5(x):
    # evil
    y = [3, 4, 2, 9, 3, 9, 3, 7, 8, 6, 8, 8, 6, 8, 9, 6, 8, 9, 6, 9, 6, 7, 4, 5, 8, 3, 2, 2, 9, 5, 1, 1, 5, 8, 9, 3]
    return [x[i] * y[i] for i in range(k)]
def shuffle_181172b7(x):
    return [x[p] for p in [24, 30, 23, 28, 11, 14, 6, 31, 20, 29, 0, 2, 18, 35, 7, 3, 22, 34, 8, 15, 5, 16, 19, 17, 33, 1, 25, 26, 12, 21, 27, 4, 13, 10, 32, 9]]
def chadd_e3d96ba4(x):
    y = [ord(p) for p in '6d60d8b7d92d77e796c87e002e710a4c348c']
    return [x[i] + y[i] for i in range(k)]
def chunk_f554e6ab(x):
    return x[6:] + x[:6]
def mul_68b3556d(x):
    y = [2, 3, 3, 2, 4, 3, 4, 1, 5, 2, 1, 6, 5, 2, 1, 3, 1, 6, 3, 3, 2, 3, 4, 6, 1, 3, 6, 1, 4, 1, 5, 3, 4, 6, 6, 1]
    return [x[i] * y[i] for i in range(k)]
def mul_8876595f(x):
    y = [3, 7, 3, 5, 5, 1, 7, 2, 8, 7, 7, 1, 7, 8, 6, 7, 3, 8, 1, 8, 6, 6, 1, 8, 4, 6, 8, 2, 1, 5, 8, 5, 6, 5, 2, 2]
    return [x[i] * y[i] for i in range(k)]
def chadd_12bc44e9(x):
    y = [ord(p) for p in '8888fc5837eea2316a3b9afc5b44e3fdc714']
    return [x[i] + y[i] for i in range(k)]
def mul_df940fbe(x):
    # so good
    y = [4, 5, 7, 4, 2, 1, 6, 5, 7, 5, 4, 2, 2, 7, 8, 8, 4, 2, 6, 1, 6, 4, 6, 3, 6, 8, 8, 7, 1, 5, 2, 1, 5, 1, 3, 3]
    return [x[i] * y[i] for i in range(k)]
def chxor_4909f0be(x):
    y = [ord(p) for p in '27774cf6bdfefa6157571f47cb5efd2b9f93']
    return [x[i] ^ y[i] for i in range(k)]
def csub_26fceede(x):
    # the best
    return [x[i] - 6309108200 for i in range(k)]
def add_f582d81c(x):
    # lel
    y = [8997825932, 8792814814, 3595036656, 4316963822, 8079560975, 4195789299, 6545285497, 3878939340, 4827866772, 1679247008, 7309752337, 1996884101, 1917656543, 6177464154, 191213613, 7994306082, 9055576115, 6684643174, 3608540240, 4347716508, 1854366906, 9399334854, 9647971217, 2574918622, 1014237167, 7384099648, 6304043938, 8869868195, 7138951334, 7728612067, 9917706910, 8895760286, 9472104566, 7561863019, 4165651885, 794216496]
    return [x[i] + y[i] for i in range(k)]
def digsub_bcb409f7(x):
    # mucho encrypto
    return [int(str(n)[:1] + ''.join(['2', '0', '4', '5', '7', '8', '3', '9', '6', '1'][int(p)] for p in str(n)[1:])) for n in x]
def deck_8f4b1dba(x):
    # the flag is flag{jk}
    return x[6:34] + x[34:] + x[4:6] + x[:4]
def chunk_45c7c0f6(x):
    return x[7:] + x[:7]
def chadd_5fc42fbd(x):
    # evil
    y = [ord(p) for p in '77375b321de5c6be48d3632ac126cb209356']
    return [x[i] + y[i] for i in range(k)]
def cadd_b51d3eba(x):
    return [x[i] + 3624064621 for i in range(k)]
def chunk_cb2fa615(x):
    # rekt
    return x[1:] + x[:1]
def add_99300f40(x):
    # lmaooo
    y = [5037814112, 61794266, 4276753716, 1802607400, 6625848073, 9294215734, 9743384644, 131058494, 4409324460, 5932866610, 8318383350, 7717561234, 8868142475, 850002746, 40072288, 8427462798, 8074149582, 9748852032, 2657462887, 7516421435, 8577983158, 8500004646, 8450393230, 7041217533, 6572817510, 9419469289, 6798756591, 6075665881, 7170485702, 1449127778, 3842378259, 9528037534, 5420012913, 2524378068, 7745773961, 8223477058]
    return [x[i] + y[i] for i in range(k)]
def chxor_822180c4(x):
    # encryption
    y = [ord(p) for p in '574b44ce3d59c80ec88c52a1015982559f35']
    return [x[i] ^ y[i] for i in range(k)]
def deck_9e3f9f6f(x):
    # lel
    return x[2:13] + x[27:] + x[:2] + x[13:27]
def shuffle_29c93f75(x):
    # mucho encrypto
    return [x[p] for p in [3, 23, 20, 32, 26, 0, 11, 17, 30, 14, 2, 5, 31, 8, 21, 1, 19, 6, 16, 9, 13, 15, 24, 7, 35, 28, 12, 10, 18, 33, 22, 29, 27, 25, 4, 34]]
def xor_e9fd82b3(x):
    y = [2517743615, 5228961489, 4064282176, 9370394477, 5987945501, 5385736088, 4439833614, 5098674449, 2190335250, 7725632501, 2795192955, 1630940780, 8155240641, 6119883348, 563894695, 2954091458, 7254323639, 5775664997, 1497206494, 8020836547, 7729658872, 6359402238, 6640023615, 5551261698, 7405004987, 7183949356, 3940237784, 825106600, 1125618991, 4170947629, 7086466415, 4527804953, 2768892749, 9749008236, 3366895830, 4357212687]
    return [x[i] ^ y[i] for i in range(k)]
def mul_1b781211(x):
    y = [2, 6, 1, 6, 1, 1, 4, 3, 1, 4, 1, 4, 6, 4, 3, 3, 1, 6, 2, 3, 6, 3, 6, 1, 3, 5, 3, 1, 4, 5, 2, 2, 2, 5, 6, 1]
    return [x[i] * y[i] for i in range(k)]
def sub_023318b3(x):
    y = [2506458000, 5231764474, 1510960519, 6478997475, 9294747072, 7200023596, 6097782122, 6046467352, 4691839661, 4285426167, 9469895864, 464338716, 6481697707, 835005809, 6873494820, 4555401761, 5189744672, 2980678069, 621528034, 4093875934, 7103874407, 1273563203, 6741292399, 5810751466, 8663148180, 8054720510, 660000035, 7471927932, 130070119, 4520163319, 4015993947, 4532039818, 1249797298, 482190419, 834757750, 9655345961]
    return [x[i] - y[i] for i in range(k)]
def xor_10552f50(x):
    y = [8131086237, 8762658276, 2503594545, 3504207764, 4447262269, 1385453976, 5907042804, 6507645247, 1048289161, 9085107216, 130252566, 1018348559, 2476456593, 8252395749, 4916932738, 4388177869, 1628055301, 7688226638, 3292898638, 2095380807, 5400428608, 5245639031, 2770745450, 183416865, 5025367584, 9841604627, 2973783809, 7704521290, 599525013, 4605602498, 7322579405, 7049933920, 2208661117, 8626618991, 5103200043, 5840931061]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_1f5faa54(x):
    # lmaooo
    y = [ord(p) for p in 'b0acb90294d6dd9bb7e80008772fc17c7dc0']
    return [x[i] * y[i] for i in range(k)]
def digsub_9b074471(x):
    return [int(str(n)[:1] + ''.join(['4', '7', '9', '6', '8', '3', '2', '5', '0', '1'][int(p)] for p in str(n)[1:])) for n in x]
def chsub_c0922438(x):
    # just reverse it
    y = [ord(p) for p in 'f24b06ff8127d94527c02b5c10b3d045d3ca']
    return [x[i] - y[i] for i in range(k)]
def chxor_b1f5dc0d(x):
    # kek
    y = [ord(p) for p in '5ec2a985e7b79098e7865ee5c1f2f2af1beb']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_ec9b15d1(x):
    # so good
    return [x[p] for p in [31, 13, 24, 26, 0, 25, 23, 29, 35, 1, 30, 4, 21, 11, 17, 3, 27, 9, 22, 10, 18, 34, 19, 8, 14, 28, 12, 6, 33, 32, 7, 5, 2, 16, 15, 20]]
def xor_fa921805(x):
    # shiet?
    y = [9912006968, 5710858086, 8028554517, 8422875601, 7846000010, 1258895821, 5430687303, 4025672247, 9946866728, 9646080530, 4365008389, 8827952075, 4299880612, 5853050933, 6212983676, 4680680933, 7659212619, 1639589647, 8169021287, 9670512063, 9336825887, 2348989988, 8743703403, 5782247222, 2335030814, 5427471215, 4855554563, 6445418856, 9664736554, 705573942, 8031746244, 2955834208, 6150972315, 5914382377, 2316700634, 7080716767]
    return [x[i] ^ y[i] for i in range(k)]
def csub_7ef295f1(x):
    # lel
    return [x[i] - 7969227101 for i in range(k)]
def add_30966eb1(x):
    # shiet?
    y = [6723937206, 4739974360, 3816833475, 3588528329, 1100631610, 8514672082, 997070361, 4035603003, 9239047192, 5669101954, 6587378947, 3007527709, 3017132068, 3391657809, 496262866, 8497876551, 1538346947, 5845271224, 76132650, 988533808, 3707755845, 9424138629, 3226823887, 5435366163, 7462382785, 5604956860, 6033800413, 7327911534, 9139816003, 2399188296, 7384822676, 8125897201, 843597385, 3171541797, 5058104481, 2312449123]
    return [x[i] + y[i] for i in range(k)]
def sub_f31829a3(x):
    y = [3677895193, 4001389218, 5569533058, 227886726, 5411230222, 4055593989, 238933560, 2988834277, 9453224823, 326571355, 302124620, 4363330302, 7266607285, 5890534264, 7224814539, 3822063163, 8520388433, 713105117, 3783635810, 7464868997, 189038583, 2075462164, 9309213581, 7088595128, 2568118765, 2972909966, 535362072, 8278162652, 2289134658, 8308283067, 8303388565, 4597298919, 4384850181, 906202533, 1402360069, 7586554440]
    return [x[i] - y[i] for i in range(k)]
def sub_dfeebbc3(x):
    y = [160871998, 5240654079, 4317644460, 6733000504, 8436910165, 6114474585, 7004153189, 446659518, 8562643057, 9107529525, 9795952880, 4265935002, 3962043852, 2581178415, 7813700189, 1449426239, 3941829061, 1517192536, 9436647125, 1440946603, 6468876056, 6233312013, 3996731187, 5358626990, 455821146, 97751459, 9404775616, 5690937911, 7623009859, 9824948511, 8348474364, 2134430573, 4302640628, 5170149932, 9993372737, 4388982523]
    return [x[i] - y[i] for i in range(k)]
def chmul_fb4d75c9(x):
    y = [ord(p) for p in 'd812312fbbea45c4ddbfd8b73c04e8deb6c9']
    return [x[i] * y[i] for i in range(k)]
def xor_ed479080(x):
    y = [4464717378, 6989918992, 9526391336, 7130156137, 5741807068, 4881822561, 4128856796, 7463707396, 4982255707, 3873382136, 3667160812, 5868332339, 7320552881, 4035398130, 7454266523, 3730665305, 4355205386, 840893452, 5598283694, 4112835228, 4057577493, 618338605, 9736959859, 1585769127, 2070714878, 4285070589, 7006033959, 4275873361, 7419030316, 4796000087, 4019360286, 6431425116, 3214075882, 3523436115, 5809608201, 4673685815]
    return [x[i] ^ y[i] for i in range(k)]
def chadd_620d941e(x):
    # rekt
    y = [ord(p) for p in '27ed937badf4f53656e7bf9596346e194603']
    return [x[i] + y[i] for i in range(k)]
def cxor_4d3c5896(x):
    return [x[i] ^ 5357275865 for i in range(k)]
def chsub_a0999ab2(x):
    # kek
    y = [ord(p) for p in '7b9fd6f220c80bc27725b81dd3df33fb3673']
    return [x[i] - y[i] for i in range(k)]
def digsub_93fe4930(x):
    # rekt
    return [int(str(n)[:1] + ''.join(['9', '2', '3', '7', '6', '4', '8', '5', '1', '0'][int(p)] for p in str(n)[1:])) for n in x]
def deck_16741300(x):
    return x[14:16] + x[16:25] + x[:14] + x[25:]
def cmul_028527b6(x):
    # the best
    return [x[i] * 5 for i in range(k)]
def chadd_8cbc6e8c(x):
    y = [ord(p) for p in 'b340c7e8a40d050fd61d2d475cb81ab28076']
    return [x[i] + y[i] for i in range(k)]
def csub_8477e013(x):
    return [x[i] - 4864022410 for i in range(k)]
def chmul_443266b3(x):
    # evil
    y = [ord(p) for p in 'd0c911ff0468d1f699a6e4a9c8e82fc88911']
    return [x[i] * y[i] for i in range(k)]
def shuffle_7bf7a2c9(x):
    return [x[p] for p in [13, 7, 0, 17, 30, 5, 21, 16, 24, 2, 8, 15, 6, 1, 33, 35, 25, 10, 28, 27, 32, 34, 29, 12, 26, 20, 23, 9, 22, 19, 18, 14, 31, 3, 11, 4]]
def cmul_c288fd59(x):
    return [x[i] * 6 for i in range(k)]
def csub_462e63d8(x):
    # shiet?
    return [x[i] - 5055039591 for i in range(k)]
def sub_a30eb08d(x):
    # encryption
    y = [1780658592, 8853539533, 5573739744, 3113448449, 551288938, 1342479767, 3145400116, 8396133303, 7733671399, 5601299450, 9106096836, 8315367901, 5858679600, 2570691870, 9122611257, 517038062, 6171578450, 8959047036, 7513151228, 6393658667, 7939119573, 9873263551, 7369689242, 2934313653, 6466366561, 623068277, 2418868008, 2870913224, 3048085518, 4571027169, 5945558026, 5748620384, 2284723303, 7948512060, 9829422232, 5919256647]
    return [x[i] - y[i] for i in range(k)]
def cmul_c9f41697(x):
    # encryption
    return [x[i] * 10 for i in range(k)]
def mul_f5f13d24(x):
    # kek
    y = [3, 5, 2, 6, 1, 2, 2, 5, 5, 5, 3, 2, 4, 3, 5, 6, 4, 4, 4, 2, 1, 4, 2, 3, 3, 5, 3, 1, 6, 2, 6, 1, 4, 3, 3, 4]
    return [x[i] * y[i] for i in range(k)]
def mul_d9dbdb53(x):
    y = [2, 5, 1, 2, 1, 2, 5, 4, 3, 3, 2, 5, 1, 5, 1, 2, 3, 5, 5, 4, 2, 2, 4, 3, 5, 4, 3, 2, 1, 3, 3, 5, 3, 5, 5, 3]
    return [x[i] * y[i] for i in range(k)]
def chmul_04649cec(x):
    # evil
    y = [ord(p) for p in '9ab6e8b62d3ac1ec1bc6b09f9f3ba3836b3f']
    return [x[i] * y[i] for i in range(k)]
def cxor_77ffb5fc(x):
    return [x[i] ^ 2365459437 for i in range(k)]
def digsub_2c3da0c6(x):
    # so good
    return [int(str(n)[:1] + ''.join(['0', '6', '8', '4', '5', '2', '1', '9', '3', '7'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_26b6373e(x):
    # kek
    y = [ord(p) for p in '8378acded862d22a37eeb749c1787160a4f2']
    return [x[i] * y[i] for i in range(k)]
def cmul_280315b7(x):
    # the flag is flag{jk}
    return [x[i] * 10 for i in range(k)]
def chadd_771a5f93(x):
    y = [ord(p) for p in '74297543a04697da3923d490d3e622e9362d']
    return [x[i] + y[i] for i in range(k)]
def xor_2b6a5232(x):
    # just reverse it
    y = [4253529828, 177673599, 4655161019, 2383239016, 9921954537, 6476092750, 7904331310, 2320551898, 8987640174, 9763143799, 4174756895, 9111659015, 8912822681, 8489618807, 5441204852, 2223743985, 8773426809, 7492810355, 4004520288, 2192731937, 8291126702, 6191881980, 7681089987, 5898732298, 5246362920, 1836591178, 5032834773, 5316018441, 3873363689, 5904457916, 5626963521, 5177093179, 9214908654, 5656576126, 8994331981, 6854237648]
    return [x[i] ^ y[i] for i in range(k)]
def add_ef37b006(x):
    y = [5038426074, 8627599560, 7642996762, 4966640728, 9170476793, 2271143943, 3270003474, 6648805289, 3716559986, 4595232528, 1338066494, 2519075504, 8153541666, 974817322, 8581316977, 8191222823, 7821657055, 7332852483, 586896069, 258270886, 6202964069, 2914133217, 8309266594, 3984440974, 9490483428, 5624697537, 210603361, 4985306935, 8385183225, 4713746024, 9151506809, 3630478934, 4355780703, 4172992615, 5897801034, 5950072786]
    return [x[i] + y[i] for i in range(k)]
def deck_bf0c25e8(x):
    # evil
    return x[32:] + x[20:32] + x[1:20] + x[:1]
def csub_74a6e474(x):
    return [x[i] - 2050077737 for i in range(k)]
def add_3d1c6187(x):
    # shiet?
    y = [5585545607, 3024254161, 510487242, 2934759368, 858534189, 5294850410, 7338948890, 2876576329, 5173183697, 5246078400, 9833141118, 5217282338, 9071939178, 1849550359, 3080504554, 1647664514, 3980519182, 4753660037, 9988770979, 5431962780, 7416377386, 4063871347, 7709767464, 3921177978, 5384246555, 3043349215, 1228738242, 1174235511, 4710370656, 2990798144, 3705140611, 5308478432, 142920237, 1007039906, 5084177383, 5804596219]
    return [x[i] + y[i] for i in range(k)]
def csub_69098245(x):
    # just reverse it
    return [x[i] - 224476078 for i in range(k)]
def digsub_15140dd6(x):
    # shiet?
    return [int(str(n)[:1] + ''.join(['3', '0', '6', '9', '2', '4', '7', '5', '1', '8'][int(p)] for p in str(n)[1:])) for n in x]
def deck_92d1894b(x):
    return x[16:26] + x[29:] + x[26:29] + x[:16]
def mul_bf01fdb9(x):
    # the best
    y = [2, 2, 4, 5, 2, 3, 1, 2, 4, 5, 4, 2, 4, 5, 5, 2, 3, 5, 3, 5, 5, 3, 2, 3, 2, 2, 4, 4, 4, 3, 4, 3, 4, 2, 1, 3]
    return [x[i] * y[i] for i in range(k)]
def shuffle_d348541e(x):
    # the best
    return [x[p] for p in [34, 22, 16, 15, 7, 11, 32, 31, 25, 14, 26, 13, 17, 18, 3, 6, 29, 8, 33, 4, 10, 23, 19, 28, 1, 9, 30, 12, 20, 35, 27, 21, 0, 24, 5, 2]]
def shuffle_10c94be6(x):
    # rekt
    return [x[p] for p in [8, 10, 18, 6, 4, 28, 34, 9, 22, 21, 0, 11, 2, 31, 20, 16, 25, 24, 29, 32, 7, 30, 3, 17, 26, 33, 23, 15, 27, 13, 35, 19, 14, 1, 12, 5]]
def csub_180399b3(x):
    # the flag is flag{jk}
    return [x[i] - 4670437317 for i in range(k)]
def cmul_aa40ede5(x):
    return [x[i] * 9 for i in range(k)]
def chxor_e2e70239(x):
    # rekt
    y = [ord(p) for p in '211e79260680851bf313bd42e172a5a39e58']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_987d4b79(x):
    # lel
    return x[15:] + x[:15]
def cadd_c66b787a(x):
    # just reverse it
    return [x[i] + 435243529 for i in range(k)]
def chsub_3679cdb7(x):
    y = [ord(p) for p in '38f437bdd2d2d6eb2ca6c79459c2cf2cd3d0']
    return [x[i] - y[i] for i in range(k)]
def xor_7bdefd5e(x):
    # the best
    y = [9060730208, 2894463919, 153755298, 112462673, 3859555698, 9601668594, 4171688207, 8787515097, 8141897416, 9518156165, 239463226, 5353787843, 7137474532, 7297476938, 1962602837, 2547005460, 3220580460, 7922506826, 9123054647, 8879428047, 8154434560, 8038444524, 6735925276, 9539324950, 6936718088, 694558613, 2770949018, 9480717569, 6339027014, 7838772917, 4289950806, 6285488738, 6682905991, 1806527793, 4381445034, 2316365085]
    return [x[i] ^ y[i] for i in range(k)]
def cadd_7e9514cb(x):
    return [x[i] + 7100428339 for i in range(k)]
def cadd_d6acbbb6(x):
    return [x[i] + 321839052 for i in range(k)]
def sub_f0758554(x):
    y = [9527193884, 6473424425, 1323917963, 6695125045, 1381793161, 3810940777, 8771936728, 6648761607, 3188588225, 1013037479, 3104593713, 1765257832, 5365527257, 733084114, 3556008801, 8821987656, 55332829, 5241601078, 1737860707, 4232952784, 1616384702, 9535384980, 5753621587, 210536993, 42892335, 6247304963, 2526586913, 7890989522, 1158389766, 7077091396, 8424259696, 3586062963, 653722600, 1773051505, 3356710774, 6619438602]
    return [x[i] - y[i] for i in range(k)]
def chsub_29874234(x):
    y = [ord(p) for p in '8a44247e1e634c7897fbf6a0f27a84816882']
    return [x[i] - y[i] for i in range(k)]
def digsub_46ad768c(x):
    # so good
    return [int(str(n)[:1] + ''.join(['6', '0', '9', '8', '7', '2', '3', '5', '1', '4'][int(p)] for p in str(n)[1:])) for n in x]
def add_9a1634ef(x):
    y = [6827143684, 282457070, 8287910873, 2596922890, 2130459503, 8388784693, 1195406546, 1443345149, 459822549, 7303280266, 4657524491, 8984690892, 5045211905, 506959238, 7493333639, 6230648867, 6608393961, 1257915851, 8618247997, 9799956050, 9208885824, 4996084723, 4363895823, 3200860939, 4703234393, 6411127414, 4884088735, 4642458404, 9119120105, 3039679141, 6084044869, 9340007128, 3458533532, 5386131388, 1978241213, 778772623]
    return [x[i] + y[i] for i in range(k)]
def chxor_db678917(x):
    y = [ord(p) for p in 'be8763c06b439c7a53e1698972d646ad1611']
    return [x[i] ^ y[i] for i in range(k)]
def csub_d6e694b3(x):
    # shiet?
    return [x[i] - 7139906685 for i in range(k)]
def deck_9943568b(x):
    # mucho encrypto
    return x[1:2] + x[2:27] + x[27:] + x[:1]
def chxor_cab624ba(x):
    # lel
    y = [ord(p) for p in 'bba034b0e9507dbf80d0a146e7cbb3db147a']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_93747557(x):
    # shiet?
    return [x[i] + 4997427810 for i in range(k)]
def cmul_fcb8d29b(x):
    # kek
    return [x[i] * 5 for i in range(k)]
def chadd_8f394b29(x):
    # evil
    y = [ord(p) for p in '2f78ef48aabb64a04b2d0529b00e5abc62bd']
    return [x[i] + y[i] for i in range(k)]
def chxor_4ec23f54(x):
    y = [ord(p) for p in '5f5200078473920653692f348e20682a4346']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_a1104840(x):
    y = [ord(p) for p in 'd0e738abc35ba61dad2fd0525d049272efd4']
    return [x[i] ^ y[i] for i in range(k)]
def xor_23eae5a3(x):
    # shiet?
    y = [7756688284, 7236608982, 3513216343, 4868807162, 9356313673, 7496413136, 7799133936, 9796606357, 5594671243, 9736938510, 8535079402, 6063265733, 712909254, 339596763, 3396847906, 2911536386, 4056259463, 7412659401, 5594792511, 1953683566, 1759252709, 2944576170, 2644327870, 4307239444, 8650724297, 8185766929, 6280095533, 1225021672, 7514501152, 4376498595, 3644985461, 7255891512, 1198428769, 5352163082, 5732180124, 2318208419]
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_9b38f08f(x):
    # rekt
    return [x[p] for p in [10, 8, 16, 4, 32, 14, 12, 30, 21, 2, 0, 15, 35, 25, 23, 28, 22, 34, 7, 27, 11, 26, 20, 1, 17, 33, 19, 3, 18, 6, 29, 13, 5, 9, 31, 24]]
def cxor_2e302e67(x):
    return [x[i] ^ 560724336 for i in range(k)]
def chxor_27993531(x):
    y = [ord(p) for p in '5a8568a3559dfe9690cc2d03f51d933b2d63']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_6976fe3d(x):
    return [x[i] ^ 158324056 for i in range(k)]
def chxor_26ed8369(x):
    y = [ord(p) for p in '9f7cf66f2e4a67ec31500b617df7d3bfd63e']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_255a694d(x):
    # shiet?
    return [x[i] ^ 1546070486 for i in range(k)]
def sub_ef03b32c(x):
    # lel
    y = [3511816735, 9216613475, 9983037664, 8609293084, 3059107629, 3111248127, 8994513044, 4045618888, 5686144882, 9329961306, 1112904305, 4327710231, 9237312147, 9025062183, 8621380484, 6891644059, 8620100915, 9273796324, 4507951720, 5104749125, 4196198813, 1090406602, 6973977352, 8862706106, 6733524493, 1225817298, 8044189686, 3273201082, 7296070756, 2766188452, 6171920287, 1397804316, 5174836964, 9923886975, 2620538949, 1870507116]
    return [x[i] - y[i] for i in range(k)]
def chadd_ff6b9cf5(x):
    # so good
    y = [ord(p) for p in '4f68ad7889ca1445a1c0236e4bc866fc3fe1']
    return [x[i] + y[i] for i in range(k)]
def csub_8a92b818(x):
    return [x[i] - 6036591938 for i in range(k)]
def csub_20a984f0(x):
    return [x[i] - 5577840610 for i in range(k)]
def deck_cff5258e(x):
    # just reverse it
    return x[10:13] + x[7:10] + x[13:] + x[:7]
def cxor_37cf37e1(x):
    # the flag is flag{jk}
    return [x[i] ^ 6411043275 for i in range(k)]
def mul_389dee3d(x):
    y = [1, 4, 4, 1, 5, 5, 3, 5, 4, 3, 5, 1, 5, 4, 4, 5, 2, 5, 5, 3, 5, 3, 4, 4, 1, 1, 4, 4, 2, 3, 4, 2, 3, 3, 4, 4]
    return [x[i] * y[i] for i in range(k)]
def cxor_9bc88b76(x):
    # so good
    return [x[i] ^ 2623284194 for i in range(k)]
def cadd_ecff1ada(x):
    # kek
    return [x[i] + 8055812909 for i in range(k)]
def cxor_9a959665(x):
    return [x[i] ^ 5889933957 for i in range(k)]
def chsub_d07297d3(x):
    # encryption
    y = [ord(p) for p in '3500b836ca206c3c90110dcb2177859046b2']
    return [x[i] - y[i] for i in range(k)]
def cmul_82b0086b(x):
    return [x[i] * 7 for i in range(k)]
def cxor_ef4e4e70(x):
    return [x[i] ^ 3073396661 for i in range(k)]
def csub_35e65bc6(x):
    # kek
    return [x[i] - 6848313681 for i in range(k)]
def cmul_dc2b00da(x):
    return [x[i] * 8 for i in range(k)]
def add_00eb45a8(x):
    y = [9206978530, 672020707, 967026775, 7365518928, 4713583438, 6467188017, 5880485291, 4536460177, 5751273414, 2179817069, 8475461416, 9054633787, 7500851610, 6940105820, 556945371, 6532781654, 5156039775, 1518611856, 4081891596, 6578999967, 7264312330, 6022185137, 9660349974, 7147783249, 3427206088, 8770881468, 3477457691, 9918496808, 1889182816, 2888426731, 7309195322, 1719049603, 4850092515, 6041435345, 4465705195, 7983605571]
    return [x[i] + y[i] for i in range(k)]
def shuffle_28f1a858(x):
    return [x[p] for p in [35, 22, 17, 8, 12, 5, 28, 6, 29, 9, 27, 3, 1, 25, 19, 14, 30, 31, 32, 10, 2, 20, 13, 33, 23, 18, 26, 21, 0, 4, 15, 7, 24, 11, 34, 16]]
def digsub_b6137e92(x):
    # the flag is flag{jk}
    return [int(str(n)[:1] + ''.join(['8', '1', '9', '4', '0', '7', '6', '3', '5', '2'][int(p)] for p in str(n)[1:])) for n in x]
def cxor_4e153811(x):
    # lmaooo
    return [x[i] ^ 2650420510 for i in range(k)]
def chadd_e14e4897(x):
    y = [ord(p) for p in '910434ec380a5241714c6336e0a51db270c9']
    return [x[i] + y[i] for i in range(k)]
def csub_024ef6f9(x):
    # evil
    return [x[i] - 8227456896 for i in range(k)]
def chunk_7496a2c0(x):
    return x[14:] + x[:14]
def chadd_3016fa48(x):
    y = [ord(p) for p in 'af473cb1d770edda0ae920f0b16fb10e910c']
    return [x[i] + y[i] for i in range(k)]
def deck_e7970605(x):
    # evil
    return x[11:16] + x[16:] + x[:10] + x[10:11]
def chunk_e53ff766(x):
    # the flag is flag{jk}
    return x[8:] + x[:8]
def chadd_6e3ce5fe(x):
    y = [ord(p) for p in '071101d508c0867a6f77124d11d523e68ac4']
    return [x[i] + y[i] for i in range(k)]
def csub_cb906939(x):
    # so good
    return [x[i] - 5420615809 for i in range(k)]
def shuffle_7c9553cb(x):
    # the flag is flag{jk}
    return [x[p] for p in [6, 0, 14, 13, 35, 25, 27, 9, 28, 8, 30, 12, 11, 29, 26, 22, 20, 19, 10, 4, 34, 1, 23, 21, 3, 15, 32, 7, 2, 33, 16, 18, 24, 31, 17, 5]]
def mul_a8c5006e(x):
    # lel
    y = [3, 5, 4, 5, 5, 5, 5, 2, 5, 3, 1, 6, 3, 2, 2, 5, 3, 1, 4, 3, 2, 6, 3, 1, 3, 2, 1, 1, 2, 3, 2, 1, 2, 5, 2, 6]
    return [x[i] * y[i] for i in range(k)]
def cmul_13e6bde9(x):
    return [x[i] * 3 for i in range(k)]
def cadd_509c46a1(x):
    # mucho encrypto
    return [x[i] + 617351893 for i in range(k)]
def chsub_fded2730(x):
    y = [ord(p) for p in 'c12887b154c6be50b476a1ae3484746a3c74']
    return [x[i] - y[i] for i in range(k)]
def xor_57c90fb5(x):
    y = [3548778369, 4747107098, 2486783193, 49014706, 1282638951, 3410506073, 5087352819, 6396014095, 9247672894, 2301836599, 8067983114, 2597430111, 6024091771, 4118764954, 6106063845, 5439752596, 531013825, 4170682521, 1188382510, 2323569125, 8143606685, 2817421092, 8892289488, 5926611063, 9400270402, 3593685798, 8225389839, 5620292784, 1796094645, 7394464072, 7624552323, 39591580, 5780421630, 9148815660, 4177787413, 240492470]
    return [x[i] ^ y[i] for i in range(k)]
def cadd_3cbc013d(x):
    return [x[i] + 7326403100 for i in range(k)]
def chxor_7bc1a643(x):
    y = [ord(p) for p in '246e9c518dc3a590e7d1951d3c02d6b7e0cb']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_459d40d3(x):
    return x[27:] + x[:27]
def sub_3935d689(x):
    y = [3156004128, 4342301453, 2402351396, 3322339861, 5238195617, 7693186207, 2881189084, 54293184, 148875057, 6413671426, 82434659, 8357232525, 6296461025, 5074627677, 874197406, 3868567199, 2508749679, 9269153785, 3010071722, 5511349744, 240209331, 5138468018, 8220898818, 8903400830, 8069559781, 1484761921, 4337823439, 5397176311, 6515813633, 8242601150, 3281528114, 9321047307, 172690896, 6224553272, 4161665824, 5398105261]
    return [x[i] - y[i] for i in range(k)]
def chunk_e4be2495(x):
    return x[26:] + x[:26]
def chsub_93abfc5d(x):
    y = [ord(p) for p in '02135e48a1b051b52693308d5f9317d5209c']
    return [x[i] - y[i] for i in range(k)]
def chadd_83134f29(x):
    y = [ord(p) for p in '3ff79c4b602f5217a1dadc493685a792aeca']
    return [x[i] + y[i] for i in range(k)]
def chunk_fd32f837(x):
    return x[25:] + x[:25]
def mul_a54dfca0(x):
    y = [10, 3, 5, 4, 1, 10, 9, 7, 7, 5, 3, 10, 3, 4, 4, 2, 10, 6, 3, 4, 9, 4, 8, 6, 9, 5, 9, 4, 6, 4, 8, 1, 10, 9, 1, 6]
    return [x[i] * y[i] for i in range(k)]
def chunk_406e7c05(x):
    # the flag is flag{jk}
    return x[1:] + x[:1]
def chadd_cb3aec1c(x):
    # lel
    y = [ord(p) for p in '6c025f754c6b286b3b2ffd78e50c57b244a0']
    return [x[i] + y[i] for i in range(k)]
def add_d70fa7c6(x):
    y = [7066134599, 918042949, 3575446360, 7977211802, 6190964292, 6393875558, 9289766631, 3047141720, 9149939058, 9655327633, 724540220, 7711246442, 7782829200, 1263856981, 2287417883, 7412559024, 1685382396, 7525161268, 4638215344, 7548854360, 7836164822, 1902353418, 6942318932, 177755115, 9150647572, 7096781867, 1788874547, 9589475046, 2052536671, 3804620345, 6733166372, 914051772, 1101467694, 2936834203, 2462797629, 9989689243]
    return [x[i] + y[i] for i in range(k)]
def csub_efe13119(x):
    # encryption
    return [x[i] - 7795097860 for i in range(k)]
def mul_34324887(x):
    y = [6, 2, 2, 2, 4, 3, 1, 6, 5, 4, 3, 1, 1, 5, 2, 5, 5, 2, 1, 3, 4, 1, 4, 4, 2, 5, 1, 3, 3, 5, 4, 6, 4, 3, 3, 3]
    return [x[i] * y[i] for i in range(k)]
def digsub_fc90a80f(x):
    return [int(str(n)[:1] + ''.join(['4', '2', '8', '5', '3', '6', '0', '9', '7', '1'][int(p)] for p in str(n)[1:])) for n in x]
def cxor_94df939a(x):
    # the flag is flag{jk}
    return [x[i] ^ 5597676695 for i in range(k)]
def cxor_81cc1cc2(x):
    return [x[i] ^ 3668593158 for i in range(k)]
def sub_8d4465ea(x):
    # kek
    y = [7801553809, 3907672656, 8844388282, 4795820508, 1879838684, 9588961715, 2427106550, 3813145341, 8483379044, 2631330464, 5565244152, 2522249421, 4121381679, 759495180, 4890917436, 585890190, 7505157952, 1236583330, 1430807341, 4205233201, 9586568749, 8991265335, 809728515, 9781368820, 6274426383, 8355062882, 17166939, 3745214004, 8541114777, 3707953490, 1406156145, 9629183466, 6499954116, 413871423, 3094166509, 5340343565]
    return [x[i] - y[i] for i in range(k)]
def add_ea027a3a(x):
    y = [1329382987, 4165799611, 5905929226, 2449518360, 2189334458, 9147578056, 5753297283, 8001470658, 2628332671, 4134154147, 521502179, 2153984247, 9679028504, 5047449911, 3957572272, 8489089249, 1990401498, 1809628422, 1872700683, 3892087342, 5020396301, 2711956785, 4546369498, 3494452041, 5261077006, 8705350619, 5505319785, 9278702992, 6985331515, 2191071414, 7337177973, 9282763830, 50057582, 1444989103, 4645921016, 549686323]
    return [x[i] + y[i] for i in range(k)]
def deck_4a988799(x):
    # so good
    return x[15:16] + x[15:15] + x[16:] + x[:15]
def add_7b7466c0(x):
    # rekt
    y = [3338581383, 6192110595, 2317810798, 6664049242, 468148149, 6961915924, 2483133069, 259557437, 3577353108, 9434757672, 9877636179, 5852839453, 5953189549, 4800430654, 9033590962, 1557115380, 6865543225, 9218504267, 1513696305, 8748346174, 2405654762, 9473504062, 4920702124, 9852020441, 2988501460, 733166841, 3591326393, 303043899, 3854309019, 9802451656, 3610465562, 8248017662, 6252297717, 1916491200, 6351265137, 1227886703]
    return [x[i] + y[i] for i in range(k)]
def cadd_5afd7d69(x):
    return [x[i] + 4673073624 for i in range(k)]
def chunk_e7835142(x):
    # the best
    return x[2:] + x[:2]
def cadd_2ba6325c(x):
    return [x[i] + 3922676456 for i in range(k)]
def chunk_01d5b245(x):
    return x[12:] + x[:12]
def deck_baf499fa(x):
    # evil
    return x[9:16] + x[:1] + x[16:] + x[1:9]
def add_12e64206(x):
    # the flag is flag{jk}
    y = [2394812344, 7602648743, 4297815947, 5667376848, 2625016411, 416652987, 2074696067, 202153915, 422560763, 926393146, 7466668524, 9061833925, 8960680470, 61125391, 1520158040, 57828366, 7349245686, 1428886308, 583549434, 5852665798, 6722318859, 3452226033, 4633140647, 7529253457, 7227499643, 2542746402, 6709297857, 268766717, 9625890617, 7694282528, 9694256851, 5675900883, 9097650412, 7286183149, 189613280, 9492691586]
    return [x[i] + y[i] for i in range(k)]
def sub_edd0e8fb(x):
    # the flag is flag{jk}
    y = [9175842039, 9864405710, 6840774510, 4679510515, 2623009785, 3008269563, 6679995840, 5120953853, 649372818, 5663554482, 5278433674, 5423387332, 3532473780, 1976552643, 1486675243, 931734782, 7137662387, 5033565473, 4710699862, 881953113, 3789317519, 3143420106, 3096756569, 3939741924, 4254037530, 9095002477, 9822377444, 4543763267, 6783963929, 1384335087, 796878356, 8653065752, 9338573517, 1988987995, 3262686354, 3607412458]
    return [x[i] - y[i] for i in range(k)]
def chsub_87204349(x):
    # just reverse it
    y = [ord(p) for p in '4cb157c12ee6dff80dc85d6a4b0084b474e3']
    return [x[i] - y[i] for i in range(k)]
def chmul_73d44dfc(x):
    # the best
    y = [ord(p) for p in 'b63098f12bb72d74eb6be8543a94581ce591']
    return [x[i] * y[i] for i in range(k)]
def chunk_6df9f44d(x):
    # encryption
    return x[1:] + x[:1]
def chxor_595823d4(x):
    y = [ord(p) for p in '53850da95357b19524ab6609bff7ed3c4dcb']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_92b9fd37(x):
    return [x[i] + 4438928205 for i in range(k)]
def add_3e1e2c0b(x):
    y = [3099057575, 2913998404, 9140854396, 3827508614, 3081167897, 1153378596, 6156695193, 1647338914, 3074467764, 7291626200, 3320475271, 3430673547, 1997309375, 203653379, 8869316650, 9340939208, 4209053981, 9974518534, 8492635029, 3142117253, 3875257639, 5623260707, 2575010920, 3005309874, 8852279400, 9789196214, 9795088759, 9274146713, 8507563360, 2840235456, 973187370, 7377796765, 3234552445, 8383686707, 1376330576, 9931174519]
    return [x[i] + y[i] for i in range(k)]
def add_d2ad8931(x):
    y = [5940109413, 2825813088, 413794787, 9306691244, 184276306, 6665688152, 6693096169, 1184437609, 7229664434, 9832037816, 7898969352, 8120045485, 899509463, 1859968472, 1308460624, 1880417518, 1354612404, 8842307593, 6016834021, 4936141028, 363386725, 5380930730, 7742697858, 429376258, 3261930116, 1177726779, 1810613591, 8592545413, 4651789439, 4472993273, 3306034459, 8850314210, 7028651966, 2674789126, 4773835784, 2390004218]
    return [x[i] + y[i] for i in range(k)]
def chxor_55925b33(x):
    # kek
    y = [ord(p) for p in '384d99d9b9e551018fcd9c37b4e3cf68eeac']
    return [x[i] ^ y[i] for i in range(k)]
def mul_d4e4b51b(x):
    # lmaooo
    y = [1, 8, 2, 8, 3, 10, 2, 2, 7, 8, 2, 6, 3, 1, 1, 10, 1, 9, 4, 7, 1, 8, 2, 7, 3, 2, 7, 9, 4, 4, 1, 7, 3, 7, 6, 3]
    return [x[i] * y[i] for i in range(k)]
def deck_62df6b9d(x):
    return x[7:11] + x[31:] + x[11:31] + x[:7]
def xor_3bff953a(x):
    y = [7557619031, 3719668575, 3301521374, 2286745464, 2006008823, 2059974736, 3274612838, 918314636, 1846295226, 5248890472, 7718170890, 5109913074, 8642789586, 4118969100, 44753353, 5919024446, 1323182489, 6664593269, 9236270229, 3435092976, 8943478213, 4408061849, 1310064268, 7169002724, 5544179188, 1646032389, 6175538588, 8962566826, 2674018783, 9364516717, 9209722823, 3594109779, 3208098306, 4731690375, 5782868898, 5661235224]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_c2ad3630(x):
    y = [ord(p) for p in '4d59841c2006999fdd340c5916a787ce6501']
    return [x[i] - y[i] for i in range(k)]
def deck_d769005f(x):
    # rekt
    return x[:13] + x[15:30] + x[13:15] + x[30:]
def digsub_18fe324f(x):
    return [int(str(n)[:1] + ''.join(['8', '5', '9', '2', '1', '7', '6', '0', '3', '4'][int(p)] for p in str(n)[1:])) for n in x]
def add_4235831f(x):
    # evil
    y = [3909316881, 9601098619, 5320401123, 9678701699, 2308379348, 8978897438, 6660734130, 8499450606, 1619989371, 655584196, 7237884328, 4986272018, 1185082785, 2434738283, 3289174196, 1049302455, 7699775728, 2657144603, 2733498671, 5378080681, 1139270118, 4217904333, 895099461, 209297814, 2596363652, 9971575062, 8807557086, 5899177073, 2894792442, 2731768754, 7607135114, 3849523682, 7451094982, 2288029063, 6954337986, 1560781839]
    return [x[i] + y[i] for i in range(k)]
def chxor_59b7fb58(x):
    y = [ord(p) for p in '9f94f3316b9aa6cae02775d60a13ec1014eb']
    return [x[i] ^ y[i] for i in range(k)]
def chsub_7cdcbbaf(x):
    # the best
    y = [ord(p) for p in 'a953ef04cd8fac45a64f9d02a38c8d1e0637']
    return [x[i] - y[i] for i in range(k)]
def chxor_d50259ba(x):
    y = [ord(p) for p in '6f6e5328619c046ce7eb9b98cf5ec9c6cfb1']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_69705ab6(x):
    # evil
    return [x[i] ^ 5176745404 for i in range(k)]
def chsub_5b0f6d80(x):
    # shiet?
    y = [ord(p) for p in '434b78c53ce905c29c94597211b3c7d07f1b']
    return [x[i] - y[i] for i in range(k)]
def shuffle_0df0d459(x):
    return [x[p] for p in [9, 25, 15, 27, 14, 2, 26, 18, 16, 3, 33, 7, 31, 5, 20, 1, 4, 19, 6, 10, 22, 32, 24, 35, 29, 23, 28, 11, 12, 30, 13, 0, 8, 34, 17, 21]]
def csub_63df48f0(x):
    # shiet?
    return [x[i] - 1145326395 for i in range(k)]
def sub_e769f5cd(x):
    # the flag is flag{jk}
    y = [5653073347, 651059315, 4462504310, 4493687115, 4514390371, 953615178, 2801997858, 8760603764, 2608866392, 319821150, 6800491569, 5514333114, 5640139548, 1583592240, 8274814279, 7042402730, 1257927602, 7277712079, 6392721203, 8139684183, 8352658130, 5247934021, 909135372, 1185124317, 9500640077, 8899393965, 2088605874, 301044556, 5557586257, 6082976842, 6063765487, 8756915783, 7978008369, 8760221601, 9634651917, 2226179296]
    return [x[i] - y[i] for i in range(k)]
def cadd_a5b24fcc(x):
    # evil
    return [x[i] + 2836681332 for i in range(k)]
def sub_ecf0a346(x):
    # the best
    y = [4836198059, 8299601292, 3640632672, 2542871857, 61163050, 7128441206, 4984051638, 4679507822, 8390127594, 4819460381, 55058207, 967554522, 5568548922, 7817936930, 2264663711, 6136171767, 4081352209, 3983937628, 3502430256, 510787114, 3979318932, 2527633121, 5040403080, 8166508599, 2997082662, 8826301113, 8508202100, 640983565, 9880461236, 1750265021, 1994324911, 6428307203, 3249964291, 8817138900, 6771837676, 615200291]
    return [x[i] - y[i] for i in range(k)]
def sub_c15c0c16(x):
    y = [7491768483, 4784340138, 3886660782, 3700724187, 3080733601, 6489184932, 391178972, 8783231963, 9822483818, 4378701671, 8074812556, 9194307691, 1036246282, 6460083521, 9987332898, 241627147, 4847390887, 9105279344, 6888824090, 8082739040, 6709233169, 3771872047, 7149020945, 5571449572, 7757927877, 2199029616, 4046252237, 776880216, 7893446009, 86818957, 470854883, 1235803916, 8306245936, 2911791030, 7773420249, 1834875270]
    return [x[i] - y[i] for i in range(k)]
def sub_d163ba0e(x):
    y = [2332817789, 7682482730, 9625320873, 7114971858, 9117136023, 131478262, 2105922613, 8767459751, 1460268420, 1054664260, 7472927453, 226238961, 2009313158, 397896135, 5921405389, 7451901365, 5691358319, 1790844519, 9533108926, 761630682, 2834116789, 4130118093, 8412671769, 9589500219, 4546483649, 4269530889, 4263070215, 765435752, 7510955811, 2421338940, 3088992937, 1810691127, 2317102857, 8888603989, 9770203397, 1372453091]
    return [x[i] - y[i] for i in range(k)]
def deck_ca79a96b(x):
    return x[33:] + x[13:33] + x[:7] + x[7:13]
def sub_3145bf03(x):
    y = [5099041872, 4675365560, 8907236031, 7880426812, 2502202652, 3936788170, 2693932558, 8858670417, 3435720505, 9358826974, 4708605730, 4166410031, 1205802994, 5882752849, 3896299893, 6273106870, 6899815212, 3203421150, 365917023, 6289759854, 612689408, 6263131777, 6443752364, 8584943963, 6953097594, 3676276524, 8836631385, 7893657715, 4430007141, 8868186797, 2140386404, 3833758098, 5399351241, 5660232943, 5259361505, 9052145092]
    return [x[i] - y[i] for i in range(k)]
def chunk_1f1becb3(x):
    return x[0:] + x[:0]
def csub_22444c96(x):
    return [x[i] - 9466095020 for i in range(k)]
def sub_f7bae9cf(x):
    y = [9989193195, 7660969386, 6793296276, 6718594198, 5165572574, 4383119548, 1851705923, 6762916824, 6304664512, 2270095822, 1678515050, 3736750368, 2662763947, 777272692, 605675121, 4669324543, 3477007386, 350443987, 4054019702, 4826570353, 3535938675, 7396605572, 7537340193, 3001372067, 7828491490, 4985150325, 3748239799, 3856217468, 2593965050, 4835475362, 4992349970, 4291771, 445488317, 9166794299, 9730743483, 1197296078]
    return [x[i] - y[i] for i in range(k)]
def deck_30d95f02(x):
    return x[32:35] + x[35:] + x[:12] + x[12:32]
def cmul_ed0fd163(x):
    return [x[i] * 3 for i in range(k)]
def mul_5f51bead(x):
    y = [1, 3, 1, 5, 1, 5, 3, 4, 2, 5, 3, 1, 2, 4, 2, 3, 3, 2, 1, 5, 3, 4, 1, 2, 2, 5, 4, 2, 3, 5, 2, 4, 1, 5, 4, 3]
    return [x[i] * y[i] for i in range(k)]
def sub_53b0de62(x):
    y = [5078142633, 9731080803, 3104041333, 9980718201, 8406527001, 9696569581, 4579738859, 2044228607, 3848751006, 296339047, 1548328351, 6960803852, 5888957792, 6936482098, 1295867449, 8370278203, 6285478072, 2214662616, 111710953, 1440818744, 1477438689, 494650587, 3432943087, 9334612861, 4573778193, 9578351315, 9779013986, 6862685676, 1749884403, 7000400474, 6212735589, 3971875562, 1034081879, 1604849225, 5883245201, 2422908677]
    return [x[i] - y[i] for i in range(k)]
def mul_5c575cdb(x):
    y = [6, 3, 7, 6, 5, 4, 1, 8, 1, 3, 4, 1, 6, 6, 4, 2, 8, 7, 1, 2, 2, 8, 6, 1, 7, 7, 2, 6, 3, 5, 7, 6, 1, 6, 7, 5]
    return [x[i] * y[i] for i in range(k)]
def cadd_62b6ad0e(x):
    # lmaooo
    return [x[i] + 4371652080 for i in range(k)]
def cadd_b1988d37(x):
    return [x[i] + 3215970640 for i in range(k)]
def chadd_36130bc9(x):
    # so good
    y = [ord(p) for p in 'f7e8c19c2e79ee6c00cb93e73edf21a3bfa4']
    return [x[i] + y[i] for i in range(k)]
def mul_37e82792(x):
    y = [5, 4, 3, 3, 1, 5, 2, 4, 4, 2, 3, 5, 1, 2, 2, 5, 1, 3, 3, 1, 5, 2, 2, 1, 1, 5, 2, 5, 5, 3, 5, 5, 2, 4, 4, 1]
    return [x[i] * y[i] for i in range(k)]
def chmul_a1f9f8ca(x):
    # lmaooo
    y = [ord(p) for p in '17e3b2968c5de606a9b3f8b32857f5622917']
    return [x[i] * y[i] for i in range(k)]
def chmul_faca1df3(x):
    y = [ord(p) for p in '71d17152bba75641a342c94172d741433e74']
    return [x[i] * y[i] for i in range(k)]
def csub_daf0877b(x):
    return [x[i] - 8349620488 for i in range(k)]
def deck_86a32ebf(x):
    # evil
    return x[3:32] + x[33:] + x[32:33] + x[:3]
def cmul_5f2f8cea(x):
    # encryption
    return [x[i] * 3 for i in range(k)]
def xor_30504fc8(x):
    y = [437706364, 5763862231, 3481092843, 8197329780, 1061410697, 9433546145, 3470094927, 6900674577, 2500327647, 2770819544, 1852150642, 9392411354, 1964595033, 8090174555, 6062661957, 3519934086, 9924275275, 2082044499, 9496648040, 2344448979, 8120912970, 1140914438, 7538341923, 6700737670, 3392807870, 1425862128, 7906447918, 4504256333, 2768183928, 3488820974, 9248749336, 911666572, 1943171493, 4945394802, 2874149634, 6192346516]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_9bda6371(x):
    return [x[i] ^ 6917377672 for i in range(k)]
def chunk_8880753c(x):
    return x[20:] + x[:20]
def add_e26173d3(x):
    y = [4691416067, 4544598237, 2643964419, 3146678959, 6375855652, 3638239769, 1758961381, 2147406354, 377202640, 7207799193, 661359137, 2526544682, 1707265035, 5878755581, 6395819174, 1800812009, 5480055051, 510129173, 6274031153, 3701810772, 4667131691, 6434282808, 2296784597, 1155507875, 1889010746, 7494363023, 9260264491, 9349122833, 1890772249, 795176223, 2633420000, 6185538065, 5667209850, 8034310014, 7400840036, 2262120277]
    return [x[i] + y[i] for i in range(k)]
def chunk_6b10c55c(x):
    # so good
    return x[23:] + x[:23]
def cadd_7936e180(x):
    # encryption
    return [x[i] + 8120494450 for i in range(k)]
def mul_2418a801(x):
    y = [3, 1, 2, 1, 3, 3, 2, 3, 2, 1, 1, 2, 3, 3, 3, 1, 1, 1, 2, 3, 3, 3, 3, 1, 1, 2, 1, 2, 2, 2, 3, 1, 3, 1, 1, 1]
    return [x[i] * y[i] for i in range(k)]
def cadd_f4a8c0c6(x):
    # kek
    return [x[i] + 819193816 for i in range(k)]
def chxor_bbac4066(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '932bf3c360a3c8f19db0f789c71605a8d450']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_27f36b54(x):
    return [x[i] * 9 for i in range(k)]
def sub_de79490f(x):
    # rekt
    y = [1182827020, 3609919862, 2025211954, 1202858383, 4713741680, 7760712903, 3838092592, 7321913524, 7746001843, 2115693708, 2139591534, 4735644555, 2449252511, 9187945880, 9813027603, 3981613604, 7121515420, 1454608998, 2976501082, 1659828651, 5249892511, 4620480306, 3758771560, 8820575735, 78489848, 4614185614, 7491399575, 8227634827, 7156909442, 4438777260, 3000072084, 4228917424, 5260438027, 9747388210, 923054287, 371889323]
    return [x[i] - y[i] for i in range(k)]
def csub_2df7e131(x):
    return [x[i] - 4758746961 for i in range(k)]
def cxor_95c41471(x):
    # the flag is flag{jk}
    return [x[i] ^ 9268788608 for i in range(k)]
def sub_a10ca0c8(x):
    y = [2087377267, 6013336582, 698276539, 6159960062, 8423670693, 7279327909, 6345230923, 1311523548, 3070453552, 330866789, 1136160561, 8287817257, 1908618613, 955394453, 3186845927, 1012530302, 5412966988, 4058225120, 9493048439, 7389776539, 7773588913, 3217207639, 1365277942, 2168702076, 9404824350, 8557603290, 9132523956, 5502508703, 4439622398, 6427230317, 8937876788, 5834775780, 9399125002, 3691595432, 4475611519, 1507103521]
    return [x[i] - y[i] for i in range(k)]
def chunk_4099648b(x):
    # just reverse it
    return x[25:] + x[:25]
def chxor_a67420fd(x):
    # shiet?
    y = [ord(p) for p in '53017861f6ad1be80be7971d03707b7c5e69']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_c14e4305(x):
    # lmaooo
    y = [ord(p) for p in 'a9e9d510aefee00a3eba83489a5b526694df']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_06609b53(x):
    return [x[i] * 6 for i in range(k)]
def chadd_c427ca04(x):
    # lel
    y = [ord(p) for p in '81845cfaf32e5c2076d36b6d8793e197c9e1']
    return [x[i] + y[i] for i in range(k)]
def add_770b1c6f(x):
    y = [2895252653, 9470771645, 9417305144, 8722070020, 5149538414, 9213023469, 2530015545, 5816216166, 3833633454, 7422264948, 561236114, 8117963003, 3083490163, 4337219885, 4605595227, 7978317773, 348478014, 7819188455, 5652182283, 170379630, 5408410237, 5328740176, 235603252, 5824743288, 9784220921, 3347832196, 6106723777, 5092303524, 8336729782, 4401547594, 296795049, 4905369264, 1122665797, 7927667982, 5710263141, 1003318281]
    return [x[i] + y[i] for i in range(k)]
def deck_72c2f55d(x):
    # encryption
    return x[:14] + x[14:14] + x[14:25] + x[25:]
def chxor_c8d60001(x):
    # just reverse it
    y = [ord(p) for p in 'ddc1beac177598a555f1ee9566ac95e51a4c']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_ff476bf3(x):
    return [x[p] for p in [12, 3, 8, 27, 22, 13, 30, 32, 29, 26, 16, 11, 2, 4, 34, 19, 6, 7, 20, 10, 1, 15, 17, 28, 23, 35, 0, 14, 9, 18, 5, 25, 31, 33, 24, 21]]
def deck_8d5c08c6(x):
    return x[7:21] + x[26:] + x[:7] + x[21:26]
def cmul_63f9fdde(x):
    return [x[i] * 3 for i in range(k)]
def cadd_b83f18e9(x):
    return [x[i] + 4175627861 for i in range(k)]
def add_9188b7d9(x):
    # rekt
    y = [1589090428, 1167590701, 8707344026, 5458642745, 7490575310, 4026537093, 9558341526, 1070977719, 1951616411, 2885016733, 4654034231, 8477223076, 9621740061, 5533593321, 5802480629, 9035321790, 1814922016, 308704011, 524590781, 4300749101, 3862054308, 8615416949, 8814254349, 2902205723, 8062790350, 8101928382, 1686458742, 1984810508, 5082730619, 6616731720, 2714041959, 415180729, 9735215816, 4738499737, 8689158638, 7340390707]
    return [x[i] + y[i] for i in range(k)]
def xor_a35575ce(x):
    # evil
    y = [9548274017, 3258635205, 7250864706, 1348350826, 2069650740, 9187492238, 1329753853, 5669118078, 5461119674, 9479460571, 3940600468, 5993566179, 2022208519, 4087030679, 3681983771, 7880789349, 5682023155, 4052985692, 3289486720, 530890874, 4307885339, 8765583236, 5728116588, 30796242, 2423372897, 9618160270, 4337842399, 7867416765, 8139891141, 1395339072, 1526834260, 9624611516, 6478180390, 3966876552, 9132169334, 5376837053]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_4ebc0819(x):
    # lmaooo
    y = [ord(p) for p in 'b5adc93049dec635dafc97eb636fca2f6d53']
    return [x[i] - y[i] for i in range(k)]
def chsub_be722dbb(x):
    y = [ord(p) for p in '9dee15b5e4f5f7ac1ba214340de0a202c5d8']
    return [x[i] - y[i] for i in range(k)]
def digsub_81a9c939(x):
    return [int(str(n)[:1] + ''.join(['3', '4', '8', '9', '2', '7', '0', '5', '6', '1'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_decdbb6d(x):
    # shiet?
    return [x[i] * 8 for i in range(k)]
def shuffle_e6522329(x):
    # evil
    return [x[p] for p in [19, 18, 16, 26, 35, 12, 24, 11, 25, 15, 27, 21, 10, 9, 22, 6, 13, 34, 20, 2, 0, 7, 3, 28, 30, 8, 14, 23, 5, 1, 32, 31, 33, 17, 29, 4]]
def mul_e80fd803(x):
    # kek
    y = [3, 2, 6, 5, 3, 4, 5, 5, 6, 1, 4, 2, 1, 3, 4, 4, 2, 4, 2, 3, 1, 3, 5, 5, 2, 5, 5, 3, 6, 3, 6, 1, 5, 1, 3, 4]
    return [x[i] * y[i] for i in range(k)]
def mul_fc9252b1(x):
    # just reverse it
    y = [5, 6, 8, 8, 6, 3, 8, 3, 2, 6, 3, 3, 7, 4, 1, 4, 5, 4, 2, 5, 3, 10, 6, 5, 3, 4, 6, 3, 5, 9, 3, 5, 5, 7, 5, 3]
    return [x[i] * y[i] for i in range(k)]
def shuffle_86e11db2(x):
    # encryption
    return [x[p] for p in [31, 19, 5, 7, 33, 14, 26, 29, 15, 9, 10, 20, 21, 1, 13, 32, 4, 8, 27, 34, 35, 3, 22, 16, 11, 17, 30, 12, 0, 18, 23, 28, 6, 2, 25, 24]]
def chmul_ae2a8843(x):
    y = [ord(p) for p in '43bfca2c63b00b12b787e505eb569d96caaa']
    return [x[i] * y[i] for i in range(k)]
def chsub_da5ea1df(x):
    y = [ord(p) for p in '3a2fa9145e5419279b643524dacbd45cecb3']
    return [x[i] - y[i] for i in range(k)]
def add_bc7653a1(x):
    # encryption
    y = [5373912342, 8379169252, 4467189977, 7162219975, 5400696196, 5688587259, 375231209, 925028225, 8897224986, 1864717853, 5829357946, 8728565083, 2438886676, 7050627362, 5483037164, 6192050613, 5669076956, 3061501658, 6721649261, 5359230254, 7228177591, 9042023133, 7380970804, 8035718015, 3119994488, 9317651961, 38675224, 5987907007, 1664045264, 4892987752, 699651797, 89954694, 1837656813, 7057334929, 4226991848, 5554343195]
    return [x[i] + y[i] for i in range(k)]
def chunk_cf1766d3(x):
    # the best
    return x[12:] + x[:12]
def cadd_2da455cf(x):
    return [x[i] + 8685594834 for i in range(k)]
def chadd_bd55be6b(x):
    y = [ord(p) for p in '9d9421b6fdc2d9f8651b750ee8e8c152dd32']
    return [x[i] + y[i] for i in range(k)]
def sub_6f40f29f(x):
    y = [2605441006, 4735254366, 7739450168, 8269596996, 161714781, 5175214662, 9061152848, 6331619226, 4516982925, 2867172453, 206706041, 4960843387, 8887659097, 8830500391, 796118888, 8952570630, 4790068993, 6936205230, 9930983219, 7745288584, 931482787, 5096150626, 5678008310, 3282890737, 3369009070, 1731240208, 6270618894, 2029239600, 957032872, 7564005141, 8730319482, 5236520873, 6222613650, 9383768601, 1532094609, 4556691506]
    return [x[i] - y[i] for i in range(k)]
def deck_477a7689(x):
    # shiet?
    return x[7:27] + x[36:] + x[27:36] + x[:7]
def digsub_3835b3e1(x):
    return [int(str(n)[:1] + ''.join(['8', '5', '2', '9', '3', '1', '7', '0', '4', '6'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_19d02797(x):
    return [x[i] * 6 for i in range(k)]
def chadd_a59f17f7(x):
    y = [ord(p) for p in '35c951a7196c8b21e3e473a5e8cf0be1a942']
    return [x[i] + y[i] for i in range(k)]
def sub_656aa559(x):
    y = [4952170412, 9281099582, 5744117060, 513767461, 1693326260, 6723575261, 6719481809, 456376786, 6405283607, 2588840712, 8106164477, 6709115329, 9597361698, 2399632375, 8320588037, 3874904946, 4489045828, 5405008928, 2528167792, 6436777002, 4937565780, 5145367325, 6351747462, 1473882849, 2954062033, 3374209493, 8939575594, 1196699245, 982803283, 9739109319, 7585325249, 4238684615, 6641293946, 2847180089, 8607249662, 4884840493]
    return [x[i] - y[i] for i in range(k)]
def digsub_a240d2e8(x):
    return [int(str(n)[:1] + ''.join(['2', '7', '3', '1', '4', '9', '8', '0', '5', '6'][int(p)] for p in str(n)[1:])) for n in x]
def chxor_38018a02(x):
    y = [ord(p) for p in '87ad34ff942a1b748604a699c344d798da0b']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_697c5558(x):
    # lel
    return [x[i] * 6 for i in range(k)]
def chsub_91d04f68(x):
    y = [ord(p) for p in '2bc8f0eeeb8fb91698f878b7214608254ee3']
    return [x[i] - y[i] for i in range(k)]
def xor_0f3a6446(x):
    # evil
    y = [5420745168, 2413210442, 7487277639, 4276089887, 1163059917, 1361190627, 1144363430, 2971023098, 7337027117, 7639785814, 5275078540, 3432532568, 5954205441, 1921667742, 2955993250, 8609706734, 1919289561, 8131899263, 915443200, 6074806017, 9770533840, 7766641397, 7004485429, 3269560424, 966556791, 9474486179, 3739964967, 5781860341, 3600082779, 1981304527, 3861661943, 4692288945, 2227641992, 6919180801, 2930967584, 7179251794]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_6bf0d618(x):
    return [int(str(n)[:1] + ''.join(['9', '3', '7', '5', '8', '1', '6', '4', '0', '2'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_16176275(x):
    y = [ord(p) for p in '3f2749a2bd08918f0f9a1e72b0ac971aa9d4']
    return [x[i] * y[i] for i in range(k)]
def mul_69dd5e3a(x):
    # evil
    y = [1, 3, 1, 1, 2, 3, 3, 1, 1, 2, 1, 1, 1, 3, 1, 2, 3, 3, 1, 1, 1, 2, 3, 2, 2, 3, 2, 2, 3, 1, 1, 2, 3, 1, 2, 2]
    return [x[i] * y[i] for i in range(k)]
def cxor_7bed28da(x):
    # kek
    return [x[i] ^ 8408629691 for i in range(k)]
def cadd_b4ab774d(x):
    # lel
    return [x[i] + 5959604347 for i in range(k)]
def sub_a9414276(x):
    # encryption
    y = [1317977778, 7521574841, 9034482320, 3241844830, 8988491168, 251618519, 7375748146, 6845147006, 5809384672, 2351284719, 2620199248, 1583746003, 4969402488, 1670833085, 4185539397, 3086014519, 7946320887, 6953757788, 9715049800, 986022596, 7134814516, 6804488872, 9836903445, 4432547335, 8439137106, 2821566811, 7637779860, 3185820495, 41734187, 9757514268, 8731543897, 5488458536, 7728858639, 6415274041, 5591594239, 7671712798]
    return [x[i] - y[i] for i in range(k)]
def chunk_3a4345ab(x):
    return x[29:] + x[:29]
def chsub_16d6c248(x):
    # so good
    y = [ord(p) for p in 'f0035b4aa8b78c7924e765bb17c7e16cf3db']
    return [x[i] - y[i] for i in range(k)]
def shuffle_2621171b(x):
    return [x[p] for p in [7, 31, 3, 29, 13, 1, 8, 16, 32, 10, 35, 17, 14, 9, 28, 30, 34, 27, 0, 25, 5, 6, 15, 24, 26, 11, 4, 33, 21, 19, 12, 23, 20, 2, 22, 18]]
def cmul_aa6e389f(x):
    return [x[i] * 10 for i in range(k)]
def cmul_bf27fc42(x):
    # rekt
    return [x[i] * 7 for i in range(k)]
def cadd_7016b7d0(x):
    # lmaooo
    return [x[i] + 2538526244 for i in range(k)]
def sub_ec7f3f21(x):
    y = [9173826170, 3487481169, 4802271188, 9885060092, 7928474979, 2052251587, 2693792705, 1652478725, 9421961244, 3880880091, 7877022652, 5799073641, 7266727695, 6484770975, 3251819751, 825064598, 7343397839, 4949876197, 5120464707, 5469498710, 8243219585, 3647177269, 1762620233, 9123468811, 5553089986, 1590645574, 5195807163, 3958747248, 464480287, 4170023750, 3762711700, 9542706532, 1162783883, 6468804362, 6469518842, 9840354467]
    return [x[i] - y[i] for i in range(k)]
def chsub_9a699614(x):
    # just reverse it
    y = [ord(p) for p in '9e74c6d86cb30b161417214a9fbcef113844']
    return [x[i] - y[i] for i in range(k)]
def cadd_f74d4f6d(x):
    return [x[i] + 4394760872 for i in range(k)]
def chmul_7cc3c4ab(x):
    # evil
    y = [ord(p) for p in '38e800aff2bbf62d0af0276df8eed474820f']
    return [x[i] * y[i] for i in range(k)]
def cxor_0b39c3e8(x):
    return [x[i] ^ 3919678924 for i in range(k)]
def cxor_22b4a127(x):
    return [x[i] ^ 819945774 for i in range(k)]
def cmul_994c1dcb(x):
    return [x[i] * 8 for i in range(k)]
def add_44200607(x):
    # the flag is flag{jk}
    y = [7745250666, 9152072636, 5393461022, 3992606626, 4301706433, 1838372867, 2865132430, 1685316970, 4803139578, 7315423534, 9121182062, 9368077540, 4471362706, 648363226, 519759538, 7204086781, 1101428539, 504546126, 7155483391, 2731782913, 7542922824, 1139167016, 9405840410, 1870978180, 4626352133, 731010906, 7708127083, 1522238718, 4683893836, 5995507738, 8768128964, 1202836566, 3488204508, 9874527131, 8874988114, 8360788053]
    return [x[i] + y[i] for i in range(k)]
def cadd_9ae3f2d8(x):
    # mucho encrypto
    return [x[i] + 1892624474 for i in range(k)]
def cmul_d64253b9(x):
    # the best
    return [x[i] * 6 for i in range(k)]
def chsub_dea76069(x):
    # lel
    y = [ord(p) for p in 'd1ca4d437ecf6e8301a1ab7d77e5c132dd5d']
    return [x[i] - y[i] for i in range(k)]
def sub_bc852ad6(x):
    y = [3671733080, 7389790843, 4441875480, 7146620860, 929407551, 5820999061, 4243484679, 9197989905, 2745881786, 2794852929, 1807458217, 20916591, 5458000625, 9701923877, 5957778216, 9184522594, 890910407, 955353588, 5744837535, 4450861808, 7059538953, 4749053686, 4096805247, 4895415544, 4623181382, 4192575051, 1455892476, 7044491108, 1054110656, 7657258157, 9286511881, 2498202405, 4498497348, 5540781493, 9192452622, 3745347665]
    return [x[i] - y[i] for i in range(k)]
def cmul_f83e4df7(x):
    return [x[i] * 8 for i in range(k)]
def sub_9c3c91b4(x):
    y = [3900521020, 3260115609, 9521001461, 3947227404, 6418520013, 2310377876, 1877935299, 5099842553, 8045613173, 4218315013, 6570395429, 8041506436, 2968425701, 8896937667, 4721513159, 9385588426, 577319479, 4564283307, 3951898702, 7610316439, 7668846769, 1759278421, 9790363641, 5579525732, 4547700846, 1939217970, 9377444475, 9661711410, 8519988820, 4990167734, 2319040075, 4739424214, 511760046, 6369928184, 4574828353, 3367465518]
    return [x[i] - y[i] for i in range(k)]
def mul_67e87c31(x):
    # the flag is flag{jk}
    y = [5, 4, 3, 4, 1, 5, 1, 3, 1, 5, 2, 2, 3, 1, 2, 3, 1, 1, 4, 2, 5, 3, 1, 5, 2, 4, 4, 4, 2, 4, 4, 2, 1, 2, 4, 4]
    return [x[i] * y[i] for i in range(k)]
def deck_b0a4adb2(x):
    return x[8:13] + x[:1] + x[13:] + x[1:8]
def cmul_a51dd714(x):
    # shiet?
    return [x[i] * 6 for i in range(k)]
def cadd_429f802a(x):
    # shiet?
    return [x[i] + 4778633696 for i in range(k)]
def shuffle_0242ca5c(x):
    return [x[p] for p in [5, 30, 21, 11, 12, 26, 4, 7, 2, 28, 16, 32, 31, 1, 17, 19, 9, 20, 24, 29, 22, 15, 33, 6, 34, 3, 8, 25, 14, 10, 13, 23, 0, 35, 18, 27]]
def mul_001d570f(x):
    # mucho encrypto
    y = [1, 4, 3, 5, 4, 6, 5, 7, 3, 7, 4, 2, 5, 1, 3, 7, 7, 3, 6, 1, 6, 7, 4, 7, 2, 3, 6, 2, 6, 7, 6, 7, 7, 5, 2, 7]
    return [x[i] * y[i] for i in range(k)]
def chxor_187da4ac(x):
    # kek
    y = [ord(p) for p in '56b1971c1ed9f52cafe9130558662996de56']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_7cbc750f(x):
    return [x[i] + 9536039168 for i in range(k)]
def digsub_4bfe6492(x):
    return [int(str(n)[:1] + ''.join(['5', '6', '0', '2', '9', '4', '3', '1', '8', '7'][int(p)] for p in str(n)[1:])) for n in x]
def mul_33103309(x):
    # shiet?
    y = [2, 5, 4, 5, 1, 1, 4, 5, 3, 2, 1, 2, 3, 3, 2, 1, 3, 1, 4, 2, 4, 1, 2, 3, 2, 3, 5, 4, 1, 2, 5, 2, 3, 3, 5, 2]
    return [x[i] * y[i] for i in range(k)]
def digsub_c71698e9(x):
    return [int(str(n)[:1] + ''.join(['5', '8', '2', '6', '0', '9', '4', '3', '1', '7'][int(p)] for p in str(n)[1:])) for n in x]
def xor_1c0c670c(x):
    y = [4285413530, 8618770265, 9037059538, 2571603743, 3377748682, 8881492305, 3783017847, 7905102213, 2953429627, 4517962085, 2275579495, 7009939948, 536870860, 8643968732, 7590572935, 7896906857, 1949153979, 4121059651, 7217223771, 1747462544, 8574546085, 9930314098, 7411422084, 6241255185, 7082397385, 6600316366, 4789404818, 5586713011, 545313756, 8486478845, 2142735538, 5536791339, 7089505809, 6272071598, 3758381305, 8825541043]
    return [x[i] ^ y[i] for i in range(k)]
def cmul_db003c24(x):
    # encryption
    return [x[i] * 10 for i in range(k)]
def chadd_32554a61(x):
    # encryption
    y = [ord(p) for p in '5884cf2b255fad667e33cfbe3d4b51e474fe']
    return [x[i] + y[i] for i in range(k)]
def cadd_0079a56b(x):
    # encryption
    return [x[i] + 7971112910 for i in range(k)]
def deck_d0ec72d6(x):
    # evil
    return x[:16] + x[16:20] + x[20:25] + x[25:]
def chxor_32814bee(x):
    y = [ord(p) for p in '6d540155d3b36787d71b2bcfe3fa245c5f1c']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_a36f268e(x):
    return [x[i] * 9 for i in range(k)]
def shuffle_f380512c(x):
    return [x[p] for p in [8, 11, 22, 25, 9, 1, 18, 28, 29, 4, 3, 32, 19, 30, 14, 23, 17, 35, 31, 26, 2, 33, 7, 24, 13, 5, 15, 21, 0, 34, 27, 20, 16, 12, 10, 6]]
def csub_b25f1796(x):
    return [x[i] - 6295380881 for i in range(k)]
def deck_fff53126(x):
    return x[33:] + x[3:13] + x[:3] + x[13:33]
def deck_a61831c9(x):
    return x[22:] + x[14:22] + x[11:14] + x[:11]
def chadd_60898084(x):
    y = [ord(p) for p in '89747d872f571437d358b7b88cf0769ab38c']
    return [x[i] + y[i] for i in range(k)]
def cxor_52a04787(x):
    return [x[i] ^ 7489834417 for i in range(k)]
def shuffle_7b8c9089(x):
    return [x[p] for p in [19, 8, 34, 15, 27, 30, 24, 7, 6, 17, 31, 20, 35, 0, 32, 1, 22, 9, 25, 21, 28, 10, 18, 5, 13, 26, 23, 3, 33, 29, 2, 11, 4, 16, 12, 14]]
def cmul_7d43ab73(x):
    return [x[i] * 9 for i in range(k)]
def csub_cec4261b(x):
    # the flag is flag{jk}
    return [x[i] - 6992496180 for i in range(k)]
def chmul_e559b45c(x):
    y = [ord(p) for p in '7355743f69da5ec10a3fd24d705bfcbb027b']
    return [x[i] * y[i] for i in range(k)]
def chsub_0642b6ad(x):
    y = [ord(p) for p in '54294e8d73e7a5e2ccd89c95e4ff7b3a8f90']
    return [x[i] - y[i] for i in range(k)]
def shuffle_dc92e6b1(x):
    return [x[p] for p in [28, 18, 13, 5, 19, 1, 4, 23, 16, 24, 35, 33, 12, 29, 14, 3, 11, 17, 8, 27, 22, 26, 25, 6, 34, 21, 32, 20, 10, 30, 2, 31, 9, 15, 0, 7]]
def digsub_a580518f(x):
    return [int(str(n)[:1] + ''.join(['6', '5', '0', '1', '7', '8', '9', '3', '2', '4'][int(p)] for p in str(n)[1:])) for n in x]
def add_9e4296de(x):
    y = [1744211001, 3355284063, 5115410228, 2372857142, 8483023036, 22813918, 4708518169, 1496167960, 3165365285, 1234590246, 4289815391, 6434358340, 3615382272, 9879136311, 6348688271, 5185243855, 261660957, 3922994959, 6778315393, 3660357378, 4478007566, 652963115, 8503363582, 6940611981, 7138632596, 7782876430, 7658481411, 4236925403, 4449171959, 7737520294, 4536169301, 539959846, 2803177676, 6741233812, 9512141701, 3411529633]
    return [x[i] + y[i] for i in range(k)]
def digsub_fbcfe8c3(x):
    # evil
    return [int(str(n)[:1] + ''.join(['4', '6', '8', '1', '2', '7', '0', '9', '5', '3'][int(p)] for p in str(n)[1:])) for n in x]
def csub_ef420147(x):
    # kek
    return [x[i] - 2362540719 for i in range(k)]
def deck_e00a225d(x):
    # encryption
    return x[30:] + x[18:30] + x[4:18] + x[:4]
def xor_032ec723(x):
    y = [1109222372, 105114228, 7350702474, 4557220613, 2894472642, 3556605038, 2157913683, 5416091435, 8432672020, 6344151683, 1669097008, 7973697848, 747085460, 5278741323, 9348607973, 5156549420, 9019903890, 8225739757, 5285254171, 2712288245, 7547326000, 2877203591, 9682011670, 5718962856, 7361502815, 36012631, 5712705717, 9657938133, 9725767991, 9595935417, 1954502173, 2722459837, 3526077720, 4295992679, 2902096430, 3418358433]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_2f2a8750(x):
    return [int(str(n)[:1] + ''.join(['7', '8', '9', '3', '0', '1', '4', '2', '5', '6'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_aa4f6daf(x):
    y = [ord(p) for p in '312cfdf99841eb13ff5fdb7174f7dd0ff065']
    return [x[i] * y[i] for i in range(k)]
def chxor_f0c78fe9(x):
    y = [ord(p) for p in '9edb0ed3dc357cca1d0012ae11ab933c23e0']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_c0727784(x):
    # encryption
    return [x[i] * 4 for i in range(k)]
def csub_087d6e8e(x):
    return [x[i] - 1669689415 for i in range(k)]
def deck_62a63e4b(x):
    # evil
    return x[:1] + x[1:23] + x[31:] + x[23:31]
def cxor_567d1d52(x):
    return [x[i] ^ 3988031162 for i in range(k)]
def chsub_4fe6a0b8(x):
    # encryption
    y = [ord(p) for p in '94d900deb16c22774532bf0f81a10fd0bd5d']
    return [x[i] - y[i] for i in range(k)]
def shuffle_3c585e0a(x):
    # encryption
    return [x[p] for p in [17, 0, 35, 24, 26, 8, 13, 4, 18, 14, 29, 9, 6, 2, 11, 20, 27, 32, 15, 21, 33, 1, 22, 28, 23, 12, 10, 3, 34, 7, 30, 25, 5, 31, 16, 19]]
def chsub_b9b2576f(x):
    y = [ord(p) for p in 'b1b3aa27e3004522def9869b15caf9ae80ea']
    return [x[i] - y[i] for i in range(k)]
def chsub_daf292bd(x):
    y = [ord(p) for p in 'e8a58847752fcb660468fac3524bcb9e637a']
    return [x[i] - y[i] for i in range(k)]
def shuffle_0a4f92ab(x):
    # rekt
    return [x[p] for p in [32, 25, 35, 20, 24, 27, 21, 11, 19, 28, 15, 7, 2, 10, 1, 13, 0, 6, 23, 16, 3, 8, 5, 33, 30, 9, 14, 29, 34, 31, 4, 17, 12, 18, 26, 22]]
def sub_a96a1483(x):
    y = [5341065139, 8368191624, 9468789271, 5514138289, 5987064080, 5880166824, 9909076524, 449800849, 480794044, 8351307650, 6089469294, 2450457942, 3762618140, 7272258059, 4071253987, 875489162, 3002677183, 7036109321, 1628957065, 7001640404, 2066977575, 614122636, 9811447049, 6621020830, 7118385373, 6780552961, 7731525581, 5678107560, 6187665231, 638793190, 6897249719, 7620803131, 4472302990, 1044587487, 4525245682, 6564306228]
    return [x[i] - y[i] for i in range(k)]
def cadd_7ed856d4(x):
    # evil
    return [x[i] + 5194247481 for i in range(k)]
def chsub_b9955d1a(x):
    # rekt
    y = [ord(p) for p in 'a67211ea10d4b40b9879dc8131f67243a273']
    return [x[i] - y[i] for i in range(k)]
def sub_c7fb8e5e(x):
    # the flag is flag{jk}
    y = [7513219279, 2530473120, 9362253992, 6074145909, 8022921856, 5599829516, 6119663294, 6285047397, 5866749594, 3328684245, 9031164006, 9295288709, 2055800660, 8015845344, 7572142095, 7663680707, 2955517020, 79963419, 9384985744, 5953701699, 7519705482, 7580670927, 1163137040, 1437027213, 7848907287, 8803026223, 931704598, 2747081807, 9512715265, 5700927919, 8592045150, 174481836, 1140714014, 4363439672, 5264563177, 557854769]
    return [x[i] - y[i] for i in range(k)]
def deck_b3226bd2(x):
    # encryption
    return x[1:26] + x[26:28] + x[:1] + x[28:]
def digsub_9bb50253(x):
    return [int(str(n)[:1] + ''.join(['5', '9', '8', '0', '7', '3', '2', '4', '1', '6'][int(p)] for p in str(n)[1:])) for n in x]
def add_eb403f7b(x):
    # kek
    y = [2307558124, 5692663181, 5855728569, 654513282, 9471723495, 8646891511, 8328619715, 1758294024, 9422924808, 2521124685, 6821591919, 1205038673, 1059886070, 4688773911, 4042616868, 973174794, 1111004581, 5560918952, 7079913584, 5290404864, 3426053785, 1245633112, 1945162818, 6770268996, 6291101203, 4029253679, 8829217163, 3905546871, 6095905025, 1995175563, 9437175758, 4478706523, 4311926901, 7227737966, 944340131, 2601970571]
    return [x[i] + y[i] for i in range(k)]
def mul_fc6ac804(x):
    y = [1, 2, 1, 1, 2, 2, 2, 1, 3, 1, 3, 2, 1, 3, 3, 1, 3, 2, 1, 3, 2, 3, 3, 1, 3, 2, 1, 3, 2, 2, 2, 3, 2, 3, 3, 2]
    return [x[i] * y[i] for i in range(k)]
def csub_359c8002(x):
    # kek
    return [x[i] - 6790375807 for i in range(k)]
def cadd_b39a5b0b(x):
    # just reverse it
    return [x[i] + 174495905 for i in range(k)]
def sub_72b00ca4(x):
    y = [8626587684, 8445007953, 9018698126, 5915799149, 7304851716, 76004979, 3708262912, 3837738434, 900535664, 5073009010, 874873395, 8198506577, 3844547629, 3915686682, 8430104187, 4299594318, 5410796497, 3541864376, 3166376856, 7191323259, 7679193377, 9735474747, 8604272597, 2165939943, 4670708433, 7540687137, 7907791239, 712716817, 8124189255, 2589074044, 6903812068, 807819416, 4211844268, 1231696151, 178864470, 8193858101]
    return [x[i] - y[i] for i in range(k)]
def mul_bc232ddb(x):
    y = [1, 3, 1, 2, 3, 2, 1, 1, 2, 3, 3, 3, 3, 1, 3, 1, 1, 2, 2, 3, 1, 3, 2, 1, 1, 3, 2, 1, 3, 2, 1, 1, 2, 3, 2, 1]
    return [x[i] * y[i] for i in range(k)]
def xor_2495a11e(x):
    y = [1359222644, 7015342155, 1438999311, 267603918, 881016410, 826595504, 6830472235, 6549531909, 6343356876, 5485154724, 1135736565, 8098097739, 8286559588, 8707312000, 3796466830, 5215340938, 5364342708, 4705795212, 5053827032, 7794408042, 9205766213, 7458340715, 3015708228, 3185563457, 6332116013, 360229100, 4368695335, 9096609658, 3856716403, 601516923, 9330860617, 378918094, 6222704600, 6271764849, 2494493014, 46809640]
    return [x[i] ^ y[i] for i in range(k)]
def deck_911b2aa8(x):
    # evil
    return x[:6] + x[28:] + x[6:20] + x[20:28]
def shuffle_68814b98(x):
    return [x[p] for p in [30, 14, 6, 15, 34, 13, 18, 25, 20, 23, 32, 5, 9, 26, 8, 3, 21, 35, 12, 24, 10, 17, 19, 7, 22, 11, 29, 2, 33, 28, 27, 4, 1, 31, 16, 0]]
def add_5f346d84(x):
    y = [33734950, 4068582806, 1228210816, 8654837081, 706835634, 6855253588, 6821797539, 8473211599, 2390282835, 6712262225, 2756537242, 212867421, 7791753162, 6758475379, 4990293792, 5021892682, 9555061685, 6703429421, 1349047321, 912264105, 7417234369, 4677237882, 9112571533, 9868238060, 1920910523, 7543390654, 1651811953, 8795473584, 2748953084, 5554021248, 3823977600, 3199678757, 863423384, 5452300025, 718610573, 4837533887]
    return [x[i] + y[i] for i in range(k)]
def chmul_37dc6c90(x):
    y = [ord(p) for p in 'ee7d30d16405eadadf917d3598e568d40049']
    return [x[i] * y[i] for i in range(k)]
def add_e44ea43f(x):
    y = [2483158261, 226609076, 1295841736, 461225872, 7606291900, 9262055664, 8338971432, 5087864040, 266991241, 8754901977, 4381569697, 3715872173, 74656569, 2423110564, 9969939816, 1754330549, 8704586257, 7995947478, 7400318964, 9358140873, 7237201408, 9691271787, 4279589732, 308109052, 2766660269, 5062470924, 8606036273, 5389300759, 5260752574, 1545372827, 6733621845, 2764805974, 2070567642, 5387814427, 7182355440, 3371681616]
    return [x[i] + y[i] for i in range(k)]
def deck_f2c25f6b(x):
    # just reverse it
    return x[:9] + x[9:11] + x[19:] + x[11:19]
def chadd_4a09bd0d(x):
    # just reverse it
    y = [ord(p) for p in '35beb91aefd19335213d9ece4d893e8dae36']
    return [x[i] + y[i] for i in range(k)]
def xor_e1acd3bf(x):
    # lel
    y = [4527303748, 9533303273, 5732421668, 3390023679, 9362265084, 9640470330, 9631515355, 3039965286, 8889400735, 3467896443, 5522964931, 7739467186, 9026866169, 5522836304, 183243878, 2988653774, 5628206015, 1384427895, 4349409009, 1788289701, 8113359256, 5129806461, 2653751741, 7409272341, 5202545940, 9962402333, 1742794606, 2730883755, 4884879898, 1474219545, 8672778483, 6878821031, 400615012, 4354999203, 1295268523, 5257660215]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_e86ea0c2(x):
    # lmaooo
    return [x[i] ^ 1056071187 for i in range(k)]
def cmul_00fd6c30(x):
    # rekt
    return [x[i] * 4 for i in range(k)]
def deck_8c66611c(x):
    # just reverse it
    return x[:4] + x[13:14] + x[4:13] + x[14:]
def chmul_e6614b6a(x):
    # mucho encrypto
    y = [ord(p) for p in '025d171be68a5fa3042067d4c8bd39eeae65']
    return [x[i] * y[i] for i in range(k)]
def csub_a5842efc(x):
    return [x[i] - 8515891531 for i in range(k)]
def mul_eb201421(x):
    # shiet?
    y = [4, 5, 4, 8, 4, 1, 9, 5, 2, 1, 6, 3, 5, 7, 4, 4, 4, 1, 6, 8, 6, 8, 9, 10, 4, 1, 9, 2, 8, 5, 4, 3, 5, 2, 9, 2]
    return [x[i] * y[i] for i in range(k)]
def chsub_20dd3740(x):
    y = [ord(p) for p in '526b38129b680e414b0c6c3f2c484e1ca8f8']
    return [x[i] - y[i] for i in range(k)]
def chsub_97dfddf9(x):
    y = [ord(p) for p in '6f0a1ee8213636b7e316d272313fa2430f5e']
    return [x[i] - y[i] for i in range(k)]
def chxor_b9af6481(x):
    # encryption
    y = [ord(p) for p in '3f21bcab714f528c23248b40ef593eaecf67']
    return [x[i] ^ y[i] for i in range(k)]
def xor_bf90865c(x):
    y = [1416344986, 6914047465, 3714032452, 4245511821, 2016240302, 5772576189, 843378449, 4263051141, 3755348277, 2784618726, 3703046990, 6839061941, 5645499720, 4512341328, 3641159023, 6087247551, 9101729815, 8743918737, 3786408665, 4136491295, 796962949, 9157218042, 1264667659, 2952653776, 8901598332, 6035888981, 998242317, 2340208070, 8530623916, 8914665207, 740848804, 5577972831, 8571860066, 2973893532, 6350759821, 1319055423]
    return [x[i] ^ y[i] for i in range(k)]
def sub_33da435e(x):
    y = [3788431183, 3479500866, 5156915721, 8858313714, 3761656078, 5095757228, 7217999011, 4489292184, 2345098990, 7860684188, 3672191085, 8485404143, 1864013275, 1230629135, 823571132, 9104633336, 6649028099, 6011546352, 9975992268, 1663829643, 2426034850, 2407277429, 7940683970, 2876595780, 3321774379, 263073599, 4914411459, 5770665972, 3819293349, 2600872462, 9594394913, 3457562847, 5979200804, 7845555917, 302726939, 134911754]
    return [x[i] - y[i] for i in range(k)]
def chxor_3bea6df8(x):
    # mucho encrypto
    y = [ord(p) for p in '1171096377b3715eda389e7149752009dced']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_8d626e12(x):
    return [x[i] * 10 for i in range(k)]
def sub_ba98e537(x):
    # so good
    y = [1801814328, 8021784366, 8072803959, 5307306440, 6567018959, 398587503, 7324973602, 5660483542, 4115316116, 2322420885, 2731585520, 537456374, 9903182607, 2523413368, 6670517000, 1279855035, 3286982168, 8572100673, 5591122301, 8832083868, 6319739264, 1691842704, 2003404397, 2069491454, 7882502033, 6359269557, 477406533, 2441995283, 4399699974, 3801819344, 5138009711, 7045327149, 8496031136, 1895837319, 8210563093, 6228910671]
    return [x[i] - y[i] for i in range(k)]
def shuffle_f43f69f9(x):
    return [x[p] for p in [6, 23, 18, 14, 33, 25, 29, 13, 20, 10, 8, 5, 30, 11, 26, 32, 24, 4, 9, 3, 7, 2, 0, 21, 34, 12, 22, 15, 17, 16, 31, 35, 28, 1, 27, 19]]
def add_55670ea5(x):
    # shiet?
    y = [2526051904, 5287454370, 4651065537, 2100527419, 3395024273, 6032710864, 4642771351, 5808432510, 2410157271, 1371407203, 6648807956, 3617923930, 4263459655, 2636814838, 668358276, 9606259842, 9709745284, 5039312489, 8063040382, 2244518751, 6513895260, 3925442124, 7877166045, 8658081483, 8858746512, 5231796519, 9324856106, 4847566069, 3790894480, 9133696383, 4622923514, 3837954950, 2021011849, 1908894844, 953842253, 9056945251]
    return [x[i] + y[i] for i in range(k)]
def chmul_b923d46c(x):
    y = [ord(p) for p in '19cf114469ee35ac54df5532ae2543ac4da4']
    return [x[i] * y[i] for i in range(k)]
def shuffle_3d5811d2(x):
    return [x[p] for p in [12, 16, 29, 10, 34, 27, 13, 28, 11, 0, 14, 8, 18, 3, 2, 7, 5, 33, 19, 35, 22, 15, 9, 1, 31, 6, 4, 24, 21, 30, 23, 17, 32, 25, 26, 20]]
def xor_071e51df(x):
    y = [5397846702, 7292907483, 7432418202, 2033821130, 9243295939, 3977387430, 5976405525, 4186661241, 5017455245, 8586131597, 6765601836, 5634332728, 3536135472, 1444850666, 7987100480, 1350521567, 4229830108, 8819646950, 6594084440, 4914512811, 2984412054, 481363314, 1770277061, 3636278209, 7320650566, 3035960278, 5457008446, 4460419061, 9111641699, 6866437268, 1060909185, 8569587703, 119679095, 2240878449, 8820195632, 9643737402]
    return [x[i] ^ y[i] for i in range(k)]
def xor_d0a1bc3c(x):
    y = [1760410075, 1989606183, 2603104981, 9342719748, 4509132, 9556221895, 9869535420, 7731743522, 9836132161, 1573269417, 9961742230, 3734073938, 6746832508, 5569279736, 9696000207, 1926864274, 8550743263, 9087973491, 7966444407, 6268966553, 1474889647, 4544344981, 587280672, 6376993164, 378960014, 4423379074, 5453710129, 2107425579, 8140830122, 376110111, 6310587285, 2020928412, 7518798230, 4211760192, 9191250569, 92280028]
    return [x[i] ^ y[i] for i in range(k)]
def cmul_da51d310(x):
    # evil
    return [x[i] * 9 for i in range(k)]
def add_e08d6566(x):
    # rekt
    y = [6865778743, 9526366897, 4513461166, 1714818764, 248264520, 467865398, 553589750, 4130281236, 4181507946, 8885665182, 2865995576, 9502221632, 6200442640, 2335609571, 5732280046, 8642419880, 6394128040, 2232969786, 428634127, 4219449800, 9316401690, 6359005851, 15766569, 1838819674, 2592022187, 2680751212, 6799564035, 5926222200, 1908109317, 6065242303, 8026613877, 8386414358, 334917924, 7539270672, 2934099603, 9878222935]
    return [x[i] + y[i] for i in range(k)]
def chmul_90381a7d(x):
    y = [ord(p) for p in '24807862cd6d0ebb9519068fa9b33dd999bc']
    return [x[i] * y[i] for i in range(k)]
def deck_9172fa81(x):
    # shiet?
    return x[24:24] + x[24:31] + x[31:] + x[:24]
def deck_d164f9a9(x):
    # evil
    return x[:3] + x[8:19] + x[19:] + x[3:8]
def sub_4b935f92(x):
    # just reverse it
    y = [1406806564, 2159999021, 4243875805, 1557085435, 5781588937, 6523081633, 4013159529, 9270796356, 594191057, 8333629661, 4582602304, 9518277086, 7516819124, 338205036, 6278809042, 8661030230, 1714854181, 3226816639, 8824719377, 9697304092, 8542948444, 4415874035, 3021117746, 310166309, 1251397611, 427895782, 1591052242, 8489898817, 5296007285, 3726956697, 1048531908, 8599119572, 5783913315, 6986489020, 6340980138, 2705800200]
    return [x[i] - y[i] for i in range(k)]
def chxor_2978c8d9(x):
    # mucho encrypto
    y = [ord(p) for p in '7e3dd5d2b965239b5ec899e727cdb4b632f1']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_3d6abe7c(x):
    y = [ord(p) for p in '1e33f002035b08c1e214bba1d873a81bc285']
    return [x[i] * y[i] for i in range(k)]
def deck_22a252a1(x):
    # mucho encrypto
    return x[30:] + x[21:29] + x[:21] + x[29:30]
def digsub_f22e07b0(x):
    # lmaooo
    return [int(str(n)[:1] + ''.join(['1', '6', '8', '0', '3', '7', '4', '9', '5', '2'][int(p)] for p in str(n)[1:])) for n in x]
def cxor_bfb33206(x):
    return [x[i] ^ 6389194675 for i in range(k)]
def chmul_8e52ad65(x):
    # rekt
    y = [ord(p) for p in 'e87dfb526923c845cce0cadfabe731e5c294']
    return [x[i] * y[i] for i in range(k)]
def deck_fc3d7add(x):
    # rekt
    return x[18:23] + x[23:25] + x[:18] + x[25:]
def shuffle_78cd475f(x):
    return [x[p] for p in [10, 19, 0, 2, 13, 8, 4, 22, 32, 20, 23, 6, 18, 26, 7, 21, 16, 3, 24, 5, 12, 34, 31, 14, 25, 33, 17, 30, 11, 27, 1, 9, 15, 28, 35, 29]]
def add_ca8439ba(x):
    y = [2180223637, 3734080836, 412506190, 6525536206, 9287842772, 5089782734, 3993613287, 7635430137, 5089994124, 7538128934, 1870239291, 1378364207, 8864025283, 7277810047, 7095788937, 2976875150, 5126142670, 9511759846, 221550169, 6141760016, 9064565637, 7899434596, 3996656305, 4730831258, 346724865, 9487766963, 7119444353, 3592658819, 357604090, 6870706982, 5830477713, 1489907590, 5942877271, 2458582045, 5373562515, 2945101140]
    return [x[i] + y[i] for i in range(k)]
def chsub_be9e6b3a(x):
    y = [ord(p) for p in 'e2312bb5837dc0635174618ef603ab501b57']
    return [x[i] - y[i] for i in range(k)]
def digsub_bd11b809(x):
    return [int(str(n)[:1] + ''.join(['7', '4', '1', '6', '3', '8', '5', '0', '2', '9'][int(p)] for p in str(n)[1:])) for n in x]
def mul_9d0c3682(x):
    # evil
    y = [1, 1, 1, 1, 3, 1, 3, 3, 2, 1, 1, 2, 3, 1, 1, 1, 1, 2, 3, 2, 1, 3, 1, 2, 1, 2, 3, 3, 1, 2, 1, 3, 2, 3, 2, 3]
    return [x[i] * y[i] for i in range(k)]
def chsub_53443fe3(x):
    y = [ord(p) for p in 'ab49e88130de3034dd56d1cd0c5eff3d95e0']
    return [x[i] - y[i] for i in range(k)]
def chxor_dd87f2e6(x):
    y = [ord(p) for p in '8b5dd79950fa1bac0be11361b54d1170ba4b']
    return [x[i] ^ y[i] for i in range(k)]
def add_393870bc(x):
    # the best
    y = [6278475109, 2157064304, 5329718830, 6698859815, 2234516115, 2522945539, 3868938841, 7903776236, 4197357669, 2200969041, 6519079643, 9996413637, 4279514682, 3128969184, 8897751194, 9346510704, 9079423556, 5452870542, 207597311, 2412400707, 7225165400, 427061869, 9881106808, 8560336111, 1928379996, 506545685, 4626659537, 1424752411, 2976891064, 1178734285, 976229704, 9347071739, 8975444573, 8881379313, 7166692122, 4860567258]
    return [x[i] + y[i] for i in range(k)]
def chmul_27f0b944(x):
    # the best
    y = [ord(p) for p in 'ff65677fb7c3596cf0af87bdd73ff78e67d4']
    return [x[i] * y[i] for i in range(k)]
def xor_c05b216d(x):
    y = [1271656348, 8053625780, 6629346689, 3075967221, 5967114097, 8136410040, 6260097683, 7643126908, 2489210541, 7925182455, 1895670911, 8723208942, 3587860966, 6471412725, 6725564769, 2484486917, 3308954806, 7306149207, 7236656371, 2055438491, 305073049, 3495120588, 5774211681, 9515132886, 2732253168, 2593917483, 9164116409, 2324074769, 1046133908, 612143902, 9436618861, 1160344153, 6708040849, 9141278521, 912060921, 5775627977]
    return [x[i] ^ y[i] for i in range(k)]
def chadd_66038ddf(x):
    # encryption
    y = [ord(p) for p in 'c9918016a9525dc3ea33246caa983b72e1fe']
    return [x[i] + y[i] for i in range(k)]
def csub_a60ad993(x):
    return [x[i] - 507757876 for i in range(k)]
def chmul_5e1cf1e0(x):
    y = [ord(p) for p in 'a6af6203af407c1fe4db765fd7618415e18c']
    return [x[i] * y[i] for i in range(k)]
def deck_f60b8411(x):
    return x[:8] + x[24:] + x[8:19] + x[19:24]
def mul_b2b433f9(x):
    y = [3, 1, 3, 1, 1, 2, 1, 3, 2, 2, 1, 3, 1, 1, 2, 1, 3, 3, 3, 3, 1, 2, 2, 2, 1, 3, 3, 3, 2, 2, 3, 1, 3, 3, 2, 1]
    return [x[i] * y[i] for i in range(k)]
def xor_5b72ca68(x):
    y = [2837601924, 2932297545, 6476811668, 537175103, 4638128805, 7019154137, 3302279392, 8960402708, 421474347, 7384860182, 6027859343, 9195919592, 8840863842, 1796853015, 3015642588, 1364325159, 8892165814, 9254428391, 2750020092, 6815522664, 7421182595, 6763867920, 4560633475, 2021775611, 8153223140, 3933877556, 7310771918, 7537511026, 3570812424, 4127755887, 2638941822, 5597012614, 1349375734, 6695516077, 9293918775, 9973277828]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_8ee7d3f7(x):
    y = [ord(p) for p in '2d4f08b15676b940a4f07b3b2cc9f8075030']
    return [x[i] ^ y[i] for i in range(k)]
def deck_767e1614(x):
    return x[18:31] + x[31:] + x[0:18] + x[:0]
def chadd_f7fad255(x):
    y = [ord(p) for p in '3274f65e9407f824d1e06aff3e87080e2d1b']
    return [x[i] + y[i] for i in range(k)]
def xor_f19c0746(x):
    y = [2961767602, 2083667619, 4430287062, 8760704108, 4809162676, 6047625022, 5490360508, 115551573, 9257875469, 4792600219, 2311396983, 6984887676, 6041747171, 1486951026, 6432859698, 1315587241, 7455435694, 7641794693, 3587142034, 3147627412, 3764727434, 9573933175, 8126744667, 9288993373, 7837262956, 1963071132, 2202006554, 6818639789, 3333359518, 9753319668, 5129547837, 484808397, 1050124703, 1411484744, 9070857713, 5608014442]
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_41ece7da(x):
    # lel
    return [x[p] for p in [19, 3, 5, 18, 0, 8, 28, 11, 4, 27, 32, 20, 26, 34, 24, 22, 17, 16, 29, 21, 1, 23, 15, 12, 35, 9, 7, 6, 2, 25, 10, 30, 13, 33, 31, 14]]
def chunk_1cb05a9d(x):
    return x[27:] + x[:27]
def chxor_6e6160e1(x):
    # mucho encrypto
    y = [ord(p) for p in 'e98ac6bda93e7bd4fecc2c263e89d83ab121']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_837f34c3(x):
    y = [ord(p) for p in 'c772eaea721df57b41c48b0f16a0e4bc5560']
    return [x[i] + y[i] for i in range(k)]
def deck_bc896581(x):
    return x[30:35] + x[15:30] + x[35:] + x[:15]
def cmul_18b5fc94(x):
    return [x[i] * 3 for i in range(k)]
def deck_e84e6efc(x):
    # just reverse it
    return x[28:29] + x[29:] + x[28:28] + x[:28]
def xor_bb4022b1(x):
    y = [5555214216, 9597830705, 5518318628, 2438690677, 5474403062, 5685823756, 9283930688, 1356566253, 3301408309, 3998673020, 4660510086, 7914155217, 7853236911, 6673802643, 2907769715, 4982103349, 7597250630, 5144298727, 4134734545, 5869091385, 4172636391, 167898286, 8671509699, 6655192204, 7625681082, 6584696769, 3337488449, 3703419148, 1439293877, 2052731335, 8686059166, 5105572147, 1623715980, 9988696944, 7447139920, 1717691304]
    return [x[i] ^ y[i] for i in range(k)]
def deck_dd1d3271(x):
    return x[10:11] + x[:10] + x[11:31] + x[31:]
def chunk_f32c7c2f(x):
    return x[22:] + x[:22]
def shuffle_16a08001(x):
    return [x[p] for p in [19, 35, 15, 18, 24, 23, 4, 9, 27, 34, 1, 29, 25, 16, 31, 26, 6, 2, 0, 13, 30, 5, 22, 21, 11, 7, 3, 10, 28, 12, 20, 14, 33, 8, 32, 17]]
def sub_8c476a01(x):
    # shiet?
    y = [1736195306, 6662446601, 3362223419, 8421696145, 7778502748, 3143793745, 4399913273, 5523940112, 6480900322, 6488596406, 9470694315, 3993552560, 290111056, 6316124536, 9833390010, 72667725, 7799008700, 7430173002, 5931197566, 3759829241, 4512874355, 6887925895, 4271679710, 3993341115, 2455525499, 9903087678, 242786817, 5821706096, 8400809602, 8369942151, 6079013324, 6896597436, 3880145825, 4864379941, 7385979302, 9439918324]
    return [x[i] - y[i] for i in range(k)]
def csub_5c981857(x):
    return [x[i] - 6622590062 for i in range(k)]
def digsub_225591cf(x):
    # kek
    return [int(str(n)[:1] + ''.join(['3', '5', '8', '9', '6', '1', '2', '4', '7', '0'][int(p)] for p in str(n)[1:])) for n in x]
def chxor_ac024fc8(x):
    y = [ord(p) for p in '63c244a4d2c4a346a1d841460fd36a384f2f']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_a8577417(x):
    return x[9:] + x[:9]
def xor_addb072f(x):
    y = [7272440066, 5659076108, 5567314413, 6306583410, 6944368011, 6140322580, 4113458154, 6700318290, 8469197169, 2138681820, 6261111430, 3938695343, 6287961109, 2845030904, 6061322055, 2340216165, 113232583, 7958942746, 9544160267, 9230992309, 3340336119, 1440699967, 1213306481, 780160866, 2405443308, 5551539684, 1827109991, 9563809438, 7635195036, 3440937811, 4031135962, 8226888343, 9302318646, 5208305319, 8714092219, 6518997446]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_b3a9e994(x):
    y = [ord(p) for p in 'ad603dc39e077abc3b8ee482f39a7436ef32']
    return [x[i] - y[i] for i in range(k)]
def csub_5174b08f(x):
    # just reverse it
    return [x[i] - 7871185488 for i in range(k)]
def cmul_910def34(x):
    return [x[i] * 6 for i in range(k)]
def add_2cc0eef9(x):
    y = [4709594948, 797992488, 4034167094, 4471407303, 8628153115, 2355383773, 535887716, 6465394012, 96406593, 2356220687, 8052372000, 3211288928, 1887311423, 5486951571, 8857369122, 2611335380, 1205187838, 8342665634, 3229329531, 9427654459, 8449302944, 2293086251, 511168483, 7554149167, 9992757733, 8884867490, 5592186047, 6781809235, 818361700, 3461891429, 9360811690, 1955420759, 9904243876, 5243389334, 4697433847, 4982099903]
    return [x[i] + y[i] for i in range(k)]
def chmul_905d7d7a(x):
    y = [ord(p) for p in '913f8d39d170d00ee8f6a33b4689a3f6a354']
    return [x[i] * y[i] for i in range(k)]
def chadd_d12574c1(x):
    # lmaooo
    y = [ord(p) for p in 'ae98b5bdc793ac462bd23d47c23bf8d66692']
    return [x[i] + y[i] for i in range(k)]
def chsub_f97f894e(x):
    y = [ord(p) for p in '2ba3eaa041b81365eb3cedfc1a2d0cae89cb']
    return [x[i] - y[i] for i in range(k)]
def cadd_eab5dc9b(x):
    return [x[i] + 1187226537 for i in range(k)]
def chmul_c1277148(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '61ff6595384ade22a7cdd9f3607473290c1d']
    return [x[i] * y[i] for i in range(k)]
def sub_c24992e8(x):
    # encryption
    y = [4784297024, 5866320768, 1584848731, 2792962514, 6651862740, 8340654024, 9552653120, 751812099, 8836586250, 6959425883, 3111230534, 3884111058, 5975727877, 9988807297, 8076429085, 3775275872, 2525303480, 4049463049, 2845103172, 6754682580, 743525796, 1671223418, 855227554, 6974473853, 84994868, 6443708018, 972808065, 6094492369, 730385896, 2130701406, 6884751542, 7715565890, 9763647601, 3556376879, 8546264515, 3532335410]
    return [x[i] - y[i] for i in range(k)]
def chunk_f1e74b7b(x):
    return x[22:] + x[:22]
def chmul_de111dfb(x):
    # the flag is flag{jk}
    y = [ord(p) for p in 'cc86a89b2330eb1a04aec7e397259e5a8bc7']
    return [x[i] * y[i] for i in range(k)]
def xor_e50d3684(x):
    y = [7964074857, 9516412127, 8018989085, 6412376842, 9735003504, 7846593707, 1058089495, 1359811802, 1311158734, 3040224974, 6222638994, 7127283609, 376938816, 6138667596, 1684603114, 2569458801, 5283073942, 4725956088, 7166806761, 8425378625, 2959942201, 7222673061, 5212399585, 4454191586, 6755595752, 945248031, 872702754, 9281593755, 293114092, 3576567032, 6748457603, 6100481031, 6814824493, 9951412086, 1552611936, 3954972074]
    return [x[i] ^ y[i] for i in range(k)]
def mul_228941c9(x):
    y = [9, 2, 6, 2, 7, 4, 1, 6, 1, 7, 5, 8, 1, 5, 5, 9, 5, 8, 6, 8, 1, 2, 4, 6, 6, 3, 2, 2, 2, 4, 3, 4, 9, 6, 8, 5]
    return [x[i] * y[i] for i in range(k)]
def chsub_167fa647(x):
    y = [ord(p) for p in 'fb9ee285019958f45f5a6d4f06adafc715d9']
    return [x[i] - y[i] for i in range(k)]
def cxor_9e4b96f2(x):
    # shiet?
    return [x[i] ^ 4926232836 for i in range(k)]
def cmul_615b3bac(x):
    # kek
    return [x[i] * 8 for i in range(k)]
def xor_1c17469f(x):
    # so good
    y = [2666830375, 7857267766, 6466429450, 9443428989, 7046078899, 298560689, 9019170363, 1748531533, 4812942957, 7689817314, 1012536869, 9095774305, 3840925206, 4578251435, 3998759778, 1287472410, 2605009455, 9623281831, 952809587, 7385422782, 3705550331, 1659152213, 1506130688, 9756292649, 5509399968, 179502435, 7534591059, 1609655017, 7799153355, 5483518556, 1599662048, 3520955601, 7351442377, 658683336, 5735072289, 4155621626]
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_81df2959(x):
    return [x[p] for p in [34, 3, 8, 4, 6, 19, 22, 0, 17, 31, 24, 35, 28, 14, 23, 7, 5, 10, 21, 9, 15, 26, 13, 25, 18, 2, 20, 30, 12, 33, 32, 11, 29, 27, 16, 1]]
def cxor_3829c9db(x):
    return [x[i] ^ 1817916214 for i in range(k)]
def csub_2448d6e4(x):
    # lel
    return [x[i] - 6798240456 for i in range(k)]
def mul_7a676b8f(x):
    # rekt
    y = [4, 4, 3, 5, 1, 3, 4, 4, 5, 3, 4, 1, 2, 2, 1, 2, 1, 2, 2, 2, 4, 5, 1, 3, 5, 2, 1, 1, 4, 2, 3, 1, 3, 1, 4, 5]
    return [x[i] * y[i] for i in range(k)]
def cxor_53f93269(x):
    return [x[i] ^ 9934982956 for i in range(k)]
def cmul_c648ff5d(x):
    # just reverse it
    return [x[i] * 5 for i in range(k)]
def cadd_91c03cb7(x):
    # kek
    return [x[i] + 837420158 for i in range(k)]
def deck_8c73d37d(x):
    return x[15:25] + x[34:] + x[:15] + x[25:34]
def chadd_bf07e93b(x):
    y = [ord(p) for p in '66411786587199183b4a3b9ca105743b1f75']
    return [x[i] + y[i] for i in range(k)]
def cxor_89cd8dcd(x):
    # evil
    return [x[i] ^ 234580207 for i in range(k)]
def mul_bce42f5e(x):
    y = [6, 5, 4, 4, 4, 4, 5, 7, 1, 1, 6, 6, 6, 1, 5, 1, 7, 5, 7, 7, 6, 4, 2, 6, 5, 2, 6, 2, 1, 2, 6, 3, 7, 7, 7, 6]
    return [x[i] * y[i] for i in range(k)]
def chmul_794b5292(x):
    y = [ord(p) for p in 'b96cf9020222c90cefb01216938e0816f5d6']
    return [x[i] * y[i] for i in range(k)]
def chxor_fa8c5c5f(x):
    y = [ord(p) for p in 'b16981a9d139d69c29089e5a5283a51b9119']
    return [x[i] ^ y[i] for i in range(k)]
def sub_b83b0b5a(x):
    # just reverse it
    y = [3351333088, 7301473900, 4774038687, 5469713527, 4593498262, 5316454852, 4722766176, 3203310068, 5280396793, 3558052742, 1890599200, 7521604661, 7016736633, 5222131566, 5908490772, 1602737164, 8033270465, 4631949772, 1542890952, 4050413487, 742334833, 1010925874, 7616936443, 3858319777, 8743962574, 4378795666, 3862551798, 5790037669, 4785255114, 9878869907, 3005927995, 8442625080, 5042912811, 579954444, 3783679518, 5175078280]
    return [x[i] - y[i] for i in range(k)]
def chunk_ba2558cf(x):
    return x[5:] + x[:5]
def add_604f7a16(x):
    y = [3717743679, 161283539, 7577346941, 6191049974, 9212697704, 1358829887, 641114806, 7662351012, 6098261774, 5252369558, 9805508122, 5237834938, 6627653720, 6615272510, 9463623942, 4247280134, 6106642838, 8712658974, 9806097534, 6998561449, 4628603258, 8597574906, 4719063498, 1232286364, 7049506022, 3139984793, 6748922981, 8979950742, 6043152666, 9268402396, 2983330379, 9419761318, 3055254545, 83415450, 5038762645, 1440392382]
    return [x[i] + y[i] for i in range(k)]
def mul_1a70b6a5(x):
    y = [1, 5, 2, 2, 4, 5, 3, 1, 2, 3, 1, 4, 2, 5, 5, 1, 5, 2, 5, 2, 2, 2, 3, 2, 3, 3, 2, 2, 2, 4, 3, 3, 5, 2, 2, 4]
    return [x[i] * y[i] for i in range(k)]
def chsub_d4cc5505(x):
    y = [ord(p) for p in '3776c7036252770462075709fd54d7670636']
    return [x[i] - y[i] for i in range(k)]
def chadd_2a7b5687(x):
    # evil
    y = [ord(p) for p in 'e2158c6451e6720e84f1f34f6b18356051c3']
    return [x[i] + y[i] for i in range(k)]
def cmul_9535a158(x):
    return [x[i] * 7 for i in range(k)]
def deck_561b4d40(x):
    # kek
    return x[5:16] + x[29:] + x[16:29] + x[:5]
def xor_3b807d61(x):
    # evil
    y = [9434763814, 2886965137, 135786462, 1111620095, 3763427833, 7895403909, 8524307888, 4090527352, 7130305970, 8924262699, 589648319, 8594794966, 2756611403, 7874611624, 2028204441, 6629713361, 8127579331, 463376358, 2585445517, 1866229466, 1674941928, 9805011613, 2118268295, 830590187, 5221364044, 5489914194, 8439790286, 6430687007, 7158324523, 2085401513, 3566144877, 2984344536, 5811445863, 6607397587, 2616406696, 6790141985]
    return [x[i] ^ y[i] for i in range(k)]
def csub_fdb702b6(x):
    return [x[i] - 7030149160 for i in range(k)]
def deck_7daf6bf5(x):
    # rekt
    return x[27:28] + x[:27] + x[28:29] + x[29:]
def xor_2d9c7e1d(x):
    y = [6811276565, 5250926601, 7987706402, 4653714383, 31894723, 2921321090, 8117337710, 1752209, 4333020377, 1001079191, 4507885928, 6767912451, 1773470511, 7585092894, 3543044335, 3666114482, 6148493767, 4827697832, 5358838503, 5420028473, 528927139, 8157660899, 4249577293, 8522223762, 9255395617, 6464095474, 8598717688, 9375224156, 1254067419, 2841330356, 9520651584, 7722837346, 4855442787, 6140538148, 3826756053, 5341678739]
    return [x[i] ^ y[i] for i in range(k)]
def cmul_7dfade82(x):
    # lel
    return [x[i] * 5 for i in range(k)]
def cadd_f52e7820(x):
    # the best
    return [x[i] + 2949830948 for i in range(k)]
def mul_f58805a3(x):
    # lmaooo
    y = [2, 5, 5, 6, 3, 5, 5, 3, 2, 2, 3, 4, 4, 2, 1, 6, 6, 4, 4, 5, 5, 2, 5, 4, 2, 2, 1, 1, 5, 6, 1, 2, 5, 2, 6, 4]
    return [x[i] * y[i] for i in range(k)]
def mul_7dc7f4e3(x):
    # shiet?
    y = [6, 1, 5, 3, 5, 1, 4, 3, 1, 4, 7, 7, 5, 2, 1, 7, 6, 5, 4, 2, 7, 4, 7, 4, 1, 1, 6, 2, 1, 1, 5, 6, 1, 1, 3, 2]
    return [x[i] * y[i] for i in range(k)]
def shuffle_285ae96d(x):
    return [x[p] for p in [20, 16, 28, 22, 30, 15, 27, 11, 12, 14, 24, 19, 5, 6, 25, 3, 18, 35, 29, 13, 1, 34, 10, 31, 8, 9, 17, 21, 4, 32, 33, 7, 0, 23, 26, 2]]
def chadd_2e85df59(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '109d6a74e2bc7938c2e90d8ed1e5253ff184']
    return [x[i] + y[i] for i in range(k)]
def csub_98af337d(x):
    # so good
    return [x[i] - 9744073480 for i in range(k)]
def chunk_edf055e9(x):
    return x[1:] + x[:1]
def chadd_fa13451e(x):
    # lel
    y = [ord(p) for p in '316232ad41cdca66f022ee1bbc2200c645d6']
    return [x[i] + y[i] for i in range(k)]
def chunk_5a70d9ef(x):
    return x[32:] + x[:32]
def mul_62495a4a(x):
    y = [7, 8, 4, 3, 5, 2, 8, 8, 1, 3, 2, 7, 7, 3, 8, 4, 4, 7, 5, 7, 6, 6, 3, 4, 1, 7, 1, 3, 3, 2, 2, 4, 2, 3, 3, 6]
    return [x[i] * y[i] for i in range(k)]
def chadd_7c5f1cde(x):
    # shiet?
    y = [ord(p) for p in '19d8a153fc65493491172854a21b76de379a']
    return [x[i] + y[i] for i in range(k)]
def mul_82f61bf9(x):
    y = [6, 6, 9, 2, 9, 4, 2, 1, 3, 8, 7, 9, 9, 9, 6, 9, 6, 4, 7, 6, 3, 7, 3, 2, 7, 5, 7, 4, 9, 8, 1, 3, 3, 8, 1, 9]
    return [x[i] * y[i] for i in range(k)]
def mul_b97eacc4(x):
    # the best
    y = [1, 8, 8, 7, 7, 3, 7, 4, 5, 1, 2, 6, 4, 7, 3, 1, 1, 1, 6, 3, 5, 7, 5, 6, 6, 3, 4, 4, 2, 3, 2, 2, 2, 2, 6, 6]
    return [x[i] * y[i] for i in range(k)]
def mul_86c064b1(x):
    # rekt
    y = [4, 7, 4, 7, 1, 5, 4, 4, 6, 7, 5, 5, 3, 6, 5, 7, 3, 3, 4, 1, 6, 7, 2, 4, 3, 1, 7, 4, 4, 7, 2, 6, 5, 5, 5, 1]
    return [x[i] * y[i] for i in range(k)]
def cmul_0bb3391d(x):
    # lel
    return [x[i] * 7 for i in range(k)]
def chunk_82b4fb76(x):
    return x[27:] + x[:27]
def shuffle_b63d8098(x):
    # the best
    return [x[p] for p in [16, 32, 15, 13, 24, 6, 0, 14, 9, 30, 25, 4, 2, 7, 18, 29, 26, 22, 1, 5, 10, 20, 17, 31, 21, 23, 33, 11, 28, 27, 35, 34, 12, 8, 19, 3]]
def shuffle_8a10d0b7(x):
    return [x[p] for p in [5, 31, 13, 7, 16, 1, 35, 30, 29, 14, 11, 33, 0, 26, 34, 10, 2, 21, 23, 22, 17, 25, 3, 19, 4, 20, 9, 6, 8, 24, 15, 28, 18, 32, 12, 27]]
def chsub_195ef194(x):
    # evil
    y = [ord(p) for p in '2358fc5906a3fa077e3ecbd50938621bcde4']
    return [x[i] - y[i] for i in range(k)]
def add_2361d033(x):
    y = [4262649484, 5841581597, 2761895911, 1044843115, 4659653076, 6669634450, 537662132, 4693606808, 4369475146, 5277572145, 7694333008, 7071122725, 5592918861, 8422926335, 3213719781, 2620888763, 6720100552, 5975298343, 4579943777, 7775757154, 5314314984, 321448572, 7274675962, 9403700925, 3953542453, 2467847798, 9841312203, 2191981037, 5263735567, 2291368310, 2483018222, 6544887488, 3984395131, 1628352908, 2535675886, 7003628429]
    return [x[i] + y[i] for i in range(k)]
def sub_8eda253a(x):
    y = [5269505866, 6606511440, 3443804910, 1525596820, 4001577019, 1446682552, 6062699413, 5599792706, 6096727411, 4689987541, 4367330716, 1028717857, 6670876154, 1897636185, 1684685941, 2695071031, 2974278539, 8412564419, 4933990460, 8585270398, 4984890107, 1790943431, 6706602628, 6237081018, 5482885641, 3858693976, 3286932082, 9777015846, 746887185, 1358055747, 938328544, 3029063953, 9512442513, 6504154729, 736635537, 6193963832]
    return [x[i] - y[i] for i in range(k)]
def shuffle_922a7e0d(x):
    return [x[p] for p in [32, 14, 18, 2, 17, 35, 28, 30, 26, 16, 25, 1, 3, 12, 9, 13, 15, 22, 5, 24, 20, 7, 31, 10, 29, 4, 11, 19, 0, 33, 21, 34, 23, 6, 8, 27]]
def cmul_4a4181f0(x):
    return [x[i] * 4 for i in range(k)]
def chsub_b942a4e6(x):
    # just reverse it
    y = [ord(p) for p in '92cbddeaf4d6d843b6d21defda017635bf4e']
    return [x[i] - y[i] for i in range(k)]
def chmul_06d41645(x):
    # shiet?
    y = [ord(p) for p in 'e7cbef3d4542d94cab894b33ed5694ba4d07']
    return [x[i] * y[i] for i in range(k)]
def deck_23f2909c(x):
    return x[7:30] + x[30:] + x[:5] + x[5:7]
def shuffle_09604b13(x):
    # shiet?
    return [x[p] for p in [3, 10, 31, 33, 34, 5, 28, 24, 35, 26, 23, 11, 9, 6, 8, 7, 17, 2, 4, 18, 19, 16, 30, 14, 0, 21, 27, 15, 25, 22, 32, 20, 29, 12, 1, 13]]
def chsub_6acb4ef8(x):
    y = [ord(p) for p in '10c31a14544add7f92c0b7d1b092f328b9f4']
    return [x[i] - y[i] for i in range(k)]
def chxor_277a4952(x):
    y = [ord(p) for p in '57eb557605de2e5ee9ef1f6d7f780a5d4a29']
    return [x[i] ^ y[i] for i in range(k)]
def xor_16c7c77d(x):
    y = [8639333105, 6958108447, 445179627, 606753753, 5846967636, 187020842, 6947044537, 1004614689, 4030218428, 602272959, 4949878868, 2126098636, 6582841104, 5080013828, 6411899906, 2353954789, 5083707416, 8906296479, 9520938981, 3912805517, 6029166268, 1103868777, 2626493584, 6587349395, 1238342594, 4675353448, 7485093947, 1640480519, 1472651181, 9041968612, 2594820510, 7206433506, 7877519541, 5022201350, 5237875161, 2749335878]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_9752c63c(x):
    return [x[i] ^ 5731301913 for i in range(k)]
def cmul_111bce58(x):
    # encryption
    return [x[i] * 10 for i in range(k)]
def digsub_39cc5a0e(x):
    # so good
    return [int(str(n)[:1] + ''.join(['7', '0', '9', '8', '2', '5', '1', '4', '3', '6'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_76c2382f(x):
    # evil
    return [x[p] for p in [34, 14, 12, 4, 33, 28, 18, 10, 25, 35, 26, 3, 7, 22, 19, 0, 24, 5, 17, 16, 32, 8, 13, 23, 29, 31, 15, 9, 20, 6, 30, 1, 21, 27, 11, 2]]
def deck_64119ba8(x):
    # the flag is flag{jk}
    return x[:6] + x[6:10] + x[10:18] + x[18:]
def sub_5a358ec6(x):
    # shiet?
    y = [3803769346, 2041429718, 6035664986, 1258347976, 6839718849, 2309369273, 1917517892, 5718229710, 766259167, 464435371, 7911315049, 1931086132, 4879411016, 4704398438, 890077798, 8982907999, 1774786243, 912225456, 4265448829, 1670603451, 7586612974, 9382000364, 3464000489, 2170621544, 3028421683, 7471236091, 5783006555, 5972065936, 2701948370, 5009078890, 7270922214, 2005905479, 529998101, 7737960652, 6948750075, 8199899362]
    return [x[i] - y[i] for i in range(k)]
def shuffle_a05741bb(x):
    # the best
    return [x[p] for p in [3, 7, 12, 2, 24, 8, 15, 10, 25, 4, 1, 22, 34, 29, 23, 13, 14, 30, 19, 35, 26, 31, 32, 21, 18, 20, 9, 27, 6, 17, 5, 0, 16, 28, 33, 11]]
def chunk_b26605b9(x):
    return x[33:] + x[:33]
def chunk_ce966b63(x):
    return x[32:] + x[:32]
def cmul_d22b5acf(x):
    return [x[i] * 5 for i in range(k)]
def chsub_c6668097(x):
    y = [ord(p) for p in 'b842e7fe32dcc0c5bb9294c482d4f310d8f4']
    return [x[i] - y[i] for i in range(k)]
def deck_06f3f26f(x):
    return x[21:29] + x[29:] + x[:1] + x[1:21]
def shuffle_c8f4c133(x):
    # just reverse it
    return [x[p] for p in [26, 1, 20, 25, 34, 22, 6, 13, 16, 31, 7, 3, 4, 32, 12, 30, 23, 24, 15, 9, 14, 10, 0, 19, 21, 17, 33, 2, 11, 28, 8, 18, 27, 5, 35, 29]]
def cxor_3b62f0a0(x):
    return [x[i] ^ 8234630926 for i in range(k)]
def chunk_0f48dab8(x):
    return x[24:] + x[:24]
def xor_3f0bcfae(x):
    y = [970039119, 3421665880, 61863390, 7185323672, 7081461828, 2661443339, 2077624070, 5327441125, 1228206298, 1880360657, 2152996747, 2046627103, 6149624451, 320507217, 4736497573, 7288548227, 302536254, 7295023184, 7971705072, 1924847066, 6668878220, 4184587925, 7125583143, 9213763905, 8112026552, 3124622994, 4772059765, 8902174283, 6585314057, 3304345205, 1567333715, 9700915408, 5376457429, 4372749243, 1015904897, 4295106835]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_645c1d15(x):
    # the best
    y = [ord(p) for p in 'b4874133af6bc0c85d0ccdf3b140b12897b1']
    return [x[i] * y[i] for i in range(k)]
def chunk_0f650cd2(x):
    # just reverse it
    return x[3:] + x[:3]
def shuffle_b6a2aa6c(x):
    return [x[p] for p in [27, 5, 30, 24, 7, 13, 3, 34, 6, 15, 29, 33, 16, 25, 9, 22, 21, 28, 1, 23, 18, 11, 32, 10, 20, 17, 14, 26, 4, 8, 0, 35, 31, 2, 12, 19]]
def chsub_8a25c41f(x):
    y = [ord(p) for p in 'ddce7ae800c366aeb66ad485ed331b7bd5e4']
    return [x[i] - y[i] for i in range(k)]
def chxor_4447550e(x):
    # shiet?
    y = [ord(p) for p in 'ba415a148bf67c65b708bc4816c182a09548']
    return [x[i] ^ y[i] for i in range(k)]
def csub_079e185c(x):
    # lel
    return [x[i] - 2757229559 for i in range(k)]
def add_a00a7d48(x):
    # rekt
    y = [2116410555, 8051977396, 4070058054, 9434670043, 3014277724, 4895925381, 2184603778, 5511725959, 4074043105, 601873634, 6185343329, 3033668343, 9553168894, 5076689944, 6259376246, 6933696915, 274544440, 3327249879, 3153441661, 7254182533, 2592680951, 6698744431, 2726369027, 9793347830, 8995457263, 2997528382, 7045712801, 4428926951, 669871557, 3715422896, 6435984755, 7499906040, 8102686107, 2958140179, 5212854392, 7167760389]
    return [x[i] + y[i] for i in range(k)]
def digsub_2ab90ae8(x):
    # rekt
    return [int(str(n)[:1] + ''.join(['4', '7', '2', '1', '8', '3', '0', '6', '5', '9'][int(p)] for p in str(n)[1:])) for n in x]
def deck_d058f6dc(x):
    return x[34:] + x[13:20] + x[20:34] + x[:13]
def xor_0e83be33(x):
    y = [3162409423, 343556179, 5302074010, 9610409812, 1053375220, 3521198486, 7017961223, 6680233084, 3486773633, 6918346312, 7466976057, 6265368573, 1890768086, 9714077452, 5301638689, 1064252648, 4022008520, 1927948903, 4865903042, 8995623341, 3169341050, 2360878978, 3279959263, 3792871035, 5897001626, 742633943, 8185243063, 2902510118, 4944730630, 9804387997, 237427433, 1432650896, 8069412468, 8685039068, 6672463621, 5091878705]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_18437de0(x):
    y = [ord(p) for p in 'bf4b04cad79dc4a4997a41710e4187ced6f7']
    return [x[i] - y[i] for i in range(k)]
def xor_381364cd(x):
    y = [8363138036, 2925302524, 7659507675, 6157208352, 6958077079, 1611619679, 4139711544, 4167876635, 2715584543, 6746799152, 9587144779, 4917479806, 9231409237, 9383558288, 4649230031, 5545620253, 2874703108, 996521456, 3226352667, 1030811706, 8306104153, 7529660377, 615918296, 5207837990, 3346048556, 7880924880, 1903679631, 3918858542, 2153384698, 4107477620, 2409634508, 5151934886, 4871317598, 9916434668, 611085786, 8521350171]
    return [x[i] ^ y[i] for i in range(k)]
def add_83aabfde(x):
    # shiet?
    y = [1490677430, 5216708399, 7456058578, 8169324425, 9391121682, 9075330282, 8759212696, 5495055072, 3429276219, 3619312534, 9778880671, 1793096536, 7414786063, 3886200964, 6509455575, 6202682437, 3909244339, 862371782, 9718381831, 8127921410, 8167194585, 1799722103, 3143326893, 413279575, 3425207957, 1285053256, 8696768771, 7185236878, 7053992277, 817123843, 4009625488, 4595821435, 8557126233, 4914509351, 2549571421, 9127045050]
    return [x[i] + y[i] for i in range(k)]
def xor_07333316(x):
    y = [1846249030, 8439242246, 8064865006, 7025706968, 9383046359, 9311854037, 6837847426, 4249397647, 6444204916, 97671154, 9296204919, 580708143, 6552490733, 5450897020, 8338362191, 8234536446, 9487985228, 603646378, 8949402927, 7202209502, 3456903254, 4761712541, 2899935643, 2733931333, 6233991457, 6379479279, 6572453495, 5193524341, 5215235620, 2023892029, 4627573659, 2788003618, 1282391613, 8398448571, 4097872970, 2414004482]
    return [x[i] ^ y[i] for i in range(k)]
def cadd_caf674cf(x):
    # so good
    return [x[i] + 2041858973 for i in range(k)]
def xor_e6bc2bcf(x):
    # lmaooo
    y = [7284417053, 1271688644, 5992053618, 907066515, 3078776443, 5223532266, 2638365523, 5736298452, 6807766090, 1843141219, 794386834, 7957997028, 4654253972, 9140609113, 6914100959, 9258653102, 9749483559, 7019450469, 2588600201, 1612792274, 1793061192, 6632996100, 8345120180, 9148086767, 3187076559, 5740142578, 5834161525, 477646036, 5370128713, 9917612328, 9803820104, 8162061721, 7814615321, 6315259766, 9723722576, 738364183]
    return [x[i] ^ y[i] for i in range(k)]
def deck_c2a39eed(x):
    # mucho encrypto
    return x[:14] + x[14:32] + x[32:] + x[32:32]
def xor_a1e6019f(x):
    y = [1631196276, 5247863862, 3698454096, 9348810614, 1500386273, 2342036676, 2471544468, 6723083985, 1859597758, 1849607915, 9078335327, 6712891849, 8112512820, 2975255094, 5941122693, 1819220029, 3003824141, 5716743797, 9717856425, 5744862764, 407565914, 4759759388, 5121868591, 1002609176, 9252486781, 3311588541, 8993703583, 7849537063, 6265705831, 4309668649, 8147405339, 1616434402, 5079321145, 4186738840, 1210873902, 4998168019]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_95566664(x):
    return x[7:] + x[:7]
def chunk_1e635fb5(x):
    # the flag is flag{jk}
    return x[8:] + x[:8]
def chunk_b195e92b(x):
    return x[15:] + x[:15]
def csub_936d88b2(x):
    return [x[i] - 4799993025 for i in range(k)]
def deck_5ed522de(x):
    # the best
    return x[15:23] + x[:15] + x[23:25] + x[25:]
def csub_e6b3e198(x):
    return [x[i] - 6002405256 for i in range(k)]
def cmul_0c91bf4c(x):
    return [x[i] * 8 for i in range(k)]
def shuffle_a722dfed(x):
    # so good
    return [x[p] for p in [17, 5, 29, 21, 4, 7, 0, 24, 11, 34, 30, 13, 28, 31, 27, 26, 19, 3, 32, 35, 6, 14, 8, 2, 15, 22, 23, 9, 25, 1, 10, 12, 33, 20, 16, 18]]
def csub_ec729961(x):
    return [x[i] - 6559816547 for i in range(k)]
def chunk_20e19fb4(x):
    return x[16:] + x[:16]
def chxor_a987af1b(x):
    # evil
    y = [ord(p) for p in '63ffb642146b2c44021268b5690abdc1d97a']
    return [x[i] ^ y[i] for i in range(k)]
def add_986dd560(x):
    y = [9965079572, 6825817526, 7003441057, 306826299, 9408481070, 1346458055, 7514540941, 3241301850, 2333748376, 1215669745, 2117109076, 1430161856, 9605244947, 7743646333, 4965247986, 9587096354, 1117798130, 4223505368, 9529807364, 1587247585, 6374229739, 8512078966, 2371151187, 4036528446, 8158365745, 8117954877, 26086361, 1663420046, 7652360012, 4812257141, 9917052488, 5225016651, 5268123123, 5656459590, 6254840471, 473451939]
    return [x[i] + y[i] for i in range(k)]
def cadd_7f81973a(x):
    # so good
    return [x[i] + 6138710278 for i in range(k)]
def chsub_e508cd4b(x):
    # so good
    y = [ord(p) for p in '73d7cbce1b856a812fb436e3901dae9e8996']
    return [x[i] - y[i] for i in range(k)]
def chsub_1c4c548c(x):
    # encryption
    y = [ord(p) for p in 'a9a9c5fd9f1fa84e267505c125705c4ff415']
    return [x[i] - y[i] for i in range(k)]
def add_8357f559(x):
    y = [2183124327, 245028100, 5543279212, 6729263139, 1928382077, 7902931823, 7686925834, 5301155751, 3469481322, 2898480772, 1124278239, 8443180852, 604861700, 6031296154, 9431391820, 9118406646, 5126439471, 5168600378, 8006985207, 6422686385, 6980599215, 726661355, 391597622, 8136702036, 8012448177, 7447344750, 2559028602, 2680823136, 7105840210, 5706436019, 228113782, 8651504277, 9818282053, 3417754805, 2587340452, 513014374]
    return [x[i] + y[i] for i in range(k)]
def chunk_9903c486(x):
    # the best
    return x[13:] + x[:13]
def chunk_d88231fa(x):
    # just reverse it
    return x[3:] + x[:3]
def xor_6aa3c7e7(x):
    y = [6542883190, 4383514947, 6864649499, 790447081, 3840263678, 5215273376, 8197417786, 9308127925, 2903013421, 6994841639, 6142541324, 7997208942, 6158247484, 9676934846, 6907161227, 4705923614, 8922723954, 6972934230, 637030506, 886281483, 5021201075, 9635587537, 198579643, 4217305673, 7378679456, 6152714384, 2960228401, 1607907816, 7021175705, 638136361, 9377237806, 1123849174, 5511104927, 6740579574, 2982545132, 5349082860]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_385bc3a3(x):
    y = [ord(p) for p in '2fa68795c62ccccf8bf416ffcdbe6e365180']
    return [x[i] ^ y[i] for i in range(k)]
def chsub_b705b02f(x):
    y = [ord(p) for p in 'ab0fd3c7c43b0a78ee5c9dda462b5f7d7199']
    return [x[i] - y[i] for i in range(k)]
def chunk_530e625c(x):
    # kek
    return x[6:] + x[:6]
def chsub_4364daac(x):
    # evil
    y = [ord(p) for p in '3eb13f3dc35bb684f78991ac3ec22e36e817']
    return [x[i] - y[i] for i in range(k)]
def cadd_6abb159d(x):
    return [x[i] + 3185158614 for i in range(k)]
def cmul_ea9160c7(x):
    return [x[i] * 3 for i in range(k)]
def cxor_4496ba54(x):
    return [x[i] ^ 2181653144 for i in range(k)]
def chxor_30705179(x):
    y = [ord(p) for p in '88783748a5d8304a9d7029dffadda6aa6573']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_28099eb5(x):
    # rekt
    return [x[p] for p in [25, 5, 31, 24, 18, 34, 21, 19, 3, 22, 10, 12, 32, 17, 14, 28, 6, 16, 0, 26, 7, 33, 13, 4, 8, 35, 29, 2, 9, 23, 15, 27, 30, 11, 1, 20]]
def chadd_f2fd70f1(x):
    # just reverse it
    y = [ord(p) for p in 'ce3f48c9cb7435e0728b00783702899d2cd3']
    return [x[i] + y[i] for i in range(k)]
def add_0f654473(x):
    # encryption
    y = [7331083295, 530755687, 2990215502, 3699594232, 7288177132, 8954075644, 6064948550, 2272680877, 4897563667, 2236340443, 1165811417, 5246597546, 5110283138, 7168007342, 40824918, 7576062641, 146566290, 3455353199, 45477295, 2636413708, 980583187, 5780562908, 3521447190, 8118502826, 8881135906, 6559640718, 2240889644, 3569240713, 3730763587, 6254854470, 4980120921, 514203580, 4742095132, 9059694112, 8741168379, 128638379]
    return [x[i] + y[i] for i in range(k)]
def cxor_f40371fb(x):
    # so good
    return [x[i] ^ 1819775266 for i in range(k)]
def chmul_23d520ac(x):
    y = [ord(p) for p in '31b45d7164b508e9b034f462d3dc0a66e1a7']
    return [x[i] * y[i] for i in range(k)]
def chmul_4245aa0c(x):
    y = [ord(p) for p in '0100b0778ee109d1c66801d66a0fa31c591a']
    return [x[i] * y[i] for i in range(k)]
def chxor_14ca1407(x):
    # lmaooo
    y = [ord(p) for p in 'f8b45e9d955d7e3cd19ec665a2900f880868']
    return [x[i] ^ y[i] for i in range(k)]
def csub_512edb93(x):
    return [x[i] - 1059635764 for i in range(k)]
def mul_658a4b4b(x):
    y = [4, 4, 4, 7, 4, 1, 5, 7, 2, 2, 1, 4, 7, 1, 3, 2, 6, 7, 6, 4, 1, 2, 2, 3, 2, 7, 3, 3, 5, 7, 3, 1, 6, 3, 5, 5]
    return [x[i] * y[i] for i in range(k)]
def sub_51002c26(x):
    y = [4618837866, 4117001751, 9744957003, 8377909827, 6875406081, 6326439167, 2128897097, 7939173871, 363722223, 4732346455, 5576145966, 2360110409, 5567091117, 8909927831, 1278181020, 9147699410, 2158544414, 3541264268, 2146200857, 4338028643, 2945887672, 8750196866, 134248785, 3710920093, 2286676592, 8109475411, 6099845996, 5967476628, 9206971341, 4384997837, 82330040, 204327195, 5163700971, 9437350006, 9852779540, 4906345957]
    return [x[i] - y[i] for i in range(k)]
def deck_8d8a697a(x):
    # mucho encrypto
    return x[26:33] + x[:23] + x[23:26] + x[33:]
def chsub_a12104be(x):
    y = [ord(p) for p in '51743011b7caa48dd5b6c913f08287e1ae4b']
    return [x[i] - y[i] for i in range(k)]
def cadd_bf38d005(x):
    # rekt
    return [x[i] + 1024578173 for i in range(k)]
def add_3fa4a716(x):
    y = [3650606300, 7825712093, 9621877003, 2739799829, 7603339353, 7593083417, 2738178093, 8676335304, 1838182448, 7157330145, 8198673514, 169974249, 6928531131, 1047567797, 5840821486, 1771123121, 6304061683, 313909550, 1247445888, 7245016316, 8682182495, 395761459, 8454207519, 4370843171, 1160020953, 1177823126, 6922741318, 1171286535, 7126968949, 2409204846, 2584418724, 3872947820, 372847976, 7830331771, 2275479776, 3063714626]
    return [x[i] + y[i] for i in range(k)]
def chunk_ae5488a0(x):
    # encryption
    return x[25:] + x[:25]
def sub_91a9b671(x):
    # shiet?
    y = [5984215062, 3539209958, 2234374526, 6678799755, 6142745288, 5854607962, 5288469966, 265872046, 1873929056, 5535182796, 1845578102, 5143648287, 2423254280, 2929292179, 8166434766, 6969482027, 5678406982, 212066102, 8188353805, 906113739, 3735740365, 2914423141, 382783933, 8162788813, 4183340711, 8525665508, 1338696002, 4876510054, 5316724267, 2103564208, 5756025643, 8892015096, 3977788044, 449918126, 5321973469, 7036193853]
    return [x[i] - y[i] for i in range(k)]
def chxor_56abb2e0(x):
    y = [ord(p) for p in 'be5394e04cca61bf061116dad21cb47ca3c5']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_aeea1365(x):
    return [x[i] + 5803779263 for i in range(k)]
def chunk_31cdb624(x):
    return x[19:] + x[:19]
def mul_74e68352(x):
    y = [5, 1, 8, 4, 7, 8, 7, 8, 1, 2, 2, 4, 5, 1, 4, 5, 2, 7, 2, 6, 2, 6, 4, 4, 8, 2, 2, 6, 2, 8, 3, 1, 2, 8, 6, 5]
    return [x[i] * y[i] for i in range(k)]
def add_ed9a96c7(x):
    y = [9700960736, 8473198119, 308687312, 5744994905, 7419581443, 6567131125, 2125528623, 3016785503, 7549392019, 4119587714, 9740005722, 9391135849, 9348951392, 8798701176, 7659269719, 2612289148, 1579894434, 4899670350, 2419345980, 2070862828, 7001577668, 5814453668, 4255812162, 4614062218, 3830530135, 1329622277, 8177769411, 8464127562, 5707417573, 7814896030, 3142349157, 3779474458, 7301165921, 5951370413, 3413222208, 9285375014]
    return [x[i] + y[i] for i in range(k)]
def deck_885a1964(x):
    return x[36:] + x[:17] + x[21:36] + x[17:21]
def deck_fb7a1316(x):
    # so good
    return x[2:3] + x[:2] + x[3:31] + x[31:]
def mul_14ad1525(x):
    y = [3, 1, 2, 2, 3, 2, 2, 3, 4, 1, 3, 1, 3, 2, 2, 2, 3, 1, 4, 4, 4, 3, 3, 1, 2, 3, 2, 2, 4, 3, 2, 3, 3, 2, 3, 1]
    return [x[i] * y[i] for i in range(k)]
def csub_656995cb(x):
    # so good
    return [x[i] - 1820061316 for i in range(k)]
def add_c3711383(x):
    y = [1982517386, 8511013912, 5566767366, 5117755476, 6775463499, 3193129782, 385503205, 3102669362, 5988884110, 2365444909, 8270558952, 2462956167, 3200993019, 2127715006, 6998563173, 9796023418, 2663735591, 8338568697, 5441288329, 6314595273, 8934942999, 388502232, 2369837783, 5067163623, 7940189658, 7304103736, 8490114141, 6389304953, 9657166865, 509008306, 3296485471, 2916075560, 4590428272, 450957331, 8802082917, 5929503769]
    return [x[i] + y[i] for i in range(k)]
def deck_fe7bc9a5(x):
    # mucho encrypto
    return x[:21] + x[28:] + x[21:23] + x[23:28]
def chunk_b0b7f3b2(x):
    # the best
    return x[29:] + x[:29]
def cadd_3124bc3c(x):
    return [x[i] + 8159814131 for i in range(k)]
def add_1a353536(x):
    y = [1138771905, 9797579194, 5224036294, 7864706179, 9585079550, 9576521137, 2821604468, 4922615897, 3619322610, 2918510464, 6271602970, 5818024109, 8630916928, 3515466263, 9563453263, 3490027271, 6483535541, 5972455696, 9640129436, 5837927992, 4704005562, 1066516912, 685355071, 2752680699, 1368672349, 4571451986, 9436192268, 9747610390, 8954531036, 3501451324, 8448578514, 6982611871, 2442258971, 1864719529, 4888142305, 1900684298]
    return [x[i] + y[i] for i in range(k)]
def chsub_42d80cc4(x):
    # rekt
    y = [ord(p) for p in 'a71e8cafcc9a520588809a285651f2717253']
    return [x[i] - y[i] for i in range(k)]
def add_e696fc9f(x):
    y = [8280397599, 1281331746, 1352208755, 6085240006, 5760879740, 8963382864, 237062557, 6866556134, 6236499232, 8937811458, 9320669256, 8279557186, 7155870308, 4900130341, 4689403303, 8430639300, 7111493770, 1576255885, 9305332199, 5340681318, 7957193728, 9621613030, 4660707537, 5557458048, 5867044906, 9052802299, 4737837794, 5586911767, 3498989000, 879678772, 9415940581, 3681288075, 8001883881, 7862654832, 8878730765, 7150696941]
    return [x[i] + y[i] for i in range(k)]
def chxor_e024e3e0(x):
    y = [ord(p) for p in 'dd28a1d9e11ddec54c0407f887bc701d79d8']
    return [x[i] ^ y[i] for i in range(k)]
def csub_9678c8c9(x):
    # encryption
    return [x[i] - 2945285419 for i in range(k)]
def sub_a3d54f98(x):
    # encryption
    y = [744707040, 8434355110, 9759554521, 3279807510, 7796070695, 7394678123, 6363097559, 3142761843, 2019946378, 6153642757, 1043121495, 6720106272, 2038614382, 3374481644, 7384470545, 2283949043, 3408077029, 6535392076, 8975901636, 9350907900, 3356965310, 6375930110, 6591548864, 3808217638, 3818311345, 3459029713, 5051580564, 3236349427, 9961123630, 555626903, 4013345536, 5210698573, 7983706255, 3278145123, 4938310567, 9509999760]
    return [x[i] - y[i] for i in range(k)]
def cadd_03a33025(x):
    return [x[i] + 7522483558 for i in range(k)]
def chsub_7af0731b(x):
    y = [ord(p) for p in '9b406a4deed4595c6eef8254f27f5f72c8dd']
    return [x[i] - y[i] for i in range(k)]
def chmul_882a927d(x):
    y = [ord(p) for p in '46ce3d68a76cd4174ac8cc6042b9cedaece1']
    return [x[i] * y[i] for i in range(k)]
def shuffle_a27257a0(x):
    return [x[p] for p in [24, 25, 16, 34, 12, 2, 11, 10, 19, 35, 1, 33, 5, 31, 9, 13, 23, 3, 22, 21, 0, 4, 30, 26, 17, 14, 32, 6, 18, 20, 29, 28, 8, 7, 27, 15]]
def shuffle_f6aee04d(x):
    # rekt
    return [x[p] for p in [31, 18, 25, 3, 2, 29, 26, 5, 13, 16, 28, 0, 8, 33, 32, 12, 22, 20, 1, 34, 10, 30, 6, 24, 4, 9, 23, 14, 27, 15, 19, 11, 35, 21, 7, 17]]
def cxor_16cc8dc6(x):
    return [x[i] ^ 8008808708 for i in range(k)]
def cadd_b3a97789(x):
    # lmaooo
    return [x[i] + 4788344836 for i in range(k)]
def chadd_8afcabff(x):
    y = [ord(p) for p in '6e643d31080d71eaea2b603568e7b63ea33a']
    return [x[i] + y[i] for i in range(k)]
def cmul_738aef71(x):
    # lel
    return [x[i] * 10 for i in range(k)]
def shuffle_de9df0cf(x):
    return [x[p] for p in [7, 19, 31, 2, 0, 24, 23, 14, 8, 4, 22, 33, 5, 27, 9, 32, 10, 13, 34, 16, 17, 29, 21, 11, 25, 30, 28, 35, 20, 1, 18, 12, 15, 3, 26, 6]]
def chxor_a120d278(x):
    # shiet?
    y = [ord(p) for p in '70515aef54fe89f9536bfd5dedc1ebcd9fe6']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_ec0fef0e(x):
    # shiet?
    y = [ord(p) for p in '889040264c5dd1474c2e59314d47e86e74b3']
    return [x[i] + y[i] for i in range(k)]
def chadd_3e7b3151(x):
    y = [ord(p) for p in '869387a80bce1039d96f5994e5b4e1ebb167']
    return [x[i] + y[i] for i in range(k)]
def add_c43e26d8(x):
    y = [4789355022, 8884270024, 2594857384, 2662255936, 2433611642, 8779378315, 553078439, 3676942819, 1498821913, 6720167660, 9590736333, 3225127886, 3344731096, 167758346, 30289643, 935583506, 2377921562, 9502638929, 7262547739, 532929870, 6606297050, 6581014426, 8355475744, 4794357883, 7872073650, 2463347183, 3520078855, 8040735132, 6212889867, 2812343193, 496000687, 9253324120, 6394024549, 23902568, 9548477760, 4791271570]
    return [x[i] + y[i] for i in range(k)]
def chadd_0305d89a(x):
    y = [ord(p) for p in '4e51b6e98617a2a76287279960b40f691e5d']
    return [x[i] + y[i] for i in range(k)]
def cmul_3dfa51d9(x):
    # lel
    return [x[i] * 5 for i in range(k)]
def csub_b97c1316(x):
    # lmaooo
    return [x[i] - 9696004672 for i in range(k)]
def chsub_27fbe141(x):
    y = [ord(p) for p in '0dfb5ce1e30b025e57f99490ea1caa5a6349']
    return [x[i] - y[i] for i in range(k)]
def shuffle_2c2121d2(x):
    return [x[p] for p in [4, 18, 9, 6, 24, 29, 15, 27, 13, 33, 31, 25, 14, 34, 35, 0, 12, 1, 30, 7, 17, 16, 21, 2, 26, 22, 20, 28, 32, 19, 3, 11, 10, 8, 23, 5]]
def add_a69aa2f4(x):
    y = [7251962429, 8510971448, 2308572139, 8170215409, 7802213027, 7428753756, 9354244161, 858108586, 5310935419, 2076057960, 7873121566, 7905895608, 6868245860, 1196071924, 4450578698, 3837513276, 2203643101, 4042096756, 9149661237, 7633698233, 4140396639, 6832665366, 5229781907, 1312986786, 7168075254, 6211641730, 2314021540, 3899306352, 1466114685, 4118456780, 857206344, 1532492760, 8859803376, 2000147572, 436792169, 2747056439]
    return [x[i] + y[i] for i in range(k)]
def cadd_a2b15006(x):
    return [x[i] + 4577373615 for i in range(k)]
def digsub_4dd34aef(x):
    return [int(str(n)[:1] + ''.join(['2', '5', '0', '7', '3', '6', '4', '1', '8', '9'][int(p)] for p in str(n)[1:])) for n in x]
def chunk_f75e2f55(x):
    # so good
    return x[10:] + x[:10]
def cmul_5410e40d(x):
    # so good
    return [x[i] * 10 for i in range(k)]
def deck_fcdc9f45(x):
    # just reverse it
    return x[0:4] + x[9:] + x[4:9] + x[:0]
def chunk_174427d2(x):
    return x[27:] + x[:27]
def cadd_4d6b4b20(x):
    return [x[i] + 7702101126 for i in range(k)]
def sub_178d064e(x):
    y = [7655590060, 1918487585, 4389605382, 2932093632, 3127346022, 9849805205, 1789651864, 9776352874, 2264797602, 6075771400, 3504478052, 4731073064, 2286276108, 4161467127, 1676688632, 2261346101, 9861878558, 3364400257, 236837807, 5524158985, 2940642517, 967267766, 5093710168, 9334123098, 2771593460, 7638048566, 5558530434, 990447414, 2252230276, 2911477290, 4888051307, 6560031620, 6108686685, 9109209329, 8326774325, 6594762234]
    return [x[i] - y[i] for i in range(k)]
def xor_7f9cb2c2(x):
    # mucho encrypto
    y = [5127934038, 5143686896, 5428215089, 2824029381, 2284301138, 693937324, 9954590521, 5412304359, 4667369583, 4810267009, 720485498, 366580065, 7962429092, 7187274404, 2734804066, 8544041351, 2447019672, 2610523067, 4459213106, 9788260911, 8717124860, 2583894657, 1322200066, 1132065440, 979831035, 5840641192, 1507658211, 2773712176, 9738654810, 5076412894, 6487464494, 9566779751, 6401966369, 7220893646, 6966331622, 7982665113]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_b543d1d6(x):
    y = [ord(p) for p in 'ea2e3e91560ac2ccf6687584e9155d8635db']
    return [x[i] - y[i] for i in range(k)]
def cmul_2971f624(x):
    # the flag is flag{jk}
    return [x[i] * 9 for i in range(k)]
def chunk_7050a958(x):
    return x[30:] + x[:30]
def sub_3c288b1c(x):
    y = [720111342, 3876661685, 8537436626, 1500737671, 5618076342, 8546281801, 4096617327, 1773065250, 9521820163, 4769521015, 6273165546, 4534339808, 2519161813, 3589551146, 8712862, 3038043184, 7069492521, 8656555139, 5625960686, 3712559529, 7796586926, 3603153775, 1806650829, 1184836553, 4162335688, 1692645297, 1559518308, 8181260173, 7001209928, 4695950334, 5435844129, 1059119803, 8408330241, 835345174, 8183678403, 2164064675]
    return [x[i] - y[i] for i in range(k)]
def xor_acef1014(x):
    # evil
    y = [3041239643, 3080143454, 1522272668, 3634349351, 8027239101, 8897007883, 2637464340, 5775020925, 2929131478, 6134275981, 3743425890, 4929451547, 1133272918, 4233276386, 1141345746, 1387269293, 2909736847, 6632907855, 3554463684, 6188081730, 77105417, 6282624733, 9305567776, 8118879953, 1393287610, 3040630319, 883144437, 1188634119, 7640259026, 5773170090, 4431712583, 9589229761, 1624318289, 4144829579, 8190412866, 1490717479]
    return [x[i] ^ y[i] for i in range(k)]
def add_378b40cb(x):
    y = [7005350321, 166699695, 8620150783, 9846588294, 3581816658, 1603765099, 6659612132, 8030269351, 9076140644, 4646232797, 9898885693, 2428226924, 7124338226, 804385657, 6640915580, 8783890631, 3119802028, 5265047069, 2224854016, 7756107902, 5800785949, 4627512837, 6903909421, 3123128405, 4309004439, 8530543352, 2346215696, 9280646780, 1120007318, 3269416996, 730722099, 5891072588, 7576129309, 1339214429, 3144018028, 5342244648]
    return [x[i] + y[i] for i in range(k)]
def add_917bbbbc(x):
    y = [5150214377, 7582900766, 442116162, 6894080844, 6878097770, 7893654043, 9342144528, 3092750227, 5091365515, 1417666038, 3683134259, 2667976925, 6159739589, 6548004481, 2999684152, 4046121339, 570861555, 1257419490, 4603128538, 3541689527, 69828484, 9611353629, 285499383, 3014090576, 8246492616, 3134235935, 589676308, 2048162864, 6737973085, 6779537357, 8999455638, 7955978830, 4298353964, 1566593334, 6837177499, 9933563770]
    return [x[i] + y[i] for i in range(k)]
def chunk_a008d507(x):
    return x[15:] + x[:15]
def chadd_36b8739d(x):
    # rekt
    y = [ord(p) for p in 'ce93a4cb8518b98877e435d5b17bb1430e4c']
    return [x[i] + y[i] for i in range(k)]
def add_df9616a0(x):
    # rekt
    y = [9299847783, 5390866987, 3258344124, 2516947559, 7541633890, 6986445095, 5230105223, 2287942404, 4361870191, 1716713181, 8699867681, 4936774772, 534129421, 127353627, 9061630822, 1424298341, 7045050337, 9976491568, 1052975850, 8061592126, 2762783220, 9017108578, 2739964488, 4888644649, 3272091520, 4450693191, 7559784758, 152669414, 6886140702, 282751052, 172376604, 7279297520, 478005121, 6839242548, 2112786613, 8019689052]
    return [x[i] + y[i] for i in range(k)]
def shuffle_f89bee84(x):
    # lmaooo
    return [x[p] for p in [10, 6, 9, 3, 30, 11, 4, 2, 20, 29, 22, 26, 0, 32, 8, 5, 28, 23, 35, 21, 24, 16, 7, 34, 18, 14, 25, 1, 13, 27, 15, 31, 12, 19, 33, 17]]
def cadd_a6332778(x):
    return [x[i] + 5159031318 for i in range(k)]
def deck_d9465190(x):
    # lmaooo
    return x[:0] + x[0:0] + x[0:34] + x[34:]
def chunk_f140121b(x):
    return x[3:] + x[:3]
def chsub_e1699c5c(x):
    y = [ord(p) for p in '0537370d6717f17c637aa30b04e29046bdff']
    return [x[i] - y[i] for i in range(k)]
def digsub_732f28f7(x):
    return [int(str(n)[:1] + ''.join(['7', '2', '0', '9', '5', '3', '6', '1', '8', '4'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_d1541fbc(x):
    return [x[p] for p in [9, 32, 17, 30, 33, 11, 1, 3, 29, 7, 21, 5, 8, 6, 35, 27, 2, 14, 20, 24, 22, 31, 26, 15, 19, 23, 10, 12, 16, 13, 4, 0, 18, 25, 34, 28]]
def cxor_7d6f0b67(x):
    # mucho encrypto
    return [x[i] ^ 7086759060 for i in range(k)]
def chsub_e93fd882(x):
    # lmaooo
    y = [ord(p) for p in 'f53fb0a85d183b086859df804b07072334eb']
    return [x[i] - y[i] for i in range(k)]
def chsub_d2557bea(x):
    # lel
    y = [ord(p) for p in 'a7514d65e6a23edbfd3cbd8aebb85d0ed083']
    return [x[i] - y[i] for i in range(k)]
def csub_7abf52ba(x):
    # shiet?
    return [x[i] - 6804331972 for i in range(k)]
def digsub_6afbfca8(x):
    return [int(str(n)[:1] + ''.join(['5', '7', '0', '8', '9', '1', '6', '4', '3', '2'][int(p)] for p in str(n)[1:])) for n in x]
def chxor_3b22e51a(x):
    y = [ord(p) for p in 'bbd554336c0ddeaec800f9804ea61588a93a']
    return [x[i] ^ y[i] for i in range(k)]
def xor_df4800db(x):
    # shiet?
    y = [850491768, 3815310012, 8691671343, 6544965908, 1604044724, 3595439934, 7660243359, 4087559569, 1872240461, 9149469839, 4708356911, 1412440909, 5219888103, 7230047945, 328028477, 8888944697, 2843270447, 4192143932, 7637706128, 3445872456, 6263058292, 3398585813, 7341977468, 3840523861, 8456519655, 1334862626, 3868388845, 8281078512, 802630034, 1726812774, 4796183216, 5273792461, 6057302340, 3309623217, 2938033333, 6241189180]
    return [x[i] ^ y[i] for i in range(k)]
def cmul_7a2b74fe(x):
    # lmaooo
    return [x[i] * 7 for i in range(k)]
def chunk_02f12019(x):
    return x[30:] + x[:30]
def xor_3b3fc8a0(x):
    y = [6557303036, 3468753805, 2879371524, 4522235076, 5854719716, 7912328762, 3178357914, 8549825822, 2965902069, 7282068827, 3611023226, 927391460, 9926879051, 835946018, 8238863729, 2675854453, 3107351399, 7432129581, 4828750673, 6590230483, 7207571496, 9223897621, 9160617198, 301841821, 3537572001, 347277454, 4725375676, 3249287103, 6302209816, 6360682115, 8626349456, 9499103896, 1262510303, 1412653312, 3189643810, 9315539273]
    return [x[i] ^ y[i] for i in range(k)]
def deck_b1b26e08(x):
    # lmaooo
    return x[13:19] + x[:7] + x[19:] + x[7:13]
def chmul_99695284(x):
    y = [ord(p) for p in '3c156d5c4353cea303989c6e371fd5402a36']
    return [x[i] * y[i] for i in range(k)]
def cmul_97c0f64c(x):
    return [x[i] * 7 for i in range(k)]
def chsub_a16ed93a(x):
    y = [ord(p) for p in 'aa84be86d5e72312c73018b68136cb5a7468']
    return [x[i] - y[i] for i in range(k)]
def shuffle_15813d84(x):
    return [x[p] for p in [5, 20, 13, 29, 32, 17, 30, 7, 10, 3, 27, 19, 14, 15, 28, 34, 1, 35, 21, 22, 18, 16, 33, 11, 9, 0, 12, 24, 6, 26, 4, 8, 23, 31, 2, 25]]
def deck_edc49acc(x):
    return x[:10] + x[29:34] + x[10:29] + x[34:]
def digsub_a56c83c8(x):
    return [int(str(n)[:1] + ''.join(['0', '2', '6', '9', '8', '7', '3', '5', '1', '4'][int(p)] for p in str(n)[1:])) for n in x]
def cxor_b42cfa90(x):
    return [x[i] ^ 8217052683 for i in range(k)]
def csub_973b4044(x):
    # evil
    return [x[i] - 5688544006 for i in range(k)]
def cxor_ccd49eb2(x):
    return [x[i] ^ 8093335128 for i in range(k)]
def add_23028792(x):
    # the flag is flag{jk}
    y = [6725443459, 7430623305, 9701907709, 6894501917, 5317365431, 4330192175, 4702000531, 1243119847, 7805315760, 5902164336, 6575956019, 5040093131, 2024880145, 8009422542, 7931117858, 3692730835, 8722805645, 4859771222, 2467771583, 9032520839, 6937388090, 4314212860, 8839860176, 9325758492, 4427245247, 199338233, 3243376977, 5139182601, 2829070438, 6018691408, 7249598438, 101925493, 5046716560, 2063247608, 7165941310, 9322860998]
    return [x[i] + y[i] for i in range(k)]
def chunk_27ab9318(x):
    # just reverse it
    return x[8:] + x[:8]
def chmul_843e27ef(x):
    y = [ord(p) for p in '208dee27ca188f26cda243aa4abb920bceae']
    return [x[i] * y[i] for i in range(k)]
def csub_8c5dcc87(x):
    # just reverse it
    return [x[i] - 6832523356 for i in range(k)]
def cxor_24690d71(x):
    return [x[i] ^ 6801382691 for i in range(k)]
def chunk_ddef464d(x):
    # encryption
    return x[8:] + x[:8]
def deck_70f0105d(x):
    # so good
    return x[6:6] + x[6:] + x[1:6] + x[:1]
def sub_32cc1a97(x):
    y = [685868260, 6826147698, 1165879176, 1020624427, 821898804, 1334320186, 214706200, 3902729505, 2156329957, 805503422, 6926722806, 2818717644, 7652094791, 7198660875, 3461940732, 9784880306, 8112494542, 9768605648, 9450451953, 9877585583, 769499162, 7143551898, 1523629807, 4185155759, 5156985945, 7217821926, 9515333970, 442048841, 7162666892, 7164820511, 2483231646, 4934041919, 5121374374, 79091978, 9896143656, 2639984140]
    return [x[i] - y[i] for i in range(k)]
def cxor_938a50c5(x):
    return [x[i] ^ 7804334588 for i in range(k)]
def shuffle_28820acc(x):
    # mucho encrypto
    return [x[p] for p in [6, 20, 23, 26, 13, 22, 15, 16, 10, 5, 3, 19, 14, 7, 32, 8, 2, 30, 25, 9, 17, 35, 12, 1, 31, 34, 24, 0, 29, 27, 4, 28, 18, 33, 11, 21]]
def shuffle_a02cdb24(x):
    return [x[p] for p in [19, 29, 15, 26, 28, 8, 2, 21, 35, 4, 18, 31, 23, 20, 27, 6, 16, 0, 13, 17, 22, 9, 11, 10, 33, 7, 24, 25, 14, 32, 3, 30, 1, 5, 12, 34]]
def chsub_e0ab5693(x):
    y = [ord(p) for p in '7993eea0301c75b4f10f1a98e5312c04203a']
    return [x[i] - y[i] for i in range(k)]
def deck_8faa5174(x):
    # the flag is flag{jk}
    return x[2:6] + x[6:8] + x[:2] + x[8:]
def cxor_aebccd1c(x):
    return [x[i] ^ 1148681078 for i in range(k)]
def digsub_172d24b0(x):
    # the best
    return [int(str(n)[:1] + ''.join(['0', '5', '1', '2', '7', '8', '3', '9', '4', '6'][int(p)] for p in str(n)[1:])) for n in x]
def chsub_f17ba2e2(x):
    y = [ord(p) for p in '4af0c68475442700916062d441ec24a9c248']
    return [x[i] - y[i] for i in range(k)]
def csub_ad630998(x):
    # just reverse it
    return [x[i] - 9838888389 for i in range(k)]
def digsub_e0de2a5d(x):
    return [int(str(n)[:1] + ''.join(['5', '0', '3', '1', '4', '9', '8', '2', '6', '7'][int(p)] for p in str(n)[1:])) for n in x]
def deck_31d336cf(x):
    return x[9:25] + x[:9] + x[33:] + x[25:33]
def cadd_2dd09d3d(x):
    return [x[i] + 9376228494 for i in range(k)]
def add_74fa4c8a(x):
    y = [3488512399, 3858964475, 4138141462, 96792239, 5252157231, 2225271476, 2873283815, 7140361777, 308530165, 4652556, 7334283419, 2963920800, 376053054, 4845392469, 6973078697, 7984429191, 9119459214, 6276548331, 5854715369, 5992137066, 8153572854, 2878245544, 6561511383, 5127506830, 5285838541, 916769060, 8595815516, 9021603574, 6350818382, 1920090013, 3755755306, 4480904563, 2575634163, 5706938403, 9734159239, 6316606614]
    return [x[i] + y[i] for i in range(k)]
def chsub_30f73b24(x):
    # the best
    y = [ord(p) for p in 'b2561ea57f4228ccaad2553de806858a2991']
    return [x[i] - y[i] for i in range(k)]
def sub_a244688a(x):
    y = [6527280039, 9861088116, 8143019069, 411645114, 8586706014, 7457567437, 1680711623, 5241825297, 6217557474, 3378843703, 6828934774, 4371960769, 1798395462, 8145591185, 7432895329, 7961870921, 5089865400, 8187955784, 2546162804, 369682801, 952163707, 1211073970, 7148723034, 1548997129, 9496124624, 5993323732, 9988330278, 3606130561, 7788580391, 858708543, 5730632413, 6220157669, 4362625191, 841730675, 4805290076, 6980524077]
    return [x[i] - y[i] for i in range(k)]
def xor_f88ae7f1(x):
    y = [1277424376, 7588263123, 435753533, 9379550928, 6416059582, 7161151156, 1738590126, 8837563553, 7018203049, 8562034385, 8181169846, 8089168880, 3752098568, 6585530295, 4124592532, 5747568272, 9483684107, 7168676225, 346422183, 9016632954, 4268683876, 6648951127, 4216379894, 6785989928, 9448231053, 132975312, 4864275340, 8415102992, 7892019016, 7558928735, 7789153593, 5851771561, 4519155215, 160227876, 9885803736, 7745435180]
    return [x[i] ^ y[i] for i in range(k)]
def chadd_6156d6db(x):
    y = [ord(p) for p in '136c4b3f6a8f3344ef034c8d142cb617c2e3']
    return [x[i] + y[i] for i in range(k)]
def mul_1a3b698e(x):
    y = [2, 3, 6, 4, 3, 2, 4, 6, 3, 2, 5, 1, 3, 5, 4, 3, 4, 4, 6, 6, 1, 1, 5, 1, 1, 1, 1, 6, 4, 4, 4, 4, 5, 2, 6, 5]
    return [x[i] * y[i] for i in range(k)]
def deck_a4724055(x):
    # lel
    return x[13:17] + x[17:19] + x[:13] + x[19:]
def chadd_39c0e18e(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '0fe5242f6bc6d0097bce638402884c5f6b73']
    return [x[i] + y[i] for i in range(k)]
def digsub_50bc72d1(x):
    # encryption
    return [int(str(n)[:1] + ''.join(['5', '2', '3', '1', '8', '9', '7', '6', '4', '0'][int(p)] for p in str(n)[1:])) for n in x]
def add_c9b23e99(x):
    y = [6646468848, 4289916624, 8810405213, 2161702659, 7134187550, 6164134547, 7066020531, 3555375128, 9135537392, 8063077255, 1854819973, 8830896046, 6175495786, 9070990532, 1107279456, 8862132121, 8706220807, 4984147857, 2025442230, 3049470559, 3816089499, 8735763195, 3124460039, 3576073909, 2612192608, 9719531889, 9275006368, 3811101637, 793612305, 5861436564, 130221109, 1149754768, 8891132012, 2859345055, 1137262866, 1479465156]
    return [x[i] + y[i] for i in range(k)]
def chsub_68af0dd5(x):
    y = [ord(p) for p in '26724b5201ef157a9704474b0da22d591e1e']
    return [x[i] - y[i] for i in range(k)]
def digsub_e2a32d2b(x):
    # lmaooo
    return [int(str(n)[:1] + ''.join(['0', '5', '2', '9', '3', '7', '1', '4', '8', '6'][int(p)] for p in str(n)[1:])) for n in x]
def add_fb172b98(x):
    y = [4776647849, 1652241528, 7318888491, 4835030871, 1200586538, 5559851757, 6913486191, 7593308157, 8772991452, 4724734518, 6754243084, 2166536076, 9776045562, 9533859298, 3101605170, 4000090442, 6616833768, 760410410, 2994988472, 9385766311, 9751499615, 1647463205, 4795233932, 7036520543, 2441962182, 1685025853, 6517592468, 4684062605, 203972993, 1287047682, 6943505335, 9398177185, 8421731539, 4683076439, 414952394, 246001161]
    return [x[i] + y[i] for i in range(k)]
def chmul_138f562c(x):
    # kek
    y = [ord(p) for p in 'b2bc4a9952fa5aa13d07bea1d070a6aec981']
    return [x[i] * y[i] for i in range(k)]
def digsub_a821dc7d(x):
    # just reverse it
    return [int(str(n)[:1] + ''.join(['4', '9', '5', '1', '3', '0', '2', '8', '7', '6'][int(p)] for p in str(n)[1:])) for n in x]
def chsub_a40de1d7(x):
    # mucho encrypto
    y = [ord(p) for p in '8ee321aa0b36c22b00fda90c7938a6c6d934']
    return [x[i] - y[i] for i in range(k)]
def xor_0723c89e(x):
    y = [7653695832, 4601756860, 54434557, 9778604027, 6295134710, 8210306941, 232855860, 7306777175, 3044712805, 184608748, 3428767065, 6882946356, 6225569677, 6445249372, 9803486651, 1998158710, 8894603336, 6379040046, 4588006722, 4214809281, 5102769967, 836286177, 7323048805, 5921581967, 8219885002, 2470416600, 1796001556, 2178992965, 3276378312, 8664173036, 3903431026, 6898440320, 2829567652, 6988032766, 3183782848, 6799944165]
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_f4bbf14d(x):
    return [x[p] for p in [14, 8, 20, 12, 10, 15, 0, 7, 26, 9, 22, 3, 4, 13, 16, 32, 29, 35, 6, 24, 2, 31, 21, 28, 30, 19, 27, 17, 23, 34, 5, 11, 25, 18, 1, 33]]
def chxor_84d7073f(x):
    y = [ord(p) for p in '7d5517507e4f1093e5b1cc7ffa9ed3d11d48']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_5c9d432d(x):
    return [x[p] for p in [8, 2, 21, 22, 13, 4, 27, 12, 23, 16, 29, 18, 14, 5, 24, 15, 30, 20, 10, 33, 35, 17, 19, 0, 3, 11, 9, 6, 7, 34, 32, 26, 25, 31, 28, 1]]
def shuffle_f861c12e(x):
    # evil
    return [x[p] for p in [2, 15, 6, 9, 1, 29, 22, 35, 11, 23, 18, 30, 10, 24, 17, 34, 27, 8, 0, 13, 32, 28, 26, 5, 21, 16, 3, 25, 20, 31, 14, 19, 4, 12, 33, 7]]
def cmul_3c96ba6e(x):
    return [x[i] * 3 for i in range(k)]
def sub_a99136b5(x):
    # evil
    y = [5276764070, 3818272020, 3476438296, 6031853479, 9366095295, 8963276694, 2623474556, 9480649041, 2755814647, 4892784572, 2828388109, 9315598250, 5980941480, 3499503229, 1094904920, 8953861350, 8668689278, 6315842694, 7161911000, 2075791574, 3203755546, 4054829864, 6433141645, 4071241167, 6418910806, 3678828675, 4965301117, 2096640404, 3313462350, 7198912156, 6794780200, 2451661960, 9632355183, 3408281486, 8714781825, 4046011043]
    return [x[i] - y[i] for i in range(k)]
def chadd_fc03260a(x):
    y = [ord(p) for p in 'fafd8680224b15ff79f6fd6947ed1ed776d4']
    return [x[i] + y[i] for i in range(k)]
def cxor_b7550d4d(x):
    # kek
    return [x[i] ^ 8787679746 for i in range(k)]
def mul_2a5a432a(x):
    # the flag is flag{jk}
    y = [5, 2, 2, 5, 2, 1, 2, 3, 1, 3, 3, 3, 2, 2, 4, 4, 2, 2, 4, 2, 4, 1, 1, 3, 3, 5, 1, 4, 1, 1, 1, 3, 3, 1, 1, 5]
    return [x[i] * y[i] for i in range(k)]
def chmul_79e6dd5d(x):
    # just reverse it
    y = [ord(p) for p in '5e33fe1c076abe7d2a0e48f4783cec3e6561']
    return [x[i] * y[i] for i in range(k)]
def chxor_7b570606(x):
    # kek
    y = [ord(p) for p in '88ec5f04f730835de83d11d04df3cdc70025']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_351f9d39(x):
    y = [ord(p) for p in 'c63bfbe09b11cec7fcb70af17ceb2b98c9ac']
    return [x[i] * y[i] for i in range(k)]
def chsub_3121e9c6(x):
    # so good
    y = [ord(p) for p in '111c4675a003e4996cc60680e0c4cb364c6e']
    return [x[i] - y[i] for i in range(k)]
def deck_827218ca(x):
    # lmaooo
    return x[0:16] + x[33:] + x[16:33] + x[:0]
def chsub_ee48bdeb(x):
    # shiet?
    y = [ord(p) for p in 'd6f29ca111150803b4f1c4b19dcb8c668582']
    return [x[i] - y[i] for i in range(k)]
def mul_8c56f020(x):
    y = [4, 7, 3, 2, 4, 1, 2, 6, 3, 7, 4, 7, 3, 6, 5, 4, 4, 1, 1, 6, 7, 4, 6, 4, 1, 3, 1, 5, 2, 3, 6, 4, 7, 3, 4, 4]
    return [x[i] * y[i] for i in range(k)]
def cxor_fa9fe64d(x):
    return [x[i] ^ 6425920028 for i in range(k)]
def chsub_714e8ec9(x):
    y = [ord(p) for p in '272dddc92a310199f21393c689607d2b7043']
    return [x[i] - y[i] for i in range(k)]
def sub_96b63796(x):
    y = [2496487970, 7756237876, 6776187081, 5257803482, 1519633451, 3791929008, 5814267717, 6571415342, 6629533406, 3447138113, 7144363143, 846049640, 1920350081, 628747785, 973324667, 4295166912, 9237289694, 2905040504, 6695990085, 3014110095, 5700337611, 269349810, 4170466323, 9814048422, 2230487040, 6606680754, 4752302563, 4414249751, 4784443218, 4620499967, 9901745815, 5635319680, 8211287074, 6794672992, 1673346176, 4452424836]
    return [x[i] - y[i] for i in range(k)]
def csub_dfb6e078(x):
    # encryption
    return [x[i] - 1414363875 for i in range(k)]
def csub_7d205427(x):
    # lmaooo
    return [x[i] - 53255772 for i in range(k)]
def chsub_f3e2875f(x):
    # mucho encrypto
    y = [ord(p) for p in '851cb2f7d17a752cf949344c69e698c8e8b3']
    return [x[i] - y[i] for i in range(k)]
def add_03dc5f83(x):
    # evil
    y = [1726414469, 2108769042, 7307966514, 6351804728, 5388889475, 431118051, 4053824875, 6134530817, 4805632151, 4781899381, 9443395389, 8439252822, 5748239812, 3941835049, 5966463096, 5101217845, 5477543467, 1028766298, 1249825106, 8653407000, 4441220779, 9832694311, 9126825079, 300839953, 7623300824, 4560009827, 1570816136, 622316690, 1059134872, 8698105664, 8940079120, 7269757293, 6153501551, 4043901036, 9954806457, 3194002268]
    return [x[i] + y[i] for i in range(k)]
def deck_48cf73b6(x):
    return x[:19] + x[19:20] + x[24:] + x[20:24]
def csub_0ebe7c05(x):
    # rekt
    return [x[i] - 8185939617 for i in range(k)]
def xor_3481ed60(x):
    y = [5780861520, 5320621676, 5730345172, 1881511052, 5795337932, 6456859803, 4427190517, 4290333379, 8837262128, 5292983515, 8026596574, 1558767081, 1992198030, 327632751, 9270170211, 4202089798, 7353049934, 3678133554, 496355663, 8057316904, 3430900196, 6270140596, 65793184, 9957345892, 2268634859, 6144550617, 2468159192, 8536831093, 5745597586, 1395015769, 5648973159, 7316658687, 1409448483, 8552806238, 2734301356, 9355041137]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_7ade6cf5(x):
    y = [ord(p) for p in '80e78b3e9f07c3a25d50fca41e9b71e14775']
    return [x[i] - y[i] for i in range(k)]
def xor_03d2c898(x):
    # encryption
    y = [2318102523, 8801647424, 4663807526, 9530811960, 4269625292, 1110422956, 7550933361, 577864968, 9636893786, 4419308544, 2455646286, 2923420961, 802553872, 4525890256, 6055362745, 2264706214, 9824954775, 6531722571, 3855690990, 6001347964, 2177138593, 6727874762, 8018909975, 3768440860, 777711956, 9194327514, 3779078528, 2527640633, 9013125467, 6164088390, 9149672919, 5719288698, 7615978298, 3354027291, 6335528994, 5071616667]
    return [x[i] ^ y[i] for i in range(k)]
def chadd_ed8436eb(x):
    # lmaooo
    y = [ord(p) for p in 'c17757ad839628fb60e9176638a795411472']
    return [x[i] + y[i] for i in range(k)]
def xor_d7c70d50(x):
    # the best
    y = [630558216, 3272230247, 1268793088, 2883492884, 168031309, 4474915680, 2461616194, 8358594150, 4714810654, 445157354, 6844278341, 7147116304, 6376764622, 9871796245, 3251049759, 7722133953, 5548365463, 3852364193, 6240723935, 854217661, 2543298831, 2429527467, 5422030979, 5900927144, 7339644696, 7044105845, 1959571223, 9523530706, 9349615150, 9581475817, 687905747, 2900622774, 7310668363, 1305242276, 4324081913, 3899620658]
    return [x[i] ^ y[i] for i in range(k)]
def add_3e8fa8db(x):
    y = [7057545098, 1447262505, 1914706688, 5044089233, 4449498732, 6428634052, 938972622, 5776606704, 1964992159, 5581047231, 2511478087, 8551379719, 3899883915, 1263322643, 5294186637, 723955912, 3800475, 3103126835, 6101136993, 5643656968, 7943245991, 5507889472, 9764322354, 2410248739, 9143320660, 2626718390, 3206273446, 8102107344, 8316626614, 6694932341, 8789548042, 7178595603, 8685542751, 8688474315, 5610932189, 3035795340]
    return [x[i] + y[i] for i in range(k)]
def chsub_93ac52f5(x):
    # the flag is flag{jk}
    y = [ord(p) for p in 'aed01386198a8ef0e78bef4a0bed58b56ae0']
    return [x[i] - y[i] for i in range(k)]
def cmul_4172328f(x):
    # just reverse it
    return [x[i] * 10 for i in range(k)]
def cxor_94658244(x):
    return [x[i] ^ 4582196105 for i in range(k)]
def chadd_3aa9c371(x):
    y = [ord(p) for p in '4dcf31e9f67d8b7482c361890c0e0486e985']
    return [x[i] + y[i] for i in range(k)]
def chxor_6b41b0f3(x):
    y = [ord(p) for p in 'aadc4af452c8c37534b0fab9da4104c7115e']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_779b79cd(x):
    return [x[i] + 7429459569 for i in range(k)]
def chunk_dadea384(x):
    return x[13:] + x[:13]
def chadd_51cfbbb7(x):
    y = [ord(p) for p in '02c4e9b663053647d8b5b825c45e06fb65aa']
    return [x[i] + y[i] for i in range(k)]
def chxor_59178ab0(x):
    y = [ord(p) for p in '46bb3278ddfa11628512fdfb84c7ef1c220d']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_467b8ca7(x):
    return [x[p] for p in [28, 30, 4, 32, 3, 23, 29, 14, 11, 16, 31, 13, 26, 20, 18, 12, 5, 0, 25, 19, 2, 24, 35, 21, 22, 27, 34, 10, 8, 9, 6, 1, 7, 33, 17, 15]]
def chxor_6eac24b1(x):
    y = [ord(p) for p in 'cbcafe8e97dea6b1d3db5b1b55fa5e5f8b9a']
    return [x[i] ^ y[i] for i in range(k)]
def sub_ee08aad9(x):
    y = [6686400897, 912349678, 4460145632, 2799980739, 1550076560, 6906887613, 2003092055, 7412644280, 8283429116, 7671873882, 6707229587, 5958703505, 1795004824, 6663936765, 1123258253, 1425019906, 262705897, 6091212456, 6267786314, 7939625620, 1982713227, 5408270947, 6922816285, 7778084346, 4646639970, 7829129982, 8992215011, 7229308545, 7698519068, 908332594, 5938302100, 3543069033, 9428171059, 892582364, 2855805888, 9307713955]
    return [x[i] - y[i] for i in range(k)]
def chxor_3f9af41e(x):
    # lmaooo
    y = [ord(p) for p in '6163a1979e8e5b3cdd2230cd7f13e0ebc4c0']
    return [x[i] ^ y[i] for i in range(k)]
def chsub_84e9e2bd(x):
    # kek
    y = [ord(p) for p in 'a5f862693a8e6e2cbf8f151a58066fdaf110']
    return [x[i] - y[i] for i in range(k)]
def add_48f0c9fc(x):
    y = [6565998012, 4388696822, 6797663942, 5331118214, 3485966702, 6495851616, 8374278699, 1027486833, 5261849590, 9425997611, 3769481001, 8650304973, 1537826231, 9422446761, 4089326127, 6147244190, 8086655779, 3669370926, 940817761, 9944285907, 7301869377, 2828518452, 2775503231, 6483991956, 37423441, 6503492948, 1370943799, 4775507108, 4476458842, 3785141247, 6558601248, 9552832539, 9218523119, 5866119806, 2225459243, 1146807976]
    return [x[i] + y[i] for i in range(k)]
def chxor_471bdc7e(x):
    # lmaooo
    y = [ord(p) for p in '455963ddb7255dcf4fa6aa0d490f65f462a0']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_9bed43d0(x):
    return [x[i] + 7246308560 for i in range(k)]
def deck_831da12e(x):
    # lmaooo
    return x[1:1] + x[28:] + x[:1] + x[1:28]
def sub_6a868517(x):
    y = [9721625319, 186188709, 7747873944, 6811251912, 7939612108, 2147864640, 994509897, 1932932058, 2686571707, 3082971451, 776465759, 8755100365, 73931778, 715110911, 9558469234, 6044941809, 6546475560, 7435419467, 4034629407, 9322643113, 378312322, 7586830127, 146019501, 7294281049, 7831098562, 7169471741, 665671421, 3455195572, 7342446278, 357021214, 69800012, 9987473784, 2495113034, 286057036, 4034949885, 2358950777]
    return [x[i] - y[i] for i in range(k)]
def cadd_b60bc8ff(x):
    return [x[i] + 415953111 for i in range(k)]
def shuffle_f4cba7dd(x):
    # so good
    return [x[p] for p in [3, 35, 0, 18, 22, 4, 11, 21, 24, 27, 20, 31, 33, 12, 23, 9, 34, 29, 5, 2, 19, 17, 10, 15, 32, 26, 6, 30, 1, 25, 13, 14, 16, 8, 28, 7]]
def shuffle_9bfda3d1(x):
    # kek
    return [x[p] for p in [8, 15, 35, 25, 7, 22, 28, 26, 29, 32, 2, 16, 10, 9, 30, 6, 5, 21, 18, 31, 13, 0, 3, 19, 1, 14, 11, 33, 27, 23, 24, 12, 34, 17, 4, 20]]
def digsub_ab800369(x):
    # shiet?
    return [int(str(n)[:1] + ''.join(['7', '5', '3', '9', '0', '8', '6', '1', '4', '2'][int(p)] for p in str(n)[1:])) for n in x]
def cxor_df42d206(x):
    # evil
    return [x[i] ^ 1499099506 for i in range(k)]
def cxor_cd79085f(x):
    # encryption
    return [x[i] ^ 6727377962 for i in range(k)]
def xor_2cce1391(x):
    y = [4049315511, 6248330686, 9296842318, 5411165269, 5196147112, 5356533276, 4316782899, 2473015413, 9217568688, 4483155914, 6828010500, 1570038110, 9634843083, 4747602958, 1080946141, 6547302761, 5862493500, 7351606867, 8459855139, 5967074108, 3457995715, 3510528839, 7364857314, 1862925985, 9882028698, 6216645016, 6659744184, 143330765, 4546771800, 5889365891, 4198057505, 9207042604, 2751125626, 9943382615, 9588652976, 6561264820]
    return [x[i] ^ y[i] for i in range(k)]
def csub_fd81f025(x):
    return [x[i] - 3087223211 for i in range(k)]
def add_9d214583(x):
    y = [5765587248, 6344033092, 8337525556, 8004267460, 9873964336, 1623985236, 7517532591, 8238124706, 524431922, 4260643722, 7117971966, 9496946720, 7434796758, 7918997710, 8921240867, 2900011240, 420536097, 8789221725, 6166041660, 4982494572, 9069337460, 9313046283, 8915659850, 8931283681, 7450110572, 5388990341, 4248661911, 4088948416, 9519189175, 3688818714, 3402725071, 6774783027, 2317316570, 4696710982, 6931745779, 3195224152]
    return [x[i] + y[i] for i in range(k)]
def deck_214a0e6b(x):
    return x[33:35] + x[35:] + x[:21] + x[21:33]
def sub_3fa33786(x):
    # the best
    y = [2417546471, 5058433909, 2854392647, 5168232822, 4709512805, 5994712231, 9620335775, 568857787, 8462574255, 2158596003, 6083566278, 4594691948, 8912734351, 5484904873, 1851910353, 3462851348, 8668886752, 1625274991, 3872028012, 1262219742, 7946207039, 182531463, 5922345537, 312791063, 402781993, 9811674510, 4564850682, 4069866005, 1436571520, 6847556530, 738185604, 6993016932, 3678017727, 3639015744, 7447216141, 3910642505]
    return [x[i] - y[i] for i in range(k)]
def csub_1ae697ba(x):
    # lel
    return [x[i] - 4970951102 for i in range(k)]
def cadd_c1763a61(x):
    return [x[i] + 6631885799 for i in range(k)]
def cmul_1b7b7fb7(x):
    return [x[i] * 7 for i in range(k)]
def chmul_81ec0d4f(x):
    # lel
    y = [ord(p) for p in 'dad5e093e2b3336b9d8fc7f00714ea855ab9']
    return [x[i] * y[i] for i in range(k)]
def mul_6a90bbfe(x):
    y = [3, 3, 6, 4, 3, 5, 5, 4, 5, 3, 4, 3, 3, 6, 4, 2, 1, 6, 6, 1, 2, 3, 3, 6, 5, 3, 3, 4, 3, 2, 2, 2, 5, 6, 4, 2]
    return [x[i] * y[i] for i in range(k)]
def csub_3ffa2ea8(x):
    return [x[i] - 159582468 for i in range(k)]
def sub_4b79348d(x):
    y = [2346040452, 6477627170, 9457736544, 2199929634, 6099317276, 5578760297, 8224403918, 2546640505, 6184194088, 5328199860, 3688854637, 1739420041, 9460325639, 3546308424, 6513233947, 4368456698, 43747698, 1106104440, 658978391, 3685125599, 6407051984, 7906190155, 5431199560, 5161318933, 3968352708, 4136858705, 5642105757, 6141991255, 5256010443, 2307757015, 4484305181, 5286684715, 676819147, 2706357459, 6588459506, 6330711797]
    return [x[i] - y[i] for i in range(k)]
def csub_247f37f1(x):
    return [x[i] - 3340166349 for i in range(k)]
def cxor_14787d69(x):
    return [x[i] ^ 2632542495 for i in range(k)]
def shuffle_602562e7(x):
    return [x[p] for p in [28, 2, 21, 19, 15, 7, 35, 18, 26, 17, 5, 27, 24, 1, 14, 23, 33, 6, 29, 13, 16, 8, 30, 20, 0, 4, 9, 32, 22, 25, 10, 11, 3, 34, 12, 31]]
def cxor_6bc7237d(x):
    return [x[i] ^ 8570893344 for i in range(k)]
def csub_bdd64a1d(x):
    return [x[i] - 4560772433 for i in range(k)]
def chxor_bdaad1f4(x):
    y = [ord(p) for p in '61f3b206a24283b856d207b1b17c8b87e8be']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_b5356752(x):
    return [x[i] * 10 for i in range(k)]
def chadd_27f19124(x):
    # so good
    y = [ord(p) for p in '1f5d089ed515ab9f23d4f63b3e70e9ea6661']
    return [x[i] + y[i] for i in range(k)]
def mul_9d4040eb(x):
    y = [10, 8, 3, 2, 10, 8, 3, 7, 4, 3, 10, 10, 4, 1, 5, 6, 5, 5, 10, 1, 7, 4, 1, 2, 8, 5, 5, 1, 1, 2, 4, 5, 6, 7, 6, 1]
    return [x[i] * y[i] for i in range(k)]
def chadd_6b1daeac(x):
    # just reverse it
    y = [ord(p) for p in 'a3f5df05549af305962ea6ce85d5093499d4']
    return [x[i] + y[i] for i in range(k)]
def cadd_45b798ff(x):
    # lmaooo
    return [x[i] + 2331293531 for i in range(k)]
def cxor_e5a9ee6a(x):
    return [x[i] ^ 9610184162 for i in range(k)]
def cadd_76aab783(x):
    # mucho encrypto
    return [x[i] + 6126966028 for i in range(k)]
def shuffle_057518f5(x):
    # evil
    return [x[p] for p in [26, 33, 1, 20, 5, 11, 30, 4, 12, 6, 2, 21, 8, 0, 15, 31, 23, 7, 18, 17, 35, 9, 22, 27, 13, 10, 32, 3, 24, 16, 25, 29, 14, 19, 28, 34]]
def add_ab46dc0e(x):
    # the best
    y = [7838180912, 5075963987, 4496095830, 6864183928, 1944566667, 4185141518, 7425585187, 9761898551, 2128550530, 1044385900, 9789218750, 3716507990, 7161026103, 5644633992, 4019743817, 2407377674, 3981299146, 8371424532, 4018168009, 4881421714, 2182196552, 5406215106, 5548990974, 3599774829, 5676730013, 1759808949, 6115546844, 8566462346, 510595783, 657758159, 8815614112, 2677691609, 7113954518, 4343550933, 7450197871, 1199534103]
    return [x[i] + y[i] for i in range(k)]
def cmul_892d62b0(x):
    # lmaooo
    return [x[i] * 6 for i in range(k)]
def cxor_1330b89b(x):
    return [x[i] ^ 3248705864 for i in range(k)]
def mul_bdbf4994(x):
    y = [1, 3, 1, 3, 1, 3, 3, 1, 3, 3, 1, 1, 3, 2, 1, 1, 1, 3, 3, 3, 2, 1, 3, 3, 2, 2, 3, 2, 3, 2, 3, 1, 2, 3, 2, 2]
    return [x[i] * y[i] for i in range(k)]
def cxor_26057d46(x):
    # kek
    return [x[i] ^ 5916342450 for i in range(k)]
def chadd_c8c1b7ad(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '9d7facbac84cf789e20c8bfce3b6cd145337']
    return [x[i] + y[i] for i in range(k)]
def chsub_f5c5e1fa(x):
    y = [ord(p) for p in 'b99403191356f21fa669d07107ab9fac0c77']
    return [x[i] - y[i] for i in range(k)]
def cmul_3aff1e18(x):
    return [x[i] * 6 for i in range(k)]
def csub_d4490e14(x):
    return [x[i] - 4351130760 for i in range(k)]
def deck_58b74896(x):
    # so good
    return x[17:18] + x[:3] + x[18:] + x[3:17]
def chxor_97c61f30(x):
    # kek
    y = [ord(p) for p in '37b13ea981eefc75a3168daaee553ca7677e']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_8fe94932(x):
    return [x[i] ^ 4489522153 for i in range(k)]
def cadd_f5745b35(x):
    return [x[i] + 3478135447 for i in range(k)]
def sub_adc67d90(x):
    # evil
    y = [177384262, 9792084982, 377853003, 877961112, 9440648239, 4756047555, 452533544, 8435661869, 1164327597, 5062864981, 3080576946, 1143356855, 1488905433, 163481545, 7182121235, 429421003, 8584227039, 6653457057, 4388515075, 2877005359, 8211036865, 2132388340, 8714287723, 9414529763, 9677856560, 7251283904, 6982095319, 2612667662, 1726904001, 7843600139, 5036938230, 4131143658, 8379592146, 5697535250, 4924781130, 1515501409]
    return [x[i] - y[i] for i in range(k)]
def cmul_1df126ed(x):
    return [x[i] * 10 for i in range(k)]
def digsub_ba2f366a(x):
    return [int(str(n)[:1] + ''.join(['2', '4', '6', '1', '3', '0', '8', '5', '9', '7'][int(p)] for p in str(n)[1:])) for n in x]
def digsub_cb6346a1(x):
    return [int(str(n)[:1] + ''.join(['0', '3', '5', '9', '7', '4', '1', '2', '8', '6'][int(p)] for p in str(n)[1:])) for n in x]
def csub_edb15e4c(x):
    # encryption
    return [x[i] - 1758003960 for i in range(k)]
def xor_fbcf5aa3(x):
    y = [4474901919, 533083694, 886130835, 8504506988, 1275072678, 1490629565, 5594435084, 8011824628, 8520853937, 2792119902, 2360006231, 6153179502, 9289728757, 5386408362, 1351244723, 670054394, 422635437, 5410292103, 8369541062, 5001022660, 8288226198, 807568777, 2533449558, 5850822724, 1652016130, 90420157, 8781524683, 3949988037, 9275126857, 1190505728, 2766318196, 9458803363, 8856103946, 2221389702, 1952716962, 4512247089]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_62dd4e42(x):
    return x[27:] + x[:27]
def deck_7ab2bebd(x):
    return x[:6] + x[15:] + x[6:14] + x[14:15]
def cmul_87fd4468(x):
    # encryption
    return [x[i] * 6 for i in range(k)]
def cadd_caab3e28(x):
    # lmaooo
    return [x[i] + 9676326866 for i in range(k)]
def cadd_22f01a9a(x):
    # encryption
    return [x[i] + 7801752205 for i in range(k)]
def chunk_73de87d2(x):
    # the best
    return x[11:] + x[:11]
def chunk_dd75a83f(x):
    # lmaooo
    return x[23:] + x[:23]
def chadd_b0d8f554(x):
    y = [ord(p) for p in '239483e42cd7f681ca3a89d4752d4776fde4']
    return [x[i] + y[i] for i in range(k)]
def chxor_27fd37e4(x):
    # encryption
    y = [ord(p) for p in '9fa6de28aeb1d88491c205b90ddfa3e3fa6b']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_a3c6e740(x):
    return [x[p] for p in [8, 20, 25, 0, 1, 24, 12, 7, 21, 23, 16, 5, 4, 10, 30, 13, 14, 17, 31, 26, 35, 2, 3, 19, 33, 6, 9, 34, 22, 11, 18, 32, 27, 29, 28, 15]]
def cxor_18ccd1a8(x):
    return [x[i] ^ 4930157457 for i in range(k)]
def digsub_abf0937e(x):
    return [int(str(n)[:1] + ''.join(['4', '2', '9', '1', '7', '8', '3', '5', '6', '0'][int(p)] for p in str(n)[1:])) for n in x]
def cadd_f83b216d(x):
    # just reverse it
    return [x[i] + 7254472309 for i in range(k)]
def xor_35062400(x):
    y = [5045799530, 6610169162, 303376684, 4170311993, 5377808150, 6168805558, 7560688705, 5871655367, 982705728, 9977771058, 9082865819, 7726090478, 5782448407, 1176013261, 6539203116, 7687467719, 7536110749, 9717729119, 7199421573, 9726619199, 5710036783, 2051295744, 3307975854, 3594537029, 8957625854, 4827339583, 1425437313, 7752353093, 8560590216, 8809104849, 9451573983, 1247502854, 940485929, 5536212176, 511285188, 8958103690]
    return [x[i] ^ y[i] for i in range(k)]
def sub_63fceeb9(x):
    y = [3154490058, 6174121418, 5705558518, 4680782009, 9060702637, 224761646, 9146247766, 5565786692, 2008689524, 1387840498, 1762864921, 2237250417, 452917971, 3519965463, 7769438122, 2828898385, 5629440558, 234083179, 455561775, 2996037202, 8790514828, 8174284818, 2213604629, 617614558, 6496484368, 4003328994, 5352866571, 9008884097, 9649085514, 7506235234, 2486504295, 5740337391, 3351678516, 3752130922, 8084126105, 4164178132]
    return [x[i] - y[i] for i in range(k)]
def chmul_efbeeb2f(x):
    y = [ord(p) for p in '8cc442a192aa21f163e8c25f2422a92ec5bb']
    return [x[i] * y[i] for i in range(k)]
def add_0942c03a(x):
    # lmaooo
    y = [3767684524, 6628613677, 1919750888, 941795749, 6945559995, 123484354, 745753037, 5176955191, 5825458113, 6510983930, 6583657173, 1627858010, 8120666200, 4931176947, 6637542986, 5249990956, 1264062383, 7283659486, 1998619097, 6330566799, 4711987593, 5398726055, 5921675080, 3488039944, 576756603, 2640467573, 1453453414, 4820259453, 4550058135, 1034452892, 2579614830, 2341976140, 4088638232, 5156665586, 9182901792, 5476956069]
    return [x[i] + y[i] for i in range(k)]
def chxor_a76b0441(x):
    y = [ord(p) for p in '214cc4bd14e2b84d2c9da17ed38b24104701']
    return [x[i] ^ y[i] for i in range(k)]
def add_26bde20c(x):
    # so good
    y = [3018236841, 9850363860, 7153352487, 3517553370, 7693343542, 3675182700, 5198026587, 8523125797, 5487526282, 4224423131, 3067186505, 5520900799, 4524342099, 7368319170, 1488957917, 2247777666, 2150265930, 4519083055, 5325627824, 2637243285, 836649642, 3257280711, 4824601251, 1523606822, 2818634275, 1078748974, 4688570553, 2295584979, 5070228636, 98884132, 5989449609, 3766954650, 5251754421, 1015367662, 2052927005, 1896606693]
    return [x[i] + y[i] for i in range(k)]
def cadd_f9211e40(x):
    return [x[i] + 3004392026 for i in range(k)]
def chsub_93324e19(x):
    y = [ord(p) for p in 'a0c4e25707b3ae00c48192a0d3ad6ed98578']
    return [x[i] - y[i] for i in range(k)]
def xor_90755689(x):
    y = [4439009708, 4430103560, 8305328796, 252943629, 5156604610, 5118975650, 6349445159, 5683729977, 9237486062, 4309078215, 5392119149, 8348154879, 5934493957, 141417845, 5355247078, 8578946288, 1779337218, 1086771056, 6069229552, 7907976458, 3321436242, 380370243, 2852340652, 5112675481, 4414628293, 6175326538, 8928915895, 3420027790, 8013998979, 4979999894, 4511627862, 2456718439, 4198822804, 8021374829, 550606719, 5761893817]
    return [x[i] ^ y[i] for i in range(k)]
def xor_36e98afe(x):
    y = [8292737392, 7734967956, 7938842046, 3370078002, 6578715851, 4995123460, 7005689376, 4324279997, 3886332256, 3751625576, 9352420987, 6599212906, 8826163197, 8234610009, 3662378733, 3306520635, 7850868989, 4413435507, 7226764868, 7073057010, 1591440591, 9951392919, 7000714132, 739428580, 4906451971, 6539997405, 6237784451, 5500479626, 4553572977, 1813338083, 5665269247, 4751589091, 1320736502, 8885000931, 9981979098, 4225566675]
    return [x[i] ^ y[i] for i in range(k)]
def mul_b3866976(x):
    y = [2, 1, 3, 1, 3, 3, 2, 1, 3, 1, 2, 1, 3, 1, 3, 3, 3, 3, 2, 2, 3, 2, 3, 1, 3, 2, 3, 1, 3, 3, 2, 3, 1, 2, 3, 2]
    return [x[i] * y[i] for i in range(k)]
def chxor_4ab8ad7f(x):
    y = [ord(p) for p in 'c785e8df88aeba450f6123c3c3a1d813b300']
    return [x[i] ^ y[i] for i in range(k)]
def csub_59817429(x):
    return [x[i] - 4036903177 for i in range(k)]
def chsub_a3a9e242(x):
    y = [ord(p) for p in 'b9d2a0a81405d5ea1d91cb60707b4a6226d7']
    return [x[i] - y[i] for i in range(k)]
def digsub_eccd1606(x):
    return [int(str(n)[:1] + ''.join(['6', '4', '1', '9', '5', '7', '0', '3', '2', '8'][int(p)] for p in str(n)[1:])) for n in x]
def sub_813bc423(x):
    y = [6627715171, 4694419974, 1255205870, 2075714418, 9744274956, 7352210366, 2894154922, 5535568565, 6612811221, 3722057114, 3568331877, 8539990436, 1285324088, 3940092607, 2300256567, 9273603937, 8801432920, 1162130259, 5101605178, 4812947050, 169659175, 7799649754, 1447983461, 8925103323, 8786479998, 5180098848, 5495130812, 7486055432, 9704137062, 6398412973, 5217568486, 2597024036, 6424275580, 5961925625, 1946690847, 2010643252]
    return [x[i] - y[i] for i in range(k)]
def cxor_e729022e(x):
    return [x[i] ^ 5494166841 for i in range(k)]
def digsub_1d4087e8(x):
    # just reverse it
    return [int(str(n)[:1] + ''.join(['8', '2', '0', '9', '3', '5', '6', '4', '7', '1'][int(p)] for p in str(n)[1:])) for n in x]
def chxor_56c9e723(x):
    y = [ord(p) for p in 'bf3538b92d711f5a3517b323fbc8e5608056']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_789804bf(x):
    # the best
    return [x[i] * 10 for i in range(k)]
def cadd_8fc03570(x):
    return [x[i] + 4286210085 for i in range(k)]
def cxor_df42e878(x):
    # mucho encrypto
    return [x[i] ^ 2924540885 for i in range(k)]
def digsub_6d16b628(x):
    # encryption
    return [int(str(n)[:1] + ''.join(['5', '4', '2', '6', '9', '1', '7', '0', '3', '8'][int(p)] for p in str(n)[1:])) for n in x]
def cadd_0ab7b7d7(x):
    # mucho encrypto
    return [x[i] + 5197555973 for i in range(k)]
def shuffle_f5a6f753(x):
    # mucho encrypto
    return [x[p] for p in [5, 29, 8, 34, 14, 13, 3, 28, 2, 17, 4, 12, 24, 16, 35, 11, 1, 20, 30, 18, 33, 6, 23, 21, 7, 31, 0, 27, 9, 19, 15, 10, 25, 22, 32, 26]]
def cmul_546b7971(x):
    return [x[i] * 6 for i in range(k)]
def chxor_31b5069b(x):
    y = [ord(p) for p in '85a195043879bd161e6e14ec0e9535a5c55b']
    return [x[i] ^ y[i] for i in range(k)]
def add_b0406f7d(x):
    y = [1763998891, 3152368231, 3247289623, 6429673823, 7648976544, 3470746673, 6037086823, 218567455, 1417972443, 8491339639, 5587272469, 6022804660, 3960120355, 4764194178, 5450817921, 8106916663, 9210596354, 8351113279, 2839773643, 8959628011, 172929560, 7019587765, 6888388753, 215687813, 1394287039, 2873936226, 7378741158, 7108082467, 9403406986, 2757002196, 2739781467, 160001021, 600778541, 443568594, 3012338239, 2311561198]
    return [x[i] + y[i] for i in range(k)]
def cxor_bac498f9(x):
    # the flag is flag{jk}
    return [x[i] ^ 3562505102 for i in range(k)]
def chsub_01e56b12(x):
    y = [ord(p) for p in '640932b016f3277b82e12efb5919ec5f379e']
    return [x[i] - y[i] for i in range(k)]
def chadd_3a7cbca3(x):
    # encryption
    y = [ord(p) for p in '59e5d68ddc2365d4db888e1b5116e03fe7da']
    return [x[i] + y[i] for i in range(k)]
def shuffle_4756c622(x):
    return [x[p] for p in [4, 33, 2, 11, 12, 0, 3, 19, 21, 15, 35, 5, 7, 9, 10, 17, 27, 1, 26, 32, 22, 31, 34, 28, 24, 13, 20, 30, 6, 29, 16, 14, 8, 18, 23, 25]]
def chsub_76b2d7aa(x):
    y = [ord(p) for p in '8d2fe7e619152d4e2177d2f4b5bddde00863']
    return [x[i] - y[i] for i in range(k)]
def chmul_b3677069(x):
    # lmaooo
    y = [ord(p) for p in 'fb51432df403e09fd171b2b8dd0157136b99']
    return [x[i] * y[i] for i in range(k)]
def cadd_283bf302(x):
    # evil
    return [x[i] + 5333617974 for i in range(k)]
def cxor_97867026(x):
    # encryption
    return [x[i] ^ 2035985964 for i in range(k)]
def chadd_ab12cde5(x):
    y = [ord(p) for p in 'e7a8ce6d1187d94238065d485a75c1885061']
    return [x[i] + y[i] for i in range(k)]
def xor_e17e7409(x):
    y = [3370687759, 9215297850, 6425581649, 4109937029, 1304763573, 3070208315, 455514881, 1369978940, 3479042013, 7951129679, 5262638545, 2140750773, 9730818928, 8563827324, 156123554, 7628507940, 4075610899, 131449539, 7459048508, 6429691962, 7784483745, 7675419409, 2384357253, 2139047836, 4951739660, 9556380532, 7313391047, 3128759153, 8083637444, 8171659207, 4685788237, 193577785, 9984417030, 8760703700, 7245542332, 6826521623]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_bf5cdb36(x):
    y = [ord(p) for p in 'db5d8bee44f4b2564901f98c933529692d74']
    return [x[i] - y[i] for i in range(k)]
def chmul_5fe16e1b(x):
    y = [ord(p) for p in '1ac8480c922b34a9ebaef09061a1019156e5']
    return [x[i] * y[i] for i in range(k)]
def chunk_9758765f(x):
    return x[27:] + x[:27]
def deck_11a365fa(x):
    # so good
    return x[15:20] + x[7:15] + x[20:] + x[:7]
def mul_21355dba(x):
    # the flag is flag{jk}
    y = [8, 5, 1, 6, 4, 2, 8, 3, 2, 3, 1, 6, 4, 2, 1, 2, 3, 3, 6, 2, 8, 3, 6, 7, 3, 2, 5, 1, 6, 5, 4, 1, 1, 2, 8, 2]
    return [x[i] * y[i] for i in range(k)]
def chunk_ba6b2283(x):
    # shiet?
    return x[14:] + x[:14]
def cadd_94b8e069(x):
    # encryption
    return [x[i] + 2516901546 for i in range(k)]
def deck_fe6f1bb2(x):
    # so good
    return x[7:33] + x[33:35] + x[:7] + x[35:]
def chsub_aa802604(x):
    # encryption
    y = [ord(p) for p in '8128df5801a224344b33a3e050ed1f961aff']
    return [x[i] - y[i] for i in range(k)]
def cxor_bac2ca1f(x):
    return [x[i] ^ 9324407651 for i in range(k)]
def chadd_1ed1777e(x):
    # encryption
    y = [ord(p) for p in '26476c7a2e737f5d66dc5681ee311c0469f8']
    return [x[i] + y[i] for i in range(k)]
def chsub_dcb1a2a8(x):
    # mucho encrypto
    y = [ord(p) for p in '38475e5fb1cdcc52669a02a698d9bdb7cd63']
    return [x[i] - y[i] for i in range(k)]
def csub_98f9a52a(x):
    return [x[i] - 7642934000 for i in range(k)]
def csub_e730833f(x):
    return [x[i] - 3631414221 for i in range(k)]
def chxor_f2f16c61(x):
    y = [ord(p) for p in '5413f1a6ad5b6cd719d72ca8f624ee774d67']
    return [x[i] ^ y[i] for i in range(k)]
def csub_9033c843(x):
    # encryption
    return [x[i] - 2163320052 for i in range(k)]
def deck_f6f34c98(x):
    return x[15:22] + x[:11] + x[22:] + x[11:15]
def csub_0b2b5416(x):
    # so good
    return [x[i] - 12172399 for i in range(k)]
def sub_837cb5a5(x):
    # shiet?
    y = [4441197383, 5100386044, 4220433931, 4919991747, 7314912496, 4169649321, 1531530874, 4742406203, 8256730630, 8133580444, 4415632411, 839922036, 1664425447, 3642469072, 2941376775, 7574857535, 3427419651, 1579903359, 2658230295, 6342494701, 4655021191, 839172420, 7462083383, 6736513155, 6213444274, 273858505, 2943093487, 9416132237, 1495696043, 904091314, 6070041968, 1301743194, 847132893, 2130535432, 3887723471, 7701788906]
    return [x[i] - y[i] for i in range(k)]
def csub_e2410a5c(x):
    return [x[i] - 3663172840 for i in range(k)]
def xor_f580ac50(x):
    y = [7517386200, 6866214575, 182191026, 241669663, 1376777527, 1099824773, 5793658124, 2645614018, 3971791514, 9354429900, 1581568549, 4961287569, 5027098269, 5905806579, 6573729907, 8734476487, 9600959369, 312328968, 4465951602, 5249491653, 3607021662, 5246290405, 4041337474, 1794904243, 6019375137, 5652432119, 7338946872, 8002904325, 8515754948, 5761902881, 8633275421, 1753802858, 1125191666, 2519874180, 936132144, 9520280976]
    return [x[i] ^ y[i] for i in range(k)]
def add_1b3e26ab(x):
    # rekt
    y = [9642960278, 2821960189, 1637576413, 8463382046, 9913905085, 5114692016, 83080999, 2402463627, 9551958018, 2020685466, 8657553101, 3230676838, 5424258404, 899894280, 339282874, 1589674183, 1556664174, 2662742495, 9822839293, 9591213157, 3488841154, 1462449430, 1569206819, 47708825, 9742702517, 7481051095, 407523133, 9599676497, 6169622760, 2902130723, 8630809947, 8395311192, 8056029551, 4199663562, 9615971633, 4789234091]
    return [x[i] + y[i] for i in range(k)]
def cadd_d222898d(x):
    # rekt
    return [x[i] + 7145830955 for i in range(k)]
def chxor_de94bd99(x):
    y = [ord(p) for p in '78409a839d453e444481380f2147f5351084']
    return [x[i] ^ y[i] for i in range(k)]
def mul_4e5e1932(x):
    # shiet?
    y = [1, 8, 9, 5, 9, 4, 7, 8, 6, 7, 3, 5, 8, 8, 7, 9, 6, 8, 7, 6, 3, 1, 4, 3, 5, 7, 3, 7, 9, 8, 2, 1, 9, 2, 9, 1]
    return [x[i] * y[i] for i in range(k)]
def xor_a04b2880(x):
    y = [2347429428, 1026754233, 8015980549, 1542896880, 6156147433, 7010850495, 6357545022, 968876152, 6225284331, 6533191700, 2015044003, 7793511822, 8153248832, 3935409149, 3798014153, 5390780853, 8037979591, 9685649705, 5978054907, 9316669904, 3065544061, 8725165693, 1856953375, 3307963145, 6598113855, 305869879, 1749820906, 3710666117, 7205885854, 1522658426, 7465285884, 2578848390, 7801200930, 3640770870, 8230630304, 2941147682]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_c55c643f(x):
    return x[22:] + x[:22]
def xor_b5a69ced(x):
    y = [816340804, 3992605823, 3077086681, 7521771304, 2184205531, 9727291896, 6301036983, 6288345792, 4049724962, 6969576447, 6467024679, 9500444193, 9178649875, 8907376741, 9896330716, 8965685506, 7662516454, 873152343, 6228650707, 9846898808, 7565427319, 8752664994, 1469699881, 1599971499, 8448144697, 7312701513, 6996769865, 3665354029, 9387007462, 8174246919, 3178363225, 342367301, 9155526433, 9439719091, 7191900123, 9249246485]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_8a131e32(x):
    return x[13:] + x[:13]
def mul_62cf6aa4(x):
    y = [4, 3, 6, 7, 5, 2, 4, 7, 8, 7, 2, 3, 4, 1, 8, 2, 6, 1, 5, 2, 6, 7, 2, 8, 3, 1, 4, 1, 7, 5, 4, 5, 5, 2, 4, 6]
    return [x[i] * y[i] for i in range(k)]
def sub_a0d3d89e(x):
    # kek
    y = [2152265922, 2341008231, 605840311, 2719358750, 5644358584, 3285673238, 4021530242, 9630310309, 5084210011, 1205091360, 179942410, 4328918388, 8787396770, 6138970150, 7751803904, 5589925657, 5004512385, 3702594128, 4421644465, 390038959, 2936333878, 133650835, 4131128216, 1289399133, 5050189730, 4054140842, 7923259769, 1838320616, 1608590411, 7326811884, 9179952800, 4400229186, 1825124409, 9836168879, 7819174512, 2276143820]
    return [x[i] - y[i] for i in range(k)]
def cmul_adf3adfd(x):
    # mucho encrypto
    return [x[i] * 5 for i in range(k)]
def xor_10794d34(x):
    y = [2153398805, 4945253296, 5329773436, 3954055072, 1589352347, 4016388706, 2053319347, 3235679783, 3953376419, 9314839579, 4153095806, 6444105954, 4918309963, 6681694630, 897184071, 5665049459, 905199383, 6514097079, 4595162399, 1747166655, 130016706, 5403337692, 9258119175, 514087719, 435077825, 5545115625, 2174193511, 6806713838, 3352811163, 8611104956, 6688216658, 8321212277, 7414916392, 3629309909, 3153272116, 6184194581]
    return [x[i] ^ y[i] for i in range(k)]
def add_909f31dc(x):
    # the flag is flag{jk}
    y = [1397047311, 8503155384, 994803562, 4210962080, 3126726180, 9757671477, 5217470224, 9953761668, 6760222036, 7348473790, 4470196973, 6933830138, 2760294588, 1953420551, 536144676, 2161449798, 6792569105, 168779191, 8111832932, 8764613771, 6110407506, 3564351208, 5197372753, 1147360785, 8004495432, 1812738473, 466909366, 8929410313, 4317199587, 2797031851, 9130894152, 3365983740, 5121742274, 5521062564, 6143128811, 2453656403]
    return [x[i] + y[i] for i in range(k)]
def chmul_b8c4917b(x):
    # rekt
    y = [ord(p) for p in 'c05284f19590c750baa066b7658bba8bb37e']
    return [x[i] * y[i] for i in range(k)]
def cmul_8ec6e2f9(x):
    return [x[i] * 6 for i in range(k)]
def cxor_b342528a(x):
    return [x[i] ^ 7628059514 for i in range(k)]
def cxor_e6156798(x):
    return [x[i] ^ 7335012497 for i in range(k)]
def mul_f345af6b(x):
    y = [6, 4, 6, 6, 6, 4, 1, 1, 1, 5, 1, 2, 1, 1, 2, 2, 4, 1, 6, 5, 1, 2, 1, 5, 3, 1, 5, 1, 3, 4, 5, 4, 2, 5, 6, 3]
    return [x[i] * y[i] for i in range(k)]
def chadd_40e55360(x):
    # kek
    y = [ord(p) for p in '6cae9d4b20ce97633dd02891316aa12c9fb1']
    return [x[i] + y[i] for i in range(k)]
def chunk_a763fb97(x):
    # just reverse it
    return x[35:] + x[:35]
def cxor_2e4b26f4(x):
    return [x[i] ^ 6229515611 for i in range(k)]
def chadd_6d0c80a6(x):
    y = [ord(p) for p in '3657d5d6bf0fe93a1d8a8d075c854ec9ee40']
    return [x[i] + y[i] for i in range(k)]
def chadd_0badfcf5(x):
    y = [ord(p) for p in 'd6e92f3fb53399e948b9406cfe43aec07df9']
    return [x[i] + y[i] for i in range(k)]
def sub_56d810e7(x):
    y = [3725822333, 1567835172, 3943012245, 2784445587, 4783225682, 5229482242, 657391359, 2257369626, 505138900, 805115264, 2392209485, 399057148, 525785873, 7405247805, 6232849232, 3818228293, 7924317242, 1622153693, 63033487, 8793728286, 7164324439, 2012266576, 1465909861, 1983811184, 509026287, 4338955459, 3165831736, 4561833329, 3736915418, 2774175904, 9013600363, 9013148318, 2202837117, 76210737, 4269068845, 1944111934]
    return [x[i] - y[i] for i in range(k)]
def chunk_515df396(x):
    return x[13:] + x[:13]
def chadd_1375b126(x):
    # mucho encrypto
    y = [ord(p) for p in '0c4eac4b6421244f3fc21994535b83b6b468']
    return [x[i] + y[i] for i in range(k)]
def deck_2da2030b(x):
    # the best
    return x[36:] + x[7:36] + x[:4] + x[4:7]
def cxor_f87a3a8a(x):
    return [x[i] ^ 8281973184 for i in range(k)]
def chadd_47332c73(x):
    y = [ord(p) for p in 'd1d55c5e4c2cc8c89acc65e485fb1e06291c']
    return [x[i] + y[i] for i in range(k)]
def cmul_9e6c0fb6(x):
    return [x[i] * 9 for i in range(k)]
def cmul_d82edfb1(x):
    # the flag is flag{jk}
    return [x[i] * 8 for i in range(k)]
def cadd_074e39fc(x):
    return [x[i] + 8966676957 for i in range(k)]
def sub_47cbdf28(x):
    # lmaooo
    y = [4196847446, 2007630775, 3427043548, 199109249, 2056751570, 5467001196, 3038476530, 2103927722, 4890107364, 3098102713, 46132130, 1883581370, 5135932878, 1797742421, 4777210359, 4774451282, 8573976496, 8664304329, 8753355930, 8760839320, 2208309775, 518522323, 6929907896, 3315649933, 3339514667, 7626365906, 722457549, 9327392223, 3911462248, 3774520420, 7723350529, 5606555407, 6702499489, 913838897, 1913948233, 6529240394]
    return [x[i] - y[i] for i in range(k)]
def xor_dce2a545(x):
    y = [6226373486, 2448885964, 1495698085, 2299769053, 2532832444, 6876081002, 4439312219, 9282947731, 5134607042, 4402769200, 6506198202, 428915032, 9230817413, 5936999962, 6645283288, 3280458811, 7456868586, 45923177, 5074106240, 1587544483, 1271348708, 2576220428, 4345547904, 3148078007, 9369958997, 9830239429, 137810364, 8564733366, 2797660601, 5083952202, 1402979011, 8529495348, 8713020549, 1678645688, 4364083653, 1525417376]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_2167eaf6(x):
    # encryption
    y = [ord(p) for p in '68b435d0ed0a4a11b7d04d1729864ad49038']
    return [x[i] ^ y[i] for i in range(k)]
def sub_40f8346a(x):
    y = [6100690240, 7423385892, 1017262141, 7428630531, 4040082916, 356957537, 6860810868, 6566700910, 8194685493, 3506834851, 2975734186, 5070557029, 3316720056, 2787524589, 8045506761, 1263651990, 8657094027, 4992157736, 6103608995, 253485744, 5787376496, 6606018413, 4818174361, 266314747, 9368572634, 325885758, 3500764340, 2444317224, 3244297762, 3921437444, 2261897955, 3621545707, 1759593500, 7426043459, 8253911095, 6425232298]
    return [x[i] - y[i] for i in range(k)]
def chadd_983dad8d(x):
    y = [ord(p) for p in '3bc27f8f8f8e104fea9f4fa376f9d0bbc2dd']
    return [x[i] + y[i] for i in range(k)]
def mul_452d9445(x):
    y = [1, 1, 5, 3, 4, 1, 1, 3, 3, 4, 1, 1, 3, 3, 3, 2, 1, 2, 2, 3, 4, 2, 4, 4, 1, 5, 4, 1, 4, 1, 1, 3, 5, 3, 3, 5]
    return [x[i] * y[i] for i in range(k)]
def chadd_3d5f0a2c(x):
    y = [ord(p) for p in 'fa125b5023be8c0fd452a7e8a14c2ab811c9']
    return [x[i] + y[i] for i in range(k)]
def deck_8c3306f5(x):
    return x[:2] + x[12:] + x[2:5] + x[5:12]
def chxor_6f31d36b(x):
    y = [ord(p) for p in '9a8660b3e08255f9d40c203a5cea6e193283']
    return [x[i] ^ y[i] for i in range(k)]
def xor_a1a977f9(x):
    y = [5790310323, 2039250428, 3491420631, 7394638198, 2876975244, 2714586105, 9729375982, 2975698130, 9308013563, 6927372160, 7040495147, 5849722807, 8703420055, 4368227168, 740942458, 7669462191, 3833742091, 5513799877, 7635598050, 8886213521, 6496150390, 7516046419, 8725239263, 5481012299, 2583530228, 6407536589, 4780141360, 3682824347, 2313622473, 2784945730, 7195945994, 123206425, 4293307250, 4254528956, 9187902863, 8285198540]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_62ab19db(x):
    y = [ord(p) for p in '227e117f948f5bb591ea71adb938f44db609']
    return [x[i] - y[i] for i in range(k)]
def cadd_fa34d6b4(x):
    return [x[i] + 3351330359 for i in range(k)]
def chadd_96a0ee76(x):
    y = [ord(p) for p in 'a763cca456b61c0d3907d1b0ed38c0884da0']
    return [x[i] + y[i] for i in range(k)]
def sub_00bb1bb8(x):
    # shiet?
    y = [9666389391, 354562365, 7798347036, 684341514, 9729014533, 4033626422, 3616794159, 1112640306, 9867935396, 3231031004, 829747506, 8866074354, 3038786091, 169692781, 5141607960, 7660075589, 2528250778, 1143025375, 621518025, 6843471248, 5962717929, 2913480739, 7354825515, 8628625517, 2675140474, 1575796439, 8423727688, 7468256745, 8287604494, 9080712875, 7252646906, 7016438853, 4677889579, 8277049004, 5948830616, 9166727439]
    return [x[i] - y[i] for i in range(k)]
def cmul_b6dff247(x):
    # evil
    return [x[i] * 5 for i in range(k)]
def mul_59b3d8b8(x):
    y = [1, 3, 5, 5, 4, 7, 9, 8, 6, 3, 7, 7, 1, 9, 8, 8, 4, 9, 1, 8, 10, 2, 5, 2, 1, 1, 1, 5, 3, 7, 6, 9, 6, 6, 7, 10]
    return [x[i] * y[i] for i in range(k)]
def chxor_1649570d(x):
    # so good
    y = [ord(p) for p in 'bd3866b62cf2cb8f494faad502634b6ce1ff']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_b6e52a0f(x):
    return x[33:] + x[:33]
def digsub_98eb887b(x):
    return [int(str(n)[:1] + ''.join(['1', '5', '2', '8', '3', '7', '0', '6', '4', '9'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_2ce02926(x):
    return [x[p] for p in [27, 32, 5, 22, 8, 30, 29, 3, 25, 31, 34, 28, 0, 26, 23, 20, 14, 21, 18, 16, 35, 2, 33, 13, 24, 12, 7, 10, 6, 9, 17, 19, 11, 15, 1, 4]]
def add_546e77b8(x):
    y = [4807452822, 3805452162, 6379368441, 3087666225, 6767373967, 1107445445, 1414498010, 2417207099, 844858125, 7390750415, 6877939954, 6448661044, 8583778820, 4638825580, 1478315656, 6387161731, 2033039687, 9428712337, 1037042220, 5593922047, 7559446819, 2664536544, 6129319971, 4037771308, 8028676691, 1801922073, 6310372833, 1375750736, 9651448732, 8545648913, 2226868454, 1908175703, 3723506679, 764655725, 9725166935, 5410343258]
    return [x[i] + y[i] for i in range(k)]
def xor_3d8de492(x):
    y = [7458650839, 6394472234, 9336829835, 6822914311, 5736105075, 6652558903, 8401147296, 7377971128, 8232209551, 1525789161, 7887117930, 5481412166, 1157706371, 7102980136, 197613837, 6952241838, 5428943382, 8853683302, 9444687423, 8991625139, 8252633006, 8430118328, 2360870386, 5185542756, 9926035768, 3723673828, 1963788967, 4116181716, 6732537002, 1394453457, 1393956801, 4588629806, 48291358, 5738300446, 691733374, 8108938677]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_2332b1f2(x):
    # lel
    y = [ord(p) for p in '4c88e98f4e877c60271a07489b338fa572d7']
    return [x[i] * y[i] for i in range(k)]
def chmul_c3f87a7a(x):
    y = [ord(p) for p in '27af5f8d3438f4568ffc373e493c2d57ceb5']
    return [x[i] * y[i] for i in range(k)]
def csub_bc70c3a8(x):
    return [x[i] - 511310079 for i in range(k)]
def sub_e9895f44(x):
    y = [3623925030, 8840548153, 9155249792, 4790022905, 7556672323, 8697032104, 1623549989, 4771352978, 5567587219, 2320580465, 9246454388, 4384672962, 7902581542, 732959118, 2322797021, 4052970177, 8001007327, 2481751361, 2292480840, 6612152040, 3290189501, 8671997134, 2521045458, 4003896451, 446614311, 1658244566, 1714254251, 7886605170, 2939208211, 2192242619, 9441019504, 4204785569, 172438840, 9200701830, 7604696762, 8549021573]
    return [x[i] - y[i] for i in range(k)]
def deck_729a714f(x):
    return x[19:22] + x[8:19] + x[:8] + x[22:]
def csub_3d47b491(x):
    return [x[i] - 7022976179 for i in range(k)]
def shuffle_ee42405e(x):
    # mucho encrypto
    return [x[p] for p in [1, 25, 23, 8, 24, 9, 32, 10, 4, 21, 26, 7, 33, 16, 0, 30, 11, 3, 19, 17, 20, 15, 6, 28, 5, 2, 27, 29, 14, 35, 12, 34, 31, 18, 22, 13]]
def chxor_dbd34bdf(x):
    # mucho encrypto
    y = [ord(p) for p in '10e1dc535754e988dad709210e0167bf2147']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_c32db46a(x):
    y = [ord(p) for p in '3c89517a7e94667c1cafb9ca102fd143288a']
    return [x[i] + y[i] for i in range(k)]
def cxor_7bdcbf55(x):
    return [x[i] ^ 7551468766 for i in range(k)]
def cadd_159797e5(x):
    return [x[i] + 6431828976 for i in range(k)]
def cmul_9bf9f69d(x):
    # rekt
    return [x[i] * 8 for i in range(k)]
def xor_9d8c4a8c(x):
    y = [4155634119, 4945437005, 4161305338, 3792666575, 7011080906, 7281472106, 5620269339, 4453363551, 9467902712, 4069226644, 7091629394, 4874043699, 8637151746, 3193997497, 6540947184, 2835683259, 6815533494, 628598097, 8981418305, 2679458200, 4555381831, 3653244875, 7361863986, 9204697782, 7691148306, 752159420, 2217555053, 36024280, 8987149153, 635626371, 6535860948, 5597374873, 9872538031, 1715976194, 610083861, 6066229548]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_9d77353c(x):
    return x[26:] + x[:26]
def add_aae6cc04(x):
    y = [4881639213, 9934301862, 5097989290, 5002058192, 5103618938, 6240497678, 1037317443, 9531508174, 1571994587, 3556795254, 631878762, 663167217, 1561471112, 1437756418, 1078963423, 5007507892, 959107494, 2150502696, 7633820416, 4905105225, 461681617, 7138044172, 5139771351, 8324374233, 2752322064, 4263125343, 7604807393, 6245535571, 7793432322, 2162364928, 8088554305, 5587799538, 510797194, 8039771602, 4008893946, 5591740662]
    return [x[i] + y[i] for i in range(k)]
def chsub_9df05eee(x):
    # encryption
    y = [ord(p) for p in '248a912972e7ced4fb4a2dac78d0e35b2fe4']
    return [x[i] - y[i] for i in range(k)]
def shuffle_823fa35f(x):
    return [x[p] for p in [31, 7, 11, 23, 17, 14, 6, 18, 29, 32, 15, 34, 20, 16, 19, 12, 30, 27, 13, 24, 8, 28, 33, 22, 4, 5, 3, 1, 10, 9, 2, 25, 0, 35, 26, 21]]
def xor_9baa41ff(x):
    y = [6846013455, 2393170676, 1925503329, 8653336556, 4878133089, 9223339764, 1092687610, 7788546782, 9975535832, 346024624, 249525282, 2249631606, 2322228325, 7774858169, 6590809406, 7427070419, 701249202, 2322422335, 6855901875, 8712057453, 9360250585, 7393799645, 343134152, 4344419108, 6063813732, 6333512018, 7688591800, 6176237213, 5291714679, 5611357682, 9180208507, 1891899408, 8181448080, 2117107093, 6943184761, 6001670884]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_2d88dd5b(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '3802d2ec11e119d81f3f241c816816138379']
    return [x[i] * y[i] for i in range(k)]
def cmul_0b0ac64f(x):
    # shiet?
    return [x[i] * 8 for i in range(k)]
def deck_10767c96(x):
    # shiet?
    return x[26:27] + x[27:] + x[:24] + x[24:26]
def shuffle_721dc700(x):
    return [x[p] for p in [10, 29, 34, 21, 5, 27, 20, 33, 12, 32, 15, 1, 22, 7, 9, 11, 2, 26, 0, 16, 30, 25, 31, 3, 24, 8, 14, 13, 4, 28, 23, 6, 19, 35, 18, 17]]
def shuffle_865caf5e(x):
    # just reverse it
    return [x[p] for p in [11, 5, 3, 24, 2, 10, 12, 17, 33, 13, 34, 7, 32, 23, 25, 28, 6, 20, 14, 8, 27, 26, 15, 4, 31, 1, 19, 29, 16, 9, 30, 35, 18, 22, 21, 0]]
def csub_b5b948c9(x):
    return [x[i] - 6708714924 for i in range(k)]
def csub_479c2380(x):
    return [x[i] - 2143857965 for i in range(k)]
def digsub_bbf1a156(x):
    return [int(str(n)[:1] + ''.join(['2', '1', '5', '8', '4', '7', '3', '9', '0', '6'][int(p)] for p in str(n)[1:])) for n in x]
def digsub_09d4f702(x):
    return [int(str(n)[:1] + ''.join(['7', '3', '1', '0', '6', '5', '8', '4', '2', '9'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_db792b73(x):
    return [x[i] * 7 for i in range(k)]
def chunk_4bf6bdc4(x):
    return x[19:] + x[:19]
def xor_1a989c5f(x):
    # kek
    y = [8083345745, 8834630676, 700689666, 1668016657, 1367445719, 6777525199, 4935828148, 9982234730, 5778797030, 609572164, 1972339539, 966070246, 6604466909, 402056865, 9066824473, 7483983127, 6762781939, 45344127, 1675321683, 9739683307, 9704904804, 7923827126, 8794309222, 1188064650, 2041224958, 6332320294, 8250043443, 449164126, 6805173665, 9594717861, 3247268679, 2760931401, 4792513811, 6156990180, 3499199283, 1334901178]
    return [x[i] ^ y[i] for i in range(k)]
def cmul_e510f1c4(x):
    return [x[i] * 9 for i in range(k)]
def digsub_bb8430e7(x):
    return [int(str(n)[:1] + ''.join(['0', '6', '3', '9', '5', '4', '1', '8', '7', '2'][int(p)] for p in str(n)[1:])) for n in x]
def digsub_093ca952(x):
    # kek
    return [int(str(n)[:1] + ''.join(['4', '9', '0', '6', '1', '3', '8', '2', '5', '7'][int(p)] for p in str(n)[1:])) for n in x]
def cxor_296a856b(x):
    return [x[i] ^ 794810819 for i in range(k)]
def cmul_1fd240a5(x):
    return [x[i] * 3 for i in range(k)]
def xor_61d47dbf(x):
    y = [802280436, 9315667980, 3998577886, 105062259, 6945508862, 2284011599, 4497826464, 4624439948, 6109304053, 1726494990, 5750669854, 398574917, 9696327662, 9859634766, 6741854881, 2658250626, 9418830741, 7349002552, 8610918471, 6491953438, 6233759925, 8755551923, 2113769519, 8286234851, 4036632286, 9759607193, 9556191866, 199974201, 3167633804, 4587175533, 8711183772, 4050580169, 1960728291, 8725237008, 9931045445, 1620104629]
    return [x[i] ^ y[i] for i in range(k)]
def cmul_87dca596(x):
    # shiet?
    return [x[i] * 7 for i in range(k)]
def chmul_1bd08914(x):
    y = [ord(p) for p in '7869061669d0a65acedc91672ce71fdac862']
    return [x[i] * y[i] for i in range(k)]
def cadd_f59f3dd1(x):
    return [x[i] + 4600096944 for i in range(k)]
def deck_dc952f7e(x):
    return x[1:9] + x[18:] + x[9:18] + x[:1]
def chxor_d94a9bdc(x):
    y = [ord(p) for p in '83b8483098fd544e94932413e29037896f1e']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_622542fe(x):
    # evil
    return [x[i] * 10 for i in range(k)]
def chmul_7cfdd3dc(x):
    y = [ord(p) for p in 'e5a6d362da8aba14aed58f32a7e0871409f6']
    return [x[i] * y[i] for i in range(k)]
def deck_c7e5c44c(x):
    # kek
    return x[18:33] + x[6:18] + x[:6] + x[33:]
def shuffle_328f0268(x):
    return [x[p] for p in [28, 34, 18, 35, 10, 12, 16, 17, 11, 0, 5, 8, 29, 13, 25, 4, 31, 9, 15, 21, 3, 22, 26, 6, 19, 2, 20, 1, 24, 32, 27, 30, 7, 14, 33, 23]]
def xor_e9e26f3f(x):
    # mucho encrypto
    y = [8208969007, 3295998077, 8677499775, 3839063929, 1727837638, 2011634358, 8602017065, 6892889604, 345955495, 1369862802, 5684810414, 1792571177, 143816295, 7979778064, 8123016170, 3488686871, 5206746615, 4655244969, 5693343153, 1140857339, 5964472628, 1640420496, 2961786035, 6126595606, 4386964517, 7383519187, 3100210452, 1547284155, 2707532218, 1552444122, 3066275718, 3320320839, 2001039983, 5282433523, 9080412072, 2967456180]
    return [x[i] ^ y[i] for i in range(k)]
def csub_df5bd69a(x):
    return [x[i] - 5349838395 for i in range(k)]
def cxor_0e49988d(x):
    return [x[i] ^ 5112644814 for i in range(k)]
def xor_a53f1f68(x):
    # just reverse it
    y = [6298613397, 5486421825, 7195704014, 8724446098, 5021479628, 7531164355, 8998805734, 8361117602, 9368371567, 3552391545, 8529138666, 5014375807, 1035123205, 7282020875, 2991606342, 8428547301, 1345230653, 3467519878, 6102501089, 66742212, 5416130847, 4148196496, 9833654411, 422938287, 8011558576, 9710082710, 4482139141, 9788896178, 1742334737, 8941430243, 936037098, 4740753329, 3743172100, 5544982063, 4822587011, 6100134408]
    return [x[i] ^ y[i] for i in range(k)]
def mul_53ea4a75(x):
    y = [2, 1, 1, 1, 4, 7, 7, 6, 1, 5, 2, 2, 3, 4, 5, 1, 5, 5, 2, 3, 4, 4, 4, 4, 6, 2, 6, 3, 5, 3, 5, 3, 2, 7, 2, 3]
    return [x[i] * y[i] for i in range(k)]
def chxor_38c0a7ad(x):
    # just reverse it
    y = [ord(p) for p in 'a0a1a686259b5d3ba110e221bf10ec849856']
    return [x[i] ^ y[i] for i in range(k)]
def csub_cea15a0b(x):
    return [x[i] - 8845561510 for i in range(k)]
def chmul_f175d1d7(x):
    # mucho encrypto
    y = [ord(p) for p in '929411ff7e54720b23bf9d278de6fc40b067']
    return [x[i] * y[i] for i in range(k)]
def cxor_ce58803c(x):
    # the best
    return [x[i] ^ 5122949972 for i in range(k)]
def cmul_c408d74b(x):
    # so good
    return [x[i] * 6 for i in range(k)]
def xor_5b9dbd1c(x):
    # rekt
    y = [4222607548, 3766006547, 7187803242, 1742756825, 783992207, 7442359152, 284755162, 5076727089, 8090382563, 7454655814, 425027096, 9096373432, 755779239, 5047901905, 5475889467, 5971594605, 3740462107, 2747203840, 3219967672, 9801916063, 5604915307, 1000837547, 8172949257, 2864267958, 7658298037, 4792480254, 7698123049, 605194627, 9738216011, 3213307884, 5408083911, 4885070326, 9584997562, 8336682811, 2078080443, 5999292141]
    return [x[i] ^ y[i] for i in range(k)]
def sub_ec18d730(x):
    y = [3448750935, 723427645, 1035270009, 6895337079, 5497944853, 315717489, 693389684, 355397965, 4751954796, 6337568392, 859596338, 2994844758, 7828009605, 2286030484, 1247548955, 411305580, 749428036, 839335988, 4937384944, 9030399594, 3087690136, 789794440, 3426292705, 3440792110, 7397687869, 9542090950, 3194271242, 5139804890, 1470292028, 6942623525, 4851569935, 3065752262, 9780645065, 3124236175, 8289097926, 891757300]
    return [x[i] - y[i] for i in range(k)]
def chxor_43eeedf6(x):
    # so good
    y = [ord(p) for p in 'da395a84a04037e2e0038f76723fb0d6d044']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_2f4760f5(x):
    # the best
    y = [ord(p) for p in '3200b640750360c91704529ffd259bf4cb38']
    return [x[i] + y[i] for i in range(k)]
def deck_ffeb775a(x):
    return x[:9] + x[33:36] + x[36:] + x[9:33]
def chsub_29d24d89(x):
    # shiet?
    y = [ord(p) for p in 'fe1e4f8930b551d60d388bf75cd59a9abb45']
    return [x[i] - y[i] for i in range(k)]
def xor_084e61d3(x):
    y = [5872280300, 8743032006, 6074974516, 5785126570, 5702352476, 8451836632, 1985680318, 5778655130, 7640875949, 9455316731, 402508370, 6522248536, 7313984257, 3790354730, 6162590267, 2890612250, 2134076817, 7587068364, 2516532287, 9608137967, 6156819593, 3484381683, 4153894459, 8582719028, 1231696397, 1862746750, 287000741, 4075047938, 4127707185, 3641640091, 9057872296, 3546864179, 4335931820, 8209587650, 6538410340, 8701556280]
    return [x[i] ^ y[i] for i in range(k)]
def cmul_22a48cb5(x):
    # lmaooo
    return [x[i] * 10 for i in range(k)]
def chxor_65adc1af(x):
    # lmaooo
    y = [ord(p) for p in 'e9c6bfa4c6379020d199b7223e4fce83f79f']
    return [x[i] ^ y[i] for i in range(k)]
def csub_b56c06db(x):
    # so good
    return [x[i] - 5815045738 for i in range(k)]
def shuffle_c3bda042(x):
    # shiet?
    return [x[p] for p in [9, 4, 31, 20, 2, 32, 34, 19, 1, 18, 7, 11, 16, 29, 33, 14, 23, 24, 27, 21, 10, 0, 15, 28, 25, 17, 8, 22, 30, 12, 6, 5, 13, 26, 3, 35]]
def csub_d215325c(x):
    # encryption
    return [x[i] - 184622389 for i in range(k)]
def add_8e1a7afe(x):
    y = [8192191643, 99643176, 6668816273, 8717797198, 7079671614, 2709927743, 2120443472, 2121855915, 673707387, 1639988704, 3039553633, 6939036315, 740897767, 8595334974, 2367626282, 4732205934, 5394628642, 9712741977, 905611978, 1252202237, 9083472185, 8832945840, 799062823, 6813861397, 6868527556, 8822831791, 3461464610, 888593308, 185256472, 2241622299, 2454389294, 2075227068, 3160600198, 4461477108, 9233979099, 2710474665]
    return [x[i] + y[i] for i in range(k)]
def csub_96f86ad8(x):
    return [x[i] - 4382110338 for i in range(k)]
def chsub_77fcdd6e(x):
    y = [ord(p) for p in '47244c0fe0d2967892c0b60842c5a617b720']
    return [x[i] - y[i] for i in range(k)]
def xor_0cecea66(x):
    y = [8405386785, 7532871565, 424480700, 3287827076, 8971590713, 1028268169, 8557284262, 9428688165, 7403634313, 4803954826, 4436475149, 7212000917, 1322826716, 8621293752, 1200974463, 7184491269, 4949087070, 9348604871, 5628197928, 3318012675, 3938416884, 8211292695, 2012128058, 4624093793, 1326147016, 3584740001, 5699756529, 982192235, 42575470, 7758012739, 9222096756, 9871251248, 4108667224, 5603425242, 2140585509, 2872352868]
    return [x[i] ^ y[i] for i in range(k)]
def xor_05c5dcc9(x):
    # the best
    y = [2203753871, 6380186959, 9770325799, 2609147458, 359644495, 898832038, 4139040769, 5694134250, 4196439713, 9897336299, 2683497713, 4226259945, 4325751027, 8522174525, 2239766982, 2052846738, 4705902176, 8637755053, 3032557546, 6157380890, 8331090028, 3676838397, 9805401930, 2655031292, 2627690026, 1371777032, 8974234397, 8027576984, 8027247646, 310795413, 1232859621, 6013530213, 257863973, 840186695, 8040335172, 3163817813]
    return [x[i] ^ y[i] for i in range(k)]
def deck_ec1b61f9(x):
    # lel
    return x[:7] + x[28:29] + x[29:] + x[7:28]
def chsub_ad5739bc(x):
    y = [ord(p) for p in 'b90e0d9a9cf2074fd79eb1ad7e1a44dbf87d']
    return [x[i] - y[i] for i in range(k)]
def chmul_edaf1927(x):
    # so good
    y = [ord(p) for p in '906b57997f28df9ad8313ea8b18528a6af32']
    return [x[i] * y[i] for i in range(k)]
def csub_96d5d023(x):
    # so good
    return [x[i] - 7078391749 for i in range(k)]
def chxor_34a2c770(x):
    y = [ord(p) for p in 'e1f316ca5e0aaa8161711fd1dd2026c3d952']
    return [x[i] ^ y[i] for i in range(k)]
def xor_bf47bb3a(x):
    # rekt
    y = [3369136511, 2999766932, 4194016338, 9970023640, 6264736252, 507429338, 302912199, 9203649724, 5460167024, 6310634314, 7514585760, 9940308625, 4362509367, 7029027482, 6134473960, 2963637659, 3205113133, 1415584979, 7529912116, 5430055795, 9332986511, 2709974488, 2753768732, 713340774, 4520268976, 367877827, 9090569519, 9731364407, 7861802081, 7354792219, 3892137605, 2101600893, 8227216227, 908207734, 3962928182, 8154471399]
    return [x[i] ^ y[i] for i in range(k)]
def sub_83e670dd(x):
    # just reverse it
    y = [5965314444, 3999559917, 3814286939, 6024274043, 6048529281, 6781261165, 3870206668, 1856340331, 439679221, 723067034, 9540624428, 2511902696, 1025965943, 678179732, 6215915661, 5194274005, 3286109719, 4407999290, 9387723033, 4167904382, 5554928525, 463752795, 6383834993, 8077183062, 6277696888, 6566009101, 1021376049, 11807826, 9838082969, 3577819977, 788875827, 9083310108, 1009648474, 4285747365, 2426306407, 8276497462]
    return [x[i] - y[i] for i in range(k)]
def deck_df41e81d(x):
    # so good
    return x[14:] + x[3:14] + x[:2] + x[2:3]
def cadd_1cd51d5c(x):
    # the best
    return [x[i] + 4415208526 for i in range(k)]
def chxor_587ae605(x):
    # just reverse it
    y = [ord(p) for p in 'ef4c632d530b4282eec246a4ea29b44180fa']
    return [x[i] ^ y[i] for i in range(k)]
def mul_355bc0a3(x):
    y = [8, 5, 1, 5, 2, 4, 3, 7, 5, 1, 2, 4, 3, 1, 4, 2, 1, 7, 3, 6, 7, 1, 1, 4, 4, 6, 3, 6, 7, 5, 7, 6, 2, 2, 2, 2]
    return [x[i] * y[i] for i in range(k)]
def cxor_207ceb20(x):
    return [x[i] ^ 4540372271 for i in range(k)]
def sub_c8e4bd2d(x):
    # rekt
    y = [7486847896, 1732470117, 4797481822, 4193812727, 8946969048, 2058388012, 4479256159, 9307679145, 1642098754, 7095735797, 6375644478, 1233843323, 6320627095, 6307635044, 7226132053, 9692011391, 9711931053, 7118706468, 5953775712, 1623365847, 1993263783, 539111710, 194196398, 6821338579, 796353601, 3598799080, 7348918030, 5502712944, 7728319944, 8182138928, 5242559580, 3281089301, 1479200688, 8788947067, 4445987983, 5692833655]
    return [x[i] - y[i] for i in range(k)]
def xor_b1850163(x):
    y = [5585303621, 2445404508, 3792422211, 2897913008, 8575259176, 4457819085, 8496203308, 2150662238, 6207835359, 3067020314, 1170252276, 1876258953, 5080511297, 8912899825, 5491519675, 6548991389, 4490381959, 9582215380, 3916773354, 5138513079, 1890512406, 1209273347, 4583381860, 743955952, 82299970, 6101477215, 2560584571, 8837589922, 4222204832, 2595586137, 3803727904, 8822683381, 2748978541, 1805435263, 6530998595, 1402756136]
    return [x[i] ^ y[i] for i in range(k)]
def xor_702b624c(x):
    y = [5678472680, 5100066315, 8839737717, 3101369405, 706398254, 6271164246, 2839919540, 3582607499, 4094408421, 6868210655, 3822077158, 2058155374, 657901452, 3812805851, 2456203625, 5717807972, 2438265736, 5797372209, 7523569288, 9674755507, 5708915198, 3134082195, 9829545690, 5010681585, 1192066093, 8341472547, 1861425493, 8146633537, 6359959768, 3573853643, 4167710997, 2568796923, 2387903103, 2604970709, 8859668417, 389663322]
    return [x[i] ^ y[i] for i in range(k)]
def mul_1b990e40(x):
    # mucho encrypto
    y = [8, 1, 4, 8, 2, 6, 1, 6, 4, 3, 5, 1, 4, 8, 6, 3, 7, 8, 1, 2, 7, 6, 7, 2, 4, 8, 2, 2, 4, 6, 5, 3, 6, 4, 5, 5]
    return [x[i] * y[i] for i in range(k)]
def shuffle_d635239a(x):
    return [x[p] for p in [0, 4, 23, 32, 5, 30, 2, 21, 17, 28, 7, 16, 6, 25, 18, 35, 27, 26, 31, 19, 3, 15, 14, 13, 10, 29, 20, 8, 22, 1, 24, 11, 33, 9, 34, 12]]
def chxor_c7b14201(x):
    # the best
    y = [ord(p) for p in 'fa9af1d2523b2c95932486dac4b6daf9fbdc']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_db034137(x):
    return [x[i] ^ 2186940747 for i in range(k)]
def chunk_e5683735(x):
    # so good
    return x[30:] + x[:30]
def add_c2f77d7b(x):
    # so good
    y = [9578263940, 901806120, 3756676021, 8017132652, 2585463438, 2900560120, 2513264305, 923019531, 2638806589, 5488529865, 3996352919, 7187501389, 9670271036, 4335205210, 2349210311, 3104962017, 7729333658, 643179657, 2677513832, 5291570237, 687699624, 6755884913, 4855856334, 2298248371, 5373748091, 4947361987, 7257277142, 5224687349, 8480956607, 2929089272, 5179846685, 2618577927, 315270394, 4803086858, 4357062417, 4597981766]
    return [x[i] + y[i] for i in range(k)]
def deck_2855ed38(x):
    # just reverse it
    return x[:26] + x[29:32] + x[26:29] + x[32:]
def xor_34c86087(x):
    y = [3116593643, 5836202092, 2815192789, 2149712060, 9531681856, 5574814334, 9319768094, 170704909, 5528748524, 464964140, 5945912026, 5925334432, 5914331215, 3154061109, 4949239738, 3772400209, 793170998, 6060375090, 788715879, 9202798184, 2800142723, 7537798118, 8139621424, 4178047930, 3176965453, 1092377153, 9526477811, 2922843857, 9426175394, 2752575433, 6693549494, 6690890269, 9291192284, 1627398030, 1127381616, 366445374]
    return [x[i] ^ y[i] for i in range(k)]
def chadd_d4f4e60b(x):
    y = [ord(p) for p in '2b127cea929cef069f5022750ac437a600a1']
    return [x[i] + y[i] for i in range(k)]
def deck_47e22218(x):
    return x[:23] + x[36:] + x[23:36] + x[23:23]
def xor_abf7f988(x):
    # so good
    y = [2071635394, 8490341403, 271005263, 2721327484, 6951682367, 8352564905, 7365103032, 4915816472, 700358978, 8439114032, 5704296308, 8139798736, 3058718431, 5193214934, 16254998, 6760115073, 2838043938, 667303430, 6839073366, 2141348497, 3359457271, 6707950787, 8022947743, 4598435925, 6990347726, 9966939886, 8715945337, 4991075457, 2813743854, 2910605286, 746625769, 4409780792, 8317225079, 8777765186, 125137196, 3970627629]
    return [x[i] ^ y[i] for i in range(k)]
def sub_665d3f8a(x):
    # the flag is flag{jk}
    y = [7339214383, 3346945151, 2661968058, 2988194839, 1318490507, 9536271285, 5688787602, 9438408513, 6634342436, 1173894965, 3279569649, 2784987547, 6419765440, 577411275, 5859784991, 4564558901, 9423262789, 1305546771, 9201220110, 2568314676, 8627711020, 4530905045, 9487460263, 5972318332, 5197077125, 8748954869, 1638800941, 6741400837, 5016272300, 4645114859, 2536374675, 480282363, 7652843367, 1820234339, 4670220000, 5643510958]
    return [x[i] - y[i] for i in range(k)]
def sub_fb458c7e(x):
    y = [5532446165, 141173148, 8093171743, 9268085209, 4984169113, 9145493831, 7347905585, 543607118, 9771424801, 5269035836, 5931438302, 1608772061, 6297647824, 3008147123, 225328964, 4009733764, 142165570, 5697362716, 9122636548, 7300885548, 6469390909, 1913568694, 7517123705, 7684849970, 2035230084, 9686806590, 1961272980, 1384344419, 2313855165, 6778025777, 1646484745, 6945252117, 9075643071, 5525552503, 9026953060, 4947759135]
    return [x[i] - y[i] for i in range(k)]
def chxor_49c8f56a(x):
    y = [ord(p) for p in '65aace873ff77af704faa40f200c6bc9f1e5']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_326aefee(x):
    y = [ord(p) for p in '0a9aee0150edcba7305351ab1834d7c521f2']
    return [x[i] * y[i] for i in range(k)]
def sub_bea3fee1(x):
    # just reverse it
    y = [4337735555, 8017033416, 6193593608, 6969042249, 7498689102, 3024235471, 160914604, 7772045453, 3008753547, 5776875480, 8193951004, 2130351705, 9327150074, 7448890628, 9677805020, 6868534162, 2076470400, 8987613907, 4104549504, 2914292893, 6080820357, 8401781813, 2250341214, 5996338793, 2641555762, 9045747329, 3706248785, 9509426938, 2088061026, 5381101128, 6339374944, 1118645600, 7601025009, 9870500647, 9012759433, 8857904861]
    return [x[i] - y[i] for i in range(k)]
def cmul_89ce7854(x):
    # just reverse it
    return [x[i] * 4 for i in range(k)]
def cadd_8db97cbc(x):
    return [x[i] + 170194470 for i in range(k)]
def sub_0cd6568b(x):
    # the flag is flag{jk}
    y = [6473614921, 6155554581, 8029314919, 9107627753, 1776630428, 8316320160, 7279650534, 5403890935, 6755741217, 6249039499, 1131553512, 2443483869, 6627394292, 6156190932, 6463476559, 4654231643, 9279375967, 4114483442, 9455419514, 6234429520, 7593871099, 4114159735, 4857456958, 7901309888, 7944579294, 1955167094, 815799585, 6750772144, 6328539565, 7849424323, 349407236, 6962369465, 2543365538, 1445228756, 3716694930, 7433016328]
    return [x[i] - y[i] for i in range(k)]
def chmul_7df9b320(x):
    y = [ord(p) for p in '68dbc1360e4df244310264131efcab0f1ceb']
    return [x[i] * y[i] for i in range(k)]
def cmul_de3ea36c(x):
    return [x[i] * 5 for i in range(k)]
def deck_e4b23640(x):
    # shiet?
    return x[6:27] + x[27:] + x[:1] + x[1:6]
def chsub_d8b43803(x):
    y = [ord(p) for p in '46f44a2ea4bc9656ea0b59b65faed9355b7a']
    return [x[i] - y[i] for i in range(k)]
def chxor_da702120(x):
    # so good
    y = [ord(p) for p in '790d4cd4a24340fcc8090f1ccb524e919d23']
    return [x[i] ^ y[i] for i in range(k)]
def xor_2bdb6650(x):
    # evil
    y = [8532441189, 9316885282, 8728486705, 2530694209, 160021933, 7915359328, 294973766, 4479140201, 8586055527, 3053149607, 3962806207, 7970574890, 7007932853, 7949876592, 1257421825, 4171176274, 4355947525, 950438721, 6854397581, 9735316047, 2895451117, 6161743333, 8516024615, 4485149757, 9437684163, 212428567, 8464576415, 1686651491, 9044335233, 6856500137, 9489529685, 1215318463, 4088078699, 7417407640, 1473216108, 7817312660]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_8cfb1503(x):
    # encryption
    y = [ord(p) for p in '3f96bda4e51ebe93eb98bcee178be9ae48db']
    return [x[i] * y[i] for i in range(k)]
def cxor_182bdecc(x):
    # kek
    return [x[i] ^ 9528109396 for i in range(k)]
def chmul_6f2b8735(x):
    y = [ord(p) for p in '51e41eca74ff8e676cd9339e9ccecbe0c078']
    return [x[i] * y[i] for i in range(k)]
def cmul_2eb8bc9e(x):
    return [x[i] * 3 for i in range(k)]
def xor_840940ad(x):
    y = [7915439902, 3562226555, 2177676513, 5479693988, 6560298015, 7020241664, 2144139546, 4342395695, 1758301736, 1257152092, 982888507, 1449738998, 4687795034, 6256423897, 6252793249, 1869994026, 9113548242, 8446807305, 8029114040, 7002780384, 6767666509, 9888876894, 8371924611, 2665160202, 1208721849, 3784775932, 4551445364, 5946198798, 4658617263, 9495138289, 6251076506, 6205187217, 2810186864, 2821153267, 9271074543, 9016707978]
    return [x[i] ^ y[i] for i in range(k)]
def cadd_210c6dc4(x):
    # the best
    return [x[i] + 3761778412 for i in range(k)]
def chxor_ca9732e1(x):
    y = [ord(p) for p in '6cca8fea13e0d905c3671b79ce7711e2edb3']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_500947df(x):
    y = [ord(p) for p in 'dd25ca0f704d2e9ff41dcb588a7f908b3434']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_079c91f6(x):
    # just reverse it
    return [x[i] + 5678572468 for i in range(k)]
def mul_0a969cbc(x):
    # lmaooo
    y = [2, 8, 8, 1, 5, 4, 8, 7, 8, 9, 9, 1, 7, 7, 5, 6, 3, 10, 7, 8, 6, 2, 10, 8, 9, 3, 1, 9, 4, 1, 5, 2, 8, 10, 10, 9]
    return [x[i] * y[i] for i in range(k)]
def cxor_c321d96d(x):
    # encryption
    return [x[i] ^ 880721638 for i in range(k)]
def add_60fa40cf(x):
    y = [829237032, 1751654753, 1872875228, 8305595919, 1325679030, 3960740167, 4289703370, 5492499935, 4831621725, 3868409727, 2917680011, 484483500, 5699625778, 2180923875, 2579266685, 2345337446, 637514272, 7665901528, 9439717038, 8360379853, 3257403633, 1890383898, 1927014626, 3203275049, 3366864583, 9796323442, 2817898346, 8284486942, 4217976420, 6613298295, 4118132476, 3010318164, 1153452524, 7175011895, 296849841, 2826240750]
    return [x[i] + y[i] for i in range(k)]
def chxor_ffe3793d(x):
    # lel
    y = [ord(p) for p in '9b57a059edabff0a8e77294c01a5334cd61f']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_ba8b037d(x):
    # the best
    return [x[i] * 10 for i in range(k)]
def cxor_71fd1f39(x):
    return [x[i] ^ 7399778569 for i in range(k)]
def cxor_53008000(x):
    # kek
    return [x[i] ^ 1163273294 for i in range(k)]
def shuffle_b14477ff(x):
    # mucho encrypto
    return [x[p] for p in [15, 4, 35, 23, 22, 5, 6, 14, 20, 26, 29, 12, 27, 9, 16, 28, 31, 30, 3, 33, 0, 32, 7, 17, 10, 24, 19, 1, 34, 13, 25, 11, 21, 18, 8, 2]]
def shuffle_7dc0e0cb(x):
    return [x[p] for p in [34, 20, 16, 13, 19, 17, 32, 6, 15, 10, 5, 8, 2, 9, 3, 23, 27, 28, 24, 0, 12, 7, 4, 25, 26, 31, 14, 35, 21, 33, 1, 30, 18, 22, 29, 11]]
def chmul_ca2a7a2b(x):
    # evil
    y = [ord(p) for p in '7180cbcffb7ef15671f1d00c17af9be83db7']
    return [x[i] * y[i] for i in range(k)]
def chsub_b596367b(x):
    # lel
    y = [ord(p) for p in 'b3437dfb1aed1fd4ced2f8941f2472c72c51']
    return [x[i] - y[i] for i in range(k)]
def chsub_91553a2c(x):
    # the best
    y = [ord(p) for p in '0c1dafe998f9f0618511ae37e02d80bfd265']
    return [x[i] - y[i] for i in range(k)]
def shuffle_506b50c8(x):
    # rekt
    return [x[p] for p in [3, 22, 31, 30, 6, 13, 25, 23, 15, 7, 8, 14, 0, 35, 16, 27, 1, 21, 29, 24, 11, 20, 33, 32, 34, 28, 19, 2, 17, 4, 12, 18, 5, 10, 9, 26]]
def chmul_4e871d0b(x):
    # mucho encrypto
    y = [ord(p) for p in '8fc3ca1a97c7cf6a55db43b7e4456ad19297']
    return [x[i] * y[i] for i in range(k)]
def chsub_0b4adf36(x):
    y = [ord(p) for p in '688e39e0867b3050d627ca5b2b1dd3243a88']
    return [x[i] - y[i] for i in range(k)]
def sub_5e615eab(x):
    y = [4693345004, 3619512093, 5745853521, 9317634547, 8456429915, 8300046002, 8171293893, 6212488805, 9698396240, 5518255207, 208703425, 6128734539, 2403968166, 3410460376, 8513752736, 7074383613, 8911669799, 9081019726, 6775296899, 1409681216, 9796812230, 6470640831, 3199745124, 1806059144, 4072273397, 5056679014, 1017295116, 9957850967, 6132444901, 4141221257, 1232126102, 1413987357, 989930879, 9437406769, 2234385136, 9596717115]
    return [x[i] - y[i] for i in range(k)]
def cxor_c146ee2f(x):
    return [x[i] ^ 23854484 for i in range(k)]
def sub_854261bd(x):
    # encryption
    y = [9903490199, 2498154336, 8400978140, 7437719264, 1957507260, 288347244, 6227661817, 1730058612, 3443105750, 8114105493, 4658777457, 3361492768, 6123841320, 5220056445, 2487519829, 1360812495, 9337926515, 3086186593, 690499176, 369364986, 6829294819, 8996431905, 4473421609, 4727225028, 6396792379, 1261581911, 9992061763, 2786282683, 9024867955, 5616077978, 7149756973, 6325052616, 2259807871, 1477550273, 2370552591, 2499465771]
    return [x[i] - y[i] for i in range(k)]
def chxor_b3e205ec(x):
    y = [ord(p) for p in 'e907e9e3af3925ee49796f40e2c42c389636']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_e874a3fc(x):
    return [x[p] for p in [29, 10, 15, 17, 1, 25, 14, 4, 28, 0, 20, 3, 16, 18, 32, 24, 30, 6, 27, 7, 26, 34, 13, 23, 8, 31, 2, 12, 22, 19, 11, 21, 9, 5, 33, 35]]
def chxor_98102bb9(x):
    y = [ord(p) for p in 'ecaa6f7734e012505a53040a52cb360fda1b']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_f6dc12d6(x):
    y = [ord(p) for p in 'cd12fcd4232a3d15b49f8fac6423a6f4a4bb']
    return [x[i] ^ y[i] for i in range(k)]
def sub_da5b779b(x):
    y = [9989313909, 5333866985, 3148513169, 8138428343, 8952283526, 6716948156, 4916951291, 9132643700, 5628154149, 8552800522, 8525671561, 486496515, 6762724866, 8989778248, 2876758082, 9057615125, 3106418357, 4576044689, 316004885, 319649610, 9969873029, 2423581938, 7715583187, 9704534767, 2872713444, 9061654665, 2617086048, 4367765733, 2744711333, 7319094264, 3096226980, 3050117046, 8733951697, 4351970547, 8736895673, 49845563]
    return [x[i] - y[i] for i in range(k)]
def chxor_24586d25(x):
    y = [ord(p) for p in 'a4d295b7ea888b9557e75ccda901b67dd736']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_829e8d09(x):
    return [x[i] * 4 for i in range(k)]
def deck_392e6557(x):
    return x[22:] + x[1:16] + x[16:22] + x[:1]
def deck_1dc7caf0(x):
    return x[6:26] + x[:6] + x[26:33] + x[33:]
def digsub_caab5c9d(x):
    # the best
    return [int(str(n)[:1] + ''.join(['6', '0', '7', '9', '5', '8', '1', '3', '2', '4'][int(p)] for p in str(n)[1:])) for n in x]
def csub_89d6db66(x):
    return [x[i] - 4809148517 for i in range(k)]
def chxor_7fed6271(x):
    y = [ord(p) for p in '138b7b49c0c0119306a43f2353113b4cd3ae']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_d5cb8b82(x):
    y = [ord(p) for p in 'd90d4cd0e2e9c71383e28908c4264be169a4']
    return [x[i] + y[i] for i in range(k)]
def add_2a4aac0f(x):
    # shiet?
    y = [2232475863, 766397425, 2271593073, 7996664520, 5152830754, 8702222490, 6195682355, 1166371452, 8356861228, 1666086866, 29954971, 3818229854, 8183865005, 2555564769, 5242399807, 6853361554, 8993408358, 9454847276, 4014616700, 811973109, 375595890, 9222900731, 6187982813, 3883064720, 1499410956, 5243638589, 7099435711, 9963922703, 363758900, 292092353, 2418366246, 1835137064, 66708799, 4842145434, 5866530537, 4989525780]
    return [x[i] + y[i] for i in range(k)]
def add_827d7100(x):
    # evil
    y = [97545311, 491355543, 5043810953, 2321678855, 4757207172, 4111900986, 8811983383, 7812797918, 2479255178, 1636777106, 4080154866, 1227187736, 645969774, 9591960841, 1228317517, 8396853553, 8817383050, 9772330138, 9633020472, 934399985, 4324032926, 7083133817, 2400099924, 1249866398, 4961654532, 4786848709, 1826037617, 5704773477, 4869683183, 4656421916, 8139683651, 6089938955, 6487929009, 7422342639, 8848476803, 3850507921]
    return [x[i] + y[i] for i in range(k)]
def shuffle_68d954ec(x):
    return [x[p] for p in [22, 17, 27, 34, 6, 33, 9, 25, 26, 13, 30, 16, 29, 23, 19, 1, 20, 28, 0, 14, 3, 2, 11, 5, 24, 12, 10, 18, 8, 21, 15, 4, 35, 7, 31, 32]]
def digsub_d70c6f19(x):
    return [int(str(n)[:1] + ''.join(['1', '5', '9', '0', '8', '3', '7', '6', '2', '4'][int(p)] for p in str(n)[1:])) for n in x]
def deck_205d660f(x):
    # the best
    return x[26:32] + x[18:26] + x[32:] + x[:18]
def cxor_dc7aac3c(x):
    return [x[i] ^ 6151130150 for i in range(k)]
def chunk_97e5e867(x):
    # so good
    return x[10:] + x[:10]
def add_9591eabf(x):
    # rekt
    y = [663507221, 8396547045, 3252235388, 7965745432, 2043649506, 7782894531, 7239063387, 2923196620, 4063154381, 7803090099, 6989635966, 5763738516, 9881663877, 7083135077, 8788090030, 1210811138, 1900759569, 8932501948, 1883097690, 685546195, 3387889699, 8358306287, 6540219071, 9232555778, 6771085133, 4245871858, 3879241617, 8333336717, 1684674677, 5933512813, 3518023827, 8835760195, 3652498393, 3532184906, 5311129064, 3408472167]
    return [x[i] + y[i] for i in range(k)]
def digsub_8224944b(x):
    # rekt
    return [int(str(n)[:1] + ''.join(['1', '0', '2', '5', '4', '6', '7', '9', '3', '8'][int(p)] for p in str(n)[1:])) for n in x]
def chunk_55f369b0(x):
    # evil
    return x[35:] + x[:35]
def shuffle_8ed3abbd(x):
    return [x[p] for p in [35, 14, 24, 2, 7, 13, 22, 19, 18, 17, 5, 30, 31, 3, 11, 9, 32, 6, 34, 0, 20, 33, 28, 1, 4, 25, 8, 16, 29, 10, 12, 21, 23, 26, 15, 27]]
def cmul_318e5f45(x):
    # just reverse it
    return [x[i] * 5 for i in range(k)]
def shuffle_41b9328e(x):
    return [x[p] for p in [5, 23, 31, 2, 28, 8, 22, 13, 18, 34, 35, 29, 17, 25, 0, 27, 32, 14, 21, 3, 16, 4, 24, 11, 6, 30, 20, 9, 7, 15, 10, 1, 33, 19, 12, 26]]
def cxor_41764223(x):
    return [x[i] ^ 9134837647 for i in range(k)]
def shuffle_3150238f(x):
    return [x[p] for p in [8, 35, 30, 33, 6, 28, 12, 24, 17, 16, 25, 14, 19, 34, 15, 11, 18, 10, 29, 5, 22, 20, 2, 13, 9, 3, 4, 0, 32, 1, 31, 21, 26, 7, 27, 23]]
def chadd_9f220dc2(x):
    y = [ord(p) for p in '395bef2e20f24bca3b7771eed1c2fef1aec9']
    return [x[i] + y[i] for i in range(k)]
def csub_2bce138a(x):
    return [x[i] - 7622408368 for i in range(k)]
def digsub_9fc4a4c5(x):
    # encryption
    return [int(str(n)[:1] + ''.join(['6', '1', '2', '4', '0', '7', '8', '5', '9', '3'][int(p)] for p in str(n)[1:])) for n in x]
def csub_a2102746(x):
    return [x[i] - 182712672 for i in range(k)]
def chadd_151f0f0e(x):
    # mucho encrypto
    y = [ord(p) for p in '2e7a5fbb66dbac38a2f0b4cb5c6528026341']
    return [x[i] + y[i] for i in range(k)]
def chunk_e9bf280d(x):
    # the best
    return x[2:] + x[:2]
def chadd_7bc2adef(x):
    y = [ord(p) for p in '0a919a4653e90578ef2e43e58f776ec81268']
    return [x[i] + y[i] for i in range(k)]
def shuffle_fbcb4ff2(x):
    return [x[p] for p in [5, 25, 27, 29, 4, 18, 14, 2, 1, 30, 15, 26, 9, 19, 24, 17, 8, 34, 11, 21, 35, 3, 6, 33, 31, 13, 20, 7, 23, 32, 22, 10, 12, 28, 16, 0]]
def cadd_fb2c7b99(x):
    return [x[i] + 743328691 for i in range(k)]
def mul_89bed2ea(x):
    # encryption
    y = [3, 5, 1, 5, 4, 5, 5, 4, 6, 4, 7, 4, 4, 5, 7, 1, 1, 5, 5, 5, 1, 3, 2, 2, 7, 4, 1, 3, 1, 7, 2, 2, 6, 5, 3, 7]
    return [x[i] * y[i] for i in range(k)]
def sub_f502ff48(x):
    y = [449944819, 2225194663, 4231360331, 5174333124, 9082075914, 3775051194, 3212558486, 622630856, 4591338261, 4454124188, 2169301057, 6060929668, 3385959753, 2714513498, 9724463182, 9007066336, 1167516189, 5914928547, 3205606094, 6383431225, 6700833633, 6231889048, 795424179, 5506306349, 576783568, 7884310612, 4324566591, 4611807792, 6055868889, 8582208107, 4497492207, 2818557770, 730051484, 2261904551, 7155611355, 8393021811]
    return [x[i] - y[i] for i in range(k)]
def cmul_dc6ecbe6(x):
    return [x[i] * 9 for i in range(k)]
def xor_fc88f2e7(x):
    y = [4812201752, 8144602993, 4572543081, 7064204076, 9675321065, 3464496598, 4321329988, 5159222936, 4018542404, 4342120565, 6823670436, 672680677, 9606400488, 2113734206, 4421949697, 873955355, 4473940098, 1377665141, 1640134558, 6854212629, 2830105155, 4759781480, 856244442, 2818842183, 1680443852, 856046007, 5474199168, 4562001563, 4711125527, 2501675465, 1299036918, 4017567833, 7164584942, 315473256, 175412833, 8911514539]
    return [x[i] ^ y[i] for i in range(k)]
def cadd_56728fa3(x):
    return [x[i] + 8367927267 for i in range(k)]
def shuffle_c7e85def(x):
    # encryption
    return [x[p] for p in [29, 0, 22, 6, 26, 10, 28, 21, 35, 32, 17, 34, 9, 15, 8, 23, 19, 14, 11, 12, 27, 20, 16, 30, 13, 24, 1, 4, 3, 25, 31, 5, 33, 2, 7, 18]]
def shuffle_81777ea5(x):
    # mucho encrypto
    return [x[p] for p in [19, 6, 13, 29, 4, 16, 3, 25, 9, 0, 34, 2, 24, 15, 33, 1, 11, 30, 7, 17, 26, 12, 35, 18, 14, 32, 27, 21, 8, 31, 20, 5, 23, 22, 28, 10]]
def sub_05bc34d7(x):
    # lmaooo
    y = [6816237845, 9887148293, 3041149147, 2339157331, 156040008, 4510443392, 4127664773, 7048678411, 5184954032, 8205008602, 2763242114, 1274424337, 813999260, 4978964390, 576217037, 4888735145, 1635051051, 6354042889, 9909880832, 5458285005, 2527707870, 9705574040, 3788662292, 4003783815, 9261834859, 4205260092, 8890227444, 5065948210, 5855217909, 9973189596, 7257602566, 9897809696, 1789739985, 8260736179, 7571877312, 8239939468]
    return [x[i] - y[i] for i in range(k)]
def digsub_dcdf3ce1(x):
    # the flag is flag{jk}
    return [int(str(n)[:1] + ''.join(['9', '2', '8', '5', '4', '0', '7', '3', '6', '1'][int(p)] for p in str(n)[1:])) for n in x]
def xor_e32cc6e3(x):
    y = [85229090, 6989296442, 1967178120, 2486764658, 1133445681, 9127230738, 1784170988, 9316569461, 3038877803, 5767445413, 4449815654, 5065770871, 7993078418, 8815927308, 1857079900, 577021097, 782486886, 3445117741, 5704445554, 3436176541, 3230624653, 5353189962, 2712354339, 6739233970, 5870765354, 3393063808, 1502800419, 3399845490, 5383066218, 2807127622, 5530505699, 6430703323, 6808516452, 9692355074, 173445972, 1403480408]
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_204502b1(x):
    # encryption
    return [x[p] for p in [31, 21, 23, 18, 20, 15, 25, 11, 4, 35, 17, 19, 29, 3, 27, 7, 10, 26, 6, 30, 12, 34, 14, 22, 0, 32, 9, 1, 5, 33, 8, 24, 13, 28, 2, 16]]
def xor_0ebbd2b0(x):
    y = [144823298, 9799474449, 5305170927, 8347278064, 6083793891, 9307437196, 5340084331, 5659454808, 6939601714, 8044032850, 3468766943, 5272457684, 3204387987, 7516615422, 2181543721, 5658320746, 5099442821, 2855102903, 7115722106, 9384048993, 3198798464, 5425504818, 6052598389, 4658307401, 2540052759, 8910931636, 7376339439, 7351883212, 3886664093, 9728152332, 5243040453, 5599996316, 3669440213, 6125499009, 9842357829, 2906898468]
    return [x[i] ^ y[i] for i in range(k)]
def mul_2fea700d(x):
    y = [1, 8, 7, 4, 2, 6, 5, 7, 2, 7, 1, 1, 7, 7, 6, 4, 5, 6, 4, 6, 6, 6, 4, 1, 4, 2, 6, 5, 5, 8, 4, 6, 4, 3, 4, 5]
    return [x[i] * y[i] for i in range(k)]
def add_377e663e(x):
    # just reverse it
    y = [3672701884, 394890187, 1461295540, 346531142, 6196721992, 6030970689, 2171553235, 8064775797, 1212804367, 2800320089, 8282031469, 3062039527, 1244840462, 3821839643, 3755828783, 6199497013, 7774609658, 8719183878, 5692161592, 2216445627, 7117898279, 1687832832, 223782109, 4653937051, 3277660245, 4599936522, 7828943270, 5215439471, 3438459787, 7395320948, 5159720174, 3623865644, 4034801283, 4085440417, 5060569817, 5465138258]
    return [x[i] + y[i] for i in range(k)]
def shuffle_2ad93819(x):
    # shiet?
    return [x[p] for p in [8, 29, 32, 18, 22, 28, 21, 35, 13, 34, 26, 5, 12, 7, 14, 25, 17, 24, 19, 6, 11, 27, 2, 0, 10, 30, 4, 3, 16, 23, 15, 20, 9, 31, 33, 1]]
def digsub_0fcbc54c(x):
    # lel
    return [int(str(n)[:1] + ''.join(['3', '6', '7', '0', '2', '5', '9', '4', '8', '1'][int(p)] for p in str(n)[1:])) for n in x]
def add_48a6be62(x):
    # shiet?
    y = [9033294805, 6561989553, 5671495199, 6998318791, 4650359632, 5943258411, 9607889302, 3379657964, 1741639912, 3687182647, 9346582910, 5803348194, 5226990223, 6483324553, 5230532186, 8188785746, 4466192278, 2204477936, 8103856590, 1068980595, 6042377688, 3298772206, 9639659940, 8076345591, 1197166565, 1769521033, 7045220687, 4717126354, 3365900865, 5556991957, 1486783464, 6215242708, 9107044769, 6052543901, 1171315873, 3031342368]
    return [x[i] + y[i] for i in range(k)]
def sub_e383e4d5(x):
    # kek
    y = [131508110, 9865492992, 1162119710, 3478852600, 4104117004, 2609580074, 1321667360, 561397681, 3954078781, 735753726, 952886821, 5464376798, 5737415798, 2207286785, 8620469712, 4373360063, 1929664505, 8914523658, 4484974736, 2539463605, 2889982048, 8145602131, 4412296343, 8831886690, 120711923, 3759434406, 6377268387, 6388846820, 4507013038, 3563754293, 6769078398, 2884702649, 1499438278, 1273724053, 7968113408, 6589411023]
    return [x[i] - y[i] for i in range(k)]
def cmul_e03e8b1c(x):
    # lmaooo
    return [x[i] * 8 for i in range(k)]
def chxor_4639250f(x):
    # rekt
    y = [ord(p) for p in 'e1170b071bc82eb36570476f8e1fb58256ab']
    return [x[i] ^ y[i] for i in range(k)]
def csub_b14e28f6(x):
    return [x[i] - 1395979873 for i in range(k)]
def mul_137ad3d1(x):
    y = [1, 3, 2, 3, 2, 4, 1, 2, 1, 4, 6, 7, 1, 3, 5, 7, 1, 7, 8, 3, 4, 1, 6, 8, 6, 3, 3, 4, 2, 6, 3, 7, 7, 5, 4, 4]
    return [x[i] * y[i] for i in range(k)]
def chmul_04e4a837(x):
    y = [ord(p) for p in '11863009fde0ce0fcb78b5d6676e4d695e0d']
    return [x[i] * y[i] for i in range(k)]
def chadd_8ab3b2a8(x):
    # kek
    y = [ord(p) for p in '0caff78661429a6416a5087f77a23f9b3389']
    return [x[i] + y[i] for i in range(k)]
def cxor_e1387672(x):
    return [x[i] ^ 9291353821 for i in range(k)]
def chunk_bdedc29f(x):
    return x[10:] + x[:10]
def chsub_357029f0(x):
    y = [ord(p) for p in 'b730e1f8336085f8c81db4a68c899a56b85c']
    return [x[i] - y[i] for i in range(k)]
def cxor_79917601(x):
    # just reverse it
    return [x[i] ^ 7416536205 for i in range(k)]
def cxor_49668fd6(x):
    return [x[i] ^ 4995921536 for i in range(k)]
def chsub_ca548f97(x):
    y = [ord(p) for p in '4775c7c04c1760c23a1b55180e7c6319e31f']
    return [x[i] - y[i] for i in range(k)]
def chxor_d8c4549f(x):
    # encryption
    y = [ord(p) for p in '4238cf987ccc878b57ccabf6a5284179f4b4']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_65689d19(x):
    # kek
    y = [ord(p) for p in '9b5abd9603bb5c15e16f5714fc0a2f68f25e']
    return [x[i] * y[i] for i in range(k)]
def xor_3bb0008c(x):
    # the best
    y = [7812282161, 7783203280, 790364654, 5040339747, 5249807662, 2169675713, 6056291341, 5437732705, 5672179143, 3065570385, 6504898062, 3773658481, 8645806012, 8511115701, 5218722475, 8789940825, 4953777448, 8124750191, 1154855237, 216948321, 5201936546, 7778496485, 5706752641, 6816699622, 6825093813, 9075575953, 629753474, 3673206277, 4630868818, 6641092045, 8120495613, 6813802106, 5699355980, 8998087104, 2117386850, 5081985819]
    return [x[i] ^ y[i] for i in range(k)]
def add_91bb43ca(x):
    y = [4329881469, 6764063203, 7680086692, 5644816031, 3722961891, 407863149, 6484844742, 6006021606, 9882643369, 8942653407, 4183001827, 6243094229, 2348401568, 6679382747, 518506484, 3654811524, 7364933028, 4400975499, 1797069200, 6069787394, 9065685788, 5639454725, 4525854805, 5307510885, 1479584536, 3519480224, 4403244842, 297637151, 4985191702, 8573624870, 547486688, 611072195, 3899963528, 6462103558, 6938306810, 3685368671]
    return [x[i] + y[i] for i in range(k)]
def cxor_7073d927(x):
    return [x[i] ^ 9769164328 for i in range(k)]
def deck_c8a0a844(x):
    # kek
    return x[26:27] + x[27:] + x[:9] + x[9:26]
def cxor_1290e20b(x):
    # the flag is flag{jk}
    return [x[i] ^ 524870093 for i in range(k)]
def digsub_b40bee06(x):
    return [int(str(n)[:1] + ''.join(['4', '3', '9', '7', '2', '6', '8', '0', '5', '1'][int(p)] for p in str(n)[1:])) for n in x]
def deck_9e500ad2(x):
    # lmaooo
    return x[34:] + x[:4] + x[19:34] + x[4:19]
def xor_85d496cf(x):
    # the flag is flag{jk}
    y = [7655466786, 8354480836, 8521091088, 8864913132, 8935021089, 5153597511, 3723634912, 6725285891, 6866355944, 8501078449, 4513015415, 1885622275, 9684205996, 5983011015, 1929580387, 3835677852, 3726584609, 7579456059, 7266622408, 9279727434, 5877945998, 6349362802, 2987417213, 3738761352, 1357510333, 4630546586, 3369673624, 2086347442, 8228169109, 5399818125, 2961456704, 7558652832, 2666567329, 240928013, 2639113928, 3348647480]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_4211ba33(x):
    return [x[i] ^ 6864174134 for i in range(k)]
def deck_a095987f(x):
    return x[11:25] + x[25:28] + x[:11] + x[28:]
def shuffle_58938b75(x):
    # evil
    return [x[p] for p in [31, 0, 8, 24, 27, 33, 32, 17, 22, 20, 34, 12, 18, 2, 30, 13, 7, 35, 9, 25, 1, 23, 14, 3, 21, 16, 11, 19, 29, 6, 15, 5, 28, 4, 26, 10]]
def sub_657f5f3f(x):
    # encryption
    y = [3106476580, 1598777340, 9374047333, 5506190394, 5341344148, 8612438561, 3986001460, 6746099301, 3169638683, 4176880127, 4546572825, 6480144834, 5372573385, 9836239465, 556030629, 8212661894, 84760689, 3582467174, 9397818535, 7670642758, 9104284417, 8503693556, 5102899970, 7443276177, 5081239118, 9230076426, 8154289335, 580730196, 512163466, 5398085532, 4488621198, 4327556116, 198722999, 6362907807, 5654653168, 9843899073]
    return [x[i] - y[i] for i in range(k)]
def mul_9ff113f3(x):
    y = [6, 2, 4, 3, 3, 1, 3, 6, 4, 5, 2, 6, 4, 5, 3, 3, 2, 6, 3, 5, 6, 2, 1, 2, 1, 3, 6, 5, 2, 2, 6, 5, 3, 3, 6, 2]
    return [x[i] * y[i] for i in range(k)]
def chxor_036cfe7a(x):
    y = [ord(p) for p in 'e7ffd3bedc0b34c521ee2fe8bfd57b88a7f4']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_77da69c4(x):
    return [x[i] * 8 for i in range(k)]
def chsub_863e4a9e(x):
    y = [ord(p) for p in 'd8bee1d1e26ff5f219a1c740be795217834a']
    return [x[i] - y[i] for i in range(k)]
def cxor_4e53f8be(x):
    return [x[i] ^ 7588743074 for i in range(k)]
def chmul_2e39a1a5(x):
    y = [ord(p) for p in 'c24ba36fd387ed4a66326e7f1a575416c40a']
    return [x[i] * y[i] for i in range(k)]
def deck_65aaa046(x):
    return x[34:] + x[32:34] + x[6:32] + x[:6]
def mul_04000fe6(x):
    # kek
    y = [3, 6, 4, 1, 7, 4, 5, 2, 6, 1, 4, 1, 3, 2, 2, 1, 6, 4, 1, 4, 3, 4, 2, 3, 5, 2, 5, 2, 1, 7, 6, 2, 1, 3, 3, 4]
    return [x[i] * y[i] for i in range(k)]
def csub_af6b6944(x):
    return [x[i] - 7484835699 for i in range(k)]
def chadd_da891bd7(x):
    y = [ord(p) for p in '5137ac054d225a3f41bcb255a7ef7c37debe']
    return [x[i] + y[i] for i in range(k)]
def deck_735694af(x):
    return x[23:35] + x[:21] + x[21:23] + x[35:]
def add_8cda84d9(x):
    # encryption
    y = [2348883416, 7140225693, 8889123741, 2660805530, 6094840732, 5355559828, 3448438405, 5198247897, 2607835057, 1748305853, 3032282957, 6718631005, 8369566236, 5688762871, 4237942113, 3841955448, 2270561678, 468595011, 146754930, 9973588948, 2420196061, 6979842635, 3457048298, 3524720624, 9192478746, 3057157320, 4884197037, 4522055129, 9090996713, 1958882635, 5283397919, 4125739288, 2544581920, 4459038438, 296950115, 4724020366]
    return [x[i] + y[i] for i in range(k)]
def shuffle_88823dcd(x):
    # evil
    return [x[p] for p in [30, 0, 35, 28, 4, 34, 18, 22, 19, 29, 21, 17, 11, 9, 32, 7, 5, 27, 31, 23, 25, 10, 16, 24, 15, 1, 14, 20, 2, 12, 3, 33, 13, 26, 8, 6]]
def chxor_b8ec7b4f(x):
    y = [ord(p) for p in 'd171aed1da96cc3f30bc015c79fbc31932d4']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_16f4270b(x):
    # the best
    return [x[i] ^ 703294161 for i in range(k)]
def mul_fbf76069(x):
    # evil
    y = [1, 3, 2, 3, 3, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 3, 2, 2, 2, 1, 3, 2, 2, 2, 1, 3, 3, 2, 2, 1, 1, 1, 1, 1, 2, 3]
    return [x[i] * y[i] for i in range(k)]
def shuffle_6a6f7803(x):
    return [x[p] for p in [22, 7, 5, 10, 30, 15, 1, 4, 23, 12, 14, 26, 13, 31, 27, 29, 28, 2, 24, 8, 16, 9, 32, 34, 11, 19, 33, 6, 0, 18, 25, 3, 17, 35, 21, 20]]
def mul_df48e442(x):
    y = [2, 1, 6, 4, 6, 1, 3, 7, 3, 5, 5, 3, 2, 6, 3, 5, 4, 1, 1, 6, 3, 5, 6, 7, 2, 3, 6, 5, 5, 4, 2, 6, 3, 5, 6, 3]
    return [x[i] * y[i] for i in range(k)]
def cadd_81afebad(x):
    # the best
    return [x[i] + 3170972721 for i in range(k)]
def chadd_e99579ed(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '18ad3018fd46d1cc9af17ac10c54c6892ee3']
    return [x[i] + y[i] for i in range(k)]
def chunk_97afc148(x):
    # rekt
    return x[23:] + x[:23]
def mul_d0313a6c(x):
    y = [7, 8, 8, 7, 9, 4, 3, 1, 6, 4, 1, 1, 2, 5, 6, 8, 1, 5, 4, 6, 5, 2, 6, 6, 9, 2, 6, 9, 4, 8, 1, 3, 4, 2, 8, 3]
    return [x[i] * y[i] for i in range(k)]
def chsub_4d0660a5(x):
    y = [ord(p) for p in '5730e15ba4cea123fbf2da9472def4f0b13c']
    return [x[i] - y[i] for i in range(k)]
def shuffle_18bb44b8(x):
    # just reverse it
    return [x[p] for p in [31, 19, 5, 12, 2, 27, 26, 28, 6, 8, 15, 33, 23, 35, 25, 22, 13, 11, 32, 34, 20, 14, 16, 21, 4, 24, 30, 3, 1, 0, 7, 18, 9, 10, 17, 29]]
def sub_5b169d21(x):
    # mucho encrypto
    y = [2544472960, 2575227214, 8831286489, 1273681258, 3845768390, 1594103915, 6581730449, 8587635009, 9509837373, 4003105941, 3254612144, 3792192933, 1433495994, 2567956041, 8950816902, 87957258, 8270189095, 1939477689, 1498353958, 4596589749, 8729480468, 2991890129, 3463778273, 8635892946, 5680047128, 3514085445, 7864798515, 4280016370, 9407283428, 9205450583, 6069233655, 7711889291, 9313911624, 5024701423, 564506989, 5512382801]
    return [x[i] - y[i] for i in range(k)]
def digsub_f7a754a1(x):
    return [int(str(n)[:1] + ''.join(['4', '9', '2', '6', '3', '7', '8', '0', '1', '5'][int(p)] for p in str(n)[1:])) for n in x]
def deck_7340d3a5(x):
    # just reverse it
    return x[0:0] + x[0:29] + x[29:] + x[:0]
def cxor_76178cb8(x):
    return [x[i] ^ 7881870100 for i in range(k)]
def chsub_d27566eb(x):
    y = [ord(p) for p in '357a64a46ce960c8d9b0a2113d90cdc29890']
    return [x[i] - y[i] for i in range(k)]
def chunk_a998eeb4(x):
    return x[3:] + x[:3]
def add_a1fe299c(x):
    # shiet?
    y = [6861046116, 2952053338, 7243557068, 9994685654, 3404484153, 5295082117, 3071522455, 1528466783, 2238407033, 6852006262, 3176313981, 1999248396, 1859795429, 2640225838, 5177723248, 9549485244, 3574628158, 435688222, 3142486674, 5215597108, 5435977859, 74221003, 1701970889, 9124766076, 6246939038, 262302507, 4751429844, 7363904561, 8790736558, 8984586225, 5324004420, 7001498527, 9553776106, 7891495301, 6072257541, 4275635250]
    return [x[i] + y[i] for i in range(k)]
def chxor_72127666(x):
    y = [ord(p) for p in 'fc2d514893e144bb30c29d901c2e5b060966']
    return [x[i] ^ y[i] for i in range(k)]
def deck_bc03a0a5(x):
    # evil
    return x[10:27] + x[27:] + x[4:10] + x[:4]
def sub_3c434ee5(x):
    # lel
    y = [6353573160, 8341638325, 8508251400, 6258390675, 752123839, 9294323511, 1802171681, 7412014807, 9308833489, 8315060438, 845475503, 8452705584, 3191260823, 7203606339, 2520523954, 5911657640, 3037795737, 29006744, 7419402793, 2870094186, 9381871672, 9567068236, 4605269824, 6007117685, 3851333294, 386158550, 6686517230, 7811994825, 9729142771, 7196157434, 7921986939, 7674256800, 4242868549, 6865923544, 3752122387, 5075895446]
    return [x[i] - y[i] for i in range(k)]
def chmul_9517c309(x):
    y = [ord(p) for p in 'a68192e3f0e8c73f095e9c801686ef230f97']
    return [x[i] * y[i] for i in range(k)]
def xor_5c21cfc7(x):
    # so good
    y = [8184364174, 9402146106, 2036967326, 6648405060, 3578955053, 3914789131, 8681393705, 9753534420, 8385618774, 1698327509, 1867749431, 1307077635, 9155028837, 1805983253, 7208383586, 5362491497, 5451205283, 5558091906, 5687541404, 6857248020, 7691271998, 168829979, 9150276377, 9483296011, 312496430, 2092639091, 5037654615, 5036078014, 9916593522, 1502214651, 9833447136, 225252201, 5540414821, 5516173326, 7414486242, 6316316782]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_353fb03b(x):
    y = [ord(p) for p in 'd5d20aa0da911fa4cda5b10599042e687085']
    return [x[i] ^ y[i] for i in range(k)]
def sub_6321bdd8(x):
    # lmaooo
    y = [7845947363, 309021869, 4294731088, 3690579857, 6257327526, 2997770880, 7773662537, 8292499809, 3629744152, 3090312957, 8427896568, 64801875, 5509529389, 2889654690, 234958680, 7493220314, 9081991182, 2354240803, 5890796249, 4527044159, 3977197527, 1425357456, 991691365, 9349243150, 2305451737, 5942409010, 47630162, 2655905517, 3953070109, 2919272616, 276988834, 8698791602, 689391287, 7248132469, 2842677255, 3972474111]
    return [x[i] - y[i] for i in range(k)]
def mul_16385c48(x):
    # the flag is flag{jk}
    y = [2, 4, 5, 4, 2, 2, 4, 2, 4, 2, 4, 4, 3, 1, 5, 2, 3, 2, 3, 4, 4, 4, 5, 4, 3, 5, 3, 1, 4, 2, 5, 1, 1, 4, 1, 2]
    return [x[i] * y[i] for i in range(k)]
def mul_c983432b(x):
    y = [1, 1, 2, 7, 1, 4, 2, 2, 3, 6, 5, 1, 3, 4, 6, 7, 1, 6, 4, 2, 3, 4, 4, 1, 1, 5, 5, 3, 6, 3, 6, 1, 2, 5, 7, 2]
    return [x[i] * y[i] for i in range(k)]
def shuffle_236a7376(x):
    return [x[p] for p in [2, 8, 23, 34, 11, 6, 4, 12, 7, 1, 30, 35, 15, 21, 33, 20, 27, 24, 17, 10, 22, 25, 9, 3, 18, 16, 0, 26, 5, 13, 28, 31, 32, 19, 29, 14]]
def chxor_edba075a(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '9c2d6829e8ca67a8101788636415ed763caa']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_83571dc3(x):
    return [x[i] ^ 6137967975 for i in range(k)]
def cadd_56eef358(x):
    # lmaooo
    return [x[i] + 3199218116 for i in range(k)]
def chunk_4961df80(x):
    # lmaooo
    return x[31:] + x[:31]
def cadd_f4a3a91b(x):
    return [x[i] + 6154240815 for i in range(k)]
def add_eee6c971(x):
    y = [6125240150, 9745900434, 4842541702, 6914256645, 3965180787, 1306932246, 858048176, 5812462302, 9133227344, 2742350626, 7939249847, 3808896243, 1077942601, 5230112620, 5583314562, 9383205844, 2982882693, 8742232774, 8196174130, 7088750908, 2199863408, 4620794079, 1905223045, 3029951522, 765724500, 2698648051, 742660008, 3353222437, 7379737050, 543570812, 5679552379, 4431930696, 2807115630, 9939884954, 870118817, 5888833492]
    return [x[i] + y[i] for i in range(k)]
def chunk_f5342e5d(x):
    return x[9:] + x[:9]
def add_8ad39807(x):
    y = [3690202744, 6099589351, 7369967613, 1847288897, 1394892385, 2003429098, 5069903500, 1632312342, 8443041565, 3048931322, 559628241, 5700766979, 421417038, 6432122777, 1214693898, 8156755450, 5906125988, 3523472553, 8527609688, 9435782465, 2529023795, 7477943364, 8384233085, 432526964, 3436190671, 6842806095, 297001490, 5496665991, 2781695352, 8450232650, 1297729157, 9001831202, 9999335124, 9817732499, 5567703513, 6994099492]
    return [x[i] + y[i] for i in range(k)]
def deck_453faff2(x):
    # so good
    return x[3:18] + x[18:20] + x[:3] + x[20:]
def cmul_8d226a5e(x):
    return [x[i] * 8 for i in range(k)]
def chmul_2f893b62(x):
    # shiet?
    y = [ord(p) for p in 'f34145d6fe2ece96c1f544a9f4cc689f845a']
    return [x[i] * y[i] for i in range(k)]
def digsub_c71ff0e5(x):
    return [int(str(n)[:1] + ''.join(['6', '7', '3', '8', '5', '9', '2', '4', '1', '0'][int(p)] for p in str(n)[1:])) for n in x]
def sub_f95a3649(x):
    # encryption
    y = [8421693293, 2044480862, 6575671786, 471240003, 5736704574, 1166115046, 7459056932, 673673812, 7583803560, 8825799973, 5192976809, 7154734786, 4725920816, 8782142730, 4544710415, 4105416417, 6963978027, 3970152933, 8481503575, 4311227872, 759147011, 318068988, 5280104700, 7784390204, 8573857160, 5921832274, 3437559083, 2685296664, 767281554, 4684876884, 4973164118, 4944965109, 8703917844, 7715932388, 6007593373, 4533676662]
    return [x[i] - y[i] for i in range(k)]
def cadd_188bf301(x):
    return [x[i] + 4412057423 for i in range(k)]
def chxor_fad6bade(x):
    # the flag is flag{jk}
    y = [ord(p) for p in 'efcefe0ce36b73467a98e65ce2874e2022fa']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_9cedec4d(x):
    # evil
    return [x[p] for p in [11, 14, 23, 32, 28, 33, 24, 13, 30, 9, 4, 27, 8, 21, 16, 0, 19, 3, 5, 7, 6, 31, 2, 18, 10, 12, 35, 29, 1, 26, 34, 22, 17, 20, 15, 25]]
def sub_0992e83f(x):
    y = [1236254127, 309732716, 5540644387, 3516165239, 4338063150, 6641117758, 8380883291, 5093379609, 9997086419, 6715063534, 1579910458, 2519534498, 6378056408, 9916085095, 5366162632, 3841758689, 4719848146, 2888920374, 9902038918, 9260356961, 9646113457, 4142836990, 7176164302, 5798039676, 5137492166, 8592237984, 8076890680, 6674558029, 6967755617, 6528886241, 1650006606, 6180410504, 1739887860, 5492337061, 1665164445, 4861132553]
    return [x[i] - y[i] for i in range(k)]
def digsub_b4a68c58(x):
    return [int(str(n)[:1] + ''.join(['6', '8', '4', '3', '7', '1', '5', '9', '2', '0'][int(p)] for p in str(n)[1:])) for n in x]
def cxor_1f2b9c26(x):
    return [x[i] ^ 6840837900 for i in range(k)]
def sub_b49bbcc9(x):
    # lmaooo
    y = [3012110256, 8960898291, 8164267962, 675130258, 7170775552, 4245759888, 2718750698, 439769559, 7584007738, 8047537931, 9698683207, 2180863087, 1078366275, 7485316323, 585524391, 3038132891, 1719054185, 122701370, 4706843570, 7382064901, 745196631, 7756552426, 3056962871, 5113218311, 3890377681, 2121825928, 1871177603, 7648373076, 5178682177, 7577516978, 8928862469, 7994764404, 622921679, 7952288024, 4795520001, 7056517884]
    return [x[i] - y[i] for i in range(k)]
def xor_f8437474(x):
    y = [1226953889, 5087737458, 9909940671, 1102188616, 3932777294, 3684848769, 5933403639, 2835605310, 5695916602, 3441063030, 9217220532, 7057510438, 1931480779, 1193499020, 6405202067, 4710261259, 7466042739, 3249748901, 9960251424, 6426270935, 7771381137, 6872802724, 2906689100, 6874205829, 4860870203, 8532202737, 3483454043, 4764918732, 4870129362, 3633482014, 898165964, 2972738610, 9993154772, 383146872, 1701998292, 9246118043]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_2b2282b6(x):
    # just reverse it
    y = [ord(p) for p in '56affb786dbe7ba74a2d5a9a3631aff5cfae']
    return [x[i] ^ y[i] for i in range(k)]
def sub_0bdcedb0(x):
    # the flag is flag{jk}
    y = [8893740131, 9218825127, 6588586978, 8719289970, 1556906709, 7107001150, 7540378530, 916702750, 585140239, 6681898630, 5317305360, 7883377869, 7663710911, 4134252756, 7108778248, 2579805225, 9922476860, 9145396370, 1432045106, 3613483427, 3632848460, 2168613501, 9141060884, 8434078124, 5994713952, 8638690160, 132560052, 3682450529, 170347992, 3757376377, 1790950457, 7975127853, 9665902715, 559376019, 5789913299, 2643246152]
    return [x[i] - y[i] for i in range(k)]
def mul_f7bcc313(x):
    y = [6, 1, 2, 7, 6, 7, 8, 6, 6, 6, 7, 3, 1, 5, 1, 6, 2, 3, 6, 8, 4, 3, 1, 1, 1, 8, 4, 3, 2, 3, 8, 5, 8, 7, 6, 8]
    return [x[i] * y[i] for i in range(k)]
def xor_3994c2ad(x):
    # so good
    y = [2173475338, 2656730611, 1340455908, 9719985194, 5420018390, 371069966, 9590816017, 2023943503, 9224803939, 1608693443, 6637272979, 5446587107, 1896118981, 2287330761, 6002413921, 9021461572, 4025926715, 4469894711, 4598322981, 1437312882, 8500458954, 5631940767, 614332952, 3439277621, 6352292371, 1680629159, 2226723251, 9900349733, 9036827921, 4218370454, 4673315211, 5203247837, 435187902, 9349186818, 5575682807, 7376817168]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_0ee9fb58(x):
    y = [ord(p) for p in 'e1bde25c4142f304dd3197cc5d15165efbd6']
    return [x[i] - y[i] for i in range(k)]
def add_b9d4cb35(x):
    # mucho encrypto
    y = [7694968630, 7166471175, 8393879772, 8584048894, 711994288, 9316394060, 7737468024, 8165346056, 9229870375, 8485115781, 2759515765, 2274116889, 7623215520, 9454924497, 4982708832, 6091245901, 8778206666, 1192597046, 1853895283, 152799134, 2068933617, 1634717637, 2816556941, 2241113043, 3066749487, 8341386531, 7798235856, 9285503205, 1981214288, 6920408999, 4861717526, 3653351775, 9780326098, 3608932326, 2992937383, 4761380202]
    return [x[i] + y[i] for i in range(k)]
def chxor_25d74c81(x):
    y = [ord(p) for p in '8625464597a0f9020236ecb3fb97d2e1c49f']
    return [x[i] ^ y[i] for i in range(k)]
def xor_deeded30(x):
    y = [1391272238, 8959115223, 4108099677, 2116659295, 4163755122, 5851578666, 2239873538, 2221271328, 290281162, 9260005956, 7154529478, 5889205072, 3084083458, 3789413657, 4744335788, 2531338055, 5831071829, 5309423676, 4646610886, 9943989341, 7662002853, 9664007284, 4388748113, 7844426221, 2643860050, 4753598873, 1781226170, 1809380119, 1411451242, 2787551383, 8055793595, 5982517634, 3220981613, 7014135227, 7797571607, 4693616945]
    return [x[i] ^ y[i] for i in range(k)]
def sub_a2adabad(x):
    y = [3158491032, 3842293950, 8398083753, 8890535668, 7979349270, 7308412911, 8253147309, 6234591832, 380693257, 639323065, 4969068922, 3713487716, 9756154042, 8529894295, 8158940889, 6892921284, 7315402882, 8855582935, 9293453280, 5216069408, 4756448722, 6447008578, 4330862332, 9667822725, 6360841811, 3221619568, 4448417992, 2550924115, 4556189674, 9994470272, 7412016605, 282380755, 7051848256, 9795521032, 6889606520, 2871408001]
    return [x[i] - y[i] for i in range(k)]
def cxor_b93aeb3d(x):
    # shiet?
    return [x[i] ^ 6388597535 for i in range(k)]
def shuffle_022284b4(x):
    return [x[p] for p in [31, 1, 28, 22, 30, 25, 12, 9, 8, 29, 21, 33, 2, 17, 4, 24, 19, 10, 35, 16, 6, 5, 32, 13, 3, 7, 11, 18, 0, 14, 20, 23, 27, 26, 34, 15]]
def cmul_eefe9fa4(x):
    return [x[i] * 9 for i in range(k)]
def deck_b3c2c429(x):
    return x[:0] + x[0:11] + x[11:15] + x[15:]
def chsub_2d6c78f3(x):
    # evil
    y = [ord(p) for p in '26c61969a72691b2672a06ce20292a229635']
    return [x[i] - y[i] for i in range(k)]
def chunk_b3c680b6(x):
    # so good
    return x[29:] + x[:29]
def chxor_0ce1039c(x):
    y = [ord(p) for p in 'd7691ef0d215d79a01eae2334747ccdf074e']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_bd7c4f37(x):
    # the flag is flag{jk}
    return x[24:] + x[:24]
def chxor_00dbbc36(x):
    # kek
    y = [ord(p) for p in '380064f98695537670ab29a29c08136a7ed4']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_b61008be(x):
    # kek
    return [x[i] * 7 for i in range(k)]
def cmul_f6c4c9dc(x):
    return [x[i] * 4 for i in range(k)]
def mul_bb9e8c00(x):
    y = [1, 3, 5, 7, 4, 4, 3, 7, 2, 4, 6, 3, 6, 8, 5, 9, 2, 4, 8, 3, 5, 9, 9, 7, 4, 9, 1, 6, 4, 7, 2, 2, 1, 2, 9, 8]
    return [x[i] * y[i] for i in range(k)]
def shuffle_82faa11e(x):
    return [x[p] for p in [9, 31, 34, 20, 7, 23, 35, 22, 13, 28, 27, 18, 15, 6, 29, 32, 16, 19, 4, 21, 12, 33, 25, 26, 5, 0, 2, 14, 24, 10, 30, 11, 8, 3, 17, 1]]
def chsub_7b8aa8b8(x):
    # lmaooo
    y = [ord(p) for p in 'a00af49b92271c2845118f49b51149d2ce99']
    return [x[i] - y[i] for i in range(k)]
def mul_3d1b9786(x):
    # evil
    y = [9, 4, 8, 2, 6, 6, 6, 2, 6, 7, 10, 10, 8, 3, 2, 4, 1, 3, 9, 6, 10, 1, 9, 3, 4, 3, 2, 6, 5, 2, 8, 9, 7, 7, 4, 10]
    return [x[i] * y[i] for i in range(k)]
def mul_21b7a6b1(x):
    # lmaooo
    y = [1, 3, 3, 1, 1, 3, 4, 1, 3, 4, 2, 1, 3, 2, 1, 4, 1, 2, 3, 1, 1, 4, 4, 2, 3, 1, 3, 3, 3, 3, 2, 2, 2, 1, 2, 4]
    return [x[i] * y[i] for i in range(k)]
def cadd_99696e25(x):
    return [x[i] + 4037769351 for i in range(k)]
def chxor_5f238dda(x):
    # evil
    y = [ord(p) for p in 'c713c9d372422c4248772ef88ed816b0f39a']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_32eb4436(x):
    return [x[i] * 6 for i in range(k)]
def sub_1939e4b0(x):
    y = [8711480536, 5808676810, 1717477280, 1168768583, 4638686229, 4385529074, 8540002939, 1183386448, 1447235087, 5905828993, 9791148306, 6741628388, 8003099334, 754123257, 9239969318, 1123905826, 1651572168, 1844493966, 4825006030, 4313959195, 8085299798, 9133575256, 9698045333, 8061986594, 7191844928, 3867300973, 2226593795, 7606853925, 8406594505, 6949457213, 9286414212, 7869989829, 8284026219, 6337745565, 1023284455, 9729491430]
    return [x[i] - y[i] for i in range(k)]
def chsub_b9dc2f68(x):
    y = [ord(p) for p in '7cf5e0082cd893b181e3d1ff17f00043c946']
    return [x[i] - y[i] for i in range(k)]
def xor_ac6e82c0(x):
    y = [6877789443, 8219308859, 1344396700, 3678373480, 4101430756, 3173351154, 5592189217, 8628780733, 1673898154, 7606431062, 2413831348, 4255180911, 2390402097, 3296797185, 2081935179, 7480374139, 6783761765, 9339715152, 5281355745, 6134127700, 492517734, 5751832938, 8591704393, 4701781645, 6311834575, 2554483210, 3934069919, 4289500268, 989986087, 9374524021, 7027893894, 672166095, 4576860025, 6951403842, 7898424519, 8525676780]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_7c4163e6(x):
    # rekt
    y = [ord(p) for p in '65de3b044e5339c6431faa76d618b652f9f7']
    return [x[i] * y[i] for i in range(k)]
def mul_cab49d47(x):
    y = [4, 4, 6, 6, 5, 1, 1, 6, 6, 2, 4, 7, 4, 4, 1, 4, 4, 3, 3, 7, 2, 7, 7, 2, 7, 2, 1, 3, 4, 3, 5, 4, 7, 6, 5, 5]
    return [x[i] * y[i] for i in range(k)]
def chunk_caa9baa3(x):
    # rekt
    return x[16:] + x[:16]
def digsub_636b7f9c(x):
    return [int(str(n)[:1] + ''.join(['5', '2', '1', '7', '0', '8', '9', '3', '4', '6'][int(p)] for p in str(n)[1:])) for n in x]
def add_7553d25b(x):
    # lmaooo
    y = [4177608444, 535637248, 268730837, 7179043241, 9801225486, 6055103166, 6939490319, 9859073172, 8798937567, 3127182375, 314513900, 425778426, 5230216264, 822611086, 8609078272, 5903911413, 9707282230, 1378425384, 5439215367, 9472152819, 8415396289, 7423584491, 6391741373, 1127167976, 7363583776, 5449766506, 8676949367, 487250940, 2348991942, 8709841303, 3809287307, 309841676, 7809847826, 6756188190, 1204095601, 9907674133]
    return [x[i] + y[i] for i in range(k)]
def sub_31290fb7(x):
    y = [1200775018, 5608562731, 8671659147, 240566059, 6999350594, 8424133062, 4173036586, 2045178877, 4324341836, 8529391457, 1810145497, 9568700008, 9547992443, 7392529307, 1226459497, 2058229847, 9330383973, 8739991993, 5749077362, 2651899577, 9876109010, 7807255111, 7195583207, 3420554161, 2075943084, 3707663029, 5906955099, 9855026580, 4711754845, 2965523842, 2046055178, 8608743206, 8618380654, 5194103646, 9341836075, 2973240308]
    return [x[i] - y[i] for i in range(k)]
def shuffle_b20aa4f9(x):
    # lel
    return [x[p] for p in [2, 0, 5, 1, 28, 4, 18, 21, 22, 30, 31, 17, 15, 19, 26, 27, 23, 16, 24, 34, 10, 11, 33, 14, 29, 20, 13, 8, 32, 6, 12, 7, 35, 3, 9, 25]]
def chxor_6fca7a91(x):
    y = [ord(p) for p in '8924e3d5ed9fdae728166e0ad933c1048d68']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_cc6daaa1(x):
    y = [ord(p) for p in '98382f31c8549443a03f195ef59fd2e83346']
    return [x[i] + y[i] for i in range(k)]
def deck_f673b6de(x):
    return x[:6] + x[6:12] + x[35:] + x[12:35]
def add_37600cfb(x):
    # so good
    y = [766216885, 7761282057, 6143959219, 2226252415, 4792725383, 8473532997, 4149059166, 9744949422, 4144447152, 9842327680, 6581404632, 6625246694, 7968508081, 897009024, 2621018874, 3054320554, 9275301704, 6343260219, 9203867200, 9890434043, 3198886020, 6579006840, 72829633, 3773043080, 2841642474, 7959606263, 6358197379, 5710190914, 6123684012, 1730155615, 5380646381, 5640067080, 3519400409, 4638520937, 2509588607, 9790681303]
    return [x[i] + y[i] for i in range(k)]
def chsub_e20ff930(x):
    # the best
    y = [ord(p) for p in '2ca1e210e81003a70293cc8d9be934c86b4b']
    return [x[i] - y[i] for i in range(k)]
def cmul_03ecbb18(x):
    # encryption
    return [x[i] * 4 for i in range(k)]
def chunk_efe1acab(x):
    # lmaooo
    return x[0:] + x[:0]
def chxor_0449a472(x):
    # lel
    y = [ord(p) for p in 'ef5f635a169bbf0dac22a30f61c5cdb22d9b']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_3c6d2025(x):
    return [x[i] + 4997170050 for i in range(k)]
def chunk_397a3d62(x):
    return x[34:] + x[:34]
def cadd_b70fc370(x):
    # so good
    return [x[i] + 2907636247 for i in range(k)]
def digsub_7d14062a(x):
    return [int(str(n)[:1] + ''.join(['9', '0', '3', '7', '4', '6', '8', '2', '1', '5'][int(p)] for p in str(n)[1:])) for n in x]
def chunk_9b5e7e5c(x):
    return x[8:] + x[:8]
def csub_20a6b2c3(x):
    # the flag is flag{jk}
    return [x[i] - 867251178 for i in range(k)]
def digsub_31bf04a3(x):
    # evil
    return [int(str(n)[:1] + ''.join(['9', '2', '7', '5', '6', '1', '4', '0', '8', '3'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_0fec80e1(x):
    # lel
    return [x[i] * 9 for i in range(k)]
def chmul_f8bbf12f(x):
    y = [ord(p) for p in 'c2837c2988da6fbda22f9b3e22298782d2a5']
    return [x[i] * y[i] for i in range(k)]
def add_81776826(x):
    # evil
    y = [1942116216, 8150621019, 9177089110, 5737721372, 6421949287, 9317362594, 5490707023, 8862409522, 9829305470, 4828410935, 6564947754, 6291616070, 6454521776, 9364839124, 2780415438, 1566424829, 8961613141, 3245674811, 7962055127, 1153090723, 7032688794, 6503209423, 8752046819, 6403017828, 3287825674, 8969790112, 2169123039, 2178765710, 7438462918, 2150727261, 9222520225, 8739715542, 2741635666, 4773624083, 823469936, 2423746056]
    return [x[i] + y[i] for i in range(k)]
def shuffle_691df10d(x):
    return [x[p] for p in [32, 19, 0, 6, 14, 5, 7, 8, 21, 12, 30, 22, 29, 4, 28, 20, 16, 24, 27, 26, 23, 1, 18, 25, 33, 2, 17, 9, 35, 3, 10, 15, 13, 31, 11, 34]]
def shuffle_cadeb447(x):
    return [x[p] for p in [1, 28, 13, 21, 20, 16, 4, 3, 18, 12, 10, 11, 31, 22, 8, 34, 29, 30, 32, 25, 15, 5, 14, 33, 6, 24, 26, 27, 2, 17, 7, 35, 23, 9, 19, 0]]
def chsub_bc163239(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '722e93b0992b7986cfa6fcfff1ecd417bc1e']
    return [x[i] - y[i] for i in range(k)]
def chunk_8361daed(x):
    return x[19:] + x[:19]
def chsub_3e828f05(x):
    y = [ord(p) for p in '8ab47f6777a3a2a2e7c8780eb9e7d1cd6503']
    return [x[i] - y[i] for i in range(k)]
def xor_a42aac9f(x):
    # shiet?
    y = [9661738457, 5247289204, 3175580535, 2452650430, 4614888946, 2632804942, 76430140, 627522901, 9132437790, 7876697255, 7892693360, 1461328246, 356200006, 9663896371, 3199996876, 8210576266, 8851589333, 5163560077, 3224244593, 119676903, 5880680584, 2906155813, 7209959074, 192739433, 1135960993, 3529912056, 6964650381, 9047829427, 7391850382, 5696275078, 1168740933, 7241361544, 3282182057, 8915175528, 7938322821, 5747463829]
    return [x[i] ^ y[i] for i in range(k)]
def add_158186ec(x):
    # so good
    y = [7654688864, 861439442, 4702041825, 1831853681, 9809111932, 1987222257, 7210036880, 4047642696, 1596407195, 7798702870, 5457891090, 2195330012, 3874467944, 7018419516, 7126993458, 2589451034, 1075484799, 1454378476, 9131173700, 7260062429, 8504339934, 3258632866, 2205003411, 6922000059, 3727144492, 3216403421, 114710437, 2033064434, 6061486185, 4936178810, 984475352, 555579991, 2820188911, 7586379043, 1471236432, 8488273845]
    return [x[i] + y[i] for i in range(k)]
def cxor_29255d85(x):
    # lel
    return [x[i] ^ 800265046 for i in range(k)]
def csub_eb753ff1(x):
    # lel
    return [x[i] - 8017824472 for i in range(k)]
def csub_cb2cec49(x):
    # evil
    return [x[i] - 4084438183 for i in range(k)]
def csub_d616f883(x):
    # shiet?
    return [x[i] - 3893312889 for i in range(k)]
def xor_ed4e00db(x):
    # kek
    y = [6607438432, 6885245816, 2275477561, 8674073014, 4916853559, 3826501468, 6451881895, 4502281888, 4559825313, 3999066605, 4807815067, 605717221, 2901276053, 7370346090, 7991975943, 4728820183, 731474709, 1603266973, 4152883970, 7241506238, 8549207258, 3140411092, 8549692867, 1571619685, 4212832090, 102123008, 5813009952, 6306313060, 6451709134, 4725758645, 3208279967, 1061568911, 2741465209, 6436019172, 965551359, 985221675]
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_897b72ea(x):
    # evil
    return [x[p] for p in [6, 18, 20, 23, 9, 3, 22, 16, 26, 4, 1, 19, 5, 2, 8, 28, 35, 33, 30, 12, 34, 17, 14, 21, 7, 15, 10, 25, 24, 29, 0, 27, 11, 31, 13, 32]]
def add_14d5f474(x):
    # lel
    y = [9283493252, 2964411907, 519058693, 439282719, 5916965769, 4270673704, 5276601559, 9758395998, 6064543118, 281915475, 6183254118, 7595162165, 604198591, 5557548558, 3790361986, 5697367778, 9902171277, 7503904471, 5825491254, 7321677332, 7771517446, 5691752713, 810683035, 5078763729, 3047606601, 7626559075, 3506106102, 5008968639, 5206048439, 2116195799, 9823009776, 5676736317, 105448585, 7231736714, 7201110299, 1923266226]
    return [x[i] + y[i] for i in range(k)]
def digsub_2945b343(x):
    # just reverse it
    return [int(str(n)[:1] + ''.join(['9', '6', '1', '5', '7', '0', '3', '2', '8', '4'][int(p)] for p in str(n)[1:])) for n in x]
def chadd_eb195385(x):
    # kek
    y = [ord(p) for p in 'b9b2df8d045d1fdb03712555fea62bd71bf9']
    return [x[i] + y[i] for i in range(k)]
def cadd_1d1894a8(x):
    # lel
    return [x[i] + 5267925190 for i in range(k)]
def chunk_5806f721(x):
    return x[10:] + x[:10]
def mul_2898db69(x):
    # rekt
    y = [1, 3, 2, 4, 3, 3, 2, 1, 5, 3, 1, 1, 4, 4, 1, 1, 4, 1, 5, 5, 1, 2, 5, 1, 4, 2, 4, 2, 4, 1, 5, 1, 1, 2, 5, 4]
    return [x[i] * y[i] for i in range(k)]
def add_e7bf4d1a(x):
    y = [9651210493, 1267585933, 9714016814, 886233155, 6861618423, 9542148078, 1892334929, 5058172451, 4591509940, 4937031054, 9143427739, 4791746395, 5171387479, 9705802630, 286687329, 6797066431, 4590689590, 4374640821, 9865962427, 7544905558, 7723957187, 3986006336, 8814384567, 7708739877, 5204799184, 6884750929, 4097592258, 3291235639, 5980734420, 3409960174, 2939380330, 1946805731, 7922939338, 4927816505, 2828948858, 2198398839]
    return [x[i] + y[i] for i in range(k)]
def csub_2d425659(x):
    # the best
    return [x[i] - 9469376626 for i in range(k)]
def chunk_28acccb3(x):
    # rekt
    return x[13:] + x[:13]
def chunk_da01c0e7(x):
    # lel
    return x[33:] + x[:33]
def chsub_dd5b964f(x):
    y = [ord(p) for p in '892e8f623bd2cd0dae8ebb8fca0338793974']
    return [x[i] - y[i] for i in range(k)]
def digsub_b6993817(x):
    return [int(str(n)[:1] + ''.join(['2', '7', '9', '3', '1', '5', '4', '8', '6', '0'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_ddc42a39(x):
    # the best
    return [x[p] for p in [16, 10, 17, 9, 2, 4, 23, 26, 1, 11, 30, 3, 13, 24, 35, 29, 12, 32, 18, 0, 8, 25, 22, 20, 33, 7, 6, 14, 31, 15, 34, 19, 27, 21, 5, 28]]
def chmul_c2508e0f(x):
    # the best
    y = [ord(p) for p in '74eee830f42cfa2705c8f4d1f4ae24a5bf27']
    return [x[i] * y[i] for i in range(k)]
def chunk_2e06be2b(x):
    return x[6:] + x[:6]
def cmul_cb30aead(x):
    # lel
    return [x[i] * 5 for i in range(k)]
def chadd_3efd2ae8(x):
    y = [ord(p) for p in 'b665e512fda99a03d164a9efc7b3c2232cef']
    return [x[i] + y[i] for i in range(k)]
def chsub_3df0ef3c(x):
    y = [ord(p) for p in '05982b6e68d1ebcd241d7b458f39f6b58d3b']
    return [x[i] - y[i] for i in range(k)]
def cmul_c53a95ce(x):
    # shiet?
    return [x[i] * 7 for i in range(k)]
def mul_e6b65f6c(x):
    y = [4, 1, 4, 2, 4, 1, 3, 4, 2, 2, 2, 3, 2, 2, 1, 3, 2, 1, 1, 2, 4, 1, 1, 3, 2, 4, 3, 3, 4, 2, 1, 1, 3, 1, 2, 1]
    return [x[i] * y[i] for i in range(k)]
def deck_e03235cc(x):
    return x[7:26] + x[3:7] + x[26:] + x[:3]
def csub_cb5867de(x):
    return [x[i] - 3641713829 for i in range(k)]
def csub_1967fa7b(x):
    # lel
    return [x[i] - 6234886803 for i in range(k)]
def add_ed2b53a6(x):
    y = [2673210896, 2664612937, 3451922591, 4366968516, 9065028918, 9288654729, 4105471404, 9525156806, 295904706, 8402214437, 467122491, 8910127353, 6288332406, 5004917393, 2020616397, 6544144440, 7663144478, 9425931741, 4080946207, 9601864012, 6323756380, 8672024393, 3479610320, 8941184616, 312614386, 1991186910, 845921531, 6349146063, 7959362982, 5938310791, 2989174384, 740549782, 9709686656, 2192505349, 6119028172, 7323207872]
    return [x[i] + y[i] for i in range(k)]
def cmul_5bbd0126(x):
    # the best
    return [x[i] * 10 for i in range(k)]
def chunk_cea296ca(x):
    return x[30:] + x[:30]
def add_a3d5d1da(x):
    y = [3574268167, 159213992, 9315884383, 3070091602, 877695600, 9087622112, 4083372651, 5975568710, 3404064859, 3757355201, 4636305317, 5847233481, 3422901625, 3964900191, 6574045006, 5290817096, 3187657969, 2714784934, 1312985544, 3305460018, 2304267989, 8315186956, 1505917005, 6168774295, 6867491954, 6197162075, 3420318914, 4317027315, 6636175341, 4974521969, 8080011430, 3796431151, 9848378391, 2699730920, 2903036546, 1829044996]
    return [x[i] + y[i] for i in range(k)]
def shuffle_5b02919b(x):
    return [x[p] for p in [9, 25, 1, 27, 28, 12, 8, 17, 13, 19, 24, 2, 35, 14, 0, 18, 7, 33, 20, 32, 6, 31, 23, 26, 4, 21, 16, 15, 30, 10, 11, 34, 29, 3, 22, 5]]
def cmul_2a502598(x):
    # lel
    return [x[i] * 9 for i in range(k)]
def cmul_02507e59(x):
    # evil
    return [x[i] * 6 for i in range(k)]
def digsub_bcd14776(x):
    return [int(str(n)[:1] + ''.join(['6', '1', '5', '2', '9', '8', '0', '4', '7', '3'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_1b746adb(x):
    # the best
    return [x[i] * 3 for i in range(k)]
def chunk_7efebb77(x):
    return x[5:] + x[:5]
def cadd_261a4a1d(x):
    # lel
    return [x[i] + 1974597774 for i in range(k)]
def cmul_5f6b0b76(x):
    # shiet?
    return [x[i] * 10 for i in range(k)]
def sub_1b9f18a3(x):
    # so good
    y = [9149125897, 7121448300, 6402232065, 3792107628, 4356492451, 619483429, 2049939600, 558143356, 1644584939, 8895249340, 3583745410, 4224054830, 5934493306, 4080184020, 6911321232, 4353258147, 5189826359, 2834964104, 1649232026, 3376024686, 4617829466, 4095826064, 9857136717, 2999050663, 6663744212, 7496304933, 7076383822, 4720778172, 3882754506, 4822505761, 887057978, 1937471181, 9858865827, 6175089022, 1925712892, 6462041877]
    return [x[i] - y[i] for i in range(k)]
def mul_6858d87e(x):
    # mucho encrypto
    y = [8, 3, 5, 6, 4, 6, 4, 4, 3, 4, 6, 2, 3, 9, 9, 4, 9, 6, 7, 2, 6, 6, 1, 7, 1, 7, 8, 3, 2, 3, 9, 4, 9, 6, 7, 6]
    return [x[i] * y[i] for i in range(k)]
def cmul_72112381(x):
    return [x[i] * 5 for i in range(k)]
def shuffle_1011fc21(x):
    # the flag is flag{jk}
    return [x[p] for p in [2, 28, 6, 20, 14, 19, 10, 21, 22, 24, 27, 23, 3, 25, 9, 12, 31, 8, 4, 0, 30, 29, 5, 34, 35, 15, 26, 13, 11, 33, 32, 17, 16, 18, 1, 7]]
def digsub_8a9512c3(x):
    return [int(str(n)[:1] + ''.join(['7', '8', '9', '6', '4', '1', '5', '2', '0', '3'][int(p)] for p in str(n)[1:])) for n in x]
def xor_829943bf(x):
    # encryption
    y = [9995957624, 8940237531, 7746212302, 9069891016, 5119539010, 4072151239, 2859539015, 6693775760, 294066181, 6115968967, 8368458476, 9185345838, 7148448396, 3087501114, 8420531122, 8063550483, 4746148569, 3413941048, 2547185106, 3246051786, 9029607432, 6544550698, 3609542258, 3621699553, 4971486128, 1411354654, 3752974766, 5315475302, 3193060378, 3025363974, 7139623140, 2589568860, 5218824813, 2410139802, 1914197505, 434346218]
    return [x[i] ^ y[i] for i in range(k)]
def sub_7bf8c980(x):
    y = [650349198, 523484197, 8304761480, 9291208725, 5044206205, 2552559708, 5960917829, 1351804595, 7329223281, 2125136981, 9129440238, 6646496731, 8674734146, 5897424678, 5121022605, 733384845, 7781590284, 834221807, 6509243928, 1687700935, 125442110, 6430047274, 8112765139, 5313822749, 8078072811, 5779214805, 9989601695, 229473439, 4629169168, 5602727929, 5338831645, 1270612149, 1149496429, 2954983929, 7432496557, 7484615003]
    return [x[i] - y[i] for i in range(k)]
def chadd_ced5aac5(x):
    y = [ord(p) for p in 'cf1ac640c815cb02228f05147276743f290a']
    return [x[i] + y[i] for i in range(k)]
def deck_4156549b(x):
    # kek
    return x[:17] + x[25:34] + x[34:] + x[17:25]
def chmul_37bb44ad(x):
    # shiet?
    y = [ord(p) for p in 'e2d9eb89c23c1a3ccc89da0a65133fea1406']
    return [x[i] * y[i] for i in range(k)]
def xor_4c95d03b(x):
    # so good
    y = [2854939371, 5308305565, 9136229606, 1972811943, 9603682608, 9390615944, 4323075002, 5159849449, 8106301759, 8492092417, 1136419127, 9264706539, 6530035678, 9804704518, 3265958701, 965711781, 935013161, 2709256874, 7975752345, 3322583079, 4859773727, 6981010666, 9153715734, 5148227363, 9134748103, 5837605872, 5181452630, 4342185802, 5949494853, 8734433398, 1772059832, 5953895290, 7995961865, 5936648131, 8606827847, 9141640035]
    return [x[i] ^ y[i] for i in range(k)]
def xor_8ae01235(x):
    # kek
    y = [1212231880, 7637877515, 4258111649, 6212055346, 5423630758, 4284044872, 9587082731, 8055798266, 9999432820, 2303047064, 7451145843, 1720236082, 768835800, 5411471441, 6577355445, 9408234829, 9435774175, 2646572426, 6896570167, 8562888656, 7524443708, 2163494281, 9601433788, 6387891001, 3766750171, 8241712042, 3366147078, 6321880985, 5946934902, 2416650555, 1133646571, 4421851074, 2150127026, 8874339747, 4599864453, 8038188965]
    return [x[i] ^ y[i] for i in range(k)]
def cmul_ec6817f2(x):
    return [x[i] * 3 for i in range(k)]
def chadd_d68e3c7a(x):
    y = [ord(p) for p in 'ffb8735e7d0ca3c0c849546216efb7080f5b']
    return [x[i] + y[i] for i in range(k)]
def chsub_dff9f4eb(x):
    y = [ord(p) for p in 'b173b1a35e3b020a92fdb2789f4138af7861']
    return [x[i] - y[i] for i in range(k)]
def chunk_56a0ded7(x):
    # so good
    return x[16:] + x[:16]
def cmul_6f98e718(x):
    # lel
    return [x[i] * 5 for i in range(k)]
def chmul_d5be6ef1(x):
    # lel
    y = [ord(p) for p in '5b59f9ff10d46e064b2a4573da373d39fa2b']
    return [x[i] * y[i] for i in range(k)]
def chunk_4a721cb6(x):
    # lel
    return x[4:] + x[:4]
def add_4a7519db(x):
    y = [1846769981, 8020259730, 9729348899, 877788650, 4573444528, 9022062636, 1435475701, 5435772211, 8193700589, 3776894057, 5180758573, 7980038492, 3072919752, 4233083106, 4249796349, 7400734166, 4283984810, 7854418142, 207991275, 235983980, 5468034487, 4222763798, 354389300, 349971555, 8443984100, 3688266547, 6274072969, 8727391406, 7687516098, 7964809080, 4472543079, 7307610280, 7375880721, 8242577164, 7522220969, 1953036027]
    return [x[i] + y[i] for i in range(k)]
def add_a04dd9fa(x):
    y = [5326002386, 6352771497, 7126017086, 3556691116, 5656063456, 9829372267, 7478941697, 8815981041, 7780506198, 9948717140, 8052766755, 9635130141, 3509273713, 7479029976, 3631493364, 4204002351, 7711699381, 4122435469, 630728223, 3792910042, 2984357200, 2386593407, 4149898370, 9693445027, 8834830902, 4420337987, 1427832245, 291397344, 2030374362, 1284229954, 4691480506, 9144388379, 2564022731, 7254806976, 7184219728, 1939983462]
    return [x[i] + y[i] for i in range(k)]
def chsub_5d43cf4f(x):
    y = [ord(p) for p in '534c2fc3cb34754ef32734442bc5d66b0553']
    return [x[i] - y[i] for i in range(k)]
def chxor_cb71a848(x):
    y = [ord(p) for p in 'c3eb5d4787be87335a3247e6801ee4a3763c']
    return [x[i] ^ y[i] for i in range(k)]
def chsub_ebadaefe(x):
    # kek
    y = [ord(p) for p in '3bcb3749c2eb340a0be853afab3e530408ac']
    return [x[i] - y[i] for i in range(k)]
def cadd_d1616fc6(x):
    return [x[i] + 1694918283 for i in range(k)]
def cadd_d0ad75bc(x):
    return [x[i] + 9529254019 for i in range(k)]
def deck_84c1b832(x):
    return x[19:25] + x[:19] + x[25:28] + x[28:]
def deck_2b486959(x):
    # lmaooo
    return x[15:17] + x[17:] + x[:13] + x[13:15]
def cadd_0a20014b(x):
    # lel
    return [x[i] + 2965143332 for i in range(k)]
def chmul_b39f382d(x):
    y = [ord(p) for p in '6a63245cba7ba01b9796f04f35942888233e']
    return [x[i] * y[i] for i in range(k)]
def cadd_6bde1e47(x):
    # shiet?
    return [x[i] + 7785547640 for i in range(k)]
def cadd_fe8798b7(x):
    return [x[i] + 1221494945 for i in range(k)]
def add_30b3e082(x):
    y = [6500837563, 1926213566, 6052206724, 5579633456, 6465125217, 8158738035, 3462150769, 8156951501, 2021535427, 2561964157, 6372100311, 9594715343, 9073885586, 3170372617, 6197443385, 7618801799, 5953035468, 9994572710, 7696685778, 2842148584, 5839049697, 7971675472, 6479997380, 3239121339, 3929239788, 6369556736, 5948908570, 2004300826, 4178566198, 356167783, 1524929626, 4340157896, 4300003814, 5716125195, 6391059290, 2884682661]
    return [x[i] + y[i] for i in range(k)]
def chunk_75264af5(x):
    # encryption
    return x[2:] + x[:2]
def chunk_09573d85(x):
    # lel
    return x[15:] + x[:15]
def chadd_55b65d14(x):
    # lel
    y = [ord(p) for p in '962f0c2bfcf78bedfa1f411313a7c01618b5']
    return [x[i] + y[i] for i in range(k)]
def chadd_5d64f99d(x):
    y = [ord(p) for p in '3c6618f61c908e57d398ae75fca53826973a']
    return [x[i] + y[i] for i in range(k)]
def chsub_9f73bc9e(x):
    y = [ord(p) for p in 'b4fc6420ed6394db094fed9209384a1acaee']
    return [x[i] - y[i] for i in range(k)]
def cxor_b8e23c90(x):
    return [x[i] ^ 9941026204 for i in range(k)]
def digsub_2684203b(x):
    # kek
    return [int(str(n)[:1] + ''.join(['4', '6', '3', '5', '8', '2', '9', '7', '0', '1'][int(p)] for p in str(n)[1:])) for n in x]
def chxor_8d5feb9a(x):
    y = [ord(p) for p in '3f200909e1fae24f7011726cd08dcc9a58ec']
    return [x[i] ^ y[i] for i in range(k)]
def mul_49d2ca13(x):
    # rekt
    y = [7, 3, 6, 5, 6, 5, 1, 5, 3, 4, 6, 2, 3, 1, 1, 1, 5, 5, 4, 7, 7, 4, 4, 2, 1, 1, 4, 7, 2, 1, 6, 4, 2, 7, 3, 7]
    return [x[i] * y[i] for i in range(k)]
def digsub_1755eb85(x):
    # the flag is flag{jk}
    return [int(str(n)[:1] + ''.join(['1', '9', '6', '4', '8', '2', '7', '3', '5', '0'][int(p)] for p in str(n)[1:])) for n in x]
def sub_64547020(x):
    y = [9361629361, 3706075296, 7818390294, 2465417344, 9050127451, 7889872926, 5855460208, 7183299063, 890837329, 317885575, 681216439, 7513164170, 1294840307, 6110703130, 9522489647, 966007983, 1106513565, 5069571675, 4402771426, 8931974186, 6975428985, 1261981195, 3239169536, 998654191, 9340789944, 217831269, 6231362959, 9480399982, 6174204168, 2060538336, 7490506374, 4849322040, 15318754, 5163629712, 8099907255, 7528306431]
    return [x[i] - y[i] for i in range(k)]
def mul_eec9b30e(x):
    y = [2, 1, 1, 1, 2, 1, 3, 2, 1, 1, 3, 1, 3, 3, 3, 3, 1, 2, 1, 2, 1, 1, 2, 2, 3, 1, 1, 2, 2, 2, 3, 2, 2, 1, 1, 1]
    return [x[i] * y[i] for i in range(k)]
def chadd_65a80365(x):
    # kek
    y = [ord(p) for p in '08bc8b333e1ef87a2fd6800ef0c42b7c6426']
    return [x[i] + y[i] for i in range(k)]
def add_bdedbeea(x):
    # the flag is flag{jk}
    y = [7121251875, 6132486400, 897793768, 1517248553, 9483046248, 9859007598, 7113548082, 4145656630, 675332367, 5683795960, 3240548845, 45465379, 3866405021, 912666652, 3853881859, 7406854929, 2061209589, 3525384881, 8615203284, 8292480446, 4739590570, 4086564944, 9566665327, 7089935026, 8321673279, 5457210727, 3686578503, 7315602644, 7086584812, 596541937, 3037655624, 2452965336, 9209602946, 9933763509, 8720655883, 8806158024]
    return [x[i] + y[i] for i in range(k)]
def xor_60dd65f0(x):
    # just reverse it
    y = [9287135743, 3105382991, 6734857168, 545726149, 1101004547, 685644540, 873549393, 5976082940, 2602828656, 5190262968, 9313618390, 1677991551, 3180370062, 1920635784, 8474861927, 4649695770, 5294377156, 303378293, 147495839, 7686191325, 5205669072, 7623751940, 47990668, 1423007222, 6065857, 9510670528, 6566947955, 4897774144, 4105103226, 1479599543, 7934670465, 9783647561, 9679189156, 8200039286, 8212685182, 4618747186]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_c042377c(x):
    y = [ord(p) for p in 'c0c52c3362fbc03ec08305d19d666bc8f412']
    return [x[i] * y[i] for i in range(k)]
def cmul_f05686bd(x):
    return [x[i] * 9 for i in range(k)]
def chmul_c4924d51(x):
    y = [ord(p) for p in '10a8f757d6ec05cab1419e43e1779eb448c9']
    return [x[i] * y[i] for i in range(k)]
def chsub_27dae3ae(x):
    # the best
    y = [ord(p) for p in '2fb9a4190d8f5e8c53cd9e6d7116bdd33228']
    return [x[i] - y[i] for i in range(k)]
def cadd_a6482f91(x):
    # the flag is flag{jk}
    return [x[i] + 3645452447 for i in range(k)]
def chunk_b0a3ccde(x):
    # mucho encrypto
    return x[32:] + x[:32]
def chsub_b796fd36(x):
    y = [ord(p) for p in '2b665adeab701f3e5d26c25cd3a81158476b']
    return [x[i] - y[i] for i in range(k)]
def chunk_d9ce60f8(x):
    return x[19:] + x[:19]
def chunk_352f49d6(x):
    # lmaooo
    return x[1:] + x[:1]
def chunk_f899efdf(x):
    return x[1:] + x[:1]
def digsub_189a0416(x):
    return [int(str(n)[:1] + ''.join(['8', '7', '6', '5', '9', '4', '2', '0', '3', '1'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_498a4104(x):
    y = [ord(p) for p in '8850ab2bcd6268a174e40b0cabc3007eca12']
    return [x[i] * y[i] for i in range(k)]
def chxor_d23e056d(x):
    # lel
    y = [ord(p) for p in '461f1c9be3846cecb371b1167c07e4c78259']
    return [x[i] ^ y[i] for i in range(k)]
def xor_7b6d7222(x):
    # lel
    y = [2354735359, 3412040183, 2658415575, 9976620826, 3088708895, 9591732316, 220754268, 8096310552, 5718129253, 6654086517, 5026945468, 514775612, 3962819825, 8845067311, 300310738, 6288286442, 4672635773, 5433435488, 2308880010, 8623513869, 8560584673, 2934355460, 5884687318, 8210509780, 992911203, 9368022078, 7408457805, 9302395415, 2673202571, 2660490625, 786144329, 3124315658, 5462746901, 256621083, 5052251211, 8576210326]
    return [x[i] ^ y[i] for i in range(k)]
def sub_a148160b(x):
    y = [583367711, 4526757738, 5835357804, 387982752, 2308563665, 6549175600, 7000658233, 4426259011, 1607957272, 8716236589, 1490999072, 6088867343, 3722081186, 3442122560, 509645859, 6392496719, 5128446764, 9342494567, 346161421, 4857149600, 2240140020, 651725435, 4836684832, 5410609663, 536788201, 8075559105, 8424705127, 9218358354, 6211543731, 4004233451, 9512079299, 2625944398, 684134154, 5418088147, 4287722070, 5168726621]
    return [x[i] - y[i] for i in range(k)]
def chsub_bb765577(x):
    y = [ord(p) for p in '78f7cfc38cc297b0ef4ed1b91166ba13c5f9']
    return [x[i] - y[i] for i in range(k)]
def cmul_b01d887b(x):
    # rekt
    return [x[i] * 4 for i in range(k)]
def xor_7d423e0f(x):
    # lel
    y = [9518211049, 2874891933, 7888648741, 3595816857, 700147362, 7453361514, 6130953364, 4403490224, 150004141, 1035605736, 7589863847, 8837501991, 278242526, 5442912042, 3827264375, 2759484746, 6603154799, 5030282390, 9949613653, 3299803322, 1201519016, 7416119425, 3474691416, 954253240, 7850210256, 171635816, 8947766654, 2744194348, 7440816420, 1807797489, 9707210878, 5948662186, 199774753, 2419403492, 3944476622, 3833286357]
    return [x[i] ^ y[i] for i in range(k)]
def cmul_ac2fe6b4(x):
    return [x[i] * 3 for i in range(k)]
def add_4734c18c(x):
    # so good
    y = [1269271622, 6039914736, 5071255131, 9064256452, 4078485177, 9209278385, 5438340849, 9795787657, 5081092613, 2083234525, 2997369194, 9981053378, 6965504414, 7627060990, 6079327563, 7335384947, 3024534370, 3511310183, 3941269409, 2625011191, 155150743, 1411092075, 1908802557, 3734268515, 1278984739, 3706511537, 4064744285, 4721142383, 3594438650, 4930575436, 2727341696, 8517137765, 2222839285, 2840834463, 3266796318, 4696025351]
    return [x[i] + y[i] for i in range(k)]
def deck_b4486275(x):
    # encryption
    return x[3:21] + x[21:27] + x[:3] + x[27:]
def chmul_05b6d674(x):
    # shiet?
    y = [ord(p) for p in 'c7481cd5e3a4ae792c071ee8cbb05f841bf9']
    return [x[i] * y[i] for i in range(k)]
def sub_7e5f5612(x):
    # shiet?
    y = [7856830671, 1941965873, 3338462469, 5770923666, 8300470172, 1444344691, 4347951727, 6111152806, 3321083928, 6287937174, 1640549198, 9764873381, 601177959, 2745017070, 1709347028, 6445462367, 4424055579, 9907578315, 7490913860, 5387984221, 2370396670, 4848322404, 136061340, 520732980, 4162739593, 8791457422, 1284990022, 2554359179, 9157385419, 1973119151, 4307755789, 7110620702, 2087900328, 3288045162, 2171899788, 8889599431]
    return [x[i] - y[i] for i in range(k)]
def shuffle_65d9ca2c(x):
    # evil
    return [x[p] for p in [22, 23, 27, 2, 25, 24, 20, 11, 10, 31, 1, 9, 29, 17, 34, 6, 14, 19, 13, 5, 21, 18, 15, 8, 7, 26, 0, 16, 12, 3, 32, 33, 28, 30, 4, 35]]
def xor_eae9977a(x):
    # the best
    y = [6567795781, 7515007505, 8636055705, 3143490493, 688298817, 5786686652, 4242413003, 1503896244, 8671910892, 8338793891, 1100608546, 1701799169, 5578606120, 3196544207, 3185905004, 1021732571, 3778086305, 3161832075, 4761244494, 3780652477, 9404840805, 9790253572, 3931526817, 9772302967, 5854481168, 8892225089, 6609296330, 2982557430, 7164075162, 3036905029, 2270372791, 2302672527, 2825074837, 3749204226, 4263691204, 478947952]
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_6d9a62f9(x):
    # the best
    return [x[p] for p in [18, 8, 35, 12, 31, 1, 26, 15, 30, 9, 22, 13, 16, 28, 5, 33, 14, 7, 24, 34, 3, 32, 25, 11, 2, 19, 10, 23, 20, 29, 0, 21, 17, 6, 4, 27]]
def mul_a47d4993(x):
    y = [7, 2, 1, 4, 5, 6, 9, 5, 7, 8, 6, 1, 10, 9, 9, 2, 6, 2, 7, 10, 8, 5, 9, 1, 6, 1, 2, 6, 10, 5, 6, 10, 9, 5, 5, 6]
    return [x[i] * y[i] for i in range(k)]
def csub_302bf054(x):
    return [x[i] - 1704113330 for i in range(k)]
def chxor_a2b08b13(x):
    y = [ord(p) for p in '3d3a83c7e44a8495efe217d3b8f1928fd27a']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_5a85e49b(x):
    y = [ord(p) for p in '0fc0bd801b78266b3606652e61d3a2f5da0b']
    return [x[i] + y[i] for i in range(k)]
def digsub_fcc47cc3(x):
    # kek
    return [int(str(n)[:1] + ''.join(['0', '1', '6', '7', '8', '9', '2', '3', '5', '4'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_a6432e15(x):
    return [x[p] for p in [10, 27, 24, 22, 30, 1, 8, 31, 29, 32, 16, 21, 17, 6, 3, 35, 23, 7, 4, 34, 0, 14, 2, 9, 28, 18, 25, 20, 15, 33, 11, 26, 12, 5, 19, 13]]
def sub_468e1495(x):
    # encryption
    y = [4453091897, 9780734969, 1329665682, 4076086078, 7098841115, 7543894949, 829050459, 2082097832, 2915777989, 4854920342, 8392203227, 2716431886, 9879442619, 9190341679, 6103551031, 9159264451, 5677697209, 8079728024, 9737809557, 6517294331, 8548837216, 7908816198, 8182059449, 5258654324, 3031078194, 6220641315, 329311676, 9472549458, 5349652568, 3118546929, 2397507725, 9303691798, 848927961, 1544850311, 2101267975, 627819196]
    return [x[i] - y[i] for i in range(k)]
def chsub_38be16e5(x):
    # shiet?
    y = [ord(p) for p in '2b1a351410f3ae694c2f5ac6e3ecaf340392']
    return [x[i] - y[i] for i in range(k)]
def deck_e2a29c98(x):
    # encryption
    return x[:6] + x[6:24] + x[24:35] + x[35:]
def add_784c3bff(x):
    # kek
    y = [7471736987, 5211424874, 6549239558, 368516672, 6923068067, 2282087051, 5455320206, 1294356726, 1918570766, 9861732787, 6324459577, 3285200597, 6469847998, 3207290697, 6975461723, 6108874637, 3386375923, 7872650289, 5798392860, 4880670569, 954996619, 6931643172, 6112724406, 8803275476, 1993223715, 521588562, 1288816830, 186673435, 8132535071, 2395279509, 6300136200, 2006287458, 3819907085, 2414104083, 8810985524, 8528164658]
    return [x[i] + y[i] for i in range(k)]
def deck_5dfbf5a3(x):
    # kek
    return x[:10] + x[19:] + x[11:19] + x[10:11]
def chadd_aff7759b(x):
    y = [ord(p) for p in 'cfb7005ac5fec33ba86ab86d18c7b789b68f']
    return [x[i] + y[i] for i in range(k)]
def chunk_dfb92a41(x):
    return x[15:] + x[:15]
def chmul_826efe63(x):
    y = [ord(p) for p in '0a979725f84dea2fd2c07ab1aa79c2091380']
    return [x[i] * y[i] for i in range(k)]
def chxor_a87f9d33(x):
    y = [ord(p) for p in 'de2fc04ae0963433b28a83043ad69737ca10']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_d1b5c43d(x):
    # mucho encrypto
    return [x[i] * 3 for i in range(k)]
def shuffle_76309fe2(x):
    # encryption
    return [x[p] for p in [35, 0, 3, 2, 25, 5, 13, 19, 28, 33, 26, 10, 34, 20, 4, 23, 24, 1, 7, 9, 22, 16, 29, 12, 11, 30, 15, 21, 31, 27, 32, 8, 6, 17, 18, 14]]
def cmul_cb8500f8(x):
    return [x[i] * 4 for i in range(k)]
def cxor_42ec5686(x):
    return [x[i] ^ 9322782114 for i in range(k)]
def csub_220202ad(x):
    return [x[i] - 1490306422 for i in range(k)]
def chunk_80f5c942(x):
    return x[32:] + x[:32]
def cmul_15edb219(x):
    # shiet?
    return [x[i] * 9 for i in range(k)]
def chsub_411c54c2(x):
    # just reverse it
    y = [ord(p) for p in 'ab80fee340d2182804c7867dd381a2d45e91']
    return [x[i] - y[i] for i in range(k)]
def csub_3bacd8a7(x):
    return [x[i] - 5708237236 for i in range(k)]
def xor_f2a99984(x):
    # lmaooo
    y = [7101498133, 9909684915, 9383372361, 5288868477, 4065044338, 7454997054, 7711043114, 9749449945, 6857591103, 7020480383, 3066189361, 1097785905, 9756006419, 1321478916, 2148434850, 4527093905, 5177975883, 7769092283, 2990429291, 528174576, 8395680686, 300780184, 2245194994, 8821407237, 315355698, 6588972389, 959086287, 6470963261, 301667902, 274333647, 1036972141, 3809984537, 7656873138, 7939669989, 4658151285, 6186227342]
    return [x[i] ^ y[i] for i in range(k)]
def deck_77a18824(x):
    return x[12:] + x[4:9] + x[9:12] + x[:4]
def cmul_dce80096(x):
    return [x[i] * 4 for i in range(k)]
def chmul_7e4acef8(x):
    # lel
    y = [ord(p) for p in '13048b0deb09ac4f76d6d6510948acde84eb']
    return [x[i] * y[i] for i in range(k)]
def deck_4e313569(x):
    # shiet?
    return x[27:] + x[16:27] + x[:4] + x[4:16]
def chsub_a23842be(x):
    # kek
    y = [ord(p) for p in '9e5e4b899948b620ce880d1a54e80455e9b3']
    return [x[i] - y[i] for i in range(k)]
def cmul_fa47ed88(x):
    return [x[i] * 6 for i in range(k)]
def chsub_f27f3438(x):
    y = [ord(p) for p in 'ea97d3e588b93563931c236e275cf4605bed']
    return [x[i] - y[i] for i in range(k)]
def cxor_4dfc7289(x):
    return [x[i] ^ 2477208666 for i in range(k)]
def chadd_742f064d(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '6a19233f70ec82c539658d82ae0060a07d4e']
    return [x[i] + y[i] for i in range(k)]
def chxor_f84733a4(x):
    # just reverse it
    y = [ord(p) for p in 'f991c53d22df23fd597f57ce554ec67aff91']
    return [x[i] ^ y[i] for i in range(k)]
def mul_70c4cf79(x):
    # mucho encrypto
    y = [1, 7, 8, 5, 4, 3, 1, 8, 2, 6, 3, 1, 1, 7, 4, 5, 3, 5, 7, 1, 2, 1, 8, 7, 2, 5, 6, 3, 8, 1, 4, 6, 8, 6, 3, 3]
    return [x[i] * y[i] for i in range(k)]
def deck_d2fb1a7b(x):
    return x[16:20] + x[27:] + x[20:27] + x[:16]
def add_da9b8954(x):
    y = [7646534600, 7743743090, 1341784334, 6352286435, 3073748792, 1919653778, 1870194690, 7234447712, 4386097856, 1421797729, 7242542033, 9762500632, 8883243159, 5315745895, 6684765719, 9997601851, 2155106219, 5290814824, 9303103060, 1390908694, 3419754418, 1412053408, 4358310478, 8646469063, 823368822, 7149034481, 9679452622, 2024364135, 5815587695, 7468442974, 7848260126, 9873830923, 5237924409, 5586923290, 2881079898, 2939081892]
    return [x[i] + y[i] for i in range(k)]
def chunk_0074c4bc(x):
    return x[6:] + x[:6]
def sub_2c66d2af(x):
    y = [5404485889, 2727190045, 1806251939, 2404783589, 5681609374, 1741141866, 3398312448, 1620955657, 8321632537, 9857933874, 184958150, 990089823, 4882380825, 6042928662, 1094544246, 2059961115, 6453511730, 4168755208, 8298403497, 2901208922, 3442915741, 6078579512, 1802487098, 3784920314, 2327025268, 4424029256, 1443595654, 662905963, 5082369710, 550178671, 1129496082, 4458303797, 4656754197, 5220710143, 942230633, 4462972022]
    return [x[i] - y[i] for i in range(k)]
def chmul_522be87f(x):
    y = [ord(p) for p in 'c809d32fc2cd2b78acd03c4e466f470fb651']
    return [x[i] * y[i] for i in range(k)]
def chunk_64714116(x):
    return x[11:] + x[:11]
def csub_c50ffebc(x):
    # lmaooo
    return [x[i] - 4812190528 for i in range(k)]
def deck_92f12726(x):
    # rekt
    return x[:9] + x[17:] + x[14:17] + x[9:14]
def chxor_e3b5c5ae(x):
    y = [ord(p) for p in 'b2cadb1aa50bfd5fd3c112dfe1d51f4f72bd']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_b118d2cc(x):
    # evil
    return [x[p] for p in [14, 0, 19, 9, 18, 12, 34, 24, 32, 17, 6, 21, 29, 22, 27, 7, 28, 2, 8, 3, 25, 31, 4, 35, 16, 5, 10, 13, 33, 20, 1, 15, 26, 30, 23, 11]]
def mul_70770109(x):
    # lmaooo
    y = [2, 4, 4, 2, 1, 4, 3, 1, 3, 1, 3, 2, 2, 3, 4, 4, 2, 3, 4, 3, 4, 4, 4, 4, 4, 4, 3, 1, 3, 1, 1, 3, 2, 4, 4, 2]
    return [x[i] * y[i] for i in range(k)]
def xor_5fc3579e(x):
    y = [3478138043, 5542596861, 4921283173, 6727961441, 7870744090, 1407882473, 2230785038, 4854501773, 9900681557, 8360179032, 7523381551, 5079836676, 6052931718, 6823685088, 2858658791, 6864511281, 3002909145, 8094289933, 1979835778, 2651524006, 6766181961, 7559553963, 1570207607, 1110220589, 7232562058, 9291556686, 9744251430, 5790575000, 6554531515, 9598083077, 4103950198, 3371293342, 4481187265, 3764566168, 4749493827, 8484572805]
    return [x[i] ^ y[i] for i in range(k)]
def xor_2ec3c23c(x):
    # lmaooo
    y = [878436564, 6902294622, 2134682274, 5921710707, 1968958798, 9101059189, 7937112185, 9011999065, 8349612312, 3426711000, 5422000774, 9711023001, 9176000899, 6789577554, 9249907367, 1472175467, 9192200430, 4153855940, 2014765263, 2582742504, 1208998313, 6740586527, 6298081743, 5683021266, 5878995380, 1301259777, 1479541362, 8179265766, 188506691, 1982865722, 6961396757, 7864097163, 3468275649, 7874864608, 8330330244, 8039279141]
    return [x[i] ^ y[i] for i in range(k)]
def add_718a4547(x):
    y = [8152166825, 3457424216, 6130966150, 1830064664, 4057742934, 5116763395, 8355503159, 8244982778, 7011267964, 739728682, 6865638589, 8376776990, 2724683104, 3162260830, 2170733460, 2806074474, 9542214024, 924557821, 6903937318, 3606317794, 8411267410, 8132618882, 9591854742, 6716005731, 5247211131, 7548994433, 6888506221, 8716397404, 1736162701, 4392250328, 2870638821, 9542624689, 6959035398, 3990093555, 5371427425, 7312555829]
    return [x[i] + y[i] for i in range(k)]
def cmul_fd9e1024(x):
    return [x[i] * 8 for i in range(k)]
def chxor_b09e96f6(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '12cf4596947ade6735fecb3bfc14ba0db8df']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_d2d3bddf(x):
    y = [ord(p) for p in '96bee193daff5b0d1444e3ea43eb4ed11b3d']
    return [x[i] + y[i] for i in range(k)]
def chxor_b69b0e36(x):
    y = [ord(p) for p in '77cfb96e6edf500709f8265a1cf8a41ce656']
    return [x[i] ^ y[i] for i in range(k)]
def digsub_1209d475(x):
    return [int(str(n)[:1] + ''.join(['8', '3', '0', '7', '2', '5', '1', '6', '9', '4'][int(p)] for p in str(n)[1:])) for n in x]
def chsub_65723dab(x):
    y = [ord(p) for p in '3a0346549da0047383ddc9e2ffbd8dad81b9']
    return [x[i] - y[i] for i in range(k)]
def chsub_c813b5d2(x):
    y = [ord(p) for p in 'e52736943234aa666d1ac638e21616a81838']
    return [x[i] - y[i] for i in range(k)]
def cxor_8666b092(x):
    return [x[i] ^ 7792170176 for i in range(k)]
def csub_c123debf(x):
    return [x[i] - 7262800544 for i in range(k)]
def chxor_829e0b1c(x):
    y = [ord(p) for p in '8db4aa0479b3bc819eb33c8dac54600b5e73']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_0e5b89be(x):
    # mucho encrypto
    y = [ord(p) for p in 'c73c6c311addf6b7b621b93c01cd6a3499bf']
    return [x[i] * y[i] for i in range(k)]
def chsub_f15fc200(x):
    y = [ord(p) for p in 'f5af362389e19dbab32d9c491fcb46e48b36']
    return [x[i] - y[i] for i in range(k)]
def chsub_c78a57d0(x):
    y = [ord(p) for p in 'ea5321ecfb387963cd37b3fbc942ee54dbdd']
    return [x[i] - y[i] for i in range(k)]
def mul_5500afcf(x):
    y = [3, 3, 2, 3, 3, 1, 1, 3, 2, 1, 3, 2, 2, 2, 1, 3, 2, 3, 3, 2, 2, 2, 2, 3, 1, 3, 2, 2, 3, 3, 3, 3, 2, 1, 3, 1]
    return [x[i] * y[i] for i in range(k)]
def xor_046c82f6(x):
    # the flag is flag{jk}
    y = [1551831837, 4844254214, 2396171079, 2465033373, 8889610381, 2825986408, 2743232363, 2315865804, 8077011572, 4110110213, 259381320, 1909171901, 279096567, 4469232633, 3373534268, 4391862157, 3422602539, 2803125769, 34076353, 611665341, 5965270340, 4656991272, 7290924275, 3841479446, 2403130646, 9083581610, 6412910787, 4458985503, 7610817240, 9224706207, 5835067560, 3539843292, 2299809586, 1483943668, 3500246612, 8662277129]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_1cf94121(x):
    # shiet?
    y = [ord(p) for p in '922393f2be1ef125ada1f28241aaa3b2e9a2']
    return [x[i] - y[i] for i in range(k)]
def cadd_d07896bc(x):
    return [x[i] + 4916617428 for i in range(k)]
def mul_36a4bfa0(x):
    # mucho encrypto
    y = [9, 1, 3, 9, 2, 6, 2, 4, 5, 7, 9, 3, 2, 8, 6, 6, 6, 7, 4, 3, 6, 6, 2, 5, 3, 4, 6, 8, 5, 4, 2, 8, 1, 4, 5, 5]
    return [x[i] * y[i] for i in range(k)]
def cmul_3062560c(x):
    # shiet?
    return [x[i] * 8 for i in range(k)]
def sub_5e069f47(x):
    y = [7986340854, 8163660294, 5107080537, 3683344142, 2247740308, 1491224207, 8388829164, 3767256199, 5736754381, 5985132965, 321022270, 209409642, 3682747937, 7888935529, 8917746429, 5878213231, 3208670131, 4291751075, 981607617, 4385006942, 751232144, 8703910400, 903782028, 2844019078, 4507518866, 8574674371, 7944141611, 1486425463, 2330985312, 3397263437, 6471842237, 6483057358, 9799549392, 2592268774, 622909996, 4754281008]
    return [x[i] - y[i] for i in range(k)]
def deck_ff059d3f(x):
    return x[:6] + x[7:35] + x[35:] + x[6:7]
def cmul_3bee8718(x):
    return [x[i] * 4 for i in range(k)]
def sub_7a049de1(x):
    # encryption
    y = [109924901, 3845356856, 1884196457, 7726640872, 4967669604, 930296936, 204036738, 2446584519, 2757308919, 8780262819, 1869560043, 3443402637, 5182446519, 9233556657, 480372814, 5368094027, 5341931344, 493842207, 950101942, 6194290997, 8329850892, 4529001732, 4014371753, 791025677, 6111828548, 4916075635, 4441726655, 7233512171, 3576568589, 2010899479, 6438806666, 8182055506, 9075371630, 5668707823, 4031755987, 2901223017]
    return [x[i] - y[i] for i in range(k)]
def deck_524a770e(x):
    # the best
    return x[33:] + x[21:33] + x[17:21] + x[:17]
def chsub_dbf9111e(x):
    y = [ord(p) for p in '0b1e6769bd43859e573b4f554ccca1612e8d']
    return [x[i] - y[i] for i in range(k)]
def chsub_56813bb5(x):
    y = [ord(p) for p in '5287378ee3a4e0e454e25617dd1a7785ce19']
    return [x[i] - y[i] for i in range(k)]
def chsub_5f944988(x):
    y = [ord(p) for p in 'f37112ac6afeb77b2aac2b8aa98c2480d165']
    return [x[i] - y[i] for i in range(k)]
def xor_39a60514(x):
    # shiet?
    y = [9740075529, 6959037901, 2255357351, 849248209, 2388567819, 7534637118, 9881063098, 2242748133, 8848854633, 5450176103, 9018532607, 6718638992, 8481548506, 5867642454, 2956025087, 9794303191, 9642528659, 5317899507, 5586013087, 6059019304, 9708557068, 6770932241, 7536927391, 2873321065, 2491357110, 9757867584, 5436082636, 1106516558, 3358038934, 6449780572, 2736438170, 6951295259, 7370562680, 535643880, 1702544174, 4867948196]
    return [x[i] ^ y[i] for i in range(k)]
def mul_2a724485(x):
    # mucho encrypto
    y = [4, 4, 1, 2, 6, 3, 2, 6, 6, 5, 1, 4, 5, 3, 3, 2, 1, 3, 2, 3, 2, 2, 6, 1, 3, 6, 2, 5, 6, 2, 2, 4, 2, 3, 2, 5]
    return [x[i] * y[i] for i in range(k)]
def cadd_428d6ecc(x):
    return [x[i] + 9747878662 for i in range(k)]
def cadd_ea9ca040(x):
    # the flag is flag{jk}
    return [x[i] + 1170537289 for i in range(k)]
def cmul_0c68dd02(x):
    # kek
    return [x[i] * 6 for i in range(k)]
def shuffle_c0cc818c(x):
    # evil
    return [x[p] for p in [28, 17, 29, 14, 22, 30, 24, 12, 31, 11, 15, 7, 32, 27, 1, 9, 4, 2, 6, 5, 10, 25, 34, 18, 20, 26, 8, 35, 33, 23, 16, 0, 21, 3, 13, 19]]
def digsub_95a880da(x):
    return [int(str(n)[:1] + ''.join(['8', '3', '0', '7', '6', '9', '1', '2', '4', '5'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_34dab8e4(x):
    # mucho encrypto
    y = [ord(p) for p in '02eebbb241c2079a5ddbf6dcdd64a3898ce9']
    return [x[i] * y[i] for i in range(k)]
def cmul_92323fe7(x):
    return [x[i] * 6 for i in range(k)]
def add_3cfe5566(x):
    y = [3185242363, 5010188603, 1244650294, 5865252834, 275353036, 9685198005, 1198745950, 8443771310, 8265464985, 3206355629, 703458143, 7886198394, 6390785126, 83123870, 696022195, 570288462, 4008917780, 4807092967, 7942996074, 6524985874, 2984109296, 3871920885, 4705344604, 7218224303, 2149230545, 196927302, 2626680758, 3974446076, 6803715262, 6710630771, 3738243126, 7943324434, 5474501930, 8817890030, 4280166950, 2288529377]
    return [x[i] + y[i] for i in range(k)]
def chunk_c9018375(x):
    # rekt
    return x[21:] + x[:21]
def chadd_24def8ad(x):
    y = [ord(p) for p in '9d2f82d410db720d9266e2a1bbef88b80e39']
    return [x[i] + y[i] for i in range(k)]
def chmul_92c7a281(x):
    # so good
    y = [ord(p) for p in '65ba7f070a7602cd78af62608ee0465dbd6f']
    return [x[i] * y[i] for i in range(k)]
def chadd_01e97c37(x):
    # the flag is flag{jk}
    y = [ord(p) for p in 'e5c667abab5fe57870318df819c67301739a']
    return [x[i] + y[i] for i in range(k)]
def xor_028e2ac0(x):
    # lmaooo
    y = [230967203, 2573345455, 4913397200, 5169932941, 643497979, 1412324542, 5615869835, 2364006410, 588295459, 3220271917, 5060766794, 5703265475, 9368917800, 6801157444, 8667427726, 2500554774, 2631354369, 1155958191, 3037047375, 539257334, 6213277484, 9513481271, 5488776674, 7896655809, 8242486209, 6228911588, 7042053977, 8814179449, 9044543623, 7498387903, 3704623031, 6231899853, 3965478443, 3314661364, 3777201014, 5714471333]
    return [x[i] ^ y[i] for i in range(k)]
def xor_c0f387ba(x):
    # just reverse it
    y = [9449626602, 5271147489, 6260734959, 4150940782, 4968396661, 2235221306, 4063336812, 4197410447, 5443524120, 6418477007, 8385080294, 3881324395, 9550643882, 8989411606, 2541053384, 4701792912, 6040386994, 1098671035, 227167942, 456316062, 2340182854, 9953111352, 7140292092, 1953300489, 890532180, 7091958236, 1859369761, 8733899432, 6817332053, 5907984726, 7059583824, 4012393106, 2780482591, 2803702273, 9958555928, 350632112]
    return [x[i] ^ y[i] for i in range(k)]
def add_66a3881d(x):
    # kek
    y = [7400450432, 4605231555, 2085499876, 6723891294, 8907967019, 4965928982, 2913810026, 7446574953, 6576147170, 2657333423, 6552530975, 888571867, 9933424552, 3168970945, 1741708471, 6071258930, 721126494, 4970663480, 7876715094, 4851596424, 5554194832, 4852880843, 7971085838, 1851873433, 2528992477, 3597163023, 6793775654, 8856932190, 8888006502, 4182995367, 5880324915, 4991021531, 1957813882, 1146533574, 8129685000, 6283161079]
    return [x[i] + y[i] for i in range(k)]
def chmul_7eea79aa(x):
    y = [ord(p) for p in '9d598438bc2e7b73c54b66890a9a92c90a30']
    return [x[i] * y[i] for i in range(k)]
def chunk_d09c17de(x):
    return x[35:] + x[:35]
def cxor_89bf897f(x):
    return [x[i] ^ 5493168871 for i in range(k)]
def cmul_31b88b90(x):
    return [x[i] * 9 for i in range(k)]
def chadd_cf38fd97(x):
    # evil
    y = [ord(p) for p in 'c97ec3975aba3e86ad688e6b2589c86c5496']
    return [x[i] + y[i] for i in range(k)]
def xor_ab901228(x):
    y = [9931594922, 7907828080, 4312162517, 9373100205, 2983906068, 8145683685, 7711735859, 9551263201, 2226058745, 7035236450, 3554618968, 331492886, 8775104614, 9537385265, 9001047822, 1260825901, 6572520839, 5129507128, 7773716051, 4000182373, 1158087214, 7462174197, 8489944913, 2845008263, 7615248784, 5348483682, 2295822137, 2810265801, 8548745729, 7575060209, 7385611492, 657343434, 1698594600, 9922177305, 7516187161, 6836196453]
    return [x[i] ^ y[i] for i in range(k)]
def add_d1d41f14(x):
    # lel
    y = [5923043929, 8610576091, 3834814173, 8941842924, 4802517906, 7505800089, 7462758488, 3977927840, 3960714054, 6171829954, 4425898237, 2346029782, 9504431342, 5660348985, 1687592987, 1479325458, 6503152109, 2027551566, 6712095145, 824846356, 4642974941, 8743111553, 9901513934, 1902296792, 4218390849, 7008877342, 8007626996, 98798191, 421630844, 7603179282, 1624705352, 5269735049, 302250936, 4017548378, 5001869684, 8146235250]
    return [x[i] + y[i] for i in range(k)]
def chmul_38133c10(x):
    # lmaooo
    y = [ord(p) for p in '9b16769971aa09fc58e2ffb7baf271eb9f8f']
    return [x[i] * y[i] for i in range(k)]
def chxor_a697d1c3(x):
    y = [ord(p) for p in 'f94325fdb601f3ca84cdc6a0493eb8d98d13']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_68c300d6(x):
    # lmaooo
    return [x[i] * 5 for i in range(k)]
def deck_322323c9(x):
    # encryption
    return x[21:24] + x[20:21] + x[:20] + x[24:]
def cmul_ea158364(x):
    return [x[i] * 8 for i in range(k)]
def chsub_bae85472(x):
    y = [ord(p) for p in '815b23b2053eb59460843d46117befd0d011']
    return [x[i] - y[i] for i in range(k)]
def shuffle_6df04177(x):
    return [x[p] for p in [35, 7, 12, 28, 26, 10, 2, 31, 18, 5, 16, 13, 9, 20, 32, 33, 15, 24, 3, 6, 21, 23, 27, 0, 25, 19, 14, 8, 30, 29, 11, 34, 1, 17, 4, 22]]
def cxor_697bee04(x):
    # kek
    return [x[i] ^ 898830524 for i in range(k)]
def cxor_802236be(x):
    # kek
    return [x[i] ^ 3851269877 for i in range(k)]
def add_6a75af42(x):
    # lmaooo
    y = [5704931692, 717497533, 7375666679, 9161056936, 9153562239, 6558199874, 7065030147, 775250248, 7472231207, 7123822192, 7691731276, 362656607, 2862831669, 5276921529, 9456360347, 1190863433, 4260285365, 5862134637, 7569141494, 7627338367, 7567983210, 9462219100, 9929775912, 816058724, 1317009610, 9157204062, 5774957765, 8111350695, 4913658607, 7619289282, 4723688098, 2756930093, 440798489, 3511514483, 7859195942, 9182284033]
    return [x[i] + y[i] for i in range(k)]
def add_b7a421e2(x):
    # the best
    y = [6355535421, 41051778, 5913272168, 5455433495, 8360049977, 7760402567, 3870916136, 3161911421, 8755856179, 1408145034, 7340232667, 5860938862, 3300952043, 6325343310, 8920373921, 2596752287, 3020693830, 8043441362, 1956869710, 3605010679, 2476109942, 3421092301, 1211149840, 8988291250, 1522696164, 904475757, 4811223547, 686878132, 1531642968, 4412597283, 9100503957, 5848694163, 4844436375, 2495400030, 7697841618, 1844013129]
    return [x[i] + y[i] for i in range(k)]
def deck_6cfcc5bb(x):
    # encryption
    return x[26:33] + x[33:] + x[25:26] + x[:25]
def chsub_46fd8bb3(x):
    # evil
    y = [ord(p) for p in 'ac6c26ae812487b62f6735c31e02634f01d1']
    return [x[i] - y[i] for i in range(k)]
def chmul_d909e81b(x):
    # so good
    y = [ord(p) for p in '84a68fa7168d1a4c11f2a76c3ef4a0345b13']
    return [x[i] * y[i] for i in range(k)]
def digsub_288ef9ea(x):
    return [int(str(n)[:1] + ''.join(['7', '2', '3', '5', '6', '4', '8', '1', '9', '0'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_fedaeb35(x):
    return [x[i] * 6 for i in range(k)]
def mul_a36d212f(x):
    # the best
    y = [4, 1, 3, 6, 6, 2, 2, 1, 8, 7, 1, 2, 6, 5, 6, 4, 1, 5, 3, 3, 8, 5, 7, 3, 2, 8, 7, 8, 2, 3, 4, 8, 4, 7, 6, 3]
    return [x[i] * y[i] for i in range(k)]
def chxor_0a1291f0(x):
    y = [ord(p) for p in 'df9bcf695ac2be7fc0533d2de5ab66c9c75b']
    return [x[i] ^ y[i] for i in range(k)]
def cmul_01d50eab(x):
    return [x[i] * 9 for i in range(k)]
def chadd_258b2420(x):
    y = [ord(p) for p in '22707c5b4f1a66935a33e75650c2a502bb00']
    return [x[i] + y[i] for i in range(k)]
def cxor_c9ef0e8c(x):
    # kek
    return [x[i] ^ 6699665187 for i in range(k)]
def chxor_f0558dbb(x):
    # lel
    y = [ord(p) for p in 'a3e554d961dc7a7a9e40ccbbee7242a19189']
    return [x[i] ^ y[i] for i in range(k)]
def add_a391835b(x):
    y = [2457241312, 3656025223, 6023108137, 4392207806, 8082913348, 345381012, 6664978269, 6663370225, 4099131098, 4400197883, 2166462715, 3572088070, 8093591442, 3631458516, 6727093009, 1686578173, 4828451433, 2540921811, 235320592, 3337248130, 6666306144, 2352578307, 7563620118, 252878344, 8468171945, 4786579113, 1490887602, 5938154505, 426613421, 1659130042, 3579648809, 7569543943, 7782095127, 7029770854, 8303534268, 7182700583]
    return [x[i] + y[i] for i in range(k)]
def add_dcb94ddc(x):
    y = [3884290281, 8643205698, 3334571655, 2089217824, 2560329441, 7838401182, 720315388, 8249097581, 6699733664, 6703892000, 7978127879, 253221989, 2158253120, 8946601987, 1646026601, 1938578276, 2420419826, 8720820119, 4598673237, 9499116541, 4878751015, 8538957902, 5254537039, 4997687480, 384055917, 3231446924, 3404044602, 4922665948, 4158469431, 2757959984, 1674675942, 4262567633, 5460714525, 7441541853, 8384291407, 6559602097]
    return [x[i] + y[i] for i in range(k)]
def add_7ea1ef19(x):
    y = [9768749767, 4538268221, 2834570199, 5627919992, 5052901303, 4201934932, 1603524207, 574068185, 6356571759, 6746585120, 1565819300, 2720608198, 3553544768, 7576559400, 3258504707, 5674880242, 711003470, 3271988231, 1417019375, 7608210063, 1710458636, 1018525474, 4047277768, 6761324921, 8971481609, 8136017080, 4426807243, 3801729594, 510724331, 9817498667, 8426782442, 8879749214, 247303260, 1119355079, 5746162090, 5801258560]
    return [x[i] + y[i] for i in range(k)]
def mul_4084757c(x):
    # so good
    y = [4, 3, 1, 1, 4, 2, 1, 2, 4, 2, 1, 4, 4, 3, 1, 3, 3, 3, 1, 3, 3, 2, 1, 2, 3, 3, 4, 1, 1, 3, 4, 3, 3, 1, 3, 1]
    return [x[i] * y[i] for i in range(k)]
def cmul_aaa17c90(x):
    # the best
    return [x[i] * 9 for i in range(k)]
def csub_6e812142(x):
    # lmaooo
    return [x[i] - 3481169737 for i in range(k)]
def cmul_1ebf8c3e(x):
    return [x[i] * 7 for i in range(k)]
def csub_1d8c0c6b(x):
    return [x[i] - 5367378942 for i in range(k)]
def csub_9b1af639(x):
    # just reverse it
    return [x[i] - 9036357161 for i in range(k)]
def add_b071c8e9(x):
    # rekt
    y = [1054357204, 8039400353, 3055791616, 1769626720, 5866424229, 626069157, 4579576396, 4675528161, 8225001406, 5952429775, 6610693116, 5026248200, 4240762061, 7618928776, 8908118916, 2552206599, 2807686192, 7936908053, 7613357060, 8864079521, 6781506951, 6784876269, 1771424298, 2509801400, 9944356550, 2578528169, 6551388513, 1479887445, 631118331, 4095332335, 4413170030, 9940818679, 7738082738, 1536984331, 9171210300, 4048087318]
    return [x[i] + y[i] for i in range(k)]
def chxor_599d5e3e(x):
    # so good
    y = [ord(p) for p in '0a1352dab6a1891cb58d2faad48cbe841aa6']
    return [x[i] ^ y[i] for i in range(k)]
def csub_237fd55f(x):
    return [x[i] - 6103370278 for i in range(k)]
def deck_64ce4187(x):
    return x[:14] + x[25:] + x[17:25] + x[14:17]
def chxor_f43465b0(x):
    y = [ord(p) for p in 'fabf1fbda3189b54c101ed12ae602b1b9a38']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_bcf0771e(x):
    y = [ord(p) for p in 'b34f5765125962f65db08c7532f8d09c5249']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_f435a64a(x):
    return [x[i] + 2781027349 for i in range(k)]
def chmul_1666c516(x):
    # mucho encrypto
    y = [ord(p) for p in '74c4a184a9445162be14e4d61b6d7c1e590d']
    return [x[i] * y[i] for i in range(k)]
def cadd_6fe68866(x):
    return [x[i] + 6844418603 for i in range(k)]
def digsub_eb8aeb23(x):
    return [int(str(n)[:1] + ''.join(['8', '7', '3', '9', '1', '4', '5', '0', '2', '6'][int(p)] for p in str(n)[1:])) for n in x]
def add_6aac990e(x):
    # rekt
    y = [9017554733, 5844268043, 9259786072, 6167831555, 7288606062, 1766942545, 4723476962, 2710361149, 5944822912, 4216961929, 3776279110, 2399632826, 9503813573, 6948696543, 2318822796, 4531238543, 7098332436, 3944816539, 6737648750, 8421336181, 5664292868, 734701188, 3919874500, 6077260739, 6867226172, 9331905051, 9590674778, 2836024125, 2229181888, 3199735464, 8712299492, 9535001027, 3656864990, 970257421, 7307126131, 9994038693]
    return [x[i] + y[i] for i in range(k)]
def xor_84fc41ea(x):
    # just reverse it
    y = [1066102102, 4260773984, 614538300, 5310353388, 770905313, 6978691008, 6599361270, 6172233570, 7206205666, 9069606695, 6604993998, 3669797680, 7519379419, 4232955330, 7199065854, 9473951056, 1017800788, 3963257053, 8141523658, 1763991218, 4298903213, 8425157908, 3279884216, 5854229846, 95764738, 476530349, 3439965991, 4886504975, 5294586520, 7231005722, 8619217976, 1822750391, 9122595136, 2866157608, 8841718994, 104225217]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_4af7800f(x):
    y = [ord(p) for p in '310dd3cf196e37c06e667add7669300bc5bf']
    return [x[i] * y[i] for i in range(k)]
def chxor_6c38cb27(x):
    y = [ord(p) for p in '43cc5e30df37c62a32f9a0b7840d574aae9b']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_88eb44fc(x):
    # mucho encrypto
    y = [ord(p) for p in 'f7ee8ee96e12ef6a770b26d43543cc4ceb92']
    return [x[i] * y[i] for i in range(k)]
def cxor_9d8f4ca2(x):
    return [x[i] ^ 7540026353 for i in range(k)]
def add_5dfc4b74(x):
    y = [4063328880, 5314601683, 2156108817, 3444479348, 9047260268, 7224829785, 8481896086, 4917047072, 2165075727, 7790859304, 9324712625, 2160743544, 3443082084, 3722027630, 6436675916, 1072004586, 246351452, 5389866354, 168901837, 3759521200, 8273230244, 5716957984, 2216893949, 7857575978, 1229522033, 4735854042, 2789909805, 6288826239, 1108309540, 834554876, 8811971782, 2831905179, 164281325, 6691694950, 6892136416, 2224855267]
    return [x[i] + y[i] for i in range(k)]
def chunk_206c8668(x):
    return x[24:] + x[:24]
def sub_c126f74d(x):
    y = [678096844, 722560499, 6462046371, 7531291657, 2919012435, 1695679269, 9412836037, 658684373, 1463113145, 1173436575, 8928611156, 5576779010, 3357608052, 7831021882, 3368695413, 6111251792, 6260296663, 7109943747, 6960826073, 8192328594, 7164517894, 1217880783, 1682838149, 2059968969, 3089102638, 454209268, 3625499864, 3915164158, 4618672875, 9391652488, 2316392057, 728425626, 651908971, 2108279012, 4403020504, 9104299237]
    return [x[i] - y[i] for i in range(k)]
def deck_9653c123(x):
    return x[:4] + x[13:22] + x[22:] + x[4:13]
def xor_64af3af1(x):
    y = [962186359, 5418150526, 525073558, 3477022393, 5127840025, 9788999763, 6995167635, 6808711946, 5701343890, 8264916465, 5474941412, 8795292341, 4981919424, 5051986415, 7983998962, 8644375999, 1316433886, 4250026164, 9399951469, 9851485677, 3887580943, 2740680377, 8989625553, 6088983559, 179062166, 1430052346, 4418312507, 4324833849, 2469400161, 3067803332, 4940071384, 9199473008, 2067028375, 37489368, 6390443468, 6949181071]
    return [x[i] ^ y[i] for i in range(k)]
def chadd_78099793(x):
    # lmaooo
    y = [ord(p) for p in 'cd2930192c0456724a8a68c335e95c8b8cdb']
    return [x[i] + y[i] for i in range(k)]
def add_58fa684a(x):
    y = [8570418473, 5182723468, 1061578154, 7091227951, 4390086861, 3882971606, 7375278284, 1454617798, 2196164774, 1648642009, 3063432659, 4626253791, 2618685657, 3716849105, 6021982083, 7526905104, 6094164840, 4492282370, 1988417162, 3451340504, 3236452107, 3526180219, 9763107818, 2599384124, 5797073654, 1958497972, 5817700759, 2707644379, 4218497801, 2254894226, 5738436473, 6130261376, 9456125210, 8524327759, 1826685390, 7676678821]
    return [x[i] + y[i] for i in range(k)]
def shuffle_cb627e8c(x):
    # lel
    return [x[p] for p in [23, 30, 34, 3, 14, 20, 10, 1, 7, 33, 22, 17, 18, 11, 35, 0, 13, 31, 19, 21, 28, 9, 5, 16, 24, 15, 32, 12, 25, 8, 2, 4, 26, 6, 29, 27]]
def xor_8297deee(x):
    y = [649714340, 7195056956, 2710805738, 4658564853, 3102298177, 6655380361, 7295569897, 4894413577, 6924788603, 3127937079, 2896662446, 6925651176, 6352058797, 3358214280, 2631268165, 5903469133, 4999751059, 3884980571, 8474284373, 7371581940, 8469497173, 7741342646, 4422331038, 1668453069, 6769465907, 7254680028, 956830315, 9724477011, 9779016170, 7157695036, 540355048, 4475785535, 7140024225, 9901833619, 3338851335, 2300437611]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_ea824f04(x):
    # mucho encrypto
    return [int(str(n)[:1] + ''.join(['1', '0', '7', '5', '4', '6', '8', '3', '9', '2'][int(p)] for p in str(n)[1:])) for n in x]
def chsub_6649ba27(x):
    # mucho encrypto
    y = [ord(p) for p in '4fb6be89641700c463a17f4d0435f29a4e03']
    return [x[i] - y[i] for i in range(k)]
def cmul_0bf33bed(x):
    # the best
    return [x[i] * 5 for i in range(k)]
def xor_f7706b03(x):
    # lmaooo
    y = [8635096121, 6714020123, 2341383661, 6535959469, 7843483976, 494295235, 1818169417, 2187805728, 8766894975, 1006620436, 1609191671, 9381922159, 4657022080, 2916167252, 4155321272, 3289547568, 2693813227, 8016913276, 2432013174, 4974634378, 6487003997, 8646535922, 818718785, 8548202102, 8246526930, 3920535843, 9684017574, 1668197924, 6557166956, 9145495008, 2099089717, 5346127770, 8658397800, 6150215181, 4874877836, 8080930606]
    return [x[i] ^ y[i] for i in range(k)]
def chmul_d4a185e3(x):
    y = [ord(p) for p in 'c7d14f30bf9f8478016fe45626afeaa13c72']
    return [x[i] * y[i] for i in range(k)]
def cmul_dedddbbd(x):
    return [x[i] * 4 for i in range(k)]
def mul_b45cc04b(x):
    # kek
    y = [1, 2, 3, 5, 1, 5, 4, 3, 2, 3, 2, 2, 3, 4, 4, 4, 1, 5, 2, 1, 1, 5, 2, 6, 2, 2, 6, 1, 4, 4, 6, 3, 5, 2, 1, 5]
    return [x[i] * y[i] for i in range(k)]
def xor_5c4520e3(x):
    # the flag is flag{jk}
    y = [9842709541, 2114875504, 5718422693, 8408959320, 8700378510, 4429097037, 2648953483, 3700970199, 715392830, 4095277548, 3257678606, 204969317, 9739666596, 5239476653, 4480479831, 571239924, 4144098490, 7264762816, 66418204, 1722472561, 9008960772, 9365009273, 3074553654, 420237071, 2692533431, 5157809169, 4305840857, 2677742821, 7419298516, 3909183406, 5578262236, 5549888484, 1777143556, 7616479281, 4214024638, 9900125920]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_cd87c4de(x):
    # just reverse it
    return x[4:] + x[:4]
def chxor_ad45b413(x):
    # the best
    y = [ord(p) for p in 'd12e0c355d80d8ee164cea31a7b0edfbe99d']
    return [x[i] ^ y[i] for i in range(k)]
def csub_a55a8f74(x):
    # lmaooo
    return [x[i] - 222067326 for i in range(k)]
def chmul_a0fda47c(x):
    # mucho encrypto
    y = [ord(p) for p in '367a2f189b407c3d3e76a1b3e791c957999f']
    return [x[i] * y[i] for i in range(k)]
def sub_ca91f11f(x):
    y = [218247945, 3049370032, 3866403836, 5528464585, 736717010, 4244785801, 785098269, 2586966468, 6254630536, 2906663094, 6175393590, 1186293875, 2275628681, 1170112384, 809991459, 832513091, 5082060807, 1866759259, 9274201649, 1513870478, 8852311949, 9247919775, 3858575037, 7749039453, 980106309, 7580573299, 3366687000, 2547113238, 4596361064, 4771048795, 9824184639, 2421430209, 2967278098, 8643215665, 6693995888, 9621410903]
    return [x[i] - y[i] for i in range(k)]
def deck_aa73e4ec(x):
    return x[20:28] + x[20:20] + x[:20] + x[28:]
def shuffle_29c0a60f(x):
    # lmaooo
    return [x[p] for p in [19, 28, 14, 22, 29, 6, 11, 3, 5, 8, 25, 15, 13, 33, 16, 10, 2, 34, 7, 20, 30, 26, 17, 27, 35, 4, 9, 23, 24, 0, 32, 21, 31, 18, 1, 12]]
def cxor_4cfe1de0(x):
    return [x[i] ^ 9073294868 for i in range(k)]
def sub_7ca185a5(x):
    # mucho encrypto
    y = [4629719786, 5425406055, 5791680052, 3230356638, 7568860556, 5294268974, 371814550, 9057029091, 2502768993, 8738106141, 3062699126, 8299855802, 2161627735, 3073302252, 3805126389, 2010919039, 6540396495, 2963950236, 1337377284, 8591605185, 2887191985, 3746477598, 4291960288, 3853060940, 8323347538, 5236012360, 4601126723, 1262217451, 4442192359, 6277987086, 9794616808, 2650592861, 4435470091, 6956963175, 6379173500, 2155601884]
    return [x[i] - y[i] for i in range(k)]
def csub_5e8b3577(x):
    return [x[i] - 7701588662 for i in range(k)]
def cmul_26f5ab98(x):
    return [x[i] * 9 for i in range(k)]
def chxor_ce130299(x):
    y = [ord(p) for p in 'a0595c485ba51432cb9b0c6bb1acffc0dc4d']
    return [x[i] ^ y[i] for i in range(k)]
def sub_40d48993(x):
    y = [5732287850, 5355582223, 9025262047, 8575228005, 2764647773, 7653389600, 1952207084, 1078363599, 2042814112, 7991747947, 604529537, 133083254, 9481488344, 4076981813, 112069703, 8111967051, 4080845422, 5081932481, 561315592, 9540877864, 4017059922, 1285743930, 4802642162, 5114737340, 974442457, 2160685839, 3887421108, 1067971860, 1371823273, 9971269600, 8014550180, 8481447960, 5318029499, 624483241, 7928397986, 2763176014]
    return [x[i] - y[i] for i in range(k)]
def sub_d07a778e(x):
    y = [3764771276, 4640816091, 5628029332, 2868655190, 885775530, 2528480792, 9490490688, 8549836602, 6586986096, 7102901829, 8965341970, 7822268630, 2753044108, 2011453564, 8608737019, 8176840037, 1566223013, 3831184437, 2493477526, 8048919844, 4255368780, 5681747789, 3617155277, 1615039878, 6085799015, 9890528888, 622175660, 7305616599, 846711955, 2177810499, 4988372524, 2274454743, 6111229286, 3557893970, 7519170582, 650023174]
    return [x[i] - y[i] for i in range(k)]
def chmul_3d9011bc(x):
    # shiet?
    y = [ord(p) for p in '0a58f16c29ecacb41b53b8afc8320a1a973a']
    return [x[i] * y[i] for i in range(k)]
def digsub_125edb05(x):
    return [int(str(n)[:1] + ''.join(['2', '0', '9', '4', '8', '7', '1', '3', '6', '5'][int(p)] for p in str(n)[1:])) for n in x]
def digsub_1feeafe7(x):
    return [int(str(n)[:1] + ''.join(['4', '3', '5', '8', '0', '1', '2', '7', '6', '9'][int(p)] for p in str(n)[1:])) for n in x]
def chunk_faeac0c7(x):
    # kek
    return x[0:] + x[:0]
def chsub_8a044489(x):
    # encryption
    y = [ord(p) for p in 'a7ae7d25431c47b4eb28eedec688f247599b']
    return [x[i] - y[i] for i in range(k)]
def digsub_e1f5dc03(x):
    return [int(str(n)[:1] + ''.join(['6', '4', '8', '2', '0', '5', '3', '9', '7', '1'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_a32f41a3(x):
    y = [ord(p) for p in '59dc658083c1d73b2a23e5c78b50b5807856']
    return [x[i] * y[i] for i in range(k)]
def mul_c4188e74(x):
    y = [2, 4, 4, 3, 1, 4, 2, 5, 5, 5, 2, 3, 2, 5, 6, 1, 4, 4, 6, 5, 5, 1, 2, 1, 3, 6, 2, 3, 3, 2, 6, 5, 4, 3, 5, 4]
    return [x[i] * y[i] for i in range(k)]
def xor_4644c8d4(x):
    # lel
    y = [4446070998, 679276671, 3539605812, 7785438938, 8988344718, 104702517, 5129981883, 8241740180, 725526149, 903293068, 6269765271, 4167727533, 9000859539, 8408618692, 3549152497, 1238274241, 5402268596, 6364743953, 8777975608, 92101945, 9585882082, 7613024768, 2468009198, 3760879799, 2574999655, 387850524, 2958454604, 9450185225, 3667985494, 7074367073, 8783446559, 6221371531, 982127997, 2543589419, 3693020147, 3589707190]
    return [x[i] ^ y[i] for i in range(k)]
def xor_b2f63512(x):
    # the flag is flag{jk}
    y = [9792795755, 4297365214, 5787581016, 5768176898, 9801152482, 904848831, 5276012565, 3373054404, 4314211426, 112796454, 3089779112, 7889924524, 4681046099, 4021093491, 8375721259, 1800731348, 9381424141, 4529862545, 7058871684, 4393337211, 2459922429, 7075880860, 5579656258, 5066028623, 1832793413, 712343822, 298080494, 5099050377, 9063147125, 2745482171, 8979745385, 337985415, 4012613626, 1247125628, 2849685075, 4441550618]
    return [x[i] ^ y[i] for i in range(k)]
def deck_635ff09e(x):
    # mucho encrypto
    return x[19:33] + x[16:19] + x[:16] + x[33:]
def chadd_1353d1ce(x):
    y = [ord(p) for p in '9455aa35efa9b9fdfda55c871550cb89fa25']
    return [x[i] + y[i] for i in range(k)]
def digsub_7a739dc2(x):
    # lmaooo
    return [int(str(n)[:1] + ''.join(['0', '1', '5', '3', '2', '6', '8', '7', '9', '4'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_b5dc4245(x):
    # the best
    return [x[i] * 9 for i in range(k)]
def cmul_423d2433(x):
    # mucho encrypto
    return [x[i] * 9 for i in range(k)]
def deck_7b7ab064(x):
    return x[:2] + x[23:] + x[5:23] + x[2:5]
def chmul_d5ba6298(x):
    y = [ord(p) for p in '590d38ae7f4da2f4278c864db23cd2c42513']
    return [x[i] * y[i] for i in range(k)]
def xor_fddd23ae(x):
    # the best
    y = [561434149, 7286098872, 6310797129, 4961201516, 606376127, 7816771943, 721085410, 8236353102, 9573373446, 5068942423, 2296300957, 1910813490, 32406846, 7189251336, 8741492639, 6810599017, 386181866, 6357789416, 6135143367, 472048605, 3515616084, 6043031391, 3663446051, 4438967416, 9307744449, 6358927299, 8509893045, 3584939854, 8220249587, 6516164249, 4499791440, 7785342255, 9484260864, 7172069628, 4291456081, 8826494288]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_e6768cff(x):
    return [int(str(n)[:1] + ''.join(['7', '1', '4', '2', '8', '5', '6', '0', '9', '3'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_c507521b(x):
    return [x[p] for p in [13, 6, 21, 2, 15, 26, 19, 0, 4, 20, 5, 14, 28, 12, 8, 35, 18, 27, 25, 32, 9, 11, 3, 1, 30, 34, 29, 23, 16, 24, 17, 22, 31, 7, 10, 33]]
def chadd_3e7164c9(x):
    y = [ord(p) for p in '605d121f9eec2df45ca46419c585f1fbddc2']
    return [x[i] + y[i] for i in range(k)]
def chxor_e93460f8(x):
    y = [ord(p) for p in '6886c4235dde6ccc358d8444f7a9d130283e']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_294f2792(x):
    # encryption
    return [x[i] + 5691332780 for i in range(k)]
def sub_94808741(x):
    y = [9032429436, 5896256517, 263772914, 9922094820, 6329553307, 3215691955, 4186288462, 9477043563, 6648268127, 215651998, 8144565423, 8582171257, 2515407387, 2436818434, 3715787761, 8231355571, 75137351, 8060162414, 4479750732, 4224306279, 190362412, 6308446383, 7119389292, 5099322961, 6162739698, 3420522939, 4611162556, 6173430477, 192391625, 1017661688, 7271058547, 3436157290, 8917684702, 3714816280, 8923402268, 6098721507]
    return [x[i] - y[i] for i in range(k)]
def chadd_d6631ab3(x):
    # just reverse it
    y = [ord(p) for p in '7190f93c6f32c5555647fedfc844492da0d2']
    return [x[i] + y[i] for i in range(k)]
def chmul_d3cbaa99(x):
    # lmaooo
    y = [ord(p) for p in '0c2d2256086fad5b457891fc9f1a64a9af7e']
    return [x[i] * y[i] for i in range(k)]
def chmul_da4f7a7d(x):
    y = [ord(p) for p in 'c8065ff37433b352a5f846a453a994822921']
    return [x[i] * y[i] for i in range(k)]
def chunk_90824d65(x):
    return x[13:] + x[:13]
def cadd_b70e8959(x):
    return [x[i] + 1661160219 for i in range(k)]
def chadd_685835f8(x):
    y = [ord(p) for p in '82109f114d1f9ba3473a64e5a784c2e9cac7']
    return [x[i] + y[i] for i in range(k)]
def xor_b1dcccdc(x):
    y = [6618287867, 7473694235, 412156061, 3340613173, 9144896430, 9269457833, 7393038554, 4708681730, 2392857967, 6814574566, 9507184801, 8124219753, 746221971, 4474322224, 2484088793, 6764156084, 3052728313, 5091847633, 368129836, 9391935335, 6090473295, 3799648337, 128530788, 3727201850, 4630236227, 654862083, 3193702762, 5414901526, 8990689446, 5684635497, 8560018941, 9679404206, 6598652212, 3896247024, 3497542349, 7626205698]
    return [x[i] ^ y[i] for i in range(k)]
def add_fc581b51(x):
    y = [4992178497, 5632810277, 1820911668, 2396158065, 8222508634, 2370727571, 8320273338, 5691742186, 3304860010, 609344480, 5219068548, 3103886307, 4764151578, 7567860733, 2676972602, 4217917365, 5199872309, 6420761103, 706750068, 6759959165, 3761859152, 7957037725, 1754233480, 8511233153, 1010071895, 2375755162, 8778916025, 1693214888, 806653869, 3717804444, 3647176022, 2523548217, 2277942922, 3835989404, 2612169528, 4236785207]
    return [x[i] + y[i] for i in range(k)]
def add_f2a6c048(x):
    # shiet?
    y = [6228395677, 4539614827, 999523763, 3039760641, 5077478490, 2490418235, 6981823085, 8386184096, 2207056954, 6209464404, 6759344821, 5665050984, 2151401263, 3057592331, 9251776428, 5099192803, 1183472156, 4860818123, 3841276286, 2723770207, 4614402631, 8000748049, 8501795034, 7475228502, 2349590883, 9514112468, 7758576706, 8001905968, 2670643402, 8665541669, 9908024436, 4420570378, 3161754448, 6440387730, 8512830766, 202019116]
    return [x[i] + y[i] for i in range(k)]
def chadd_dba6c166(x):
    # mucho encrypto
    y = [ord(p) for p in '465f9617b337c0bd922322ff182954c48e37']
    return [x[i] + y[i] for i in range(k)]
def sub_9f4055fc(x):
    # lel
    y = [6453680276, 5320826430, 5445479838, 3700808729, 4618685206, 1132528190, 240164522, 516277766, 9650421130, 4848994724, 624108655, 3204308443, 5840456466, 8599762603, 7895225513, 3880514979, 1534655827, 8398352093, 9698778116, 8316887160, 9406103472, 2615491558, 7121945273, 7936485212, 5544369344, 7623576624, 1114304558, 9676811878, 1021337725, 1966844168, 4720995147, 173348391, 80000348, 4909374105, 1485918698, 7275540014]
    return [x[i] - y[i] for i in range(k)]
def chadd_f73b3974(x):
    # shiet?
    y = [ord(p) for p in 'f5eaa4d72190bbefcd585248481b5bb3cd26']
    return [x[i] + y[i] for i in range(k)]
def digsub_dddb1e6b(x):
    return [int(str(n)[:1] + ''.join(['6', '8', '3', '9', '5', '0', '7', '4', '1', '2'][int(p)] for p in str(n)[1:])) for n in x]
def chadd_d2932b24(x):
    # encryption
    y = [ord(p) for p in 'e9c6c1eb80a2801f1fdaa2a5c728e0efedb8']
    return [x[i] + y[i] for i in range(k)]
def deck_fd221dd9(x):
    # rekt
    return x[23:28] + x[28:] + x[15:23] + x[:15]
def mul_f80a89cf(x):
    y = [2, 4, 3, 2, 7, 1, 6, 7, 7, 5, 3, 8, 7, 4, 2, 2, 4, 5, 4, 4, 7, 6, 7, 1, 1, 5, 1, 4, 7, 5, 8, 5, 1, 8, 8, 7]
    return [x[i] * y[i] for i in range(k)]
def csub_959f7557(x):
    # kek
    return [x[i] - 689197985 for i in range(k)]
def sub_aa1109df(x):
    # kek
    y = [1622440695, 8141048141, 5670585382, 4181563136, 4131410294, 1213352419, 3319238556, 7911693301, 5450154951, 6516015261, 8642157057, 9546889200, 7940956801, 7248083860, 4267325550, 4533045635, 1512469902, 3115867420, 1092071102, 5319073474, 4409034052, 3420824996, 8041144759, 229462257, 1922362235, 6588331106, 4569660901, 7488592826, 3872428907, 8228167487, 7006195059, 7528225641, 6816478639, 1281557804, 6172255481, 3146468863]
    return [x[i] - y[i] for i in range(k)]
def shuffle_2693d526(x):
    # evil
    return [x[p] for p in [17, 11, 21, 31, 16, 33, 25, 3, 27, 12, 35, 18, 6, 29, 5, 24, 20, 32, 30, 23, 13, 10, 0, 22, 28, 34, 7, 15, 26, 1, 19, 8, 2, 9, 4, 14]]
def digsub_cca1638e(x):
    # lel
    return [int(str(n)[:1] + ''.join(['1', '6', '8', '0', '4', '7', '3', '5', '9', '2'][int(p)] for p in str(n)[1:])) for n in x]
def chsub_d228accf(x):
    y = [ord(p) for p in '1fe184b8fac7889011c3f910718a4a30b270']
    return [x[i] - y[i] for i in range(k)]
def xor_fccb27f6(x):
    y = [9983907333, 4620912699, 1590939859, 3948675091, 9282216432, 4083214759, 1552946495, 2306497104, 7197206779, 8804464050, 6737836983, 3164058091, 958182711, 4117454871, 1710541419, 1287051871, 4159488037, 7249494438, 6096967384, 1233097223, 1286561510, 5771300934, 5028585062, 1465050125, 8572340321, 6283253856, 7956491741, 2616942881, 5197237398, 1323232509, 8251651262, 6870732336, 4524679160, 4128727086, 5784950388, 2807870074]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_bba6fa0a(x):
    # lel
    return [x[i] ^ 3123100522 for i in range(k)]
def digsub_a708386c(x):
    # lmaooo
    return [int(str(n)[:1] + ''.join(['8', '4', '0', '2', '3', '6', '9', '5', '7', '1'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_ac6dd478(x):
    # rekt
    return [x[p] for p in [9, 12, 29, 27, 2, 26, 34, 15, 14, 24, 33, 10, 20, 5, 11, 16, 31, 13, 32, 19, 18, 6, 4, 21, 30, 17, 7, 22, 23, 25, 0, 8, 3, 35, 1, 28]]
def mul_709d81e2(x):
    # the flag is flag{jk}
    y = [1, 9, 8, 4, 6, 8, 9, 2, 9, 2, 6, 3, 2, 7, 8, 5, 9, 7, 6, 4, 6, 8, 7, 3, 4, 8, 8, 3, 4, 3, 9, 4, 2, 3, 6, 7]
    return [x[i] * y[i] for i in range(k)]
def mul_6ed04b93(x):
    # kek
    y = [3, 4, 5, 1, 6, 9, 8, 8, 8, 3, 2, 5, 2, 5, 1, 4, 3, 1, 4, 4, 7, 5, 2, 2, 4, 6, 7, 5, 4, 2, 1, 2, 8, 4, 1, 5]
    return [x[i] * y[i] for i in range(k)]
def cmul_40bb0e2b(x):
    return [x[i] * 8 for i in range(k)]
def cadd_d4d5a797(x):
    # shiet?
    return [x[i] + 4424435936 for i in range(k)]
def cmul_49a44f99(x):
    return [x[i] * 6 for i in range(k)]
def add_64420416(x):
    y = [5196657079, 6236020215, 7165510340, 2869055109, 4312597729, 6521919547, 4111973048, 5864673042, 9967069472, 9187908241, 3773131153, 5113578102, 1464887358, 6869927045, 8791364347, 8891069833, 315022878, 1272475555, 5876943082, 9706834975, 1467105097, 1673584743, 1497144569, 7616037042, 1210399580, 9338020765, 7781226327, 7076158001, 5186305960, 8135291815, 1505065412, 470184834, 5686703728, 9419339001, 4830683363, 2924369847]
    return [x[i] + y[i] for i in range(k)]
def add_e6b26923(x):
    y = [5164339299, 9108631631, 7266510375, 2568236433, 5563666541, 8010380512, 1721129419, 3650017807, 5793484697, 6619401698, 7133046693, 4322016400, 9207517666, 317776978, 2139860817, 6373805365, 3239163619, 3088656411, 5850934318, 1328428130, 1538839781, 9373779614, 9074727656, 486668602, 5619168982, 5091726175, 190144337, 6686765321, 8971160786, 1621637745, 5807248541, 8214173563, 7908940477, 5675067052, 9200351790, 4434080530]
    return [x[i] + y[i] for i in range(k)]
def shuffle_5da24876(x):
    return [x[p] for p in [3, 35, 1, 23, 21, 28, 8, 0, 25, 9, 20, 22, 14, 32, 26, 11, 7, 33, 29, 19, 31, 4, 30, 13, 6, 17, 27, 24, 12, 18, 16, 34, 15, 10, 5, 2]]
def chmul_b537d51c(x):
    # shiet?
    y = [ord(p) for p in '6419b4e9cba6d5114bb5f789c03051919ee6']
    return [x[i] * y[i] for i in range(k)]
def mul_c0b36007(x):
    # lmaooo
    y = [7, 3, 4, 5, 5, 8, 5, 3, 6, 6, 3, 8, 7, 9, 9, 2, 6, 7, 8, 5, 5, 3, 8, 9, 9, 4, 3, 2, 8, 8, 9, 2, 3, 3, 2, 9]
    return [x[i] * y[i] for i in range(k)]
def cmul_ca02e498(x):
    # lmaooo
    return [x[i] * 7 for i in range(k)]
def xor_03c6a015(x):
    y = [3150452543, 2445825574, 2600120574, 7304186996, 8077537294, 7134845578, 3226809252, 4953337220, 8410245708, 2018824701, 2278249602, 4082556855, 5580453838, 8829475409, 1731804183, 6023696809, 2170584880, 4625908619, 1937891042, 5665899007, 1101226871, 8208109946, 5963620335, 5334517779, 3163074112, 2544023661, 6786652307, 5417286515, 4832752156, 352485494, 3096722335, 5895060116, 1906397883, 8970927564, 2497652916, 6173964596]
    return [x[i] ^ y[i] for i in range(k)]
def cxor_52629279(x):
    return [x[i] ^ 8070885380 for i in range(k)]
def cxor_822e6d4f(x):
    return [x[i] ^ 6889196600 for i in range(k)]
def xor_df31e322(x):
    y = [2978557855, 9031672714, 7133569331, 9103174417, 580104431, 9245330404, 8541466028, 326476598, 6588697832, 4271823386, 5432244095, 8689013946, 4226520102, 1129397927, 7701591431, 4934500581, 7675140015, 3705699315, 5344459259, 9368698938, 2879792189, 7934013294, 558407049, 9746236059, 1785948290, 8086213680, 5065278493, 7003983463, 4371666125, 4062397631, 700955631, 8997179697, 9909464779, 3522008312, 2234951462, 2803745426]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_3bf8b0c8(x):
    # rekt
    y = [ord(p) for p in 'ceb7d6614ee7fc18e40800e656d77e72773b']
    return [x[i] - y[i] for i in range(k)]
def chsub_112adf2e(x):
    y = [ord(p) for p in '590a29bc5a687e00cee0ce84dd325ab1fabd']
    return [x[i] - y[i] for i in range(k)]
def chunk_518ff916(x):
    return x[18:] + x[:18]
def xor_5707171e(x):
    # the best
    y = [2780108622, 3653494441, 9877607357, 547187420, 8375748455, 3133586534, 6797326645, 4298665272, 5974165270, 6538580634, 2147702440, 2728838837, 2138008864, 5410862686, 7494331035, 5444851738, 359122870, 5156875177, 2189243864, 8212436136, 5174943427, 1532549496, 7484539965, 996658462, 6109140919, 9706663034, 9037781602, 3154159750, 8164853205, 1077966516, 2190728959, 9634466803, 9622226810, 9351996646, 3472668347, 3939179894]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_8356e7c8(x):
    return x[4:] + x[:4]
def cadd_46c0a285(x):
    return [x[i] + 2039421403 for i in range(k)]
def sub_2cdb195c(x):
    y = [1507947848, 3386898943, 7578053010, 6093423572, 6904658957, 3959899837, 6280386209, 7783914159, 3275981872, 9371901684, 1540400324, 8359348072, 1407453434, 3180822363, 2044748431, 1986944386, 4109667300, 3182955817, 7709220897, 3108217415, 4304488415, 1708919595, 4560742210, 5350286736, 8721171259, 5595766293, 1232763703, 4187949199, 9404910127, 2761758684, 3029464405, 3382268652, 8546145609, 7013531693, 3719960504, 8825110943]
    return [x[i] - y[i] for i in range(k)]
def xor_6cabd79d(x):
    # just reverse it
    y = [1045235987, 8022600264, 8368115097, 8482562952, 9226085834, 5443637747, 3704283535, 278128834, 676173802, 7954194921, 7453682499, 5790353625, 1828654605, 4192815526, 6632921042, 519028138, 629706639, 9597998384, 4920691543, 8598699387, 2348724785, 2630658262, 578579413, 7405328037, 1759922303, 9802824747, 7864336122, 8699673916, 5921181988, 4168547294, 9023674266, 7251420808, 8477451586, 86206678, 4580681412, 5061575042]
    return [x[i] ^ y[i] for i in range(k)]
def deck_5d4c6f00(x):
    return x[22:] + x[3:6] + x[6:22] + x[:3]
def cxor_e7839ec0(x):
    return [x[i] ^ 5824532050 for i in range(k)]
def cmul_f0413f14(x):
    return [x[i] * 10 for i in range(k)]
def chsub_0b2321c1(x):
    y = [ord(p) for p in '4f5cd90f7e10406cf6f50a8a8c628ca69ecf']
    return [x[i] - y[i] for i in range(k)]
def cxor_41f67d77(x):
    return [x[i] ^ 9139463023 for i in range(k)]
def mul_e8a5e4e0(x):
    # rekt
    y = [8, 6, 9, 3, 5, 5, 9, 2, 6, 7, 9, 1, 6, 2, 2, 3, 7, 2, 5, 4, 9, 1, 3, 2, 2, 4, 6, 8, 5, 3, 7, 9, 6, 1, 8, 1]
    return [x[i] * y[i] for i in range(k)]
def add_67499497(x):
    # evil
    y = [2063382309, 3308851662, 233917543, 3453916859, 3937705664, 1279722007, 1003780260, 6629368533, 2067393918, 489466873, 2070103720, 4216407452, 6809924930, 8947271302, 9130115995, 976935112, 4995058581, 4497083622, 6859899967, 7889152952, 9968197670, 3307989607, 71152975, 1896820577, 269807810, 1982802086, 7470885591, 1837481342, 9548183674, 2307670934, 6064246090, 3434262217, 8045510749, 1894955702, 2011135761, 1005945707]
    return [x[i] + y[i] for i in range(k)]
def add_1f81f37b(x):
    # evil
    y = [3025498409, 7276827600, 2041932041, 8076425750, 1766989623, 3701132115, 3317482893, 1252749336, 8000089058, 1415217980, 3149817431, 3173044766, 1596784083, 8317413109, 8110858411, 479345328, 3118572762, 5629962863, 9679021462, 1957055096, 2209442324, 7088188303, 6263538504, 660683423, 851649384, 2038867943, 5947500147, 2197278390, 9318883596, 2934892227, 7593873142, 9352582210, 3018731998, 8965285476, 8296090344, 7472692494]
    return [x[i] + y[i] for i in range(k)]
def cxor_504085b7(x):
    return [x[i] ^ 5453639980 for i in range(k)]
def csub_7e745ec0(x):
    # shiet?
    return [x[i] - 5512077342 for i in range(k)]
def cxor_2f7b49f0(x):
    return [x[i] ^ 6371375691 for i in range(k)]
def cadd_64c6e595(x):
    return [x[i] + 7198588604 for i in range(k)]
def sub_f1320d35(x):
    y = [1330580205, 6826664735, 1605366550, 706564639, 3214222302, 4539281244, 8809406914, 3977728907, 1206791194, 1294380459, 4208621138, 8229327672, 347203550, 8738796261, 7527784941, 1304883291, 3292882053, 5573559854, 1221693563, 2501402507, 8481455216, 1007748393, 1221285267, 8357874012, 5349509266, 648015400, 1658631698, 5072952417, 3717330547, 6621958909, 928494640, 3615599492, 7832766420, 2141261660, 1958551977, 5387559701]
    return [x[i] - y[i] for i in range(k)]
def sub_f21c7d69(x):
    # so good
    y = [6527954519, 93324829, 1258796931, 7394430349, 5159823257, 8668901280, 6938059707, 7979651932, 5313517775, 6621995312, 790732163, 5149533418, 8528643450, 7842761315, 180917918, 8701772846, 6442120, 1042013331, 6229011301, 1239843223, 9413838392, 7297681741, 4240893700, 6743038346, 5440382420, 1151969320, 739514739, 5413176948, 7613197919, 5464595928, 2916328640, 7177400427, 3219705279, 5903892397, 4373660192, 2384903755]
    return [x[i] - y[i] for i in range(k)]
def cadd_81834239(x):
    return [x[i] + 5737460736 for i in range(k)]
def chmul_7eb45a9e(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '7abba037d36cce68149ed0fe3d86ee5af180']
    return [x[i] * y[i] for i in range(k)]
def cmul_6ae52f53(x):
    # lel
    return [x[i] * 9 for i in range(k)]
def cxor_37164c6f(x):
    return [x[i] ^ 2765461633 for i in range(k)]
def digsub_ccbd2ea6(x):
    # lmaooo
    return [int(str(n)[:1] + ''.join(['9', '6', '3', '1', '8', '0', '2', '5', '7', '4'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_4e8ad324(x):
    # rekt
    return [x[p] for p in [11, 19, 4, 32, 27, 21, 16, 18, 31, 3, 7, 24, 9, 8, 34, 1, 10, 14, 5, 2, 0, 28, 30, 35, 22, 6, 25, 15, 23, 13, 20, 29, 17, 33, 12, 26]]
def add_882b6a0b(x):
    y = [4713508141, 1654497330, 7352449059, 2412983680, 7247217577, 3958798059, 2057546432, 3736517284, 3983481871, 8059535401, 6302404859, 3291375702, 4956360776, 9014623407, 21067009, 2364501888, 5394457709, 8912579449, 4483283860, 2838154105, 5783328722, 925786881, 2045985981, 4694850404, 5273859622, 2087094586, 3902242528, 448731269, 8610105781, 8065111928, 1422570938, 5572206934, 5369351317, 7362281062, 9675310671, 8749020449]
    return [x[i] + y[i] for i in range(k)]
def cxor_0aedee08(x):
    # lmaooo
    return [x[i] ^ 4240397262 for i in range(k)]
def cxor_ae2b4026(x):
    return [x[i] ^ 9142413522 for i in range(k)]
def digsub_78ba6bc8(x):
    return [int(str(n)[:1] + ''.join(['3', '0', '4', '2', '9', '6', '7', '1', '8', '5'][int(p)] for p in str(n)[1:])) for n in x]
def chunk_205e30c0(x):
    return x[5:] + x[:5]
def digsub_f642c787(x):
    return [int(str(n)[:1] + ''.join(['3', '0', '2', '8', '6', '4', '9', '7', '1', '5'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_c76db8f9(x):
    return [x[i] * 7 for i in range(k)]
def chxor_de63f975(x):
    y = [ord(p) for p in 'c74e5116273f1ab02acebe1a7725d2d513b7']
    return [x[i] ^ y[i] for i in range(k)]
def add_6792b1ea(x):
    # so good
    y = [3006743840, 5158779056, 3821447186, 7818320389, 393020983, 1932824008, 2430239272, 3892215272, 2754560474, 7907988806, 6490144155, 1423710032, 2811360066, 6975567722, 9416260494, 1201056515, 6174611115, 7673056855, 1166176140, 3999935066, 6037732751, 7511266715, 7108412387, 6553924246, 8075473344, 284656211, 4129200177, 7748530135, 3940525758, 2642892494, 375768890, 7117097121, 3022120376, 7207372270, 6927114435, 1582139283]
    return [x[i] + y[i] for i in range(k)]
def shuffle_aabdc81c(x):
    # evil
    return [x[p] for p in [35, 7, 0, 5, 14, 30, 13, 8, 6, 20, 16, 17, 28, 33, 11, 22, 2, 32, 12, 31, 19, 29, 34, 23, 27, 10, 3, 9, 25, 4, 24, 18, 1, 26, 21, 15]]
def deck_f9875611(x):
    # lel
    return x[18:30] + x[30:36] + x[36:] + x[:18]
def add_1aa75a60(x):
    # the flag is flag{jk}
    y = [7352329066, 1216951416, 6925283198, 2177571581, 204908212, 5957029874, 3461309582, 2563027812, 9861305456, 7788128936, 7067564914, 5806856551, 7480025659, 9052860551, 6914576327, 1471953796, 9752839807, 261166459, 6477700714, 4514554965, 2057180889, 1092375555, 3821544744, 9122112257, 434396182, 1676077520, 2659266000, 4573505978, 9340405749, 1912161084, 208094378, 3418438777, 3413782190, 5143217207, 136006633, 6674603210]
    return [x[i] + y[i] for i in range(k)]
def cmul_cf6813e9(x):
    # the best
    return [x[i] * 10 for i in range(k)]
def deck_719299e2(x):
    # rekt
    return x[:0] + x[32:] + x[13:32] + x[0:13]
def digsub_e717a1dc(x):
    return [int(str(n)[:1] + ''.join(['7', '1', '2', '6', '3', '8', '9', '0', '4', '5'][int(p)] for p in str(n)[1:])) for n in x]
def mul_ebff36e1(x):
    # lmaooo
    y = [1, 3, 1, 1, 4, 1, 2, 4, 4, 5, 5, 2, 2, 3, 1, 1, 3, 5, 4, 3, 4, 3, 4, 1, 1, 2, 2, 4, 1, 4, 4, 2, 1, 2, 2, 4]
    return [x[i] * y[i] for i in range(k)]
def add_9349052b(x):
    # shiet?
    y = [2469035832, 3776225125, 6316578470, 1728925526, 6930343716, 4444614234, 9566258693, 9539878921, 5134226412, 7442470814, 1839805222, 9178716821, 1953925382, 4833363981, 9319447725, 8751388287, 8209367510, 6691709108, 9769660190, 6372025919, 3329184048, 3862893385, 4372379052, 8103764695, 9590148510, 3671896505, 3949572988, 2767125038, 2533494182, 784062484, 516749245, 1463452743, 5004605978, 5463299551, 6279284059, 1869615188]
    return [x[i] + y[i] for i in range(k)]
def sub_541963fb(x):
    # the flag is flag{jk}
    y = [4050029106, 3778498478, 2573628744, 6011654964, 7240828368, 1871114949, 6893538906, 13294983, 5427094373, 3098604811, 8257000344, 5886497846, 6425289011, 8416616564, 894965882, 1591339649, 4063179638, 6140852161, 9561794591, 8874630679, 2356822478, 8767841299, 2787770381, 5142479228, 740381604, 7506751546, 786162268, 7059935799, 1917803090, 6156359231, 2266891469, 2893766872, 407959920, 4420735841, 9503873201, 7457521361]
    return [x[i] - y[i] for i in range(k)]
def sub_8c65785f(x):
    y = [7974506974, 4554774537, 7373570841, 4739322863, 4532445249, 4072797794, 6109523408, 9668196805, 4477422016, 3764874340, 872201431, 9996351516, 7713228476, 3809708250, 6630930277, 8360861982, 9753462156, 9280466202, 8949516097, 1017842277, 2844767591, 9487496553, 7889848565, 3928608244, 2902783193, 4478194262, 6500020435, 9653357941, 2308351124, 5206856706, 3972052059, 43304179, 9762678262, 287119617, 7488428620, 2177870020]
    return [x[i] - y[i] for i in range(k)]
def add_36fb4d7d(x):
    # kek
    y = [8133577760, 3218905634, 4870459186, 1270692874, 2635745548, 1871461053, 2005507859, 6166666225, 6114454752, 1573891699, 1364638123, 6682659616, 924552303, 5120220466, 8436580260, 392227358, 7637212385, 2846307658, 6886359744, 6441154097, 1351800595, 6977203377, 2888437355, 6876080278, 5227639905, 1675884413, 2186829517, 7389864593, 950929114, 4435203584, 1789955107, 2512115395, 8808154424, 9917600042, 7011875660, 1693500424]
    return [x[i] + y[i] for i in range(k)]
def sub_12d5d25f(x):
    y = [3095954457, 4706272582, 7236306002, 3936816019, 4786149214, 2622667174, 9957618706, 322161148, 9510010627, 4976774841, 195967766, 2181559018, 6882491546, 5223898435, 2972292277, 7678055971, 4452796966, 2959250327, 5377372340, 2909961021, 6674424529, 7364186730, 127221800, 2327031280, 5469676695, 6868477586, 1398799923, 2666509864, 7451783448, 2966215315, 9677831116, 5008236146, 1167679278, 3694150721, 5727160759, 2584615187]
    return [x[i] - y[i] for i in range(k)]
def shuffle_496b2c86(x):
    # encryption
    return [x[p] for p in [1, 20, 3, 32, 4, 33, 0, 14, 13, 30, 31, 15, 25, 22, 11, 21, 2, 19, 10, 5, 6, 17, 16, 34, 28, 24, 7, 29, 23, 9, 35, 27, 12, 26, 8, 18]]
def xor_92938e20(x):
    # lmaooo
    y = [5475614750, 3286943407, 8053169193, 5193310839, 7776439963, 7977601317, 5696340671, 6003868878, 2069638208, 1860405054, 7630569617, 4483748141, 589585957, 6307407673, 8961241153, 1999317057, 1428872562, 8959134337, 4395815756, 8175714457, 4627750153, 1075317216, 8475075060, 6193702671, 5050431368, 9560698473, 2924527798, 6902445446, 8732244009, 8226096981, 3536103812, 1114007697, 1853550318, 6756336228, 625152864, 4812311779]
    return [x[i] ^ y[i] for i in range(k)]
def add_91babee9(x):
    y = [9206586368, 7665955212, 8131378200, 2182635636, 7518425982, 7726373939, 8487840130, 9732145857, 4231428369, 6904869837, 8103643570, 8170608421, 9689053788, 9784385371, 3447517903, 717703882, 520618904, 8925498336, 1943346774, 1170620098, 6463063051, 574054936, 3623049537, 9807955338, 1831260716, 7945029116, 5786436807, 765251232, 5255980309, 9008181337, 1483338781, 9963854210, 8735671726, 3129020401, 1048160583, 3055539362]
    return [x[i] + y[i] for i in range(k)]
def cadd_b8669446(x):
    return [x[i] + 2331849217 for i in range(k)]
def chsub_84b4ec96(x):
    y = [ord(p) for p in 'a570abf30e5eb12ac3d8f7596153c24aca7f']
    return [x[i] - y[i] for i in range(k)]
def xor_50156ac2(x):
    # rekt
    y = [8930915888, 3348364617, 6280112999, 4047482099, 6157851409, 8864819053, 7910791997, 2294168002, 4025880461, 3201150641, 5249934394, 748970493, 6387186450, 510777773, 2053522664, 9860392445, 1154441837, 9934552562, 8584258999, 4321826278, 1077661452, 8791563757, 2664438877, 3205483141, 9252019055, 1115972623, 1566040448, 6212277938, 206523676, 513868610, 7892345976, 1235757475, 9931401225, 1229883450, 4595499166, 8996597077]
    return [x[i] ^ y[i] for i in range(k)]
def csub_cdf29b6e(x):
    # shiet?
    return [x[i] - 6904804223 for i in range(k)]
def chadd_714abd5f(x):
    # the best
    y = [ord(p) for p in '05ff33982386da90c26ac79ff1a786708018']
    return [x[i] + y[i] for i in range(k)]
def cxor_41be00fc(x):
    # shiet?
    return [x[i] ^ 9506363535 for i in range(k)]
def digsub_915491ea(x):
    return [int(str(n)[:1] + ''.join(['8', '7', '3', '0', '9', '1', '6', '2', '4', '5'][int(p)] for p in str(n)[1:])) for n in x]
def add_1688c841(x):
    # rekt
    y = [7671734315, 2734692018, 8213875013, 3002538816, 7319700005, 4430754279, 9464522807, 2974248108, 4512209633, 9744096342, 66074981, 9732288055, 2141232599, 2748027405, 6601867013, 6207512528, 6347239271, 6331594203, 6177305321, 7023866639, 2208259302, 7734612812, 7197507238, 4433526749, 9912757817, 264004302, 7463439700, 5707789647, 5113964021, 5384452382, 7166672683, 8208002169, 1072088118, 8759226249, 5990591836, 7937611788]
    return [x[i] + y[i] for i in range(k)]
def chunk_757730c2(x):
    return x[20:] + x[:20]
def mul_7ec01a05(x):
    y = [2, 1, 3, 6, 5, 5, 3, 4, 1, 3, 6, 4, 5, 2, 4, 1, 3, 1, 6, 2, 6, 1, 6, 2, 2, 2, 1, 6, 1, 2, 5, 5, 6, 3, 6, 4]
    return [x[i] * y[i] for i in range(k)]
def chsub_0d419486(x):
    # evil
    y = [ord(p) for p in 'dffc73f456aea44551893855fb87e70cbc67']
    return [x[i] - y[i] for i in range(k)]
def xor_c3591520(x):
    # shiet?
    y = [5037728199, 7882428287, 8266783205, 4815853028, 3015219233, 5020288100, 3221624640, 4559622822, 9324214088, 7986171024, 9194184716, 6069107723, 1014450831, 9298562676, 2420895647, 8637605971, 2539492010, 1541674171, 5214167241, 414036991, 8213898082, 2716720684, 3524631961, 1312591072, 6942235037, 8640582075, 1576692753, 3661123647, 7273721971, 1927376446, 3584046328, 7741808938, 7284840098, 3846969904, 3012213532, 9350831287]
    return [x[i] ^ y[i] for i in range(k)]
def sub_eed83ea2(x):
    y = [5533637092, 7953256948, 7343489892, 6518507763, 5085224356, 6068140144, 2223283573, 7011892544, 2772086393, 7289448511, 3606190543, 8519923067, 9455087754, 6149069581, 7710982335, 9689276970, 5331854749, 7769734461, 4898096280, 5268877145, 8605147661, 5976006410, 6964491023, 7230022358, 9386010396, 8696002056, 7774355719, 4034217415, 5638256763, 7754356854, 4594701639, 2987213969, 5908436293, 9625285083, 5619564798, 6264201714]
    return [x[i] - y[i] for i in range(k)]
def add_7aa57e32(x):
    # the flag is flag{jk}
    y = [1674771946, 301468322, 2854103959, 3793122512, 8054499381, 354363616, 4870766387, 1833240471, 335022078, 4944048065, 4263939222, 838181673, 9790897418, 9821447833, 9219450396, 3839718773, 7174246935, 4028770993, 7698362812, 9542657699, 8793463509, 587405065, 6400515915, 8955946834, 4457870597, 6148931801, 1545686775, 681072871, 6367217528, 4818849349, 9406897645, 9971141780, 319406068, 3246458839, 7883126799, 2927000966]
    return [x[i] + y[i] for i in range(k)]
def cmul_9020ca8c(x):
    # mucho encrypto
    return [x[i] * 5 for i in range(k)]
def digsub_864e27e4(x):
    # lel
    return [int(str(n)[:1] + ''.join(['4', '2', '7', '3', '6', '9', '8', '1', '5', '0'][int(p)] for p in str(n)[1:])) for n in x]
def sub_0216c0df(x):
    y = [4222464156, 9371911740, 4153609751, 6525704747, 560111083, 2545765330, 9380163514, 7260767571, 2971695955, 8863295562, 6802258598, 4973677010, 4166850021, 5202524257, 9661951306, 1303308925, 9086978070, 4221787651, 1506711572, 2449553730, 7608221511, 5062584231, 13141180, 3556244066, 446583390, 6566619774, 4915778922, 9005938255, 3009777099, 4891527312, 414198885, 6568196239, 8855714327, 1260251155, 4986504060, 7036598395]
    return [x[i] - y[i] for i in range(k)]
def digsub_fcf8a8ee(x):
    return [int(str(n)[:1] + ''.join(['1', '9', '2', '6', '3', '8', '4', '0', '7', '5'][int(p)] for p in str(n)[1:])) for n in x]
def xor_b8937290(x):
    y = [2002358094, 7352750426, 9752344248, 7338007875, 7425811723, 2475228654, 5418516208, 3312261024, 11962724, 5593316416, 5365765406, 477640779, 3877261137, 7370434965, 1162520453, 4946523816, 359489654, 1226926580, 3720554154, 1287925529, 8999714523, 4453981311, 3661314159, 808579870, 4999842145, 2176076731, 3813515194, 315936952, 4174285200, 6735731354, 998882507, 4671069262, 4656381723, 5406981713, 4539142984, 7776951140]
    return [x[i] ^ y[i] for i in range(k)]
def digsub_ae82b4af(x):
    # encryption
    return [int(str(n)[:1] + ''.join(['5', '3', '2', '4', '9', '6', '7', '1', '8', '0'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_f462de4c(x):
    # kek
    y = [ord(p) for p in '872a0ac9677073cad1877e9089a7d08e8751']
    return [x[i] * y[i] for i in range(k)]
def deck_b9e3cf78(x):
    # the flag is flag{jk}
    return x[17:25] + x[6:17] + x[25:] + x[:6]
def xor_9e177199(x):
    y = [9277143292, 7514515694, 5674838355, 9089546577, 9805962516, 5897311721, 4453675937, 3337157535, 9900997323, 8573825916, 2076205341, 8647983448, 6833479199, 6877969345, 324343061, 2104041033, 8125146126, 3407221918, 3554721052, 4620978717, 8428617904, 453791315, 8267125406, 3503722204, 9912328436, 5395963685, 2454440604, 1258743452, 182087792, 1892901409, 3212327354, 3622045375, 1328165622, 9713910822, 1757329080, 5774383188]
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_27a913db(x):
    return [x[p] for p in [32, 9, 29, 33, 30, 7, 23, 11, 35, 6, 15, 18, 21, 28, 34, 16, 0, 22, 8, 31, 2, 19, 27, 14, 20, 24, 25, 5, 4, 13, 3, 1, 12, 26, 17, 10]]
def xor_df910360(x):
    y = [3006294683, 1286500618, 6307466780, 5279375276, 4081449782, 9608692453, 4667888418, 447558881, 7347721899, 8349046648, 5560608557, 1737407415, 1473588962, 6336233053, 18886245, 5538975450, 4750575964, 2456654102, 4494883651, 9198232137, 8762274114, 6428171451, 3210402010, 6058094965, 9850760368, 4766880926, 8742663461, 7383580301, 939154561, 5070110007, 8019148022, 5682546589, 2329066375, 8666687711, 2616816688, 7861528033]
    return [x[i] ^ y[i] for i in range(k)]
def cadd_3150b11b(x):
    return [x[i] + 3429003601 for i in range(k)]
def sub_08dcb465(x):
    # shiet?
    y = [2853943958, 9697536591, 7759748984, 3223556124, 7356090624, 1087105671, 6675328994, 4674028286, 3298839230, 6759614862, 5457852325, 714814886, 6540084750, 185126676, 1961031760, 7826381622, 1425434011, 1022019361, 6910465260, 8147339009, 7782208275, 1971409727, 205774275, 1461905807, 9302789213, 8426800366, 1393974147, 3466022050, 9259418654, 3908366537, 884485098, 445084018, 4763643158, 1748760906, 7781461027, 2030941834]
    return [x[i] - y[i] for i in range(k)]
def chunk_3c707853(x):
    # so good
    return x[5:] + x[:5]
def cadd_a4aaf480(x):
    return [x[i] + 2074567426 for i in range(k)]
def chmul_48477e80(x):
    y = [ord(p) for p in 'd89be06a6de6905d01926f3e7385888f99a0']
    return [x[i] * y[i] for i in range(k)]
def deck_96867dee(x):
    return x[35:] + x[0:24] + x[:0] + x[24:35]
def cxor_2e4819bf(x):
    return [x[i] ^ 771735855 for i in range(k)]
def digsub_5e8b7a8a(x):
    return [int(str(n)[:1] + ''.join(['7', '4', '2', '1', '3', '8', '6', '0', '5', '9'][int(p)] for p in str(n)[1:])) for n in x]
def add_454ffaaf(x):
    y = [9866950384, 4419662507, 844826806, 4540220147, 9310755025, 1705408575, 1099407076, 919591907, 5447535224, 2029031011, 7287667203, 8285853339, 7098512044, 8675778366, 1959714309, 6458689245, 6548980526, 2578657926, 2008966737, 9763853814, 1792596378, 450368147, 7155592480, 8919074792, 6004187757, 8982792706, 5852371555, 3766441946, 299076741, 5020256318, 4739998893, 2771678214, 8644073264, 4232261204, 7952476294, 7246773208]
    return [x[i] + y[i] for i in range(k)]
def digsub_1348ccb0(x):
    return [int(str(n)[:1] + ''.join(['6', '8', '4', '9', '0', '1', '5', '7', '2', '3'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_ad9553b4(x):
    return [x[p] for p in [2, 11, 28, 30, 35, 8, 34, 24, 1, 17, 23, 13, 14, 33, 32, 9, 10, 16, 15, 25, 0, 4, 31, 27, 5, 3, 26, 22, 12, 6, 7, 19, 29, 21, 18, 20]]
def chmul_746a3788(x):
    # rekt
    y = [ord(p) for p in '28607de43b6f6c20d6cedb573f637a0aa009']
    return [x[i] * y[i] for i in range(k)]
def cxor_df720e52(x):
    # so good
    return [x[i] ^ 5387914625 for i in range(k)]
def add_c1abafc2(x):
    # the best
    y = [9803358463, 4465202093, 521883319, 2251933970, 1898544737, 1975572378, 7429589069, 52652175, 3210997726, 161924725, 2025989505, 5788096913, 7313896079, 1303918123, 2435284081, 1891089649, 4278890055, 2898162733, 5245376927, 2685230072, 2804607788, 6345811707, 4525347316, 2805912950, 4273420673, 8370674851, 563747495, 7688617967, 249133617, 1957236171, 9279925181, 4558195082, 6904956664, 2858806205, 4364506696, 9253519875]
    return [x[i] + y[i] for i in range(k)]
def cmul_25c2274e(x):
    return [x[i] * 4 for i in range(k)]
def shuffle_2fffd50a(x):
    return [x[p] for p in [14, 0, 12, 23, 10, 5, 17, 25, 13, 28, 26, 7, 30, 24, 27, 29, 3, 16, 15, 22, 1, 21, 32, 33, 35, 6, 2, 9, 31, 8, 4, 11, 20, 34, 19, 18]]
def chunk_fa703d6a(x):
    return x[29:] + x[:29]
def csub_1f106834(x):
    return [x[i] - 5471762672 for i in range(k)]
def digsub_a7419844(x):
    # rekt
    return [int(str(n)[:1] + ''.join(['5', '3', '1', '6', '7', '9', '0', '4', '8', '2'][int(p)] for p in str(n)[1:])) for n in x]
def deck_9d7f8841(x):
    # evil
    return x[9:16] + x[24:] + x[16:24] + x[:9]
def digsub_81358f03(x):
    return [int(str(n)[:1] + ''.join(['4', '3', '9', '6', '7', '0', '8', '5', '2', '1'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_83b67bb5(x):
    # encryption
    return [x[p] for p in [26, 3, 16, 10, 19, 17, 13, 11, 4, 8, 7, 2, 21, 14, 15, 12, 27, 32, 33, 6, 24, 25, 18, 31, 28, 30, 35, 29, 5, 22, 0, 20, 23, 34, 9, 1]]
def cadd_370c5e9e(x):
    return [x[i] + 3974269190 for i in range(k)]
def deck_c744653a(x):
    return x[16:22] + x[36:] + x[22:36] + x[:16]
def sub_716f026e(x):
    # mucho encrypto
    y = [3863756730, 3997053785, 8151191349, 6370347819, 1300864520, 6371585170, 9584783109, 7941687703, 443101694, 4247485602, 720884505, 6914190659, 5923447645, 4398152383, 5825227671, 4834984527, 9962928554, 2240441489, 6060030181, 9105635484, 7967774705, 2224759057, 9558965592, 5323908561, 6080515656, 3519108195, 2834063511, 3188282029, 2541112930, 1813166650, 5942055694, 705283793, 7084942890, 1720387287, 5698860694, 3777728517]
    return [x[i] - y[i] for i in range(k)]
def chadd_595ed02a(x):
    y = [ord(p) for p in '78597be88402c9549bb138abaaae3c6f6403']
    return [x[i] + y[i] for i in range(k)]
def xor_64a04adb(x):
    y = [47764169, 2960843586, 5706735852, 778782496, 8918189417, 473300987, 79342164, 227753016, 8783848872, 168298012, 3606066049, 2762236145, 2219019642, 2511566224, 3026535414, 6824301816, 8229849183, 6055178519, 3400067757, 3867301474, 578555016, 8355495323, 6183886641, 2190215883, 5570901889, 7276262358, 998978178, 9651945224, 8664966842, 1644814485, 781927425, 570508344, 4891578943, 8096292771, 9189926606, 3709107854]
    return [x[i] ^ y[i] for i in range(k)]
def chadd_fe246cb1(x):
    # mucho encrypto
    y = [ord(p) for p in '3937d787f031dafa847d49aede77c5cc4502']
    return [x[i] + y[i] for i in range(k)]
def csub_395783d4(x):
    # just reverse it
    return [x[i] - 759724665 for i in range(k)]
def chadd_c28b3253(x):
    # just reverse it
    y = [ord(p) for p in 'b8b068f17c869a15ac471f084cb8b5ba2187']
    return [x[i] + y[i] for i in range(k)]
def shuffle_879744de(x):
    return [x[p] for p in [26, 11, 21, 30, 16, 1, 18, 8, 15, 29, 27, 0, 19, 25, 32, 20, 6, 31, 24, 2, 14, 7, 22, 4, 12, 33, 17, 34, 35, 3, 13, 23, 28, 9, 10, 5]]
def chadd_8e1c6d19(x):
    y = [ord(p) for p in '45ee47ae7a2d0180c7436c2cc1d82957cb3d']
    return [x[i] + y[i] for i in range(k)]
def cxor_8396e79a(x):
    # shiet?
    return [x[i] ^ 4831853332 for i in range(k)]
def chsub_2f62951a(x):
    # shiet?
    y = [ord(p) for p in 'cd35f7c2ec8ac7c15ccdcbe9d73e276b7662']
    return [x[i] - y[i] for i in range(k)]
def mul_0cb6e2cc(x):
    # shiet?
    y = [4, 9, 9, 4, 4, 9, 8, 5, 9, 8, 2, 2, 7, 1, 5, 6, 3, 2, 7, 5, 3, 1, 1, 8, 4, 6, 1, 1, 5, 1, 2, 3, 6, 4, 4, 1]
    return [x[i] * y[i] for i in range(k)]
def digsub_a453f5cd(x):
    return [int(str(n)[:1] + ''.join(['7', '8', '0', '1', '3', '5', '2', '9', '4', '6'][int(p)] for p in str(n)[1:])) for n in x]
def xor_a8eff498(x):
    # encryption
    y = [6984443798, 7160417998, 8096076033, 9737566384, 7471390823, 5776512567, 8223539431, 8424356459, 1205750466, 7467971385, 3627697291, 5717320653, 9956492734, 4553390680, 2454787175, 3452690103, 9484293954, 1928416629, 9689974518, 4281425157, 2361440438, 7301730746, 814827347, 8446811289, 5701680805, 5486056629, 2763023854, 469109666, 3778340280, 4090573106, 3318567423, 5946665470, 3817539039, 5714574718, 8508779979, 2616378574]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_3972d07b(x):
    # shiet?
    y = [ord(p) for p in 'f9bc9e3dec2bea2d67825dd9a411cfcb3217']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_3125b36d(x):
    return [x[p] for p in [20, 1, 9, 10, 22, 12, 28, 19, 15, 11, 3, 30, 6, 23, 29, 14, 4, 34, 24, 17, 21, 32, 7, 25, 33, 18, 27, 8, 26, 35, 31, 16, 2, 5, 13, 0]]
def cmul_bc969278(x):
    return [x[i] * 7 for i in range(k)]
def chmul_f5bde247(x):
    y = [ord(p) for p in '222deb12254b9c14fb8a4e3d0849d87ae33e']
    return [x[i] * y[i] for i in range(k)]
def csub_a0c64190(x):
    # rekt
    return [x[i] - 5602062711 for i in range(k)]
def xor_839d29d8(x):
    # kek
    y = [3146490763, 557371628, 1104902902, 4767052427, 2280765433, 4561962633, 3410111994, 7244077163, 9573845680, 8070415692, 1883002297, 6766754958, 6129902282, 5236724145, 1090021118, 27707288, 5127057245, 6043425987, 4433756411, 1149104385, 3457651740, 7102505321, 2817203532, 9093601460, 5413748922, 3480269852, 7933473279, 9323206027, 896702872, 5595786039, 8024577031, 1152622018, 7610796461, 2262987079, 5345341294, 5827224]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_ae930f19(x):
    # rekt
    y = [ord(p) for p in '05fe15571997da2c95ee8ae9ff4868c99164']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_eb268372(x):
    # lmaooo
    return x[11:] + x[:11]
def digsub_e9fbb5e0(x):
    return [int(str(n)[:1] + ''.join(['8', '5', '1', '6', '7', '4', '3', '9', '2', '0'][int(p)] for p in str(n)[1:])) for n in x]
def deck_3a300f0d(x):
    return x[:0] + x[26:30] + x[30:] + x[0:26]
def xor_984175c8(x):
    y = [7671960032, 5489730713, 1957313816, 4125914347, 4349006576, 8323424221, 3080642771, 623562806, 6344211181, 9481015184, 3628850952, 5196968464, 2005493290, 4070455323, 4265721901, 5099408081, 169659977, 917259661, 5079175669, 8203532381, 5007162355, 6774025602, 4513278319, 175547138, 3654499516, 4279808060, 1569142025, 3454749335, 4509802065, 3474170533, 7780049227, 2524678006, 7283679815, 1712304426, 773820153, 8908288132]
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_b22f1c56(x):
    return [x[p] for p in [12, 31, 9, 15, 34, 7, 8, 11, 18, 19, 1, 29, 30, 16, 0, 4, 6, 22, 33, 5, 13, 2, 20, 24, 14, 3, 17, 25, 21, 32, 27, 26, 10, 28, 35, 23]]
def cmul_d77e3c24(x):
    return [x[i] * 4 for i in range(k)]
def chunk_59cbae4c(x):
    # lmaooo
    return x[21:] + x[:21]
def cmul_f98bab5d(x):
    return [x[i] * 3 for i in range(k)]
def cadd_2dcf1992(x):
    return [x[i] + 6390173523 for i in range(k)]
def xor_4946eb25(x):
    y = [3182131653, 3574725852, 6180243922, 4310030900, 5548148554, 7636882268, 8207666789, 2148696424, 7282273317, 1253714465, 9778566699, 6107427558, 6751979358, 1345435508, 9390655167, 920414935, 4614620888, 6851712172, 4091678013, 5618996149, 4488857874, 9684051317, 5661232484, 1776633131, 6885581784, 9374762784, 6131057760, 1235016359, 9250896021, 6811013151, 2925410193, 6222696562, 5560665482, 1349825575, 8595884801, 7384453247]
    return [x[i] ^ y[i] for i in range(k)]
def sub_560b0d88(x):
    # kek
    y = [9251626082, 5909907458, 3678287650, 4581983293, 7683938474, 2312016699, 1903357265, 728623542, 6146906897, 8187338583, 9907637717, 5831138107, 1705094401, 2326474089, 87295634, 5529539815, 1883398199, 6445371223, 5315547412, 7705159209, 5857709287, 4908508112, 3095203519, 7284031877, 3440296587, 7584799257, 8281710533, 4424840022, 3929399242, 3152556230, 8761802612, 8006422148, 9160887730, 6193808513, 6163129620, 942635658]
    return [x[i] - y[i] for i in range(k)]
def chadd_620f96a9(x):
    y = [ord(p) for p in '116611dccc0881a4b1c034c6360aa6ef9ccc']
    return [x[i] + y[i] for i in range(k)]
def chmul_58875bd8(x):
    # rekt
    y = [ord(p) for p in 'f971f0c1406734585385fe65ec59d68cb400']
    return [x[i] * y[i] for i in range(k)]
def xor_2f985cdb(x):
    y = [573731739, 7853108929, 334158137, 8371346300, 8257916986, 5624261104, 4271002648, 6856961073, 8331544780, 295102206, 1948555239, 3127967816, 5071257742, 3002183588, 2758212208, 4754203653, 9528904966, 2664432828, 2555931554, 3502716427, 8147429276, 1310773137, 6920558585, 1598585260, 9044834600, 145432027, 3584671031, 2197203450, 4751493924, 7431368535, 2934764166, 5173555608, 7996258584, 9594879763, 2654848240, 8591117541]
    return [x[i] ^ y[i] for i in range(k)]
def xor_75987462(x):
    # lel
    y = [8310135314, 5590749919, 3400369213, 6045669209, 7388455471, 8245450357, 5402586023, 2391812282, 7460861024, 7130376866, 1231891528, 520658269, 407793733, 5851462039, 1105173987, 1307131500, 9212178238, 3756668566, 6933455261, 5608256993, 1197983155, 7757242986, 8677874837, 487707260, 7788394651, 977711558, 9158134219, 2582567267, 7097160234, 6680638803, 9556578153, 2125058727, 7680572833, 3074125974, 8322506697, 7252175002]
    return [x[i] ^ y[i] for i in range(k)]
def csub_fa213275(x):
    # shiet?
    return [x[i] - 916993256 for i in range(k)]
def cmul_e4190864(x):
    return [x[i] * 4 for i in range(k)]
def chmul_bd71c400(x):
    # kek
    y = [ord(p) for p in 'd8855c22c9c708c33e8d88d6ab67a504819e']
    return [x[i] * y[i] for i in range(k)]
def chadd_a8439bc3(x):
    y = [ord(p) for p in 'bcfbf3fb6e890aac54386b0b2680db401aa7']
    return [x[i] + y[i] for i in range(k)]
def chunk_53760c11(x):
    # rekt
    return x[18:] + x[:18]
def csub_c5965200(x):
    # so good
    return [x[i] - 8583721315 for i in range(k)]
def xor_b601f000(x):
    y = [5579565265, 9283446998, 4820336154, 3410187533, 484507209, 8215074121, 9525160290, 5536475645, 2955469640, 5578635356, 6235515350, 543337471, 9348593199, 389897365, 2181288045, 5259798426, 6783289613, 4854544250, 6869597158, 3140931885, 4231110300, 4769377668, 2105133735, 6595477739, 7317727081, 3624001404, 1649233120, 4487683304, 6058150643, 4861001950, 5392858686, 5674059596, 9353039825, 9533999976, 7965335232, 3903726802]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_88e67ab1(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '22eddeef8402743559e36217abd82bdf4cc6']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_77f9c95f(x):
    y = [ord(p) for p in 'bf51d787685835f664ae41d25c5a4b58be90']
    return [x[i] * y[i] for i in range(k)]
def chxor_daa5c35b(x):
    y = [ord(p) for p in '97296d29a6f5267a0d958323477804acb157']
    return [x[i] ^ y[i] for i in range(k)]
def chadd_ed0711d8(x):
    # shiet?
    y = [ord(p) for p in '1d3bc38173884fc02efef224d6369c9fbddc']
    return [x[i] + y[i] for i in range(k)]
def chsub_26373389(x):
    # the best
    y = [ord(p) for p in '616454a2cdfb7356f290c475ec0a61e03f20']
    return [x[i] - y[i] for i in range(k)]
def cxor_c7240b25(x):
    return [x[i] ^ 6716057337 for i in range(k)]
def cmul_7ad45fd6(x):
    return [x[i] * 3 for i in range(k)]
def chxor_44d65ee9(x):
    y = [ord(p) for p in '49bbd70a488a0d0efeb1e7d6392e62ebc0a3']
    return [x[i] ^ y[i] for i in range(k)]
def csub_392cef70(x):
    return [x[i] - 4306963329 for i in range(k)]
def xor_827e6b83(x):
    # lmaooo
    y = [4321824379, 4854729048, 1072273472, 676529765, 776168600, 8394817334, 5088660300, 1009375464, 3083128665, 5139875165, 4912029558, 1890604081, 3253683790, 803593622, 7258416532, 5693473197, 409987774, 9643435157, 2455180941, 8859715153, 5453154725, 2521117311, 4856403729, 6765656689, 3119554372, 119727135, 3856614905, 5447069846, 4790933729, 9810767193, 4113002285, 6915125413, 3997258377, 2677261834, 3292060134, 4545408957]
    return [x[i] ^ y[i] for i in range(k)]
def csub_6612390f(x):
    # shiet?
    return [x[i] - 7792600164 for i in range(k)]
def cxor_e3dd1135(x):
    return [x[i] ^ 3997154071 for i in range(k)]
def cxor_1e0efad7(x):
    # mucho encrypto
    return [x[i] ^ 4697599209 for i in range(k)]
def chmul_f8409008(x):
    # kek
    y = [ord(p) for p in 'ee45a7b27f57d9a25507f77831bb1d383e42']
    return [x[i] * y[i] for i in range(k)]
def chxor_31537f25(x):
    y = [ord(p) for p in '10a6bc54a0fb581d985bbdd21d796bbd9a00']
    return [x[i] ^ y[i] for i in range(k)]
def mul_714f7f13(x):
    # kek
    y = [3, 3, 5, 3, 2, 6, 5, 2, 4, 6, 6, 2, 4, 2, 6, 1, 3, 4, 4, 5, 5, 2, 3, 3, 2, 5, 5, 3, 1, 2, 6, 2, 3, 2, 3, 2]
    return [x[i] * y[i] for i in range(k)]
def cadd_b39fc11d(x):
    # lel
    return [x[i] + 2756243387 for i in range(k)]
def deck_346f6ed0(x):
    return x[4:26] + x[27:] + x[26:27] + x[:4]
def cxor_6cae2cb6(x):
    # mucho encrypto
    return [x[i] ^ 3097631932 for i in range(k)]
def chsub_1a499bac(x):
    # mucho encrypto
    y = [ord(p) for p in '94be9c5fc7a688f2576cbba86492096d4eac']
    return [x[i] - y[i] for i in range(k)]
def cxor_765f4bed(x):
    return [x[i] ^ 1961570044 for i in range(k)]
def chsub_fd459d3e(x):
    y = [ord(p) for p in '929e14bfe4a6c626230d71466231910b92fb']
    return [x[i] - y[i] for i in range(k)]
def deck_72e47dcc(x):
    return x[:0] + x[29:] + x[0:4] + x[4:29]
def cxor_7ec801e0(x):
    # the best
    return [x[i] ^ 4002020928 for i in range(k)]
def shuffle_866b2261(x):
    # encryption
    return [x[p] for p in [14, 9, 28, 21, 15, 16, 12, 13, 34, 29, 24, 27, 23, 5, 18, 31, 26, 11, 8, 22, 7, 0, 6, 17, 19, 30, 3, 35, 20, 4, 32, 33, 25, 2, 1, 10]]
def shuffle_abafc5c1(x):
    # the flag is flag{jk}
    return [x[p] for p in [25, 11, 1, 26, 7, 17, 5, 24, 12, 19, 18, 27, 28, 14, 30, 23, 21, 35, 20, 4, 34, 33, 0, 10, 9, 22, 32, 13, 15, 3, 31, 6, 16, 8, 2, 29]]
def chxor_2b81e3ec(x):
    # kek
    y = [ord(p) for p in 'b9c6fe082edcc3c17f243401ffe5ef26a4ed']
    return [x[i] ^ y[i] for i in range(k)]
def deck_22a9d6e7(x):
    return x[:5] + x[6:19] + x[5:6] + x[19:]
def cadd_81014cf5(x):
    # lel
    return [x[i] + 6919547829 for i in range(k)]
def digsub_ce000989(x):
    return [int(str(n)[:1] + ''.join(['0', '3', '5', '9', '2', '1', '8', '6', '4', '7'][int(p)] for p in str(n)[1:])) for n in x]
def shuffle_1cae3f87(x):
    # rekt
    return [x[p] for p in [13, 33, 0, 27, 11, 22, 15, 28, 2, 20, 14, 19, 30, 18, 9, 23, 6, 4, 7, 25, 16, 21, 5, 17, 32, 24, 29, 10, 26, 12, 34, 31, 1, 35, 3, 8]]
def chunk_7692aef1(x):
    return x[5:] + x[:5]
def cmul_6cf9601c(x):
    # so good
    return [x[i] * 8 for i in range(k)]
def chunk_e157469e(x):
    # so good
    return x[30:] + x[:30]
def cadd_a31a177e(x):
    # shiet?
    return [x[i] + 9931277700 for i in range(k)]
def digsub_981b52ce(x):
    # the best
    return [int(str(n)[:1] + ''.join(['6', '1', '7', '0', '5', '2', '8', '9', '3', '4'][int(p)] for p in str(n)[1:])) for n in x]
def deck_0084df20(x):
    # rekt
    return x[31:] + x[20:31] + x[:7] + x[7:20]
def chadd_8e15ee9b(x):
    # mucho encrypto
    y = [ord(p) for p in '64c20c4970e7fa27e499413fc4a87ce109e8']
    return [x[i] + y[i] for i in range(k)]
def chxor_4f175e3b(x):
    # evil
    y = [ord(p) for p in 'e0ae65937bb416c670ae3546c26decf63958']
    return [x[i] ^ y[i] for i in range(k)]
def deck_b2a85b8e(x):
    return x[28:] + x[:11] + x[25:28] + x[11:25]
def chunk_c8598499(x):
    # lel
    return x[2:] + x[:2]
def xor_5a1c8280(x):
    y = [2409927340, 5603090571, 7505666085, 8016193992, 9970555524, 4101065769, 7372083625, 1554165227, 9109912141, 6503070300, 6671280348, 168082393, 546921322, 9152105685, 3509754959, 179918590, 8146566615, 353171360, 8535546883, 3614235551, 5650617537, 9684722445, 5396670156, 7786947093, 4781132161, 4770009991, 7851868312, 9538068771, 9890440315, 6195546462, 1132013044, 6440062802, 9376588809, 3510420507, 6456247621, 1057060213]
    return [x[i] ^ y[i] for i in range(k)]
def csub_645a6092(x):
    # evil
    return [x[i] - 136124056 for i in range(k)]
def chsub_4a4043a6(x):
    # lel
    y = [ord(p) for p in '41e89a860ff158c82ee8d3faff6f4194c4ad']
    return [x[i] - y[i] for i in range(k)]
def chxor_0595f6c3(x):
    y = [ord(p) for p in 'e77061c632324eff6702612e9e3f391379f4']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_5a1e89dc(x):
    # shiet?
    return [x[i] ^ 9946555256 for i in range(k)]
def add_07231911(x):
    y = [9800517416, 8531187216, 4965566757, 5099159572, 1931078660, 5034875667, 848596547, 7902040482, 3865603090, 6801297120, 4670523085, 482080311, 807007559, 4123941332, 6537789878, 7600636212, 3771136631, 2715830912, 8165125608, 6058879731, 1836095748, 510328741, 5852980272, 5560543157, 4264220461, 7656312193, 3924371466, 5725084268, 6899290831, 8038854876, 9245443882, 6728370658, 7034016562, 5793255602, 1586632879, 7587473273]
    return [x[i] + y[i] for i in range(k)]
def digsub_262ebaa4(x):
    return [int(str(n)[:1] + ''.join(['6', '8', '9', '4', '5', '3', '0', '7', '1', '2'][int(p)] for p in str(n)[1:])) for n in x]
def deck_7fbd59c9(x):
    return x[15:16] + x[16:] + x[11:15] + x[:11]
def add_885196c7(x):
    y = [2723583671, 2957604963, 2576084015, 9514946761, 2793758523, 7903329474, 1228341583, 3943862575, 8319243214, 5543883441, 5446214632, 1187663003, 309086914, 4081519030, 9346302328, 4277510111, 8517756774, 1433208339, 9144428401, 6447123303, 4770843067, 9390698799, 4353382788, 9916745675, 8084203920, 2352700166, 3431606874, 2963824321, 6557212303, 5850194885, 6487125219, 8232523804, 4159957154, 3163027237, 3712261488, 8733519397]
    return [x[i] + y[i] for i in range(k)]
def cxor_f744fca4(x):
    return [x[i] ^ 7447204566 for i in range(k)]
def digsub_f8bfc612(x):
    # mucho encrypto
    return [int(str(n)[:1] + ''.join(['3', '1', '2', '5', '0', '7', '8', '9', '4', '6'][int(p)] for p in str(n)[1:])) for n in x]
def cadd_ea861103(x):
    # rekt
    return [x[i] + 7298930211 for i in range(k)]
def cmul_fa2c1e3a(x):
    return [x[i] * 6 for i in range(k)]
def chunk_cbf1932b(x):
    # so good
    return x[0:] + x[:0]
def xor_b7dd3197(x):
    y = [1737062984, 351651138, 2604207868, 9527959351, 8949105533, 3130573899, 6199690466, 7109027466, 3179635600, 2861260331, 1658671022, 3278505874, 9754559046, 9333081783, 130415816, 8543647686, 7988988561, 3058118985, 3547179679, 221895900, 9029309809, 4054680933, 7002960815, 920308724, 5318603572, 3573148366, 3555716680, 3382291570, 6444274135, 4771322143, 7881759313, 9623663394, 2940510252, 1232777012, 3894555810, 5688770167]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_3af5214b(x):
    y = [ord(p) for p in '364ceccc6190e389ed7cb649608fa52d5925']
    return [x[i] - y[i] for i in range(k)]
def chunk_367e0942(x):
    return x[31:] + x[:31]
def digsub_be4fa340(x):
    # so good
    return [int(str(n)[:1] + ''.join(['3', '9', '7', '8', '6', '1', '0', '4', '2', '5'][int(p)] for p in str(n)[1:])) for n in x]
def chxor_85ae54d2(x):
    y = [ord(p) for p in '45613f16d0a838abb7bd96d4eed69e6e859c']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_77a6c434(x):
    return x[20:] + x[:20]
def chunk_bdaa57c3(x):
    return x[8:] + x[:8]
def mul_b5be71ee(x):
    y = [5, 1, 4, 8, 10, 6, 10, 8, 1, 7, 1, 1, 3, 6, 1, 6, 4, 2, 5, 8, 3, 7, 8, 1, 8, 10, 5, 10, 8, 8, 9, 2, 6, 10, 8, 8]
    return [x[i] * y[i] for i in range(k)]
def shuffle_a9affa02(x):
    # lmaooo
    return [x[p] for p in [26, 10, 5, 13, 7, 25, 0, 2, 29, 30, 18, 34, 19, 9, 8, 14, 1, 27, 32, 31, 16, 33, 20, 11, 4, 6, 17, 22, 3, 12, 35, 28, 21, 24, 15, 23]]
def digsub_82f27ce9(x):
    return [int(str(n)[:1] + ''.join(['2', '3', '1', '0', '9', '4', '5', '6', '8', '7'][int(p)] for p in str(n)[1:])) for n in x]
def digsub_7d236bf8(x):
    # encryption
    return [int(str(n)[:1] + ''.join(['8', '1', '2', '3', '6', '5', '4', '7', '0', '9'][int(p)] for p in str(n)[1:])) for n in x]
def add_1559ce63(x):
    # shiet?
    y = [2737140003, 2664689576, 5248870359, 1921495887, 7928540281, 3374339303, 8735633458, 8504383951, 1789637719, 8329602620, 6671569328, 9487985606, 2698037887, 7932810170, 8153593907, 7498515848, 6960333991, 3255181629, 2252838206, 9756697556, 8615422958, 3911309397, 5727085176, 86254806, 7985032041, 1490872740, 2315609702, 794566520, 5425585170, 633513315, 7064797726, 3975286588, 3326592440, 5146743064, 6581068150, 1987346698]
    return [x[i] + y[i] for i in range(k)]
def csub_ad5db692(x):
    return [x[i] - 7801570900 for i in range(k)]
def cmul_7e84fb88(x):
    return [x[i] * 6 for i in range(k)]
def chmul_608cd53e(x):
    y = [ord(p) for p in '9e94c229a51c35b6be228c6f9317856dcfb4']
    return [x[i] * y[i] for i in range(k)]
def digsub_f316d9e1(x):
    # kek
    return [int(str(n)[:1] + ''.join(['2', '3', '9', '7', '5', '1', '0', '6', '8', '4'][int(p)] for p in str(n)[1:])) for n in x]
def digsub_c30772e5(x):
    return [int(str(n)[:1] + ''.join(['5', '1', '8', '0', '7', '2', '6', '3', '4', '9'][int(p)] for p in str(n)[1:])) for n in x]
def digsub_c686d6d7(x):
    # the best
    return [int(str(n)[:1] + ''.join(['3', '4', '2', '6', '7', '8', '5', '1', '9', '0'][int(p)] for p in str(n)[1:])) for n in x]
def chadd_ee551422(x):
    y = [ord(p) for p in '55147cb6f02fffd596cf4af3111dc4c465ce']
    return [x[i] + y[i] for i in range(k)]
def add_93fdd277(x):
    y = [5484641084, 1101370614, 8747679860, 330812632, 9198275313, 5750508147, 3094184436, 5791891596, 9619216184, 3926909058, 4870797472, 4169050005, 4283221835, 2287416217, 7123864476, 5265864040, 8501735686, 715027684, 5528734370, 8037142411, 8520811271, 2937845735, 429214502, 3884933492, 2138886356, 1677310208, 7844736070, 2471409355, 1307677968, 2668226142, 2016484625, 9063523593, 4565612984, 2943955532, 9275673308, 4938789865]
    return [x[i] + y[i] for i in range(k)]
def chunk_d7f6d493(x):
    return x[33:] + x[:33]
def shuffle_d43c63b3(x):
    # lel
    return [x[p] for p in [7, 17, 20, 2, 35, 32, 15, 23, 3, 19, 13, 33, 6, 27, 22, 16, 12, 10, 21, 1, 18, 30, 24, 25, 26, 34, 11, 4, 28, 5, 29, 0, 9, 8, 14, 31]]
def chsub_e9070016(x):
    # shiet?
    y = [ord(p) for p in '515c0bd23e7a2006eff765b39c37822f4e06']
    return [x[i] - y[i] for i in range(k)]
def xor_f1cb1b28(x):
    # rekt
    y = [2870036716, 6867289566, 2841936765, 4918249072, 3908218459, 6594543645, 1306644813, 5834695901, 8608300314, 4765014529, 227158047, 1483646775, 2760180065, 54085382, 6578663255, 8728072279, 5560185316, 1012156764, 6519187899, 5446644997, 4388114969, 7716118518, 2254158763, 8636841801, 8022878812, 37668563, 3272192019, 2563346604, 4669597084, 8570695950, 3332792585, 9294098288, 9068858121, 5655065011, 5582747234, 2613819088]
    return [x[i] ^ y[i] for i in range(k)]
def deck_3a2e4078(x):
    # just reverse it
    return x[11:26] + x[1:11] + x[:1] + x[26:]
def digsub_670300f2(x):
    # so good
    return [int(str(n)[:1] + ''.join(['7', '6', '4', '3', '0', '5', '2', '8', '9', '1'][int(p)] for p in str(n)[1:])) for n in x]
def chsub_02246759(x):
    # lel
    y = [ord(p) for p in '66ca280c377635443235f947645c7321d251']
    return [x[i] - y[i] for i in range(k)]
def chxor_c399373f(x):
    # just reverse it
    y = [ord(p) for p in '6c52672c8b5f6525bebbf222a1a914e6b47f']
    return [x[i] ^ y[i] for i in range(k)]
def chunk_524ad27b(x):
    return x[8:] + x[:8]
def xor_a6cea8c8(x):
    # evil
    y = [2677170688, 4525411310, 2875901005, 3110633529, 2576798144, 2928543788, 667608967, 3710558684, 1674959645, 392100501, 9221651518, 2671952727, 7225003292, 2411191567, 7986214033, 540486196, 6197221032, 2395011921, 9034366042, 2666132659, 2697422683, 6972445905, 1445346209, 2995715918, 4796674165, 80731000, 7900887936, 1739589491, 2036629283, 9021495066, 8042773457, 5197145419, 191242605, 4197859116, 8901271690, 4906356822]
    return [x[i] ^ y[i] for i in range(k)]
def sub_11293e74(x):
    y = [3517666997, 5352876064, 1180679061, 2584041670, 8351686358, 4934675819, 3490037254, 4816539287, 6092529553, 4456119160, 4590699843, 8412109832, 1741712271, 2066565109, 3431901996, 7696797197, 7191233417, 1561621986, 6691561465, 4736497160, 131344461, 3850553092, 2971343518, 4893952579, 151050524, 9600938888, 9642170664, 4810530019, 2737958452, 435522461, 1826635674, 7162938690, 7951387578, 4328387701, 5491762593, 952035546]
    return [x[i] - y[i] for i in range(k)]
def digsub_f44f1764(x):
    return [int(str(n)[:1] + ''.join(['5', '4', '2', '9', '6', '8', '7', '0', '3', '1'][int(p)] for p in str(n)[1:])) for n in x]
def chxor_dadbfeff(x):
    y = [ord(p) for p in 'fed46cb2d9c6a1215fb6fe5f7b94ab329bf5']
    return [x[i] ^ y[i] for i in range(k)]
def digsub_0ca9e7fd(x):
    return [int(str(n)[:1] + ''.join(['1', '6', '5', '7', '0', '2', '4', '8', '9', '3'][int(p)] for p in str(n)[1:])) for n in x]
def xor_b7fcf01b(x):
    # evil
    y = [4805106863, 6380343876, 2077547454, 5692949372, 3455068904, 2655513217, 2360837870, 7480170638, 64321534, 7703761925, 8820944342, 4683333491, 8683295035, 3049422025, 2497133617, 5723180474, 9008251169, 3352506071, 172511982, 983141767, 790265877, 3934060987, 4178318673, 1530529371, 2338952397, 9235924184, 5140679007, 6286335791, 6958551478, 9854083392, 5022838460, 2924084004, 1320927131, 1273215501, 8283455650, 3991877112]
    return [x[i] ^ y[i] for i in range(k)]
def deck_0e831845(x):
    return x[:21] + x[27:] + x[21:23] + x[23:27]
def chadd_5488a6fe(x):
    # rekt
    y = [ord(p) for p in '368aa724a18ffa1569386912f1fac9d98d7a']
    return [x[i] + y[i] for i in range(k)]
def cmul_f7e015fa(x):
    return [x[i] * 3 for i in range(k)]
def chmul_adc58ae6(x):
    y = [ord(p) for p in '1db6e9d2b5ec841776f385755f40cdf4ef80']
    return [x[i] * y[i] for i in range(k)]
def add_c6556187(x):
    y = [2708516939, 3486288768, 7105678900, 7348410443, 177733116, 4016591085, 7782942297, 8591586706, 7475098660, 1280062025, 9343400251, 681785561, 2027312697, 6454935072, 2393627408, 9503394781, 2476939464, 5283929767, 9790936364, 1214987866, 5932011932, 8392542486, 9755636187, 5287752121, 2351718724, 5189110038, 7300309828, 9255435295, 7778679264, 2290084411, 7804972602, 8637221749, 1283544092, 7663571523, 7805707174, 314339059]
    return [x[i] + y[i] for i in range(k)]
def csub_79c7fc2e(x):
    # lmaooo
    return [x[i] - 5649828830 for i in range(k)]
def deck_6450051f(x):
    return x[28:] + x[:7] + x[7:11] + x[11:28]
def cxor_c8ef5dcc(x):
    return [x[i] ^ 4574533615 for i in range(k)]
def digsub_5f03912e(x):
    return [int(str(n)[:1] + ''.join(['9', '8', '5', '4', '0', '7', '2', '6', '3', '1'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_885659c9(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '4d864572d26c68679d8b6424f75d10f4f16c']
    return [x[i] * y[i] for i in range(k)]
def chadd_1475aaba(x):
    y = [ord(p) for p in '239f59a930f6a8340c2af623cd31550be403']
    return [x[i] + y[i] for i in range(k)]
def digsub_9ab35f2e(x):
    # shiet?
    return [int(str(n)[:1] + ''.join(['1', '4', '7', '2', '3', '9', '0', '8', '6', '5'][int(p)] for p in str(n)[1:])) for n in x]
def chunk_34d2c108(x):
    return x[30:] + x[:30]
def digsub_a740a80e(x):
    # encryption
    return [int(str(n)[:1] + ''.join(['9', '8', '1', '3', '7', '6', '2', '4', '0', '5'][int(p)] for p in str(n)[1:])) for n in x]
def xor_22f2f1f4(x):
    y = [9250081581, 8244163876, 481236411, 3772029985, 4488709395, 5790287922, 360834634, 5274902864, 5127717807, 6663021035, 890784183, 2339080308, 8103623559, 7460765822, 9177071411, 9189199604, 4612443911, 290909567, 6225490264, 5681425401, 5310682794, 4282252028, 3787495362, 4195151306, 1411084026, 1697862219, 915553519, 4549315062, 3550487092, 3645898930, 1014626583, 8051178286, 5857208457, 6396130609, 5224828139, 4643890196]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_ce31e412(x):
    y = [ord(p) for p in '01eafa543480f25be09b3a45060a54ae98ff']
    return [x[i] ^ y[i] for i in range(k)]
def chsub_5a5cbf95(x):
    y = [ord(p) for p in 'b2ad327caf5084a72ae2408468117aef4c30']
    return [x[i] - y[i] for i in range(k)]
def chadd_c9f53918(x):
    y = [ord(p) for p in '18ac2927c24bab649c1f8040eb6bd0ee6fd5']
    return [x[i] + y[i] for i in range(k)]
def chxor_9fa88068(x):
    y = [ord(p) for p in '0f0ccdc6625eedbbfab9fa32aa081bc2fb20']
    return [x[i] ^ y[i] for i in range(k)]
def mul_c01af210(x):
    # mucho encrypto
    y = [5, 7, 6, 2, 7, 3, 7, 3, 1, 2, 2, 7, 2, 2, 1, 2, 3, 6, 2, 7, 3, 6, 4, 5, 7, 7, 5, 3, 6, 4, 1, 6, 7, 3, 4, 2]
    return [x[i] * y[i] for i in range(k)]
def add_b0ac8236(x):
    # kek
    y = [4917745468, 3561831785, 2838483314, 5902104231, 4672299700, 4725539831, 7245251984, 397920266, 8907982487, 7134365212, 4051860249, 1713656372, 6021808496, 7629625017, 9720125965, 8063688447, 7515939742, 8565577624, 2009592811, 4341135727, 7619915730, 193926511, 751587241, 7956797516, 8950381043, 2724608715, 4839564842, 2652753483, 7720904771, 9973693407, 3140827908, 8609949790, 6167798805, 2258760365, 4470301628, 2318638405]
    return [x[i] + y[i] for i in range(k)]
def add_7ab0c406(x):
    y = [5930717599, 6594861851, 4250512137, 6371321328, 411417429, 6747176325, 8659532725, 2617909378, 606577171, 2099913922, 5882508510, 9331469940, 3519924570, 1241287338, 8133435583, 4845704957, 8030711727, 8630226633, 1227133088, 8946415435, 1498035826, 7636069317, 936720594, 9016308233, 2976339750, 1753974477, 4403508471, 952421230, 5794463100, 3320165810, 1404033666, 4034434041, 7984372863, 6143183624, 3231381107, 7410398062]
    return [x[i] + y[i] for i in range(k)]
def add_69d61a24(x):
    # the best
    y = [3112489463, 1437116131, 2000021657, 4529869876, 4127597931, 9677129015, 1290688994, 4982028002, 274310200, 8730489690, 7688218350, 7805192474, 7756147366, 3012263637, 9292636026, 2664758569, 4043918573, 485381455, 667950139, 6996902801, 3058861063, 7997276693, 3843942863, 9917609549, 3763155799, 8183384108, 5178655021, 8675622868, 7692776611, 2422884069, 8967272630, 809793565, 662622241, 2541543580, 4190749733, 5387632017]
    return [x[i] + y[i] for i in range(k)]
def csub_e69770c4(x):
    return [x[i] - 2036506352 for i in range(k)]
def deck_11655f64(x):
    return x[16:31] + x[11:16] + x[31:] + x[:11]
def digsub_d085a426(x):
    # the flag is flag{jk}
    return [int(str(n)[:1] + ''.join(['4', '9', '5', '0', '2', '3', '7', '8', '1', '6'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_068c4ae9(x):
    y = [ord(p) for p in '524702c2a0c21a19d2dc34161a000b6843d1']
    return [x[i] * y[i] for i in range(k)]
def cxor_1247d512(x):
    # encryption
    return [x[i] ^ 4843776414 for i in range(k)]
def mul_150845b8(x):
    y = [1, 3, 4, 4, 1, 3, 1, 3, 3, 1, 1, 2, 4, 2, 4, 4, 3, 3, 3, 4, 4, 2, 1, 4, 3, 3, 3, 3, 2, 2, 2, 2, 1, 3, 1, 2]
    return [x[i] * y[i] for i in range(k)]
def deck_778a5ced(x):
    # lel
    return x[27:] + x[:1] + x[8:27] + x[1:8]
def shuffle_3bb1ab6d(x):
    # encryption
    return [x[p] for p in [0, 29, 21, 23, 9, 26, 3, 10, 11, 33, 16, 25, 22, 12, 20, 34, 15, 32, 18, 28, 14, 7, 1, 8, 30, 17, 5, 13, 35, 6, 2, 24, 27, 19, 4, 31]]
def xor_4d9534eb(x):
    y = [2231682064, 7790979033, 358647582, 7288313584, 5286512051, 3519695055, 6437260682, 9012603482, 3112906202, 6632385945, 6305381564, 9589860661, 2806403849, 4012515527, 7581869867, 7151256041, 7491543861, 3419659370, 6977474031, 4613971074, 9684629024, 4627649712, 9782494658, 8242127588, 4949299190, 8955588072, 4338533899, 4388981941, 268155763, 9549021887, 1956263673, 17827545, 5921953508, 6616808819, 6213686577, 3000462876]
    return [x[i] ^ y[i] for i in range(k)]
def sub_c3134c11(x):
    # just reverse it
    y = [110114004, 6373036069, 25345182, 5373902554, 7128129987, 5628513358, 891690858, 7893067160, 245242362, 5186830396, 8654793822, 229977000, 875869634, 4029709654, 2260281322, 7275421929, 3329121692, 5268687423, 5959847528, 4654890984, 1862574060, 6075990190, 3318081236, 1515639825, 129849540, 7052812666, 4528421152, 9027912453, 7281928790, 2341895619, 8503988478, 5972229783, 7541094614, 2976129761, 8263435226, 2643101474]
    return [x[i] - y[i] for i in range(k)]
def cxor_98058884(x):
    return [x[i] ^ 1829889394 for i in range(k)]
def chsub_c3fb1168(x):
    # just reverse it
    y = [ord(p) for p in '36ee5b8f2479b12f4f693bba5a33b1368152']
    return [x[i] - y[i] for i in range(k)]
def deck_4ac1edd9(x):
    return x[30:33] + x[22:30] + x[33:] + x[:22]
def csub_25da5f24(x):
    return [x[i] - 5683890143 for i in range(k)]
def chxor_49854e3d(x):
    y = [ord(p) for p in 'f627d01ffa4acce451d894443d5765b772e6']
    return [x[i] ^ y[i] for i in range(k)]
def chxor_dd683543(x):
    y = [ord(p) for p in '98da3900ac4d77c01fc1cc11b0baea571813']
    return [x[i] ^ y[i] for i in range(k)]
def xor_6cc1a542(x):
    y = [5291865066, 7214137837, 4053431244, 5621585838, 7556693845, 3614066434, 2726084913, 4117727321, 3832662275, 1631622038, 2340371776, 758530841, 6123170775, 1539228125, 9542154920, 2689112693, 2123929291, 4557008809, 3846535753, 2108985946, 4222609578, 9123864887, 290064186, 9932294760, 3582322046, 1036421195, 349563415, 7591211388, 3595609507, 9126759486, 166290510, 3058299425, 1486285543, 5235183684, 5992680116, 8883344664]
    return [x[i] ^ y[i] for i in range(k)]
def add_1ddc8330(x):
    y = [5598441023, 9711078514, 6757545302, 6826874770, 4115708897, 4349751935, 2017541483, 3167594368, 2688352137, 6048055076, 3073877858, 2541084637, 5430506973, 8967028469, 9928226169, 1213982814, 9108109529, 3557006346, 9402519521, 9427366176, 2786960830, 4560998281, 5678093947, 8730221982, 2362387622, 9960784444, 6138695775, 5802762490, 7032515308, 5458880236, 3735893204, 2048165981, 9853212204, 2928080006, 2489200767, 250015190]
    return [x[i] + y[i] for i in range(k)]
def add_6aeef0e9(x):
    y = [6793269570, 839250661, 3003584831, 3060408968, 2867293839, 9248888016, 5405744080, 1607716710, 7959491172, 6623352539, 7275051286, 6299104357, 9105103893, 2055309781, 3481921002, 9634982941, 5748791210, 6419197415, 2011352563, 5893069682, 9861824233, 2398096732, 1735640770, 6330667303, 495277742, 8108528560, 7199342092, 7027122213, 5999453343, 9018323906, 381450828, 2774448738, 1595697890, 3152162723, 8608853899, 4636999550]
    return [x[i] + y[i] for i in range(k)]
def add_a85e7265(x):
    # kek
    y = [6602303748, 8859101241, 5068797006, 8731272572, 775267759, 2595096541, 4723615061, 1679936371, 9825761689, 8258101796, 2537562626, 9546217846, 993017429, 2682031554, 3996499526, 9647826084, 8020762270, 9873826497, 9036861714, 1575024485, 1607598161, 4719946420, 661058464, 2297225629, 3822700099, 7861806879, 7039303289, 5453306620, 9211849838, 8218292670, 4884587316, 3069544282, 8419343162, 5078716711, 3998140480, 348274210]
    return [x[i] + y[i] for i in range(k)]
def chunk_d9927f3d(x):
    # so good
    return x[30:] + x[:30]
def chmul_28162caa(x):
    # the flag is flag{jk}
    y = [ord(p) for p in 'c1d18f79bf77eb5577ec4f067e1017833b66']
    return [x[i] * y[i] for i in range(k)]
def sub_2291bf41(x):
    y = [6282658420, 4323127475, 1708449136, 8189025733, 2048504433, 4147943585, 5330920455, 7180079179, 9320551476, 1454822336, 7136584618, 1747721489, 8465217202, 2604867993, 526694533, 5123379003, 1444352598, 677936690, 1533718058, 3024075643, 4062453360, 205439689, 6412451486, 2728062168, 4150199890, 2912796267, 5762223007, 6284885500, 479329245, 74762020, 1396176571, 4458970836, 7135135568, 7262652195, 6134310690, 8324155387]
    return [x[i] - y[i] for i in range(k)]
def chxor_a99facbd(x):
    y = [ord(p) for p in '027fa1778cca5ce2c908f5ccb93ec2a034ae']
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_4b183fad(x):
    # encryption
    return [x[p] for p in [13, 19, 0, 23, 26, 2, 12, 8, 18, 14, 27, 17, 35, 28, 16, 1, 3, 25, 11, 15, 5, 32, 21, 22, 24, 31, 7, 30, 10, 29, 6, 4, 9, 20, 34, 33]]
def csub_f268e803(x):
    return [x[i] - 1161701925 for i in range(k)]
def chunk_e808502e(x):
    # just reverse it
    return x[2:] + x[:2]
def csub_c9f7e43b(x):
    return [x[i] - 1282500774 for i in range(k)]
def shuffle_5d9e962c(x):
    # shiet?
    return [x[p] for p in [14, 2, 30, 22, 32, 20, 10, 27, 19, 23, 15, 7, 8, 16, 31, 1, 4, 25, 5, 29, 13, 35, 6, 34, 24, 21, 28, 12, 11, 18, 0, 26, 9, 17, 3, 33]]
def cadd_b0a14b2d(x):
    # lmaooo
    return [x[i] + 8043636774 for i in range(k)]
def cmul_8f4e7b08(x):
    return [x[i] * 9 for i in range(k)]
def digsub_3f272635(x):
    # shiet?
    return [int(str(n)[:1] + ''.join(['3', '4', '9', '5', '8', '6', '0', '2', '1', '7'][int(p)] for p in str(n)[1:])) for n in x]
def csub_f6d8e64f(x):
    return [x[i] - 1038665872 for i in range(k)]
def chxor_da644b5f(x):
    # rekt
    y = [ord(p) for p in '6e2a4ee94b372ea5f0aeacd9a775b840a0fb']
    return [x[i] ^ y[i] for i in range(k)]
def chsub_79027896(x):
    # encryption
    y = [ord(p) for p in '5ece4b8afd2def53abad6894ceebeb8bbe39']
    return [x[i] - y[i] for i in range(k)]
def cmul_7e424373(x):
    return [x[i] * 9 for i in range(k)]
def chmul_64d93738(x):
    y = [ord(p) for p in '3f51f8fa3af516685cfdba6b277fa7412cbb']
    return [x[i] * y[i] for i in range(k)]
def cxor_677dcdda(x):
    return [x[i] ^ 4849047249 for i in range(k)]
def cadd_b138e6e3(x):
    return [x[i] + 9108570824 for i in range(k)]
def chsub_92108511(x):
    y = [ord(p) for p in 'ed2465af17ddb69c757cc9cc7acff73f2dd1']
    return [x[i] - y[i] for i in range(k)]
def shuffle_b3fe3e10(x):
    # kek
    return [x[p] for p in [4, 27, 3, 32, 9, 19, 28, 30, 24, 25, 6, 34, 33, 8, 5, 0, 26, 18, 35, 11, 13, 12, 15, 20, 7, 29, 21, 1, 2, 23, 16, 31, 22, 14, 10, 17]]
def add_11c4ac68(x):
    y = [3746820346, 2932294004, 8963077692, 4720661735, 6787204901, 8087649050, 9334253955, 8323351619, 318574129, 6010482667, 5025582503, 7792983811, 4281754739, 2513586608, 800427490, 4267780951, 4622805246, 9572812885, 1179768077, 7838985404, 9278052302, 4420673388, 5649246569, 3453412640, 433176890, 2689106092, 8879839019, 4194785649, 7617666521, 230157259, 7775749249, 2126753097, 1504756183, 5859523167, 6555183725, 1968212734]
    return [x[i] + y[i] for i in range(k)]
def mul_75e8ddbd(x):
    y = [3, 2, 2, 5, 4, 4, 2, 4, 3, 4, 3, 3, 2, 5, 2, 3, 4, 1, 4, 1, 5, 3, 3, 4, 2, 3, 3, 4, 1, 1, 3, 1, 4, 4, 3, 5]
    return [x[i] * y[i] for i in range(k)]
def chxor_1272b4b3(x):
    y = [ord(p) for p in 'd290b352a6eb410903f91027759be6e1d903']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_6a1ee984(x):
    # the flag is flag{jk}
    return [x[i] + 5007932881 for i in range(k)]
def mul_8cff30c9(x):
    y = [2, 1, 7, 4, 4, 1, 5, 6, 3, 4, 7, 3, 5, 6, 2, 1, 5, 3, 1, 5, 6, 6, 4, 6, 3, 6, 1, 2, 6, 3, 6, 2, 7, 3, 7, 7]
    return [x[i] * y[i] for i in range(k)]
def shuffle_9d73add2(x):
    return [x[p] for p in [33, 23, 1, 27, 31, 6, 34, 29, 2, 24, 32, 9, 4, 26, 0, 10, 13, 22, 7, 8, 12, 11, 14, 19, 21, 5, 18, 30, 25, 3, 35, 20, 16, 17, 28, 15]]
def add_e07c15bd(x):
    # just reverse it
    y = [3721426529, 9258723924, 5045927406, 784745302, 118136500, 2595901307, 2751868070, 262036053, 4051590853, 9921833769, 8611087455, 1592658526, 8781903662, 1084438008, 1444245967, 7435667126, 8594702443, 99277951, 1843484478, 7357883826, 7380878554, 1681059284, 8201674394, 5604836530, 6933217934, 9944454417, 3755348924, 3805349450, 928558924, 9226697854, 388997140, 1020216641, 3316776612, 6116989401, 9814672978, 4818879865]
    return [x[i] + y[i] for i in range(k)]
def cmul_85b39864(x):
    return [x[i] * 4 for i in range(k)]
def add_c9854582(x):
    y = [2087488455, 1895663994, 9168429910, 9682078743, 9561629387, 7318912691, 7478452813, 9827344878, 2862493710, 4265140723, 6126554142, 5358733267, 1381620144, 4314403598, 6145398691, 6911631872, 5589968873, 3682142403, 5567156520, 1039108562, 3565805281, 8613944478, 9008774926, 9556199257, 3910441903, 2463627900, 546045694, 7682331674, 8318758862, 1297539324, 3190078691, 7942474842, 4627190116, 6951743297, 3820694192, 9675808747]
    return [x[i] + y[i] for i in range(k)]
def cadd_6719a051(x):
    # lmaooo
    return [x[i] + 428608579 for i in range(k)]
def xor_2ecafb68(x):
    y = [4806608314, 1790711899, 899783566, 2576220995, 1569113423, 8658350342, 1401813640, 7427359471, 6077976550, 4185907114, 4247698907, 5660607832, 2352090070, 7452678331, 4667834524, 3114792071, 1272368335, 4596628068, 7096120728, 8988123258, 1624206683, 621197687, 1897154792, 7169933069, 7962278367, 9585814259, 3922719898, 3290404572, 8009541959, 3388249195, 9864436068, 3323460984, 7622436520, 201421749, 5674714589, 3424863395]
    return [x[i] ^ y[i] for i in range(k)]
def mul_520721f3(x):
    y = [3, 7, 6, 5, 1, 1, 3, 2, 7, 6, 4, 2, 5, 3, 7, 3, 1, 5, 5, 5, 4, 3, 4, 7, 5, 4, 7, 5, 1, 1, 2, 6, 5, 6, 2, 1]
    return [x[i] * y[i] for i in range(k)]
def chsub_8dd5ab11(x):
    y = [ord(p) for p in '7701f035aff242bce72a0c8de9d7b7a2e2bb']
    return [x[i] - y[i] for i in range(k)]
def chmul_12872986(x):
    y = [ord(p) for p in 'ba7c39d100e6db39d9b6ada5a830c39cfeae']
    return [x[i] * y[i] for i in range(k)]
def chxor_de63b1bc(x):
    # kek
    y = [ord(p) for p in '97bf0d71d1abc71e686c75084be2feab8d93']
    return [x[i] ^ y[i] for i in range(k)]
def sub_960a2209(x):
    y = [3953315264, 7539615267, 4216043793, 6709556726, 2365891576, 4168642573, 4009141577, 2237318775, 7774489400, 7796064267, 2345423384, 1388365459, 916206737, 65119127, 2069890043, 6529277195, 7787573021, 7902347512, 2540643984, 8561532527, 5068186867, 9303503767, 2953523809, 316341687, 8433908365, 1811033592, 3320515721, 9878469092, 5570547759, 1873969643, 5166844719, 9738915103, 5408066187, 3285853262, 6221885270, 5362185204]
    return [x[i] - y[i] for i in range(k)]
def digsub_0410b672(x):
    return [int(str(n)[:1] + ''.join(['7', '8', '5', '6', '2', '0', '4', '9', '3', '1'][int(p)] for p in str(n)[1:])) for n in x]
def sub_71ca3f1b(x):
    # encryption
    y = [8145184616, 9463205272, 2678090279, 1930850433, 6984317616, 3475699070, 9982342246, 4083968527, 9938851752, 8323588225, 1177025383, 5727068820, 4352239448, 423466668, 5311951154, 1123775456, 8059191061, 9901817743, 7030338126, 1681809454, 6903330369, 7368577726, 9720895785, 3896581902, 6555600926, 8827595665, 6177554789, 5452482073, 2389078789, 1579100217, 6008440577, 3344660014, 6597610198, 8969807007, 7431881767, 8157456551]
    return [x[i] - y[i] for i in range(k)]
def digsub_f74d6e2c(x):
    # encryption
    return [int(str(n)[:1] + ''.join(['0', '1', '9', '7', '8', '6', '4', '2', '3', '5'][int(p)] for p in str(n)[1:])) for n in x]
def chsub_18094e03(x):
    # evil
    y = [ord(p) for p in 'dd73cc63a67483c2873fb3d7b4590d6f7ed6']
    return [x[i] - y[i] for i in range(k)]
def chadd_42edb2cc(x):
    # mucho encrypto
    y = [ord(p) for p in '132d0cd1c2288fa7c798d0d38c6a922866d6']
    return [x[i] + y[i] for i in range(k)]
def add_0582a092(x):
    y = [9571213168, 6236798979, 9593728805, 5674099876, 1630426576, 1689627106, 2011662905, 5721012945, 8494549046, 7339606268, 3558527706, 8939810010, 5345939172, 7191716856, 6859203041, 9216683038, 3244918848, 1453948417, 2918775616, 7792798797, 8749792505, 8493526904, 400672422, 528596562, 3936624871, 5258538351, 5569488353, 3786340122, 9988833268, 7897514088, 54327681, 2070606045, 4644195835, 5104487367, 942250173, 2552912840]
    return [x[i] + y[i] for i in range(k)]
def chxor_fb59e14c(x):
    # mucho encrypto
    y = [ord(p) for p in '26770c151a8c613450176d833305a7af276f']
    return [x[i] ^ y[i] for i in range(k)]
def mul_6fc04a8d(x):
    # the flag is flag{jk}
    y = [2, 1, 2, 1, 3, 1, 1, 2, 2, 3, 1, 4, 4, 2, 4, 3, 1, 1, 3, 2, 4, 1, 4, 2, 2, 4, 3, 1, 2, 1, 2, 1, 2, 2, 4, 3]
    return [x[i] * y[i] for i in range(k)]
def sub_b8c51fbd(x):
    # just reverse it
    y = [7060354252, 6258111548, 2704273515, 3596397728, 6794187775, 8873158063, 213241467, 7595393039, 7801119533, 3278729906, 3523599730, 7557887606, 167461816, 2486334342, 8279016670, 7242005170, 424129188, 6779216915, 3260788926, 4145234307, 1723414695, 5580028024, 9818230274, 4302527389, 7906867146, 515888778, 8063048101, 9654207590, 8837842483, 7087302335, 8686379369, 567231395, 6669898230, 2778173178, 383213333, 6997640896]
    return [x[i] - y[i] for i in range(k)]
def chxor_55bd1b17(x):
    # the flag is flag{jk}
    y = [ord(p) for p in '6406456d73b825b7c04bfe7d11d8d4347d6f']
    return [x[i] ^ y[i] for i in range(k)]
def xor_7465fff5(x):
    # lmaooo
    y = [4289053021, 8046172693, 9163995551, 4894122484, 7626335539, 9184726901, 4378655875, 3442360827, 5264600860, 6433041438, 4590328986, 8163020950, 3112720412, 8715524406, 2283034458, 524005751, 9854837434, 4056014581, 8589189548, 8954251654, 2248316458, 730029292, 5611509561, 9909168115, 4510827383, 8513641224, 147456898, 231735919, 7681391281, 2936168332, 6267959423, 7861919956, 6772649712, 7057489851, 8900669907, 7322291450]
    return [x[i] ^ y[i] for i in range(k)]
def csub_a0c513d9(x):
    # rekt
    return [x[i] - 4917671507 for i in range(k)]
def add_50d7387e(x):
    # lmaooo
    y = [4468827820, 390159581, 5664645548, 4537712825, 6684856261, 2629353256, 842032420, 6355409602, 5914413992, 2737845101, 3921320708, 5421688650, 22221311, 2398608424, 7094041583, 1912661768, 4597142655, 7483795116, 1465025610, 5092688515, 1132298051, 2068212537, 3585725370, 1285653831, 8548766121, 2843171154, 9892174154, 4212901142, 5517351641, 5212256921, 6141860681, 8184724214, 3727211514, 9566584460, 9907711350, 3093278244]
    return [x[i] + y[i] for i in range(k)]
def chmul_b20c3846(x):
    # kek
    y = [ord(p) for p in '440cd91b10fdc1a80359f1bb636b4dcb42b9']
    return [x[i] * y[i] for i in range(k)]
def digsub_99f3c205(x):
    # rekt
    return [int(str(n)[:1] + ''.join(['0', '6', '5', '2', '4', '8', '9', '3', '7', '1'][int(p)] for p in str(n)[1:])) for n in x]
def mul_39856c8b(x):
    y = [1, 1, 4, 5, 5, 6, 4, 5, 1, 5, 7, 1, 7, 5, 5, 4, 1, 6, 6, 5, 7, 2, 3, 7, 1, 3, 3, 1, 4, 2, 5, 3, 3, 4, 2, 2]
    return [x[i] * y[i] for i in range(k)]
def cxor_f14bf0f9(x):
    return [x[i] ^ 7656496718 for i in range(k)]
def mul_e04c3fbe(x):
    y = [2, 1, 5, 2, 2, 4, 1, 2, 3, 2, 2, 3, 4, 2, 2, 3, 2, 6, 1, 3, 6, 6, 2, 5, 3, 5, 2, 6, 6, 3, 4, 4, 6, 5, 5, 1]
    return [x[i] * y[i] for i in range(k)]
def chadd_8fc702a9(x):
    y = [ord(p) for p in 'c6a51aaa3333b270928d241fd5287343ab34']
    return [x[i] + y[i] for i in range(k)]
def digsub_3d37a56f(x):
    # just reverse it
    return [int(str(n)[:1] + ''.join(['1', '5', '4', '8', '3', '0', '6', '9', '7', '2'][int(p)] for p in str(n)[1:])) for n in x]
def chadd_8b4d11a3(x):
    y = [ord(p) for p in '6465a99138117f4c9ef743fb7f18830a6e73']
    return [x[i] + y[i] for i in range(k)]
def digsub_832d65ad(x):
    return [int(str(n)[:1] + ''.join(['8', '0', '9', '6', '1', '4', '2', '3', '7', '5'][int(p)] for p in str(n)[1:])) for n in x]
def csub_7f2211d8(x):
    return [x[i] - 2671072553 for i in range(k)]
def chmul_5fa96fe5(x):
    y = [ord(p) for p in '47b48c3c7ea61514edf7aecf3ae18aa36b3a']
    return [x[i] * y[i] for i in range(k)]
def deck_42869e5f(x):
    return x[27:35] + x[9:27] + x[35:] + x[:9]
def chunk_d99ad65b(x):
    # lmaooo
    return x[13:] + x[:13]
def xor_b59cd77f(x):
    y = [8982950503, 5629959792, 5489883565, 3436333973, 6680430162, 5739463504, 7835800605, 5689875053, 7693426817, 171655537, 120395694, 3570528058, 674571486, 7907456064, 5609791275, 8254936902, 8379478519, 5897794031, 6251220307, 1218420708, 5446581289, 3040169227, 5905322096, 7153535550, 5033520157, 2006239717, 8955094956, 159436841, 8379167085, 3874775079, 7803184702, 9346557919, 8894727905, 5840434871, 4752485895, 8966515549]
    return [x[i] ^ y[i] for i in range(k)]
def sub_b665fdaf(x):
    y = [9431667090, 8703972477, 6300700202, 2349737175, 7859747178, 6811416027, 2695493614, 9337094056, 6967642919, 8764172484, 2095846828, 8474707611, 3405415635, 5364989847, 1774151158, 9736779238, 3215650980, 7598425209, 9730852471, 3494279706, 5822105275, 3953344102, 3912783494, 9412832603, 3722552942, 6171923138, 3685771576, 9229108268, 9302172725, 3416507945, 8916018942, 2406088713, 9741248202, 4977159695, 1128309577, 5473760331]
    return [x[i] - y[i] for i in range(k)]
def cxor_f01c9df2(x):
    return [x[i] ^ 3221510779 for i in range(k)]
def shuffle_8abc2b43(x):
    return [x[p] for p in [28, 23, 25, 20, 17, 33, 21, 1, 31, 18, 15, 10, 29, 34, 35, 2, 30, 6, 26, 4, 12, 16, 0, 24, 22, 9, 14, 13, 11, 3, 32, 5, 27, 8, 19, 7]]
def shuffle_719cf56c(x):
    # just reverse it
    return [x[p] for p in [8, 20, 5, 7, 22, 28, 25, 17, 34, 1, 27, 30, 13, 4, 12, 31, 35, 18, 9, 11, 16, 26, 19, 21, 32, 29, 33, 6, 0, 24, 10, 2, 23, 3, 14, 15]]
def chadd_c9b892b7(x):
    # just reverse it
    y = [ord(p) for p in '9d625276d21b6b1108db144fd94de3b9c186']
    return [x[i] + y[i] for i in range(k)]
def digsub_e2130014(x):
    # lmaooo
    return [int(str(n)[:1] + ''.join(['9', '8', '1', '4', '7', '2', '0', '6', '5', '3'][int(p)] for p in str(n)[1:])) for n in x]
def deck_3b13c4fc(x):
    return x[:4] + x[24:34] + x[4:24] + x[34:]
def digsub_10a10009(x):
    # evil
    return [int(str(n)[:1] + ''.join(['6', '5', '9', '7', '2', '0', '3', '8', '4', '1'][int(p)] for p in str(n)[1:])) for n in x]
def sub_753032fe(x):
    y = [4082640427, 6520148180, 6965038547, 193738160, 509397626, 630533184, 6497351135, 2629452065, 1623799821, 3791109479, 8043966377, 9973213358, 8090881441, 8591776752, 7609408688, 4343148160, 4611569063, 9393261910, 4897607994, 9475171449, 3173575110, 8180551571, 2270140286, 965507602, 1704155322, 8032555884, 5533563848, 138195463, 3523476223, 2324237374, 8454951709, 6782731152, 8550332130, 215925527, 9814915369, 2251977579]
    return [x[i] - y[i] for i in range(k)]
def cmul_971d0d43(x):
    return [x[i] * 10 for i in range(k)]
def shuffle_f554897b(x):
    return [x[p] for p in [31, 17, 30, 20, 16, 33, 32, 10, 22, 4, 14, 0, 6, 11, 19, 35, 1, 5, 9, 3, 21, 8, 27, 26, 2, 7, 15, 28, 12, 24, 29, 13, 34, 25, 23, 18]]
def shuffle_a17bb4ee(x):
    return [x[p] for p in [18, 31, 20, 12, 32, 27, 22, 7, 30, 15, 8, 9, 10, 28, 2, 17, 11, 19, 16, 21, 1, 34, 24, 35, 4, 3, 23, 33, 13, 0, 5, 14, 29, 6, 26, 25]]
def cxor_40c47f57(x):
    # shiet?
    return [x[i] ^ 480114022 for i in range(k)]
def shuffle_3a65d143(x):
    # lel
    return [x[p] for p in [13, 28, 2, 31, 4, 26, 32, 6, 25, 30, 33, 23, 18, 9, 15, 35, 10, 21, 14, 11, 24, 8, 29, 7, 5, 0, 34, 19, 1, 27, 20, 3, 22, 16, 12, 17]]
def cmul_f65d51e7(x):
    return [x[i] * 10 for i in range(k)]
def chxor_da81821a(x):
    # lmaooo
    y = [ord(p) for p in '5101ac97c0cc620e42dcfe376bc72eec2628']
    return [x[i] ^ y[i] for i in range(k)]
def mul_492399d6(x):
    y = [4, 6, 4, 5, 2, 3, 2, 7, 8, 2, 4, 5, 2, 1, 2, 6, 1, 1, 1, 4, 2, 8, 7, 3, 6, 6, 7, 1, 7, 8, 7, 3, 6, 6, 1, 5]
    return [x[i] * y[i] for i in range(k)]
def chsub_33711b4f(x):
    y = [ord(p) for p in '596fede96790c138bb80d562bffe6b61bf90']
    return [x[i] - y[i] for i in range(k)]
def deck_e4154b2a(x):
    return x[:5] + x[13:27] + x[27:] + x[5:13]
def chxor_23198c86(x):
    y = [ord(p) for p in '3707cf9c0eb03245d5aa791dfa2b8bffba51']
    return [x[i] ^ y[i] for i in range(k)]
def sub_c62f3219(x):
    y = [821623254, 2126846676, 8811641816, 8973185251, 619665155, 9946926288, 3834181152, 183201162, 8435363687, 3023304229, 8831008562, 70145990, 4838935372, 9766693642, 3201004090, 4442847303, 4826861803, 7592749559, 8003563921, 9743582706, 2371763429, 8065913419, 7186810613, 1417614427, 1567973807, 8884047182, 9919989884, 3867247230, 6383143820, 8864649666, 7499678841, 7236643469, 3589441631, 884707504, 5522877119, 1231235982]
    return [x[i] - y[i] for i in range(k)]
def shuffle_74813596(x):
    return [x[p] for p in [9, 34, 5, 12, 27, 13, 0, 35, 19, 29, 21, 8, 1, 20, 16, 4, 28, 18, 24, 2, 14, 25, 11, 32, 23, 26, 7, 30, 33, 10, 22, 15, 17, 3, 6, 31]]
def mul_b74dfccf(x):
    # rekt
    y = [7, 6, 3, 8, 9, 10, 2, 1, 9, 9, 9, 7, 4, 7, 3, 6, 10, 8, 2, 8, 10, 5, 2, 7, 10, 2, 7, 3, 9, 7, 7, 5, 5, 2, 1, 1]
    return [x[i] * y[i] for i in range(k)]
def cxor_b2b4971b(x):
    # so good
    return [x[i] ^ 3731577463 for i in range(k)]
def deck_a3823a3c(x):
    # mucho encrypto
    return x[12:] + x[7:12] + x[1:7] + x[:1]
def cadd_64142db2(x):
    return [x[i] + 5848733455 for i in range(k)]
def chxor_7858401c(x):
    # evil
    y = [ord(p) for p in '2d2ee41576e643304b32ff2b9761cc2ca3e0']
    return [x[i] ^ y[i] for i in range(k)]
def chsub_4e9faeee(x):
    y = [ord(p) for p in '42cc908f9f7358c6e35a6d488c19270c722e']
    return [x[i] - y[i] for i in range(k)]
def chadd_a5fda7f8(x):
    y = [ord(p) for p in 'dd341d4f95b55b595e02230d4c47c2012612']
    return [x[i] + y[i] for i in range(k)]
def cxor_dfcb824e(x):
    return [x[i] ^ 4113460447 for i in range(k)]
def chxor_67aa494b(x):
    y = [ord(p) for p in '63e741eb97955a85c7456f2526ce443b6c53']
    return [x[i] ^ y[i] for i in range(k)]
def cadd_5fc3a121(x):
    return [x[i] + 5725655619 for i in range(k)]
def cmul_e4155cf9(x):
    # evil
    return [x[i] * 10 for i in range(k)]
def csub_486467f4(x):
    # evil
    return [x[i] - 3154091628 for i in range(k)]
def chxor_ee89b49e(x):
    # lmaooo
    y = [ord(p) for p in '5fb72453abb23d6d554501846129b0695176']
    return [x[i] ^ y[i] for i in range(k)]
def deck_67af13b1(x):
    # the best
    return x[1:29] + x[:1] + x[29:36] + x[36:]
def cmul_76185aa2(x):
    # lel
    return [x[i] * 6 for i in range(k)]
def cmul_45d4d761(x):
    return [x[i] * 4 for i in range(k)]
def cadd_fb85a094(x):
    # kek
    return [x[i] + 3488931280 for i in range(k)]
def add_e9f76a38(x):
    y = [4550220629, 3887547426, 59674311, 160511909, 6378420781, 3850391660, 441746314, 4763963531, 7157449428, 6550697779, 510362407, 3826591441, 9359441888, 9883956819, 2906245887, 3968567926, 7397232680, 216730172, 8501899647, 6208800072, 8230074254, 492604247, 3502241570, 3249728647, 8720660880, 5567118883, 9494363308, 4851319383, 5103773338, 76559778, 9282304276, 8750144024, 7685511932, 5307223610, 1083596776, 768538088]
    return [x[i] + y[i] for i in range(k)]
def deck_0f065998(x):
    return x[6:24] + x[24:26] + x[:6] + x[26:]
def xor_4e5c29b0(x):
    # just reverse it
    y = [4632523596, 1009549209, 3181955099, 6596933325, 5477722233, 2986782001, 8526243687, 1209743962, 320748216, 4815176939, 2242923518, 343027304, 9510369852, 9844592307, 2923562111, 5191482166, 1582790152, 8347812183, 221466190, 2678989239, 746204237, 9637693864, 2346800527, 4770858045, 2176108417, 5619239302, 5830585045, 5224462696, 8769958475, 1595829585, 2752848826, 6482571015, 2274558619, 9971676070, 916831906, 4510819868]
    return [x[i] ^ y[i] for i in range(k)]
def add_b510c979(x):
    y = [4226652788, 816013427, 1803848235, 5182675082, 788582430, 2391767372, 2618651337, 7991795083, 9605677710, 904560531, 3180212803, 3349010783, 995643923, 6064404757, 6798437591, 6791391378, 5269738231, 3620562910, 6192363062, 4808419811, 7289555812, 202675670, 3665733211, 3948857490, 1788374810, 4956166721, 5518560674, 5922308992, 2112598730, 5762753997, 9798765055, 9034765423, 1331685044, 524166680, 3779429791, 6633454221]
    return [x[i] + y[i] for i in range(k)]
def add_eb6ed9ef(x):
    # lmaooo
    y = [9522663389, 1890730755, 7420124551, 9678942678, 4248637114, 5239203069, 6494504400, 6336899886, 8906428055, 4944569195, 3454726933, 213328986, 8626916415, 4323102480, 905722950, 2555685604, 240938626, 2353740238, 9157575628, 8995638524, 9861244343, 69433559, 9205321306, 4370488592, 4757336983, 9256828135, 8183492017, 6443010905, 5962247737, 6713028377, 5936601207, 7155042966, 3781550135, 5005124558, 2727521729, 4370612916]
    return [x[i] + y[i] for i in range(k)]
def xor_11751251(x):
    y = [7346545537, 5448959832, 1309681318, 4577793195, 1610372848, 1009796378, 1603130817, 6830741554, 3667950706, 6858988466, 3320914621, 6603568931, 1409898800, 2841386269, 7177335008, 6191983666, 4230328001, 6462891370, 1216250188, 7147508249, 7916976368, 2470996981, 3287291328, 4648949970, 8843829195, 6645310096, 6549684580, 7102722130, 2566769205, 4545510978, 3976439800, 7754561484, 9956494949, 3581534902, 4153419426, 3787140863]
    return [x[i] ^ y[i] for i in range(k)]
def cadd_6ae07a4d(x):
    return [x[i] + 1602810248 for i in range(k)]
def cadd_21257952(x):
    return [x[i] + 6969547873 for i in range(k)]
def chadd_1f526c5a(x):
    # just reverse it
    y = [ord(p) for p in '9f64528ff12c571c517efff87532d6af1867']
    return [x[i] + y[i] for i in range(k)]
def chsub_082be74e(x):
    # just reverse it
    y = [ord(p) for p in 'c3ef482e3bc021eb72cabf02cfd7dd548644']
    return [x[i] - y[i] for i in range(k)]
def sub_2ccd274d(x):
    # mucho encrypto
    y = [9250338102, 2901453664, 5945757073, 7718347478, 7384366109, 3521705365, 8876543607, 4170845583, 2897066488, 411914811, 5081567774, 5223614144, 8635291591, 4670711598, 8812441258, 6528296323, 8375537895, 2869339825, 9243788072, 4529082929, 9589826409, 5719692332, 628961780, 2093879552, 4829795117, 8514236434, 213110854, 9802100111, 3891499954, 7942685882, 9899176801, 3577820442, 5677169557, 682909725, 2310204410, 6350010958]
    return [x[i] - y[i] for i in range(k)]
def shuffle_6a444585(x):
    return [x[p] for p in [14, 34, 22, 6, 9, 30, 17, 27, 29, 0, 32, 7, 21, 28, 16, 12, 1, 8, 33, 26, 4, 18, 11, 23, 2, 15, 31, 3, 19, 35, 24, 20, 25, 10, 13, 5]]
def chadd_bd0ec963(x):
    y = [ord(p) for p in 'ffed8d3550a817dad9b184182ae233ef8655']
    return [x[i] + y[i] for i in range(k)]
def cmul_ee26b387(x):
    return [x[i] * 4 for i in range(k)]
def chadd_a331e2c1(x):
    # so good
    y = [ord(p) for p in 'e2443e635cbc55b1821a534c8f1888d6758a']
    return [x[i] + y[i] for i in range(k)]
def csub_026b559f(x):
    # rekt
    return [x[i] - 5677307203 for i in range(k)]
def cadd_80971c79(x):
    # lel
    return [x[i] + 5782436865 for i in range(k)]
def xor_ad34030d(x):
    # rekt
    y = [221731208, 7461743070, 2067682825, 5939230180, 6112297049, 2606409997, 9458143582, 6393204958, 6943649543, 1567192361, 5346623175, 8074998020, 9669052098, 2806405990, 886138482, 1919810938, 9106223998, 6171321646, 7559785004, 6644602907, 3901454340, 9589773612, 9007552418, 5576771995, 4238691984, 8883168880, 5641228001, 8984874013, 2453641093, 5433140386, 3438976112, 3637254330, 1625529915, 5572914343, 8296491916, 2523088896]
    return [x[i] ^ y[i] for i in range(k)]
def chsub_9c3ae2d0(x):
    y = [ord(p) for p in 'd582a7cc976f10f3b8de12ae8ea194004caa']
    return [x[i] - y[i] for i in range(k)]
def chxor_72c80534(x):
    y = [ord(p) for p in 'f91c23eaeba46d81a42c6f2bcf44b4ca0df1']
    return [x[i] ^ y[i] for i in range(k)]
def chsub_ee1754a3(x):
    # the best
    y = [ord(p) for p in '681dd24248cc4ab3e48df31ba046454f15ed']
    return [x[i] - y[i] for i in range(k)]
def shuffle_6ed87304(x):
    # just reverse it
    return [x[p] for p in [13, 28, 23, 0, 20, 21, 35, 32, 29, 15, 5, 22, 7, 27, 34, 3, 2, 33, 11, 10, 16, 8, 4, 18, 26, 31, 14, 12, 1, 24, 9, 17, 6, 25, 30, 19]]
def digsub_0afb900b(x):
    # so good
    return [int(str(n)[:1] + ''.join(['9', '7', '6', '3', '5', '4', '8', '1', '2', '0'][int(p)] for p in str(n)[1:])) for n in x]
def cadd_1c3f6ab8(x):
    return [x[i] + 3644673815 for i in range(k)]
def cmul_86b4d215(x):
    return [x[i] * 10 for i in range(k)]
def chmul_8e421910(x):
    y = [ord(p) for p in '09d84a08a87ce47aa4722d54dd510b7bcf7d']
    return [x[i] * y[i] for i in range(k)]
def xor_b4ec6205(x):
    y = [9222752004, 215720674, 2588566784, 4023826823, 5416700575, 8702767112, 703005477, 7888068046, 573521583, 4882926618, 1024796677, 3915340193, 5823823051, 2690921747, 6471933653, 886395304, 2834620962, 7987616433, 6594422976, 9821187329, 3424116716, 6737542357, 5236709072, 1590172258, 3271350106, 2506752964, 4703620063, 6030958661, 8749226504, 7130330992, 5870153311, 1687749609, 4485699993, 3222165918, 4148553629, 4431255500]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_9970853d(x):
    return x[4:] + x[:4]
def cadd_ba362142(x):
    # rekt
    return [x[i] + 4586546984 for i in range(k)]
def cmul_1620fc61(x):
    # the flag is flag{jk}
    return [x[i] * 10 for i in range(k)]
def digsub_74f80d9b(x):
    return [int(str(n)[:1] + ''.join(['9', '0', '2', '4', '5', '3', '7', '8', '1', '6'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_5af32334(x):
    # rekt
    y = [ord(p) for p in '4df0b10fe74cdcd518a048f2b40b7cec336f']
    return [x[i] * y[i] for i in range(k)]
def sub_dfb02634(x):
    y = [8805409599, 9844199097, 5044862641, 6634162176, 9260565828, 9016354369, 3158318381, 6346759351, 817345748, 86225313, 1120448409, 2807013370, 5193752363, 1050760033, 7656994816, 6088314696, 900121193, 2514218532, 2594707241, 3242925372, 1924576271, 4775871786, 6253784364, 1289201802, 6094567165, 9924886174, 1728619344, 7634619228, 4309564987, 1161563518, 6193898522, 7151011282, 6956578825, 8187040084, 9475791624, 9098734708]
    return [x[i] - y[i] for i in range(k)]
def chsub_de16135d(x):
    # the flag is flag{jk}
    y = [ord(p) for p in 'c476cefb11f47ccdbcf15641010b9674bf5e']
    return [x[i] - y[i] for i in range(k)]
def chunk_24c352a1(x):
    return x[25:] + x[:25]
def deck_e5d36a82(x):
    # mucho encrypto
    return x[:12] + x[12:32] + x[32:33] + x[33:]
def digsub_94dd3136(x):
    return [int(str(n)[:1] + ''.join(['7', '9', '6', '0', '2', '4', '5', '8', '3', '1'][int(p)] for p in str(n)[1:])) for n in x]
def csub_c3302d5b(x):
    return [x[i] - 931806204 for i in range(k)]
def shuffle_8a66e8f2(x):
    return [x[p] for p in [8, 16, 23, 2, 6, 17, 9, 18, 29, 31, 24, 0, 14, 4, 34, 26, 25, 21, 13, 33, 15, 3, 35, 5, 32, 12, 22, 20, 7, 30, 28, 27, 1, 19, 11, 10]]
def shuffle_6186b5b1(x):
    return [x[p] for p in [15, 4, 32, 26, 14, 2, 1, 6, 8, 31, 24, 27, 13, 17, 22, 28, 3, 35, 5, 19, 30, 12, 33, 7, 29, 10, 0, 25, 21, 34, 18, 20, 9, 23, 11, 16]]
def mul_2c8e35d6(x):
    # mucho encrypto
    y = [3, 3, 1, 3, 3, 3, 4, 1, 5, 2, 3, 5, 2, 5, 4, 5, 5, 5, 3, 5, 5, 2, 5, 2, 3, 5, 3, 2, 2, 4, 1, 5, 5, 5, 4, 2]
    return [x[i] * y[i] for i in range(k)]
def cxor_11a1bb19(x):
    # evil
    return [x[i] ^ 7269113715 for i in range(k)]
def cadd_e4e4c9c0(x):
    return [x[i] + 2939303565 for i in range(k)]
def add_d1eb8814(x):
    y = [754543135, 2125804343, 7153862332, 132147915, 1674965845, 128085979, 8513109067, 5551515212, 9320608966, 1904268770, 1352858575, 1915214027, 9589488272, 4534794086, 2747409621, 4071279968, 8233000288, 6110271759, 6339295350, 1535420487, 8080404010, 6456431460, 3185126025, 2346190634, 6219279850, 2544806228, 8320927711, 6602720283, 5335646564, 9450558511, 151601310, 4055905254, 8288934776, 1207352429, 3198275850, 9545505604]
    return [x[i] + y[i] for i in range(k)]
def sub_2d595d46(x):
    # just reverse it
    y = [3184342642, 5005819660, 3379748654, 3067247999, 8462390338, 435502183, 3938315333, 8305872273, 6354668725, 5127355160, 7687729232, 6303602588, 7761114808, 4795176198, 6326400946, 4192000919, 2001728611, 1451511491, 3312908449, 9060746199, 7500417088, 8025670621, 8821002452, 8299237476, 5142270683, 1643737120, 5331345652, 1077514389, 8454458857, 4450053432, 3022645485, 6505956627, 3133400634, 1895999724, 7554210025, 4207589343]
    return [x[i] - y[i] for i in range(k)]
def cmul_b7f51e10(x):
    # the best
    return [x[i] * 8 for i in range(k)]
def digsub_f56a1358(x):
    # encryption
    return [int(str(n)[:1] + ''.join(['9', '8', '2', '4', '5', '1', '6', '0', '3', '7'][int(p)] for p in str(n)[1:])) for n in x]
def xor_78f0da60(x):
    # mucho encrypto
    y = [7501688343, 8002749201, 204989588, 5051909994, 8395924749, 1357443621, 9338079341, 8220625568, 9416108455, 1319130955, 7211156151, 9938905718, 7486719918, 8550645293, 5162195486, 598528008, 110887049, 5678439237, 730268420, 8259344839, 3185473506, 2024154137, 7818070201, 8604618167, 1864270479, 7047641423, 5819405003, 9783950084, 6873219406, 4031565998, 512097849, 2316138076, 77846242, 2794022247, 8862929058, 655221591]
    return [x[i] ^ y[i] for i in range(k)]
def cmul_8705a015(x):
    return [x[i] * 10 for i in range(k)]
def chsub_32f5910d(x):
    # so good
    y = [ord(p) for p in 'b443857bce8a69fea5ed41a07e07435136c9']
    return [x[i] - y[i] for i in range(k)]
def chsub_1d756bfc(x):
    y = [ord(p) for p in '6cae60c14ee06157c4af87657254959fbc2e']
    return [x[i] - y[i] for i in range(k)]
def chadd_db065984(x):
    # the best
    y = [ord(p) for p in '06b32f575f9b47806d5cf336fbec1ccd1e8c']
    return [x[i] + y[i] for i in range(k)]
def deck_c1afc6ef(x):
    # the best
    return x[:17] + x[17:18] + x[18:28] + x[28:]
def chunk_e120ffe1(x):
    return x[2:] + x[:2]
def digsub_5e7cd6f6(x):
    # shiet?
    return [int(str(n)[:1] + ''.join(['0', '6', '9', '2', '3', '7', '1', '5', '4', '8'][int(p)] for p in str(n)[1:])) for n in x]
def cxor_bbd7e7fe(x):
    return [x[i] ^ 7473984563 for i in range(k)]
def add_40ed3353(x):
    y = [8777491110, 3551453513, 8609795668, 2024101019, 8619052639, 5794332238, 2436220500, 3604061123, 6535225111, 9803483888, 7986537323, 5234202136, 7453382986, 2514142033, 2163857006, 520600754, 439561183, 9349269188, 9028143928, 1498479237, 2284834988, 635711916, 4176576992, 6979030357, 3810862397, 2819640226, 6419637398, 6886617680, 7588660665, 8148230760, 2019715727, 3718307490, 5944490335, 6046621031, 3571444281, 4757344529]
    return [x[i] + y[i] for i in range(k)]
def add_2af4f21d(x):
    y = [2552665920, 3741075070, 2212714082, 8336001151, 3073597634, 1886768538, 2908058095, 5522500876, 7549570155, 8893090543, 6613841808, 5240766394, 9595066426, 7776553834, 1579191043, 5060626220, 6216417991, 3131401948, 6662215187, 6079445238, 3251128418, 5367231488, 7072365535, 692527847, 7262676939, 3291782812, 2076485246, 7042186254, 9667298422, 4609533760, 7300841439, 2107338215, 8080034871, 7938392383, 1903586894, 2484927915]
    return [x[i] + y[i] for i in range(k)]
def cmul_9fab9317(x):
    return [x[i] * 3 for i in range(k)]
def cadd_3882e35e(x):
    # lel
    return [x[i] + 1484621520 for i in range(k)]
def cadd_6e163781(x):
    # lel
    return [x[i] + 5514832763 for i in range(k)]
def chunk_9b2dc824(x):
    # lel
    return x[18:] + x[:18]
def chxor_18fcc0f2(x):
    y = [ord(p) for p in '27e1f5b4494930cc16535d6b5929628c274f']
    return [x[i] ^ y[i] for i in range(k)]
def chmul_cf7d31c7(x):
    y = [ord(p) for p in '5b32091bbdb97ef29e7bf096bc301b97f756']
    return [x[i] * y[i] for i in range(k)]
def chadd_1fa30d24(x):
    # rekt
    y = [ord(p) for p in '8e70c0243cbe97c2324efca0324b08591ac2']
    return [x[i] + y[i] for i in range(k)]
def mul_29392dc2(x):
    y = [3, 1, 1, 5, 4, 7, 7, 6, 7, 3, 6, 8, 7, 5, 7, 3, 2, 1, 5, 3, 2, 2, 1, 3, 4, 3, 1, 7, 7, 2, 4, 4, 8, 3, 8, 8]
    return [x[i] * y[i] for i in range(k)]
def shuffle_0d275e0e(x):
    # encryption
    return [x[p] for p in [32, 20, 18, 10, 11, 9, 12, 26, 13, 16, 35, 1, 29, 25, 8, 3, 34, 22, 27, 2, 23, 19, 7, 30, 21, 17, 24, 14, 6, 4, 31, 5, 0, 33, 28, 15]]
def chunk_c1b1042d(x):
    # just reverse it
    return x[14:] + x[:14]
def cadd_d3782943(x):
    return [x[i] + 8740798876 for i in range(k)]
def shuffle_0b97d7ce(x):
    return [x[p] for p in [3, 33, 32, 1, 16, 19, 10, 34, 5, 24, 11, 35, 30, 0, 29, 7, 17, 13, 21, 31, 25, 28, 15, 20, 6, 23, 12, 9, 4, 26, 18, 14, 2, 27, 22, 8]]
def shuffle_ca27178d(x):
    # lmaooo
    return [x[p] for p in [31, 15, 21, 22, 23, 17, 5, 7, 34, 2, 4, 24, 20, 16, 29, 33, 1, 10, 11, 6, 14, 27, 28, 35, 32, 0, 13, 30, 18, 26, 9, 12, 19, 3, 25, 8]]
def chunk_a431061a(x):
    return x[27:] + x[:27]
def csub_d24d889b(x):
    # mucho encrypto
    return [x[i] - 7746399517 for i in range(k)]
def chxor_cd5d1c4b(x):
    # evil
    y = [ord(p) for p in '5953f54358c53a6b6db9a337059625ad9ec5']
    return [x[i] ^ y[i] for i in range(k)]
def deck_974b7c58(x):
    return x[16:22] + x[4:16] + x[:4] + x[22:]
def chmul_f1598a09(x):
    # kek
    y = [ord(p) for p in '313fc671e64363ab09ff2a1748d09f8858ca']
    return [x[i] * y[i] for i in range(k)]
def cxor_44afb555(x):
    return [x[i] ^ 9438714238 for i in range(k)]
def shuffle_7df2cac5(x):
    return [x[p] for p in [0, 23, 3, 33, 10, 18, 6, 4, 12, 19, 13, 34, 32, 5, 35, 27, 30, 15, 16, 8, 14, 2, 25, 22, 26, 21, 20, 9, 29, 24, 17, 1, 11, 31, 28, 7]]
def digsub_2a51613f(x):
    # lmaooo
    return [int(str(n)[:1] + ''.join(['8', '6', '5', '0', '2', '1', '7', '9', '3', '4'][int(p)] for p in str(n)[1:])) for n in x]
def cmul_ea21bbf8(x):
    return [x[i] * 5 for i in range(k)]
def xor_f87e36e2(x):
    # lel
    y = [999393688, 8764715469, 1391432105, 9555245790, 1083403737, 8277777444, 3730292139, 1383108380, 9907735243, 2055323303, 8817605209, 2529820241, 316190780, 2745808403, 7900758377, 9787841180, 550531358, 9997229355, 73354990, 6984141363, 4053647012, 7644957918, 1375499065, 6115740012, 7912788116, 3760780906, 6730531792, 4935100604, 124266923, 6955896469, 9559128357, 4695380108, 8132887986, 1884986256, 2156686016, 3145031923]
    return [x[i] ^ y[i] for i in range(k)]
def sub_e97e1ac7(x):
    # encryption
    y = [9444585203, 5899064212, 2395920452, 3372456190, 8271422667, 6901392108, 1681225426, 7160253785, 410463756, 9267876462, 4569644601, 1963023171, 1039487514, 2636575892, 9521233283, 1251055229, 9255213404, 2038200660, 6697350132, 781653678, 6642851998, 576031622, 4816531762, 3515918095, 1056229841, 8611341669, 3691790296, 3695510120, 5407106422, 7822915767, 7283035803, 125599336, 3342518215, 7696876507, 2184449132, 8316271624]
    return [x[i] - y[i] for i in range(k)]
def xor_0238a60c(x):
    y = [6103832480, 3463665531, 4134390266, 6199824270, 7741949013, 1088393827, 7963026083, 9676883799, 755826431, 7251061972, 4933774754, 7614928922, 6412787646, 2580634489, 6047172523, 3228943900, 6937999259, 9350569429, 6402901282, 1505577140, 8946009599, 9674097131, 2760317500, 9743441912, 8744887359, 1135661985, 4409454669, 791040369, 242048969, 3863562461, 6725807893, 3796313942, 2378817743, 7178847207, 8490031999, 4173279253]
    return [x[i] ^ y[i] for i in range(k)]
def chxor_d44107b6(x):
    y = [ord(p) for p in '4ebe91eba98ad53f29c0595c1e8b0c453756']
    return [x[i] ^ y[i] for i in range(k)]
def cxor_9c481fde(x):
    return [x[i] ^ 331033928 for i in range(k)]
def xor_c0421e98(x):
    # mucho encrypto
    y = [5395246489, 3746982945, 2619216940, 7150366174, 8290358255, 6736352647, 9854426699, 5548559464, 8243951335, 1057432511, 9142274814, 9534215238, 8809933836, 6721783376, 1999428928, 5700506973, 8178279722, 6565996896, 5874072491, 9803383824, 5982777177, 1716310579, 5481236600, 8101514135, 9016359316, 7732923849, 97525425, 8885152007, 3430445709, 7158970318, 5275351279, 2438435237, 7592425632, 869357978, 752028021, 3399254060]
    return [x[i] ^ y[i] for i in range(k)]
def chunk_13e026f7(x):
    return x[2:] + x[:2]
def cmul_d487af89(x):
    return [x[i] * 10 for i in range(k)]
def csub_1082bb6a(x):
    # the best
    return [x[i] - 7520607252 for i in range(k)]
def mul_4b619987(x):
    # lel
    y = [6, 2, 3, 3, 5, 4, 5, 6, 3, 6, 2, 4, 4, 6, 6, 5, 1, 4, 5, 2, 6, 2, 1, 3, 4, 1, 1, 5, 4, 3, 2, 4, 5, 4, 5, 5]
    return [x[i] * y[i] for i in range(k)]
def chmul_c4196221(x):
    # kek
    y = [ord(p) for p in '22b0e7a524e9783a537210d3006adcb11001']
    return [x[i] * y[i] for i in range(k)]
def shuffle_6fcd072c(x):
    # kek
    return [x[p] for p in [35, 22, 12, 11, 6, 5, 21, 17, 8, 16, 0, 10, 4, 26, 34, 3, 1, 33, 14, 23, 27, 25, 31, 7, 20, 24, 29, 18, 30, 32, 2, 15, 28, 13, 9, 19]]
def xor_70e5e457(x):
    y = [9481387000, 2048703024, 4824331660, 7557746832, 9627016789, 8081542709, 3884140729, 6655352276, 1445325325, 9647001488, 1687443344, 4063045418, 1469057925, 9007764756, 2264470660, 8034488250, 3754443827, 4276357210, 2162498095, 1279306897, 1959478485, 6348746195, 2595649854, 9239417045, 5625583931, 8319642453, 7717336729, 70454857, 465836218, 9582923676, 5168425344, 9147183757, 1837158877, 4432285693, 5560717615, 7224388593]
    return [x[i] ^ y[i] for i in range(k)]
def shuffle_41eb3e26(x):
    return [x[p] for p in [9, 34, 3, 7, 23, 33, 11, 30, 18, 10, 0, 26, 32, 16, 35, 21, 4, 15, 5, 13, 12, 8, 27, 1, 24, 2, 19, 6, 17, 14, 29, 20, 28, 31, 25, 22]]
def deck_e76b56c1(x):
    # just reverse it
    return x[6:11] + x[11:31] + x[31:] + x[:6]
def sub_653c19b3(x):
    # encryption
    y = [1021215538, 4163508392, 1290815820, 6840582301, 2106084553, 2524585971, 5948938908, 3050795237, 124242627, 3159333592, 7428872766, 311082906, 9530640863, 6094380321, 4059464766, 4770455079, 3002637331, 4612763580, 6685653044, 3141390736, 5547541200, 3157591789, 864245889, 8601032380, 6281134509, 9896145693, 4935219590, 1968324750, 8361011870, 3533584505, 8161835573, 4177202449, 3743289105, 7917300069, 1392421874, 9080128837]
    return [x[i] - y[i] for i in range(k)]
def digsub_febb8b71(x):
    return [int(str(n)[:1] + ''.join(['2', '3', '0', '7', '1', '6', '8', '5', '4', '9'][int(p)] for p in str(n)[1:])) for n in x]
def cxor_b8b43d96(x):
    return [x[i] ^ 3641553480 for i in range(k)]
def chsub_207ccdea(x):
    y = [ord(p) for p in '8afc01bda4419f04b4fabc5de83bdf2ef7a9']
    return [x[i] - y[i] for i in range(k)]
def digsub_4ed94ee3(x):
    return [int(str(n)[:1] + ''.join(['9', '8', '3', '2', '6', '4', '7', '5', '1', '0'][int(p)] for p in str(n)[1:])) for n in x]
def chmul_d06b2f3e(x):
    y = [ord(p) for p in '9d58ccec55719423f6050568c5ef7b6826a6']
    return [x[i] * y[i] for i in range(k)]
def sub_77f3b344(x):
    # mucho encrypto
    y = [4684370865, 7630156210, 6677764180, 6679255182, 2038729605, 3111456308, 3306812275, 7650978017, 818635795, 4955941087, 952654340, 1074411783, 361612427, 928112523, 4839257560, 8471584497, 9414178955, 8196278259, 2117863137, 9381875520, 7239153175, 754382823, 3158803894, 5724409899, 2080795308, 6871260601, 9597832671, 2065114769, 5906959498, 668050377, 1558724770, 8527418659, 8685468716, 1754475453, 8272187885, 2031002577]
    return [x[i] - y[i] for i in range(k)]
def cadd_40a2d9f1(x):
    return [x[i] + 214906266 for i in range(k)]
def deck_83105fdd(x):
    return x[:8] + x[17:32] + x[8:17] + x[32:]
def chunk_df8009b6(x):
    return x[18:] + x[:18]
def cmul_2badfc5b(x):
    return [x[i] * 6 for i in range(k)]
def cadd_65434b8c(x):
    # evil
    return [x[i] + 9689819871 for i in range(k)]
def chxor_57a0d20a(x):
    # rekt
    y = [ord(p) for p in '5e2796789f95f102e3754c79767678933125']
    return [x[i] ^ y[i] for i in range(k)]
def csub_7035f8db(x):
    return [x[i] - 6550746947 for i in range(k)]
def shuffle_40277085(x):
    # so good
    return [x[p] for p in [4, 18, 17, 33, 3, 20, 25, 0, 12, 21, 9, 5, 27, 35, 31, 29, 19, 26, 8, 28, 10, 11, 22, 23, 16, 1, 13, 34, 30, 15, 6, 2, 7, 14, 24, 32]]
def cmul_b305eb99(x):
    # lel
    return [x[i] * 5 for i in range(k)]
def sub_cfa999fe(x):
    # just reverse it
    y = [4216360838, 7038874663, 3812762789, 4833029628, 7741396685, 8869575454, 7501100697, 4977591893, 3780025942, 2108694226, 1726259904, 4574625338, 24807800, 4756713750, 8008399496, 9229264322, 3236612407, 662833681, 6855742907, 1780098673, 1337923923, 593408103, 207410366, 1690311824, 6290543379, 2904022965, 8115662727, 673938975, 7511290263, 880071956, 1763602376, 9733106557, 5883435168, 5448981362, 4023408324, 8078940486]
    return [x[i] - y[i] for i in range(k)]
def chmul_398837e8(x):
    y = [ord(p) for p in 'f8414dacf352d67a0a5157e4fd7534c39908']
    return [x[i] * y[i] for i in range(k)]
def xor_0b406c7d(x):
    y = [5319539539, 4700485228, 3243265015, 6829879338, 3144992754, 593612965, 8922868874, 8107435724, 8088636688, 4119083063, 9227046183, 5693224772, 6676034740, 7539036064, 4329968534, 6482584478, 3968764702, 8213165412, 1165008730, 8414362266, 7252672560, 6344047979, 4670006132, 6960383188, 239499727, 5491882263, 4798988031, 804212273, 1186548412, 9202093805, 2825000833, 7525906599, 8126289374, 80318782, 9411715819, 2583074638]
    return [x[i] ^ y[i] for i in range(k)]
def csub_b649d113(x):
    # the best
    return [x[i] - 6354828827 for i in range(k)]
def chadd_61a15596(x):
    y = [ord(p) for p in 'c5075d495094fd24ca4f93268c352b3fdda9']
    return [x[i] + y[i] for i in range(k)]
def digsub_d9a13c5e(x):
    return [int(str(n)[:1] + ''.join(['1', '8', '4', '2', '9', '0', '3', '6', '7', '5'][int(p)] for p in str(n)[1:])) for n in x]
def digsub_6dd6217e(x):
    return [int(str(n)[:1] + ''.join(['1', '9', '0', '7', '3', '8', '5', '6', '4', '2'][int(p)] for p in str(n)[1:])) for n in x]
def sub_44409df4(x):
    # the best
    y = [4703859271, 5437602108, 4672881278, 8583547380, 6089795277, 7079041015, 2126458554, 7093123777, 6934905120, 2172396592, 1880757672, 5431020436, 6446082165, 5246661763, 8285324154, 8351339006, 6359439052, 8035307698, 7674818906, 9616196774, 4761689378, 1368004978, 253194608, 6991719652, 8223938324, 8577109599, 4286475471, 6702066346, 2345983660, 8905040531, 1737350713, 5245977673, 2305057065, 8979458601, 7638420175, 4962661118]
    return [x[i] - y[i] for i in range(k)]


# heh, so evil


flag = chxor_57a0d20a(flag)
flag = add_55670ea5(flag)
flag = xor_a1a977f9(flag)
flag = digsub_93fe4930(flag)
flag = xor_ddb48d72(flag)
flag = chsub_1b8086f6(flag)
flag = chmul_fa12100c(flag)
flag = cxor_fa552213(flag)
flag = chunk_530e625c(flag)
flag = add_8db2a643(flag)
flag = csub_cea15a0b(flag)
flag = add_c93fcbda(flag)
flag = add_6300f0c0(flag)
flag = chunk_352f49d6(flag)
flag = sub_e383e4d5(flag)
flag = cmul_a2ec48eb(flag)
flag = cadd_1c3f6ab8(flag)
flag = sub_51975f8d(flag)
flag = csub_bdd64a1d(flag)
flag = chadd_5a85e49b(flag)
flag = cmul_fdbbadd8(flag)
flag = cxor_7bed28da(flag)
flag = chsub_1a499bac(flag)
flag = mul_9dbf3796(flag)
flag = mul_5c575cdb(flag)
flag = chsub_6acb4ef8(flag)
flag = sub_11293e74(flag)
flag = add_ec1d658a(flag)
flag = shuffle_3150238f(flag)
flag = csub_c8591293(flag)
flag = xor_efa5ece1(flag)
flag = digsub_d085a426(flag)
flag = chxor_ce40491b(flag)
flag = digsub_2f6deeb4(flag)
flag = cxor_53f93269(flag)
flag = chxor_9f1b55f6(flag)
flag = chunk_1cb05a9d(flag)
flag = sub_51e1902d(flag)
flag = sub_6b51b490(flag)
flag = mul_2dbeaa3b(flag)
flag = chsub_8590464c(flag)
flag = chsub_fb961764(flag)
flag = sub_5d7857eb(flag)
flag = chsub_de16135d(flag)
flag = xor_92fb1dc0(flag)
flag = chadd_51cbffb6(flag)
flag = digsub_10a10009(flag)
flag = chadd_967b4961(flag)
flag = chxor_f6c4d9ae(flag)
flag = chsub_0ee9fb58(flag)
flag = cadd_6d7e714e(flag)
flag = shuffle_4756c622(flag)
flag = chadd_5a85e49b(flag)
flag = mul_1a70b6a5(flag)
flag = chunk_c8598499(flag)
flag = mul_520721f3(flag)
flag = add_9009d319(flag)
flag = sub_a10ca0c8(flag)
flag = add_88cb654b(flag)
flag = add_99300f40(flag)
flag = chmul_2561cd28(flag)
flag = cxor_974a0f64(flag)
flag = chadd_0124a79d(flag)
flag = mul_e6b65f6c(flag)
flag = cxor_89b073e0(flag)
flag = cadd_91c03cb7(flag)
flag = cadd_2dd09d3d(flag)
flag = digsub_0d0244fc(flag)
flag = digsub_1f1582a8(flag)
flag = mul_ca0cc32d(flag)
flag = shuffle_8a10d0b7(flag)
flag = cmul_adeb1535(flag)
flag = cmul_cd2eddf4(flag)
flag = cadd_2dcf1992(flag)
flag = cxor_4cb585c4(flag)
flag = chsub_c4e082fd(flag)
flag = chadd_ec0fef0e(flag)
flag = chsub_76a99240(flag)
flag = chmul_d3cbaa99(flag)
flag = sub_fb458c7e(flag)
flag = sub_d3158d9a(flag)
flag = xor_0ebbd2b0(flag)
flag = chsub_77fcdd6e(flag)
flag = chunk_9532fc70(flag)
flag = cxor_b342528a(flag)
flag = sub_4efcb7e6(flag)
flag = chadd_c23de33f(flag)
flag = chxor_bcf0771e(flag)
flag = shuffle_82faa11e(flag)
flag = cxor_1adfeb4e(flag)
flag = cadd_3cbc013d(flag)
flag = chxor_db678917(flag)
flag = chadd_6a4e5b24(flag)
flag = shuffle_7dc0e0cb(flag)
flag = cadd_fc1ffff9(flag)
flag = cadd_a495112c(flag)
flag = chadd_bfbcfbbe(flag)
flag = shuffle_1676c2c9(flag)
flag = chxor_e2e70239(flag)
flag = chadd_d12574c1(flag)
flag = chxor_fad6bade(flag)
flag = chmul_d95ce6fa(flag)
flag = sub_90d65932(flag)
flag = chmul_aa4f6daf(flag)
flag = chsub_b9b2576f(flag)
flag = cmul_bf506846(flag)
flag = xor_a36d3d94(flag)
flag = cxor_9eab5098(flag)
flag = chxor_cb71a848(flag)
flag = chmul_004133b3(flag)
flag = chsub_36aaf90a(flag)
flag = xor_53593d21(flag)
flag = chsub_4a4043a6(flag)
flag = xor_77c70db2(flag)
flag = chadd_78099793(flag)
flag = mul_b8963b30(flag)
flag = mul_6bdc88d2(flag)
flag = shuffle_c5e07151(flag)
flag = chsub_ebadaefe(flag)
flag = digsub_4034f057(flag)
flag = chadd_84fac9b1(flag)
flag = chadd_c23de33f(flag)
flag = chsub_57719ac8(flag)
flag = chxor_db678917(flag)
flag = cmul_a0ab0dc2(flag)
flag = csub_6e812142(flag)
flag = csub_fdf338ac(flag)
flag = csub_8c5dcc87(flag)
flag = digsub_d22e4d9e(flag)
flag = sub_d45b504c(flag)
flag = chxor_4a6282f5(flag)
flag = cmul_615b3bac(flag)
flag = sub_f31829a3(flag)
flag = xor_829943bf(flag)
flag = chunk_b4b187d5(flag)
flag = sub_0d81146a(flag)
flag = csub_160421ef(flag)
flag = chxor_cb71a848(flag)
flag = cadd_99696e25(flag)
flag = add_e0bbf910(flag)
flag = chunk_faeac0c7(flag)
flag = csub_6e812142(flag)
flag = chxor_a987af1b(flag)
flag = cadd_b38e11c1(flag)
flag = shuffle_d9cf5546(flag)
flag = chadd_b29ed32e(flag)
flag = chunk_839a5ccb(flag)
flag = cmul_3152eceb(flag)
flag = sub_f3b58e44(flag)
flag = shuffle_c3bda042(flag)
flag = cmul_303b4073(flag)
flag = digsub_1755eb85(flag)
flag = chsub_e0feb99d(flag)
flag = chadd_61a15596(flag)
flag = cadd_8d1c2ebb(flag)
flag = digsub_aecf9a86(flag)
flag = cxor_182bdecc(flag)
flag = chadd_a5fda7f8(flag)
flag = digsub_703bfb0c(flag)
flag = chsub_2d6c78f3(flag)
flag = chxor_d44107b6(flag)
flag = chsub_cd79e5f6(flag)
flag = cadd_c2e41a30(flag)
flag = chadd_186dd996(flag)
flag = xor_30504fc8(flag)
flag = chunk_bb0e25ea(flag)
flag = digsub_aecf9a86(flag)
flag = xor_3b14c897(flag)
flag = xor_8a3ad979(flag)
flag = cxor_892833c6(flag)
flag = sub_9f4055fc(flag)
flag = chsub_e508cd4b(flag)
flag = xor_22b22c9a(flag)
flag = shuffle_0df0d459(flag)
flag = cxor_a4885bca(flag)
flag = chadd_27f19124(flag)
flag = csub_395783d4(flag)
flag = chunk_c761d499(flag)
flag = chadd_5d344985(flag)
flag = shuffle_c3a4eec2(flag)
flag = add_6a75af42(flag)
flag = chsub_91add2c2(flag)
flag = csub_16bab438(flag)
flag = chsub_27dae3ae(flag)
flag = chadd_cc6daaa1(flag)
flag = chunk_dbc6d3a2(flag)
flag = shuffle_1ff845ef(flag)
flag = chunk_af869716(flag)
flag = chadd_983dad8d(flag)
flag = chmul_16176275(flag)
flag = cmul_ac2fe6b4(flag)
flag = csub_936d88b2(flag)
flag = digsub_e0de2a5d(flag)
flag = shuffle_e8a5f5ef(flag)
flag = chadd_3fbbddb8(flag)
flag = csub_fe2f121a(flag)
flag = cxor_a0fe64b3(flag)
flag = cadd_09d85417(flag)
flag = chsub_f3a1330b(flag)
flag = xor_18093134(flag)
flag = mul_d62641f4(flag)
flag = csub_d3a63092(flag)
flag = add_377e663e(flag)
flag = digsub_262ebaa4(flag)
flag = digsub_1209d475(flag)
flag = cxor_31e27f48(flag)
flag = chxor_44d65ee9(flag)
flag = cxor_9752c63c(flag)
flag = cadd_caf674cf(flag)
flag = cmul_d22b5acf(flag)
flag = chxor_4f175e3b(flag)
flag = sub_c3134c11(flag)
flag = chsub_c78a57d0(flag)
flag = cadd_12c3036e(flag)
flag = cxor_e4b3ee28(flag)
flag = shuffle_dec87fe1(flag)
flag = chsub_91add2c2(flag)
flag = cxor_4cb585c4(flag)
flag = chadd_3e7b3151(flag)
flag = digsub_d4a46520(flag)
flag = chadd_d980e2e3(flag)
flag = digsub_69f3e773(flag)
flag = chmul_bd4ac691(flag)
flag = cadd_2a11e194(flag)
flag = cxor_2e302e67(flag)
flag = chadd_43e1206d(flag)
flag = chmul_b11a8b8c(flag)
flag = csub_63df48f0(flag)
flag = xor_060a0f63(flag)
flag = chunk_a763fb97(flag)
flag = sub_785b373a(flag)
flag = chsub_e0ab5693(flag)
flag = chunk_cd87c4de(flag)
flag = shuffle_879744de(flag)
flag = mul_3d1b9786(flag)
flag = add_ea0e7dc4(flag)
flag = cmul_16644eba(flag)
flag = add_ea0e7dc4(flag)
flag = cxor_1330b89b(flag)
flag = chxor_ad45b413(flag)
flag = xor_4208a184(flag)
flag = digsub_e671df40(flag)
flag = chxor_d01563ec(flag)
flag = chxor_8ee7d3f7(flag)
flag = shuffle_f89bee84(flag)
flag = chxor_b82fad32(flag)
flag = add_393870bc(flag)
flag = xor_a2c95310(flag)
flag = chsub_c1db5393(flag)
flag = chunk_0074c4bc(flag)
flag = chadd_51cbffb6(flag)
flag = mul_8502f399(flag)
flag = cmul_6f98e718(flag)
flag = cmul_b358c3b3(flag)
flag = cxor_fa9fe64d(flag)
flag = chadd_75030af7(flag)
flag = chadd_a5fda7f8(flag)
flag = mul_3d1b9786(flag)
flag = mul_16385c48(flag)
flag = xor_ed4e00db(flag)
flag = csub_024ef6f9(flag)
flag = shuffle_8abc2b43(flag)
flag = chsub_48f17d05(flag)
flag = xor_e689ffa0(flag)
flag = add_0f654473(flag)
flag = chmul_deae7468(flag)
flag = chmul_fa12100c(flag)
flag = chunk_8880753c(flag)
flag = chmul_9cb342ae(flag)
flag = cmul_60deac9a(flag)
flag = chmul_02f67fce(flag)
flag = chadd_a8439bc3(flag)
flag = shuffle_b63d8098(flag)
flag = xor_39a60514(flag)
flag = chmul_26940e3b(flag)
flag = chxor_31b5069b(flag)
flag = cmul_b6542da7(flag)
flag = chsub_207ccdea(flag)
flag = chmul_8e421910(flag)
flag = cadd_a6332778(flag)
flag = cmul_e510f1c4(flag)
flag = shuffle_0d275e0e(flag)
flag = sub_0cd6568b(flag)
flag = xor_f13936e3(flag)
flag = cadd_5afd7d69(flag)
flag = sub_5e361569(flag)
flag = chadd_b3214236(flag)
flag = chsub_619c6037(flag)
flag = xor_34c86087(flag)
flag = digsub_2f6deeb4(flag)
flag = chxor_8a775b98(flag)
flag = chunk_2e1e8db3(flag)
flag = add_9dad90bf(flag)
flag = chxor_277a4952(flag)
flag = csub_b97c1316(flag)
flag = xor_49a34b54(flag)
flag = chadd_3b98f1b0(flag)
flag = shuffle_49c48148(flag)
flag = chmul_ba6b991f(flag)
flag = cmul_8ef7a9fc(flag)
flag = cmul_15edb219(flag)
flag = mul_a54dfca0(flag)
flag = xor_35062400(flag)
flag = shuffle_81777ea5(flag)
flag = xor_2a24945c(flag)
flag = sub_a148160b(flag)
flag = cxor_7bdcbf55(flag)
flag = add_158186ec(flag)
flag = digsub_dddb1e6b(flag)
flag = chmul_99d03179(flag)
flag = chunk_5e4879e0(flag)
flag = mul_70d397f8(flag)
flag = cxor_b2b4971b(flag)
flag = cadd_0a5ff345(flag)
flag = chxor_d23e056d(flag)
flag = cmul_63effb36(flag)
flag = chunk_b3c680b6(flag)
flag = csub_20a6b2c3(flag)
flag = cxor_fb665168(flag)
flag = shuffle_82faa11e(flag)
flag = cmul_9f53e257(flag)
flag = chunk_19abbb44(flag)
flag = cadd_0ab7b7d7(flag)
flag = digsub_b4f2bfbc(flag)
flag = chxor_845d20e4(flag)
flag = add_8eb87b67(flag)
flag = cadd_991ec901(flag)
flag = cadd_e69f5bf8(flag)
flag = add_867182be(flag)
flag = chsub_be722dbb(flag)
flag = sub_3c434ee5(flag)
flag = chunk_d09c8616(flag)
flag = xor_6cabd79d(flag)
flag = chmul_a39be275(flag)
flag = chmul_fc1bd11c(flag)
flag = add_7ea1ef19(flag)
flag = shuffle_c3bda042(flag)
flag = add_0919e3a2(flag)
flag = chadd_ebbb5dc5(flag)
flag = chsub_7b8aa8b8(flag)
flag = cxor_71fd1f39(flag)
flag = chmul_215a2fee(flag)
flag = csub_efe13119(flag)
flag = sub_085ded8f(flag)
flag = cmul_971d0d43(flag)
flag = chsub_5a5cbf95(flag)
flag = add_100ba22e(flag)
flag = cmul_ba434ed3(flag)
flag = chadd_9e80333c(flag)
flag = chsub_1ee9c5e9(flag)
flag = shuffle_0d458069(flag)
flag = chunk_cf8a51ed(flag)
flag = digsub_2684203b(flag)
flag = chadd_a4967b6b(flag)
flag = shuffle_7b8c9089(flag)
flag = cxor_ef4e4e70(flag)
flag = chunk_8703835d(flag)
flag = add_b6dbb476(flag)
flag = csub_cf019266(flag)
flag = chadd_3d456bc0(flag)
flag = chmul_b39f382d(flag)
flag = mul_9dbf3796(flag)
flag = add_784c3bff(flag)
flag = shuffle_8c8dc376(flag)
flag = chadd_c9b892b7(flag)
flag = xor_70e5e457(flag)
flag = chunk_df8009b6(flag)
flag = cmul_0c68dd02(flag)
flag = cadd_fa34d6b4(flag)
flag = chsub_dcb1a2a8(flag)
flag = cmul_2f1c4ba6(flag)
flag = cadd_0a20014b(flag)
flag = chunk_12fc1604(flag)
flag = chadd_93c92f11(flag)
flag = xor_276ba897(flag)
flag = chunk_fe7fd1c6(flag)
flag = chsub_dd5b964f(flag)
flag = shuffle_e4527971(flag)
flag = chxor_31537f25(flag)
flag = cxor_255a694d(flag)
flag = add_c6556187(flag)
flag = cmul_b6dff247(flag)
flag = chunk_cb1a7d77(flag)
flag = chadd_6d0c80a6(flag)
flag = mul_e0667d8e(flag)
flag = chsub_07a262a0(flag)
flag = cadd_81afebad(flag)
flag = csub_d37a1bf3(flag)
flag = chsub_0ee9fb58(flag)
flag = add_7553d25b(flag)
flag = cadd_838fe20a(flag)
flag = chxor_4447550e(flag)
flag = sub_8c476a01(flag)
flag = cadd_c66b787a(flag)
flag = chxor_a614acf2(flag)
flag = cmul_dce80096(flag)
flag = mul_7a676b8f(flag)
flag = chadd_c9b892b7(flag)
flag = cxor_df42d206(flag)
flag = shuffle_a6432e15(flag)
flag = xor_cfc75b41(flag)
flag = mul_fc9252b1(flag)
flag = shuffle_a09d75d9(flag)
flag = chunk_faeac0c7(flag)
flag = mul_33103309(flag)
flag = cadd_fd1d6bfc(flag)
flag = chmul_c042377c(flag)
flag = xor_75987462(flag)
flag = chsub_8590464c(flag)
flag = cmul_3df83c6a(flag)
flag = sub_40f8346a(flag)
flag = chsub_3bf8b0c8(flag)
flag = cmul_012b5eb8(flag)
flag = cadd_400b70cb(flag)
flag = shuffle_b0e9c01f(flag)
flag = cadd_e7cd385e(flag)
flag = mul_8502f399(flag)
flag = chsub_70e4436e(flag)
flag = xor_e6bc2bcf(flag)
flag = mul_384fbf08(flag)
flag = cmul_9e6c0fb6(flag)
flag = digsub_26596efe(flag)
flag = csub_417a5b3f(flag)
flag = sub_837cb5a5(flag)
flag = digsub_74f80d9b(flag)
flag = chsub_46fd8bb3(flag)
flag = chmul_645c1d15(flag)
flag = cmul_5ef49e31(flag)
flag = cmul_89ce7854(flag)
flag = chxor_cc8c61bf(flag)
flag = xor_1a989c5f(flag)
flag = digsub_d9a13c5e(flag)
flag = chadd_d95f9ffa(flag)
flag = shuffle_e666492b(flag)
flag = chmul_49ccc560(flag)
flag = xor_5af6d272(flag)
flag = xor_00e48dde(flag)
flag = add_1aa75a60(flag)
flag = chxor_c7f6ad65(flag)
flag = xor_5707171e(flag)
flag = chunk_ce24a612(flag)
flag = cmul_b358c3b3(flag)
flag = cmul_23a5f304(flag)
flag = add_e08d6566(flag)
flag = chadd_65a80365(flag)
flag = xor_d4b3bf17(flag)
flag = chunk_07e06228(flag)
flag = chsub_d64b63cc(flag)
flag = cadd_56facd4a(flag)
flag = cadd_f61d1530(flag)
flag = cadd_b83d6dfa(flag)
flag = chadd_b29ed32e(flag)
flag = shuffle_edb8a938(flag)
flag = cadd_ea861103(flag)
flag = chadd_ddff28b1(flag)
flag = chadd_7620a0b7(flag)
flag = add_71df7f95(flag)
flag = chmul_20b6f48e(flag)
flag = shuffle_3f9d1ce8(flag)
flag = cmul_65983a34(flag)
flag = add_3e8fa8db(flag)
flag = sub_aa1109df(flag)
flag = xor_ba2cb10f(flag)
flag = chxor_5f238dda(flag)
flag = cmul_f59de4d7(flag)
flag = add_ec1d658a(flag)
flag = chunk_8356e7c8(flag)
flag = cmul_00fd6c30(flag)
flag = xor_23eae5a3(flag)
flag = add_9b544b2a(flag)
flag = chunk_36ffef9b(flag)
flag = chsub_ca548f97(flag)
flag = shuffle_ce932b10(flag)
flag = cadd_b51d3eba(flag)
flag = cadd_779b79cd(flag)
flag = sub_734f1f1d(flag)
flag = shuffle_922a7e0d(flag)
flag = xor_f88ae7f1(flag)
flag = chunk_d99ad65b(flag)
flag = add_c2f77d7b(flag)
flag = xor_a04b2880(flag)
flag = csub_cb66374f(flag)
flag = digsub_3316ff72(flag)
flag = chmul_9522f239(flag)
flag = chmul_035bd60a(flag)
flag = shuffle_68814b98(flag)
flag = cmul_738aef71(flag)
flag = cxor_ad9ae418(flag)
flag = cadd_441443f1(flag)
flag = add_b7f3fb09(flag)
flag = chsub_3af5214b(flag)
flag = chmul_680cf464(flag)
flag = chunk_352f49d6(flag)
flag = cxor_8d584727(flag)
flag = cmul_ed0fd163(flag)
flag = csub_bf7e54b2(flag)
flag = sub_36eea33a(flag)
flag = chunk_697b441c(flag)
flag = xor_a36d3d94(flag)
flag = cmul_be878186(flag)
flag = chxor_65adc1af(flag)
flag = digsub_f316d9e1(flag)
flag = shuffle_866b2261(flag)
flag = cadd_fdc5f9f6(flag)
flag = chxor_42438acb(flag)
flag = chsub_30f73b24(flag)
flag = chxor_9b4a8975(flag)
flag = mul_01b0a78c(flag)
flag = add_e07c15bd(flag)
flag = add_502ea941(flag)
flag = cmul_65983a34(flag)
flag = cmul_aa40ede5(flag)
flag = add_eee6c971(flag)
flag = shuffle_3e606129(flag)
flag = chmul_7e4acef8(flag)
flag = cxor_0d1dcf5e(flag)
flag = chsub_dbf9111e(flag)
flag = csub_b56c06db(flag)
flag = chxor_013d1031(flag)
flag = cadd_d957f629(flag)
flag = cxor_4496ba54(flag)
flag = mul_5067d66a(flag)
flag = xor_0723c89e(flag)
flag = chadd_983dad8d(flag)
flag = cadd_fd35b517(flag)
flag = xor_5fc3579e(flag)
flag = chadd_a8439bc3(flag)
flag = csub_ec729961(flag)
flag = sub_bc852ad6(flag)
flag = shuffle_a17bb4ee(flag)
flag = cxor_d42f4ceb(flag)
flag = sub_1866fa1c(flag)
flag = csub_ef420147(flag)
flag = chmul_db134c2c(flag)
flag = chsub_cd79e5f6(flag)
flag = csub_417a5b3f(flag)
flag = shuffle_c5cb30a9(flag)
flag = chxor_f396db26(flag)
flag = chunk_515df396(flag)
flag = xor_2f985cdb(flag)
flag = sub_0ac2ba9f(flag)
flag = chxor_79daeaf3(flag)
flag = chxor_730db16c(flag)
flag = cmul_ace3a215(flag)
flag = digsub_2c3da0c6(flag)
flag = shuffle_0d526f11(flag)
flag = xor_d4b3bf17(flag)
flag = shuffle_efb3207c(flag)
flag = chsub_0e10b13d(flag)
flag = chadd_f2fd70f1(flag)
flag = chsub_3679cdb7(flag)
flag = cmul_06256c90(flag)
flag = cxor_30674cf4(flag)
flag = xor_00e48dde(flag)
flag = chadd_6128a54c(flag)
flag = chmul_398837e8(flag)
flag = cmul_971d0d43(flag)
flag = sub_fa8a3be1(flag)
flag = chunk_a763fb97(flag)
flag = chmul_aae03452(flag)
flag = chxor_a244aa4c(flag)
flag = sub_9f4055fc(flag)
flag = chadd_5d64f99d(flag)
flag = chxor_65adc1af(flag)
flag = csub_bf7e54b2(flag)
flag = chsub_59843fee(flag)
flag = digsub_e2dd946e(flag)
flag = mul_f80a89cf(flag)
flag = chmul_dac3ab2b(flag)
flag = chadd_51cfbbb7(flag)
flag = cmul_63f9fdde(flag)
flag = cxor_b8e23c90(flag)
flag = cadd_7e9514cb(flag)
flag = mul_043ce6a6(flag)
flag = chsub_21d8fc5d(flag)
flag = cxor_3e27fbe8(flag)
flag = chxor_29db699e(flag)
flag = mul_74c39d4d(flag)
flag = chsub_3af5214b(flag)
flag = chmul_7eb45a9e(flag)
flag = chsub_c7e9cf5d(flag)
flag = cxor_d1b86499(flag)
flag = chsub_93abfc5d(flag)
flag = shuffle_ee42405e(flag)
flag = cxor_98fe5771(flag)
flag = chunk_d9ce60f8(flag)
flag = sub_92f79353(flag)
flag = chxor_ffb48f69(flag)
flag = digsub_b4a68c58(flag)
flag = add_9d214583(flag)
flag = sub_7e5f5612(flag)
flag = chsub_b30f7244(flag)
flag = cxor_18ccd1a8(flag)
flag = shuffle_81df2959(flag)
flag = chsub_f57de7cd(flag)
flag = chxor_b3db6e83(flag)
flag = mul_2c8e35d6(flag)
flag = chunk_e3f6d2ec(flag)
flag = csub_8a4930e2(flag)
flag = shuffle_8a10d0b7(flag)
flag = xor_53593d21(flag)
flag = mul_53ea4a75(flag)
flag = sub_d4145101(flag)
flag = shuffle_69db3f4f(flag)
flag = xor_77c70db2(flag)
flag = mul_d23185db(flag)
flag = add_36fb4d7d(flag)
flag = mul_f345af6b(flag)
flag = cxor_98fe5771(flag)
flag = xor_702b624c(flag)
flag = chsub_7cdcbbaf(flag)
flag = chmul_0c42d6fc(flag)
flag = shuffle_88823dcd(flag)
flag = chmul_28162caa(flag)
flag = add_66171335(flag)
flag = shuffle_3d5811d2(flag)
flag = chxor_ce07c0ad(flag)
flag = chadd_cf38fd97(flag)
flag = shuffle_b20aa4f9(flag)
flag = shuffle_b20aa4f9(flag)
flag = chxor_fc74f7f2(flag)
flag = cmul_69eb6792(flag)
flag = cxor_86921258(flag)
flag = cmul_f98bab5d(flag)
flag = sub_eed83ea2(flag)
flag = chmul_5e1cf1e0(flag)
flag = chmul_584b1b88(flag)
flag = digsub_670300f2(flag)
flag = chmul_d3237ea8(flag)
flag = add_ca8439ba(flag)
flag = xor_fddd23ae(flag)
flag = digsub_1feeafe7(flag)
flag = digsub_63dc4ebb(flag)
flag = xor_2f985cdb(flag)
flag = cxor_24690d71(flag)
flag = mul_01b0a78c(flag)
flag = shuffle_68814b98(flag)
flag = shuffle_ffc10c41(flag)
flag = shuffle_18bb44b8(flag)
flag = cadd_e4b46665(flag)
flag = chunk_d99ad65b(flag)
flag = cadd_f79f3974(flag)
flag = cxor_697bee04(flag)
flag = cmul_971d0d43(flag)
flag = chsub_4fe6a0b8(flag)
flag = cadd_b70fc370(flag)
flag = chmul_d5be6ef1(flag)
flag = mul_50110bad(flag)
flag = chsub_e112aa83(flag)
flag = xor_2b6a5232(flag)
flag = add_a2c38523(flag)
flag = chadd_66038ddf(flag)
flag = chunk_0046d260(flag)
flag = cmul_c57ae7de(flag)
flag = add_604f7a16(flag)
flag = xor_0ebbd2b0(flag)
flag = cmul_9513451d(flag)
flag = chmul_e6742997(flag)
flag = cmul_72112381(flag)
flag = chmul_d4a185e3(flag)
flag = cmul_de3ea36c(flag)
flag = chsub_b9b2576f(flag)
flag = csub_cb66374f(flag)
flag = chxor_6d888483(flag)
flag = cxor_2eec2815(flag)
flag = chadd_8658906e(flag)
flag = chxor_41c79131(flag)
flag = chadd_a5fda7f8(flag)
flag = sub_960a2209(flag)
flag = chadd_c2522c75(flag)
flag = add_022bab8d(flag)
flag = csub_4e221287(flag)
flag = chunk_caa9baa3(flag)
flag = xor_2d9c7e1d(flag)
flag = xor_d7c70d50(flag)
flag = chxor_24ff0dd9(flag)
flag = chmul_78c19c03(flag)
flag = cxor_0c6bb32e(flag)
flag = sub_7198b6a2(flag)
flag = chsub_3bf8b0c8(flag)
flag = cmul_5b292fda(flag)
flag = sub_3c288b1c(flag)
flag = sub_f31829a3(flag)
flag = shuffle_40277085(flag)
flag = chadd_81dfe861(flag)
flag = digsub_0ea92eac(flag)
flag = cadd_b138e6e3(flag)
flag = chunk_c154a4b0(flag)
flag = shuffle_54e93000(flag)
flag = xor_f80d29fb(flag)
flag = xor_393c82c1(flag)
flag = csub_2448d6e4(flag)
flag = chxor_de94bd99(flag)
flag = sub_46493b1b(flag)
flag = cmul_32eb4436(flag)
flag = sub_e1d8193c(flag)
flag = mul_d952127d(flag)
flag = cmul_bac2ec72(flag)
flag = cxor_8396e79a(flag)
flag = chxor_3972d07b(flag)
flag = mul_bdb89cce(flag)
flag = cadd_79d7fa85(flag)
flag = shuffle_f6aee04d(flag)
flag = sub_5525246a(flag)
flag = digsub_981b52ce(flag)
flag = add_9591eabf(flag)
flag = cadd_648dbdbd(flag)
flag = cadd_6b0bc3e3(flag)
flag = sub_73623d40(flag)
flag = cxor_dfcb824e(flag)
flag = chsub_93abfc5d(flag)
flag = xor_5806c787(flag)
flag = csub_717c9f99(flag)
flag = xor_6ee9de87(flag)
flag = chunk_40051429(flag)
flag = cxor_7a8c0f91(flag)
flag = cmul_615b3bac(flag)
flag = add_837ef20b(flag)
flag = cadd_c1763a61(flag)
flag = chsub_b9b2576f(flag)
flag = shuffle_922a7e0d(flag)
flag = chadd_2eddab35(flag)
flag = cadd_d9e8611e(flag)
flag = mul_df940fbe(flag)
flag = sub_edd0e8fb(flag)
flag = cmul_3df83c6a(flag)
flag = chadd_f2f53a63(flag)
flag = sub_d3158d9a(flag)
flag = chunk_6b35af69(flag)
flag = cadd_9406ad37(flag)
flag = sub_6baa906d(flag)
flag = add_5dfc4b74(flag)
flag = chxor_6b786c2e(flag)
flag = chunk_be89d48a(flag)
flag = digsub_2c3da0c6(flag)
flag = mul_3feda191(flag)
flag = shuffle_41ece7da(flag)
flag = mul_df940fbe(flag)
flag = chmul_90f76848(flag)
flag = chsub_b591ca37(flag)
flag = xor_a1e6019f(flag)
flag = cadd_02aec3ae(flag)
flag = add_f11cd945(flag)
flag = chsub_38be16e5(flag)
flag = chunk_a998eeb4(flag)
flag = chxor_3dd86e1b(flag)
flag = add_de55f4f2(flag)
flag = cxor_77ffb5fc(flag)
flag = chmul_3d6abe7c(flag)
flag = sub_71bf262c(flag)
flag = cmul_25c2274e(flag)
flag = chsub_7178b8f3(flag)
flag = chxor_d48b7863(flag)
flag = digsub_31bf04a3(flag)
flag = chxor_ce31e412(flag)
flag = csub_30ac2fb9(flag)
flag = cadd_1c3f6ab8(flag)
flag = chmul_a1decfe1(flag)
flag = cmul_a00c082c(flag)
flag = digsub_f22e07b0(flag)
flag = sub_da5b779b(flag)
flag = xor_e1acd3bf(flag)
flag = chunk_eb268372(flag)
flag = cxor_0017f17c(flag)
flag = chsub_c48765e6(flag)
flag = csub_936d88b2(flag)
flag = chadd_9f220dc2(flag)
flag = chsub_76771162(flag)
flag = chmul_0db588dd(flag)
flag = chmul_47a26e6f(flag)
flag = shuffle_29c93f75(flag)
flag = chxor_12caeb3c(flag)
flag = chsub_f7d05960(flag)
flag = cmul_0bb3391d(flag)
flag = sub_9c3c91b4(flag)
flag = mul_a54dfca0(flag)
flag = cmul_8a7021fa(flag)
flag = sub_72e0ad9e(flag)
flag = xor_4e43f7ea(flag)
flag = mul_c3e69fa2(flag)
flag = chxor_49e5796a(flag)
flag = chadd_8fc702a9(flag)
flag = cadd_363ab440(flag)
flag = shuffle_17e23897(flag)
flag = chxor_3b22e51a(flag)
flag = mul_712130c5(flag)
flag = sub_2ec060e9(flag)
flag = xor_57c90fb5(flag)
flag = cxor_b8e23c90(flag)
flag = csub_512edb93(flag)
flag = cadd_d4d5a797(flag)
flag = xor_a175d05f(flag)
flag = digsub_21c1f0e1(flag)
flag = digsub_ab800369(flag)
flag = digsub_be47e356(flag)
flag = chunk_ae5488a0(flag)
flag = chunk_cd87c4de(flag)
flag = chmul_5fa96fe5(flag)
flag = csub_395783d4(flag)
flag = xor_8f24dd01(flag)
flag = chsub_3a9fd4f5(flag)
flag = sub_65dfc4a9(flag)
flag = cxor_f4744f0e(flag)
flag = chunk_21515ec1(flag)
flag = add_df9616a0(flag)
flag = cmul_82b0086b(flag)
flag = digsub_3f272635(flag)
flag = shuffle_45b62e3f(flag)
flag = shuffle_6136bc5b(flag)
flag = cmul_029f5e8d(flag)
flag = chmul_d95a813a(flag)
flag = chxor_ee89b49e(flag)
flag = cmul_b7f51e10(flag)
flag = chmul_dac3ab2b(flag)
flag = chadd_868635c7(flag)
flag = digsub_9b074471(flag)
flag = mul_89bed2ea(flag)
flag = chunk_56a0ded7(flag)
flag = csub_c9f7e43b(flag)
flag = chxor_24586d25(flag)
flag = chadd_39c0e18e(flag)
flag = csub_959f7557(flag)
flag = add_3631a2fd(flag)
flag = shuffle_496b2c86(flag)
flag = xor_27199205(flag)
flag = cmul_1f88fc08(flag)
flag = digsub_2b3a8dfd(flag)
flag = cmul_dd8d739c(flag)
flag = digsub_1d28a867(flag)
flag = chsub_84b4ec96(flag)
flag = sub_df2b698e(flag)
flag = chmul_e4e712b9(flag)
flag = xor_78429cb3(flag)
flag = digsub_afa62336(flag)
flag = csub_eb753ff1(flag)
flag = sub_a3d54f98(flag)
flag = cmul_f6c4c9dc(flag)
flag = mul_4a9471da(flag)
flag = chsub_2b33e666(flag)
flag = chadd_5544e38e(flag)
flag = digsub_7aec5b80(flag)
flag = chadd_3a3f3b47(flag)
flag = chsub_e87a1297(flag)
flag = cadd_8b78f764(flag)
flag = cadd_a5b24fcc(flag)
flag = cadd_b07f15df(flag)
flag = sub_3c288b1c(flag)
flag = chsub_56440f95(flag)
flag = chadd_37ffbfed(flag)
flag = xor_c6061863(flag)
flag = add_60fa40cf(flag)
flag = chunk_816b54df(flag)
flag = cmul_8d626e12(flag)
flag = chsub_a70db66e(flag)
flag = cadd_5acbd300(flag)
flag = cmul_7ad45fd6(flag)
flag = xor_7c90aa84(flag)
flag = chsub_f57de7cd(flag)
flag = xor_eca7972f(flag)
flag = cxor_822e6d4f(flag)
flag = sub_32cc1a97(flag)
flag = cmul_a0ab0dc2(flag)
flag = add_8eb87b67(flag)
flag = chxor_36059956(flag)
flag = xor_2d9c7e1d(flag)
flag = digsub_6be19c93(flag)
flag = chxor_6b41b0f3(flag)
flag = cxor_e86ea0c2(flag)
flag = cxor_7be08bad(flag)
flag = cadd_594b40aa(flag)
flag = cadd_ea9ca040(flag)
flag = mul_9e94e89a(flag)
flag = sub_6fb5c242(flag)
flag = add_9573eecb(flag)
flag = chadd_8658906e(flag)
flag = digsub_9bb50253(flag)
flag = cmul_1f88fc08(flag)
flag = chunk_44d36e8a(flag)
flag = cmul_93bd1510(flag)
flag = add_52b814e5(flag)
flag = csub_ed2f200a(flag)
flag = chsub_0b4adf36(flag)
flag = csub_1082bb6a(flag)
flag = chadd_f78e9fb5(flag)
flag = csub_96f86ad8(flag)
flag = chmul_04649cec(flag)
flag = chunk_88bc39ba(flag)
flag = chunk_97573788(flag)
flag = shuffle_fe7bcc78(flag)
flag = chxor_97c61f30(flag)
flag = shuffle_1011fc21(flag)
flag = cmul_ea158364(flag)
flag = mul_137ad3d1(flag)
flag = csub_22d4400c(flag)
flag = cadd_03187d75(flag)
flag = shuffle_5cd09bb7(flag)
flag = chmul_7e4acef8(flag)
flag = add_b6cb0782(flag)
flag = add_718a4547(flag)
flag = cadd_64c6e595(flag)
flag = add_1a353536(flag)
flag = chxor_2d0c7130(flag)
flag = csub_e2410a5c(flag)
flag = cmul_75c87098(flag)
flag = shuffle_b1134b2a(flag)
flag = chunk_b1f55538(flag)
flag = digsub_f0bd3d90(flag)
flag = digsub_f8ed932c(flag)
flag = chsub_421c0466(flag)
flag = add_42869331(flag)
flag = chmul_efbeeb2f(flag)
flag = chunk_fa703d6a(flag)
flag = shuffle_77f02835(flag)
flag = chmul_5f9891b6(flag)
flag = shuffle_7813ad6f(flag)
flag = chadd_6128a54c(flag)
flag = digsub_ba2f366a(flag)
flag = chxor_68adccd3(flag)
flag = chsub_167fa647(flag)
flag = chxor_f309545e(flag)
flag = shuffle_866b2261(flag)
flag = cadd_007b2c57(flag)
flag = cadd_5b4e9aab(flag)
flag = add_c3181859(flag)
flag = cadd_76aab783(flag)
flag = add_c1abafc2(flag)
flag = chunk_bf78a71f(flag)
flag = cmul_cf6813e9(flag)
flag = chmul_27f0b944(flag)
flag = shuffle_057518f5(flag)
flag = digsub_6e4a7a18(flag)
flag = sub_e6d0323d(flag)
flag = xor_6cabd79d(flag)
flag = chunk_1d45076c(flag)
flag = add_565903f4(flag)
flag = add_b7f3fb09(flag)
flag = digsub_b4a68c58(flag)
flag = digsub_ddee790f(flag)
flag = chmul_deae7468(flag)
flag = cadd_64c6e595(flag)
flag = xor_3994c2ad(flag)
flag = sub_63fceeb9(flag)
flag = chsub_f15fc200(flag)
flag = csub_4e221287(flag)
flag = csub_9678c8c9(flag)
flag = chmul_8cfb1503(flag)
flag = add_93fdd277(flag)
flag = digsub_c24462ab(flag)
flag = cmul_f851d67c(flag)
flag = add_125357c0(flag)
flag = cmul_9ea3f862(flag)
flag = chmul_6834bec9(flag)
flag = chxor_de5cf1af(flag)
flag = csub_69098245(flag)
flag = shuffle_57fe470a(flag)
flag = chadd_5a85e49b(flag)
flag = sub_be3b1a5a(flag)
flag = chsub_8590464c(flag)
flag = chxor_f396db26(flag)
flag = xor_5c4520e3(flag)
flag = csub_fc0bc142(flag)
flag = chunk_a9c428c6(flag)
flag = chsub_a0999ab2(flag)
flag = cmul_1fd240a5(flag)
flag = chunk_b4139adc(flag)
flag = cxor_a009b999(flag)
flag = cadd_e9f8600c(flag)
flag = sub_2dfefd1b(flag)
flag = cadd_61a362c2(flag)
flag = shuffle_cadeb447(flag)
flag = sub_753032fe(flag)
flag = digsub_b0591b22(flag)
flag = xor_e32cc6e3(flag)
flag = csub_737d4c67(flag)
flag = cadd_e4e4c9c0(flag)
flag = chxor_7af39ede(flag)
flag = shuffle_c8f4c133(flag)
flag = cadd_01e4dea4(flag)
flag = sub_fb458c7e(flag)
flag = mul_4084757c(flag)
flag = chunk_515df396(flag)
flag = xor_2ec3c23c(flag)
flag = csub_edb15e4c(flag)
flag = chxor_fa8c5c5f(flag)
flag = add_f2a6c048(flag)
flag = chsub_4c5385aa(flag)
flag = shuffle_866b2261(flag)
flag = cmul_ad3ab72b(flag)
flag = chsub_b60cec96(flag)
flag = digsub_9b074471(flag)
flag = shuffle_9076b7e7(flag)
flag = digsub_2684203b(flag)
flag = shuffle_a3c6e740(flag)
flag = mul_49cd764a(flag)
flag = chmul_885659c9(flag)
flag = digsub_c4e4d709(flag)
flag = csub_8322948c(flag)
flag = chmul_db134c2c(flag)
flag = chunk_1045daa0(flag)
flag = mul_78cdcde8(flag)
flag = csub_8a92b818(flag)
flag = chmul_068c4ae9(flag)
flag = chmul_49e5e1c7(flag)
flag = cxor_0e701321(flag)
flag = cadd_6abb159d(flag)
flag = digsub_1f1582a8(flag)
flag = chadd_f2fd70f1(flag)
flag = mul_b2698654(flag)
flag = chxor_55925b33(flag)
flag = chxor_733c74e9(flag)
flag = cxor_41f67d77(flag)
flag = cadd_f59f3dd1(flag)
flag = sub_468e1495(flag)
flag = chmul_58875bd8(flag)
flag = shuffle_328f0268(flag)
flag = cadd_d04bb716(flag)
flag = xor_28c1cc46(flag)
flag = mul_18205495(flag)
flag = shuffle_520f2eb6(flag)
flag = shuffle_b16c2957(flag)
flag = cmul_c288fd59(flag)
flag = digsub_6be19c93(flag)
flag = sub_5d7857eb(flag)
flag = chsub_92f27399(flag)
flag = chmul_5b21f3a5(flag)
flag = cadd_94b8e069(flag)
flag = chsub_df08aee7(flag)
flag = cmul_fdbbadd8(flag)
flag = cmul_054249fc(flag)
flag = cxor_cc615bb3(flag)
flag = add_d2c1e8bc(flag)
flag = add_f26d8b4c(flag)
flag = chunk_31cdb624(flag)
flag = add_aae6cc04(flag)
flag = mul_8cff30c9(flag)
flag = sub_a62e014f(flag)
flag = chunk_bdaa57c3(flag)
flag = mul_8c56f020(flag)
flag = chsub_31abc2cf(flag)
flag = sub_4a2fd9ee(flag)
flag = chadd_5171aa72(flag)
flag = xor_2d9c7e1d(flag)
flag = mul_a2581ad1(flag)
flag = cadd_0a20014b(flag)
flag = chxor_59b7fb58(flag)
flag = cmul_259fe9ec(flag)
flag = shuffle_0a4f92ab(flag)
flag = chunk_0074c4bc(flag)
flag = sub_51e1902d(flag)
flag = cxor_255a694d(flag)
flag = xor_a1a977f9(flag)
flag = chsub_f09042f0(flag)
flag = add_f22a99f3(flag)
flag = add_da9b8954(flag)
flag = chadd_226738ed(flag)
flag = cadd_407bbf2e(flag)
flag = cmul_111bce58(flag)
flag = chunk_aad9a6a9(flag)
flag = xor_f7706b03(flag)
flag = xor_94f0d244(flag)
flag = chmul_20b6f48e(flag)
flag = add_07231911(flag)
flag = xor_b601f000(flag)
flag = cxor_c9c75462(flag)
flag = shuffle_58938b75(flag)
flag = chmul_9522f239(flag)
flag = chxor_49c8f56a(flag)
flag = mul_78cdcde8(flag)
flag = sub_6321bdd8(flag)
flag = chsub_3121e9c6(flag)
flag = cadd_d957f629(flag)
flag = add_12e64206(flag)
flag = add_34a7ffc5(flag)
flag = digsub_3316ff72(flag)
flag = cadd_d4d5a797(flag)
flag = cadd_12c3036e(flag)
flag = cadd_779b79cd(flag)
flag = mul_b8963b30(flag)
flag = cadd_d3782943(flag)
flag = csub_0356de94(flag)
flag = csub_bdd64a1d(flag)
flag = xor_5707171e(flag)
flag = add_1f81f37b(flag)
flag = mul_492399d6(flag)
flag = cxor_22b4a127(flag)
flag = cadd_16cd7d25(flag)
flag = chmul_5c3ce310(flag)
flag = add_882b6a0b(flag)
flag = cxor_0aedee08(flag)
flag = chsub_e87a1297(flag)
flag = add_100ba22e(flag)
flag = sub_3428aff7(flag)
flag = csub_a60ad993(flag)
flag = chmul_068c4ae9(flag)
flag = csub_2645ed31(flag)
flag = chmul_49e5e1c7(flag)
flag = mul_a43ce0da(flag)
flag = xor_2b415907(flag)
flag = xor_c3591520(flag)
flag = mul_4369dd0c(flag)
flag = chxor_02646472(flag)
flag = xor_339b9a13(flag)
flag = chmul_02f67fce(flag)
flag = add_917bbbbc(flag)
flag = digsub_ef3c36c5(flag)
flag = chmul_a6bf2367(flag)
flag = sub_92b6d92c(flag)
flag = shuffle_7dc0e0cb(flag)
flag = chunk_19abbb44(flag)
flag = chunk_c47f2b0e(flag)
flag = cadd_ae3d5a54(flag)
flag = chunk_d9927f3d(flag)
flag = chsub_be9e6b3a(flag)
flag = digsub_bbf1a156(flag)
flag = chsub_4c5385aa(flag)
flag = cadd_14ae0fe3(flag)
flag = digsub_a821dc7d(flag)
flag = chxor_de94bd99(flag)
flag = csub_3c2b1960(flag)
flag = chadd_6156d6db(flag)
flag = chsub_33711b4f(flag)
flag = chadd_2da7db06(flag)
flag = chunk_e4be2495(flag)
flag = shuffle_43decbdf(flag)
flag = chsub_c1275525(flag)
flag = mul_d900d8ed(flag)
flag = chadd_66038ddf(flag)
flag = chadd_9e80333c(flag)
flag = chsub_daf292bd(flag)
flag = shuffle_467b8ca7(flag)
flag = shuffle_4b183fad(flag)
flag = shuffle_88823dcd(flag)
flag = xor_0723c89e(flag)
flag = chadd_5fc42fbd(flag)
flag = csub_c8591293(flag)
flag = sub_e1d8193c(flag)
flag = chadd_6c281254(flag)
flag = chmul_794b5292(flag)
flag = xor_8833c00c(flag)
flag = add_bb11d3eb(flag)
flag = chmul_73d44dfc(flag)
flag = mul_589a2ea6(flag)
flag = shuffle_2de78ecc(flag)
flag = csub_9033c843(flag)
flag = chmul_5dac5c0c(flag)
flag = chmul_f5bde247(flag)
flag = add_79292e38(flag)
flag = cmul_a2ec48eb(flag)
flag = chunk_66d22063(flag)
flag = chunk_d09c8616(flag)
flag = shuffle_72671ce6(flag)
flag = shuffle_47929ded(flag)
flag = xor_cb183615(flag)
flag = sub_53b0de62(flag)
flag = csub_cdf29b6e(flag)
flag = add_8e1a7afe(flag)
flag = shuffle_a7b0cb57(flag)
flag = xor_82a4d513(flag)
flag = cmul_0bb3391d(flag)
flag = chsub_5d86241d(flag)
flag = chunk_e120ffe1(flag)
flag = chadd_3d5f0a2c(flag)
flag = add_7af2fe07(flag)
flag = cxor_da3537d5(flag)
flag = xor_b7dd3197(flag)
flag = digsub_f9d31323(flag)
flag = cadd_2ba6325c(flag)
flag = chsub_4c1e3f38(flag)
flag = cxor_41764223(flag)
flag = cadd_429f802a(flag)
flag = cxor_bba6fa0a(flag)
flag = chadd_e5b699cb(flag)
flag = xor_46eb3b29(flag)
flag = add_ea027a3a(flag)
flag = digsub_d70c6f19(flag)
flag = cmul_8facd3c6(flag)
flag = cxor_c9bff23d(flag)
flag = chmul_05b6d674(flag)
flag = shuffle_36c9353b(flag)
flag = sub_1d06041f(flag)
flag = cadd_7016b7d0(flag)
flag = cxor_7bed28da(flag)
flag = digsub_46d7afa7(flag)
flag = digsub_1b9caedc(flag)
flag = sub_c8e4bd2d(flag)
flag = shuffle_c3bda042(flag)
flag = xor_4d9534eb(flag)
flag = sub_b676ab61(flag)
flag = xor_96b234b4(flag)
flag = add_1ddc8330(flag)
flag = chsub_a16ed93a(flag)
flag = chunk_85747b20(flag)
flag = chadd_d2932b24(flag)
flag = sub_c3134c11(flag)
flag = chsub_9df05eee(flag)
flag = cmul_da51d310(flag)
flag = cmul_ed0fd163(flag)
flag = chunk_84a750a8(flag)
flag = add_e7bf4d1a(flag)
flag = cxor_ae2b4026(flag)
flag = chxor_0a1291f0(flag)
flag = cadd_92b9fd37(flag)
flag = chadd_c23de33f(flag)
flag = xor_4946eb25(flag)
flag = csub_af6b6944(flag)
flag = xor_f580ac50(flag)
flag = cadd_577d5f70(flag)
flag = cmul_d22b5acf(flag)
flag = sub_da5b779b(flag)
flag = chadd_2699a0a4(flag)
flag = chadd_df001d38(flag)
flag = chxor_02aa625d(flag)
flag = chmul_6a2ac61f(flag)
flag = chunk_22bd5647(flag)
flag = add_b9d4cb35(flag)
flag = cadd_7838f4d9(flag)
flag = csub_656995cb(flag)
flag = chmul_e4e712b9(flag)
flag = cadd_5acbd300(flag)
flag = csub_f291b39b(flag)
flag = chxor_9426335a(flag)
flag = digsub_10a10009(flag)
flag = csub_7e745ec0(flag)
flag = add_b071c8e9(flag)
flag = digsub_63dc4ebb(flag)
flag = sub_c7fb8e5e(flag)
flag = cxor_e7839ec0(flag)
flag = cxor_3cac8696(flag)
flag = xor_e9fd82b3(flag)
flag = csub_fdb702b6(flag)
flag = add_50d7387e(flag)
flag = chadd_5290e7f2(flag)
flag = csub_5eadc310(flag)
flag = chadd_7d40b8f2(flag)
flag = digsub_9dafa980(flag)
flag = cadd_45b798ff(flag)
flag = chsub_3f26a959(flag)
flag = cxor_2eec2815(flag)
flag = sub_72e0ad9e(flag)
flag = chxor_72127666(flag)
flag = chadd_16ea1a60(flag)
flag = chunk_406fc18b(flag)
flag = csub_a0c513d9(flag)
flag = sub_dd4a6aab(flag)
flag = cxor_eb9b7ae7(flag)
flag = chmul_65689d19(flag)
flag = chunk_4099648b(flag)
flag = digsub_6ab37400(flag)
flag = chmul_2d88dd5b(flag)
flag = mul_92b1b71e(flag)
flag = shuffle_2c2121d2(flag)
flag = chsub_4cadc753(flag)
flag = add_dcb94ddc(flag)
flag = xor_82a4d513(flag)
flag = digsub_504110f5(flag)
flag = chxor_49854e3d(flag)
flag = chmul_0a614bf5(flag)
flag = chsub_a23842be(flag)
flag = add_dbc17785(flag)
flag = mul_b3866976(flag)
flag = shuffle_5d9e962c(flag)
flag = cxor_f4744f0e(flag)
flag = chmul_c4924d51(flag)
flag = cadd_5b4e9aab(flag)
flag = cmul_8bc2cf3b(flag)
flag = chsub_46b53140(flag)
flag = chsub_9f73bc9e(flag)
flag = cadd_91c03cb7(flag)
flag = cmul_ed0fd163(flag)
flag = cmul_393b0cfb(flag)
flag = chsub_d94b1450(flag)
flag = chsub_3679cdb7(flag)
flag = add_1039dc95(flag)
flag = chadd_ec0fef0e(flag)
flag = cxor_3cac8696(flag)
flag = chmul_b5cd94ca(flag)
flag = chadd_163fc505(flag)
flag = xor_a175d05f(flag)
flag = xor_53ca0b45(flag)
flag = xor_13c063a7(flag)
flag = xor_c0f387ba(flag)
flag = cadd_991ec901(flag)
flag = cadd_f1510001(flag)
flag = chsub_be722dbb(flag)
flag = chunk_9ce2d01b(flag)
flag = xor_1c17469f(flag)
flag = mul_1e5ed056(flag)
flag = digsub_94dd3136(flag)
flag = chxor_947d449e(flag)
flag = add_758d2268(flag)
flag = cadd_c1763a61(flag)
flag = add_8e1a7afe(flag)
flag = cadd_f435a64a(flag)
flag = cadd_594b40aa(flag)
flag = chadd_a4967b6b(flag)
flag = cmul_012b5eb8(flag)
flag = chadd_967b4961(flag)
flag = cmul_910def34(flag)
flag = cxor_c74d1258(flag)
flag = sub_72b00ca4(flag)
flag = digsub_a240d2e8(flag)
flag = cmul_b2582678(flag)
flag = cadd_e7cd385e(flag)
flag = digsub_324078ea(flag)
flag = add_1eefd08b(flag)
flag = chxor_a614acf2(flag)
flag = sub_96b63796(flag)
flag = xor_071e51df(flag)
flag = xor_57c90fb5(flag)
flag = xor_0ebbd2b0(flag)
flag = csub_ad5db692(flag)
flag = cmul_70fa9f12(flag)
flag = chxor_4447550e(flag)
flag = cxor_13669885(flag)
flag = chadd_3aa9c371(flag)
flag = cxor_76178cb8(flag)
flag = chmul_26940e3b(flag)
flag = xor_1e24aa63(flag)
flag = chunk_f44dbb33(flag)
flag = mul_67e87c31(flag)
flag = cmul_697c5558(flag)
flag = chsub_4e9faeee(flag)
flag = chmul_160cacb0(flag)
flag = chxor_29db699e(flag)
flag = chxor_c399373f(flag)
flag = chunk_f87a2350(flag)
flag = cmul_38593f30(flag)
flag = mul_4de4594c(flag)
flag = cxor_f4c61b89(flag)
flag = cmul_1fd240a5(flag)
flag = xor_4c95d03b(flag)
flag = cadd_648dbdbd(flag)
flag = cadd_56eef358(flag)
flag = add_eb6ed9ef(flag)
flag = shuffle_0ca300ee(flag)
flag = chmul_afd7fea6(flag)
flag = xor_4c95d03b(flag)
flag = digsub_99f3c205(flag)
flag = sub_04d98d74(flag)
flag = csub_c323c891(flag)
flag = shuffle_b63d8098(flag)
flag = chunk_45aefbfc(flag)
flag = cxor_0aedee08(flag)
flag = csub_83d96569(flag)
flag = cxor_73c5cfae(flag)
flag = chadd_d68e3c7a(flag)
flag = chsub_b9c56acf(flag)
flag = digsub_9b074471(flag)
flag = shuffle_c507521b(flag)
flag = mul_0af7d935(flag)
flag = csub_9253b05f(flag)
flag = digsub_a821dc7d(flag)
flag = cxor_7be08bad(flag)
flag = cmul_99a00a24(flag)
flag = chxor_79ffa521(flag)
flag = cxor_f9bee875(flag)
flag = cadd_3124bc3c(flag)
flag = chadd_028f229e(flag)
flag = xor_49a34b54(flag)
flag = sub_2f70dd6e(flag)
flag = sub_32cc1a97(flag)
flag = add_69d61a24(flag)
flag = add_e6d0a399(flag)
flag = xor_85d496cf(flag)
flag = cxor_4f2ad7d2(flag)
flag = sub_1b35acd4(flag)
flag = digsub_0ca9e7fd(flag)
flag = mul_e8d4d029(flag)
flag = xor_92938e20(flag)
flag = cadd_3150b11b(flag)
flag = cmul_fd9e1024(flag)
flag = xor_8dc6fc89(flag)
flag = add_a3d5d1da(flag)
flag = chxor_27993531(flag)
flag = chadd_0305d89a(flag)
flag = digsub_c71698e9(flag)
flag = shuffle_7b8c9089(flag)
flag = shuffle_e14d57f5(flag)
flag = cxor_207ceb20(flag)
flag = chsub_7ade6cf5(flag)
flag = cmul_06a971d4(flag)
flag = cmul_00fd6c30(flag)
flag = cadd_45b798ff(flag)
flag = add_b0ac8236(flag)
flag = cmul_d82edfb1(flag)
flag = cxor_6eabaf02(flag)
flag = mul_dd59ae79(flag)
flag = digsub_2a51613f(flag)
flag = mul_c983432b(flag)
flag = digsub_b40bee06(flag)
flag = xor_31c0451b(flag)
flag = chsub_aad79c73(flag)
flag = add_2af4f21d(flag)
flag = cxor_bfb33206(flag)
flag = cadd_c2498f1a(flag)
flag = chmul_9e62f058(flag)
flag = chxor_8a775b98(flag)
flag = chmul_8ef21d96(flag)
flag = chadd_868635c7(flag)
flag = chunk_16728eb8(flag)
flag = digsub_bcd14776(flag)
flag = mul_e04a2c12(flag)
flag = chadd_04ef3ad8(flag)
flag = shuffle_3bb1ab6d(flag)
flag = add_604f7a16(flag)
flag = csub_eea95b8f(flag)
flag = csub_e69770c4(flag)
flag = cxor_41f67d77(flag)
flag = chsub_8396a9b9(flag)
flag = mul_e7784e75(flag)
flag = add_b9d4cb35(flag)
flag = chmul_38133c10(flag)
flag = sub_abe98fac(flag)
flag = chsub_2d6c78f3(flag)
flag = chunk_ce966b63(flag)
flag = cxor_f30be4dd(flag)
flag = shuffle_cb627e8c(flag)
flag = mul_6a51d006(flag)
flag = cmul_ad3ab72b(flag)
flag = chsub_357029f0(flag)
flag = chxor_e23f2cfd(flag)
flag = cadd_6ae07a4d(flag)
flag = mul_d62641f4(flag)
flag = cadd_dd57ed89(flag)
flag = sub_da5b779b(flag)
flag = add_de55f4f2(flag)
flag = sub_7ca185a5(flag)
flag = xor_14cbf59f(flag)
flag = chxor_f6dc12d6(flag)
flag = chadd_df001d38(flag)
flag = chsub_29874234(flag)
flag = cadd_22e59670(flag)
flag = cmul_7e84fb88(flag)
flag = chunk_0a45d781(flag)
flag = chsub_8dd5ab11(flag)
flag = mul_62495a4a(flag)
flag = chsub_8396a9b9(flag)
flag = xor_a8652323(flag)
flag = chunk_bd36eb6a(flag)
flag = cadd_598cbf7e(flag)
flag = chunk_e53ff766(flag)
flag = xor_24b008b9(flag)
flag = xor_18093134(flag)
flag = chmul_2d88dd5b(flag)
flag = chxor_65adc1af(flag)
flag = chadd_3fbbddb8(flag)
flag = chsub_0b2321c1(flag)
flag = cadd_80971c79(flag)
flag = mul_74e68352(flag)
flag = chmul_068c4ae9(flag)
flag = cmul_2eb8bc9e(flag)
flag = chunk_dd51ac10(flag)
flag = chadd_5fc42fbd(flag)
flag = shuffle_a6432e15(flag)
flag = cxor_e1387672(flag)
flag = mul_0af7d935(flag)
flag = sub_7f903ea3(flag)
flag = chmul_2e39a1a5(flag)
flag = chmul_d909e81b(flag)
flag = sub_1a66408e(flag)
flag = shuffle_c71df508(flag)
flag = cadd_4003b254(flag)
flag = chadd_ac9d1de7(flag)
flag = chsub_7e45d909(flag)
flag = chxor_8a775b98(flag)
flag = cxor_94df939a(flag)
flag = cadd_7db59ff9(flag)
flag = chunk_df8009b6(flag)
flag = chsub_d27566eb(flag)
flag = cxor_16cc8dc6(flag)
flag = chunk_406e7c05(flag)
flag = shuffle_e56a1778(flag)
flag = chunk_426d469b(flag)
flag = chsub_7ade6cf5(flag)
flag = cxor_b8b43d96(flag)
flag = chunk_b78988b6(flag)
flag = xor_48d487cb(flag)
flag = chadd_3d5f0a2c(flag)
flag = chmul_8e52ad65(flag)
flag = cxor_73c5cfae(flag)
flag = cadd_ea861103(flag)
flag = chxor_2d0c7130(flag)
flag = chmul_bd4ac691(flag)
flag = xor_23d58644(flag)
flag = chsub_d94b1450(flag)
flag = chmul_edaf1927(flag)
flag = add_0090343e(flag)
flag = chsub_0ee9fb58(flag)
flag = chadd_baaab600(flag)
flag = cadd_838fe20a(flag)
flag = cadd_432be002(flag)
flag = chmul_882a927d(flag)
flag = chmul_a1f9f8ca(flag)
flag = cadd_1cd51d5c(flag)
flag = add_99300f40(flag)
flag = chunk_8a131e32(flag)
flag = csub_4a29a9b1(flag)
flag = sub_c9bfeab0(flag)
flag = chunk_1f1becb3(flag)
flag = cmul_615b3bac(flag)
flag = digsub_1f1582a8(flag)
flag = sub_fe1bac9b(flag)
flag = cmul_18b5fc94(flag)
flag = csub_ad5db692(flag)
flag = chxor_4f175e3b(flag)
flag = chsub_167fa647(flag)
flag = cmul_b759583b(flag)
flag = add_0cecddf7(flag)
flag = digsub_636b7f9c(flag)
flag = chsub_2d19348f(flag)
flag = chunk_6a5424b4(flag)
flag = add_bb11d3eb(flag)
flag = cmul_63effb36(flag)
flag = xor_e17e7409(flag)
flag = digsub_94dd3136(flag)
flag = chxor_9fa88068(flag)
flag = cxor_db034137(flag)
flag = chunk_0591e3c5(flag)
flag = cmul_13cd66b9(flag)
flag = add_9349052b(flag)
flag = cadd_4658d16e(flag)
flag = shuffle_b6779950(flag)
flag = cadd_ad85576d(flag)
flag = digsub_81042cb1(flag)
flag = digsub_5e7cd6f6(flag)
flag = shuffle_3a497842(flag)
flag = sub_5b169d21(flag)
flag = cmul_9bf9f69d(flag)
flag = chsub_5d86241d(flag)
flag = digsub_211a2fee(flag)
flag = shuffle_3113cb7a(flag)
flag = cxor_7948ea7c(flag)
flag = mul_c4188e74(flag)
flag = sub_83b9af79(flag)
flag = chsub_808e087e(flag)
flag = digsub_732f28f7(flag)
flag = chxor_f274337d(flag)
flag = digsub_e6768cff(flag)
flag = chunk_d4a3f365(flag)
flag = xor_e35626c5(flag)
flag = add_9573eecb(flag)
flag = sub_51002c26(flag)
flag = chunk_697b441c(flag)
flag = chunk_b40e3bec(flag)
flag = chsub_d05da0d8(flag)
flag = add_71df7f95(flag)
flag = xor_fa921805(flag)
flag = chsub_1ad0c5fe(flag)
flag = cxor_9bc88b76(flag)
flag = chadd_3e7b3151(flag)
flag = chsub_c10f331f(flag)
flag = sub_ef127564(flag)
flag = chunk_9b2dc824(flag)
flag = digsub_ff82e274(flag)
flag = digsub_0eb180b8(flag)
flag = shuffle_ec9b15d1(flag)
flag = xor_addb072f(flag)
flag = chunk_f140121b(flag)
flag = chsub_339c9633(flag)
flag = mul_1dfffbd5(flag)
flag = chmul_edaf1927(flag)
flag = cadd_23594983(flag)
flag = add_158186ec(flag)
flag = sub_9f4055fc(flag)
flag = chxor_bcf0771e(flag)
flag = chadd_52f847ab(flag)
flag = chsub_714e8ec9(flag)
flag = xor_af966677(flag)
flag = csub_a60ad993(flag)
flag = xor_c1194f5a(flag)
flag = cmul_6c27ae5b(flag)
flag = sub_40f8346a(flag)
flag = chunk_c828ed7d(flag)
flag = digsub_9fc4a4c5(flag)
flag = chunk_9970853d(flag)
flag = chunk_d88231fa(flag)
flag = chunk_524ad27b(flag)
flag = chmul_dd1920ab(flag)
flag = chxor_4639250f(flag)
flag = chxor_3e87843f(flag)
flag = chxor_d50259ba(flag)
flag = sub_a091f45e(flag)
flag = sub_f0758554(flag)
flag = shuffle_7894ad24(flag)
flag = chxor_d8c4549f(flag)
flag = chsub_f75e24ea(flag)
flag = xor_214fe10e(flag)
flag = chsub_f57de7cd(flag)
flag = add_4734c18c(flag)
flag = chsub_ebadaefe(flag)
flag = chsub_62b4c10c(flag)
flag = chxor_32814bee(flag)
flag = chunk_5806f721(flag)
flag = digsub_a240d2e8(flag)
flag = shuffle_5cd09bb7(flag)
flag = chmul_d3cbaa99(flag)
flag = add_ea0e7dc4(flag)
flag = shuffle_40277085(flag)
flag = shuffle_9076b7e7(flag)
flag = shuffle_b9aac0df(flag)
flag = cxor_f929f224(flag)
flag = sub_65dfc4a9(flag)
flag = cxor_df97c526(flag)
flag = chxor_3e87843f(flag)
flag = cxor_ae2b4026(flag)
flag = chunk_b195e92b(flag)
flag = csub_026b559f(flag)
flag = chsub_6acb4ef8(flag)
flag = chsub_04fb6e14(flag)
flag = add_66a3881d(flag)
flag = add_2cc0eef9(flag)
flag = add_e3a56377(flag)
flag = chunk_bd36eb6a(flag)
flag = shuffle_c0cc818c(flag)
flag = csub_eb753ff1(flag)
flag = cxor_c7240b25(flag)
flag = csub_e730833f(flag)
flag = sub_94808741(flag)
flag = digsub_94dd3136(flag)
flag = shuffle_c3bda042(flag)
flag = shuffle_879744de(flag)
flag = csub_64c8c245(flag)
flag = shuffle_ca27178d(flag)
flag = csub_fe63b620(flag)
flag = shuffle_d0a6fda1(flag)
flag = shuffle_f4cba7dd(flag)
flag = cadd_56728fa3(flag)
flag = cadd_fdc5f9f6(flag)
flag = shuffle_c3a4eec2(flag)
flag = cxor_9af689b5(flag)
flag = digsub_6be19c93(flag)
flag = cxor_52629279(flag)
flag = sub_f95a3649(flag)
flag = mul_6a51d006(flag)
flag = sub_f29558b8(flag)
flag = csub_9253b05f(flag)
flag = shuffle_7b60ebb6(flag)
flag = digsub_093ca952(flag)
flag = cadd_8bcff692(flag)
flag = add_eee1f715(flag)
flag = csub_642b1701(flag)
flag = cxor_f20321f0(flag)
flag = chsub_c78a57d0(flag)
flag = add_2361d033(flag)
flag = shuffle_92fb44d4(flag)
flag = chadd_32554a61(flag)
flag = csub_daf0877b(flag)
flag = shuffle_c51a19df(flag)
flag = chsub_71c61f9b(flag)
flag = xor_3583ad2a(flag)
flag = cadd_aeea1365(flag)
flag = sub_d07a778e(flag)
flag = chsub_1b8086f6(flag)
flag = cadd_bf38d005(flag)
flag = add_2071c6f7(flag)
flag = chmul_6a2ac61f(flag)
flag = xor_446fe190(flag)
flag = add_e6d0a399(flag)
flag = chxor_f6c4d9ae(flag)
flag = chadd_1ed1777e(flag)
flag = chmul_afd7fea6(flag)
flag = csub_2c8eacf9(flag)
flag = chmul_b820c945(flag)
flag = chxor_02aa625d(flag)
flag = sub_e6d0323d(flag)
flag = digsub_ced825e4(flag)
flag = cmul_1db73e1b(flag)
flag = sub_657f5f3f(flag)
flag = add_909f31dc(flag)
flag = shuffle_3a65d143(flag)
flag = chunk_987d4b79(flag)
flag = chsub_68af0dd5(flag)
flag = chxor_23198c86(flag)
flag = chsub_1b8086f6(flag)
flag = digsub_1d4087e8(flag)
flag = cadd_5cb4a9bb(flag)
flag = chunk_b6e52a0f(flag)
flag = digsub_ce000989(flag)
flag = shuffle_dd75cb23(flag)
flag = sub_a74b5cf9(flag)
flag = chadd_0fbbf4b8(flag)
flag = chadd_5d344985(flag)
flag = mul_e2b49085(flag)
flag = cxor_4211ba33(flag)
flag = cadd_0a5ff345(flag)
flag = chunk_7692aef1(flag)
flag = add_4d5b7dd8(flag)
flag = cadd_363ab440(flag)
flag = chxor_14176db9(flag)
flag = mul_658a4b4b(flag)
flag = xor_4742cccf(flag)
flag = digsub_a56c83c8(flag)
flag = digsub_e4832eb3(flag)
flag = cadd_3a7e4ac5(flag)
flag = chunk_c154a4b0(flag)
flag = chxor_ce07c0ad(flag)
flag = chxor_da81821a(flag)
flag = chsub_3121e9c6(flag)
flag = xor_0e75b77c(flag)
flag = chadd_8afcabff(flag)
flag = add_8db2a643(flag)
flag = mul_389dee3d(flag)
flag = digsub_b7608cd0(flag)
flag = cxor_52a04787(flag)
flag = mul_d952127d(flag)
flag = sub_dc4b5de9(flag)
flag = cadd_c2498f1a(flag)
flag = cadd_56728fa3(flag)
flag = chunk_f87a2350(flag)
flag = chunk_b40e3bec(flag)
flag = chmul_ef7fa6ac(flag)
flag = csub_44ad5428(flag)
flag = csub_3ffa2ea8(flag)
flag = mul_b3866976(flag)
flag = digsub_4c404e0f(flag)
flag = chxor_013d1031(flag)
flag = xor_4208a184(flag)
flag = chadd_a6e32549(flag)
flag = cxor_765f4bed(flag)
flag = chxor_daa5c35b(flag)
flag = add_770b1c6f(flag)
flag = sub_2c66d2af(flag)
flag = add_125357c0(flag)
flag = sub_0d8062bd(flag)
flag = chunk_5f5b8349(flag)
flag = shuffle_3207f061(flag)
flag = chunk_c761d499(flag)
flag = chadd_fe246cb1(flag)
flag = chsub_15fcbd3c(flag)
flag = xor_b8937290(flag)
flag = shuffle_721dc700(flag)
flag = cmul_0b0ac64f(flag)
flag = sub_04d98d74(flag)
flag = chsub_b3a9e994(flag)
flag = digsub_efd7a1ee(flag)
flag = chadd_bbfef485(flag)
flag = chxor_dadbfeff(flag)
flag = mul_49d2ca13(flag)
flag = chunk_5a70d9ef(flag)
flag = csub_7321b0e9(flag)
flag = cadd_d9e8611e(flag)
flag = sub_f3b58e44(flag)
flag = chxor_a244aa4c(flag)
flag = chunk_adb7a31f(flag)
flag = chmul_5e1cf1e0(flag)
flag = cmul_1f88fc08(flag)
flag = cadd_f61d1530(flag)
flag = cmul_b2582678(flag)
flag = cxor_faa42ed7(flag)
flag = chmul_695202ac(flag)
flag = chunk_f1e74b7b(flag)
flag = cxor_b2b4971b(flag)
flag = chmul_b9bc1a28(flag)
flag = chsub_0d419486(flag)
flag = cadd_81014cf5(flag)
flag = chsub_8fa33f3e(flag)
flag = chmul_de111dfb(flag)
flag = chsub_fb961764(flag)
flag = add_ebcc13ce(flag)
flag = mul_92b1b71e(flag)
flag = cxor_e4b3ee28(flag)
flag = csub_220202ad(flag)
flag = cadd_80971c79(flag)
flag = chmul_20654021(flag)
flag = cmul_06a971d4(flag)
flag = chunk_01c25ee4(flag)
flag = digsub_2f2a8750(flag)
flag = cadd_54b12cd0(flag)
flag = cxor_025cbbe3(flag)
flag = cadd_d08b740c(flag)
flag = add_3cfe5566(flag)
flag = mul_2418a801(flag)
flag = cxor_d20accc3(flag)
flag = cxor_42ec5686(flag)
flag = add_9b544b2a(flag)
flag = chxor_65aad212(flag)
flag = digsub_10a10009(flag)
flag = digsub_bbf1a156(flag)
flag = shuffle_dd75cb23(flag)
flag = chunk_524ad27b(flag)
flag = xor_a6cea8c8(flag)
flag = csub_fe63b620(flag)
flag = chunk_d09c8616(flag)
flag = cmul_880f9e67(flag)
flag = mul_f2813d64(flag)
flag = digsub_69f3e773(flag)
flag = cxor_677dcdda(flag)
flag = xor_acef1014(flag)
flag = chsub_6649ba27(flag)
flag = sub_91a9b671(flag)
flag = csub_7e745ec0(flag)
flag = chmul_df642f23(flag)
flag = chsub_8dd5ab11(flag)
flag = csub_3ffa2ea8(flag)
flag = xor_10552f50(flag)
flag = xor_b7fcf01b(flag)
flag = add_6aeef0e9(flag)
flag = chxor_7f2707c2(flag)
flag = add_23028792(flag)
flag = digsub_b6137e92(flag)
flag = cadd_95ea1de0(flag)
flag = xor_53ec0b4a(flag)
flag = mul_62a37d48(flag)
flag = chxor_7b570606(flag)
flag = shuffle_2693d526(flag)
flag = cmul_b759583b(flag)
flag = xor_f80d29fb(flag)
flag = csub_ecf51562(flag)
flag = chsub_d27566eb(flag)
flag = cxor_f929f224(flag)
flag = cmul_303b4073(flag)
flag = mul_2c8e35d6(flag)
flag = chsub_be5f9d3f(flag)
flag = chxor_6fca7a91(flag)
flag = xor_3d8de492(flag)
flag = cadd_074e39fc(flag)
flag = sub_785b373a(flag)
flag = chunk_16728eb8(flag)
flag = chxor_6b41b0f3(flag)
flag = digsub_a453f5cd(flag)
flag = chsub_27dae3ae(flag)
flag = cxor_61ffae1c(flag)
flag = cxor_a9c59f97(flag)
flag = chxor_3b22e51a(flag)
flag = sub_a091f45e(flag)
flag = add_ed6c03df(flag)
flag = cmul_93bd1510(flag)
flag = cxor_19dece1a(flag)
flag = xor_49a34b54(flag)
flag = csub_23f2ff18(flag)
flag = shuffle_7b8c9089(flag)
flag = add_bc200f67(flag)
flag = chxor_6b41b0f3(flag)
flag = add_9b544b2a(flag)
flag = chunk_d7f6d493(flag)
flag = cxor_b8e23c90(flag)
flag = cadd_d07896bc(flag)
flag = sub_1b35acd4(flag)
flag = shuffle_236a7376(flag)
flag = chunk_36ffef9b(flag)
flag = cmul_c4987507(flag)
flag = chxor_dd87f2e6(flag)
flag = mul_228941c9(flag)
flag = xor_34c86087(flag)
flag = cmul_931552a6(flag)
flag = mul_6858d87e(flag)
flag = add_8357f559(flag)
flag = add_986dd560(flag)
flag = csub_c50ffebc(flag)
flag = cadd_3c6d2025(flag)
flag = xor_8f24dd01(flag)
flag = chadd_ebbb5dc5(flag)
flag = add_ea0e7dc4(flag)
flag = sub_02f68178(flag)
flag = digsub_703bfb0c(flag)
flag = csub_b14e28f6(flag)
flag = shuffle_39351a8a(flag)
flag = cadd_bf48a745(flag)
flag = digsub_a56c83c8(flag)
flag = chunk_56a0ded7(flag)
flag = digsub_82f27ce9(flag)
flag = mul_60a92fff(flag)
flag = cadd_40a2d9f1(flag)
flag = cadd_5d182653(flag)
flag = xor_b81a4467(flag)
flag = shuffle_98accf0f(flag)
flag = chxor_9b4a8975(flag)
flag = shuffle_dd75cb23(flag)
flag = cmul_1b746adb(flag)
flag = chsub_cd79e5f6(flag)
flag = cadd_8fd791e9(flag)
flag = chadd_d12574c1(flag)
flag = xor_f98f4d97(flag)
flag = mul_0fc3ddc1(flag)
flag = cadd_a377ad5c(flag)
flag = chunk_158dd2b2(flag)
flag = cadd_5162d960(flag)
flag = shuffle_64a08693(flag)
flag = chxor_57a0d20a(flag)
flag = chsub_bae85472(flag)
flag = chunk_5d8873dc(flag)
flag = xor_816adcd8(flag)
flag = shuffle_86e11db2(flag)
flag = digsub_4bfe6492(flag)
flag = chmul_9fd400d3(flag)
flag = cadd_8fc03570(flag)
flag = csub_087d6e8e(flag)
flag = xor_4e5c29b0(flag)
flag = chsub_74d9532d(flag)
flag = cxor_79917601(flag)
flag = shuffle_63b7a61d(flag)
flag = chunk_26bea2d1(flag)
flag = digsub_41290eb4(flag)
flag = cxor_4ff36064(flag)
flag = cmul_25c2274e(flag)
flag = sub_dfb02634(flag)
flag = digsub_78ba6bc8(flag)
flag = digsub_2a496578(flag)
flag = chmul_ca2a7a2b(flag)
flag = cmul_9ea3f862(flag)
flag = add_dbc17785(flag)
flag = cmul_97c0f64c(flag)
flag = sub_d3158d9a(flag)
flag = cadd_5afd7d69(flag)
flag = add_11c4ac68(flag)
flag = chunk_1f1becb3(flag)
flag = cxor_31e27f48(flag)
flag = cmul_ddd178e6(flag)
flag = cadd_5fc3a121(flag)
flag = add_b1383cfb(flag)
flag = chxor_38018a02(flag)
flag = chadd_2da7db06(flag)
flag = mul_34324887(flag)
flag = chxor_14ca1407(flag)
flag = chsub_5b0f6d80(flag)
flag = sub_032906d0(flag)
flag = cmul_3cb7c090(flag)
flag = chmul_1666c516(flag)
flag = cxor_4211ba33(flag)
flag = chsub_e0feb99d(flag)
flag = add_eb6ed9ef(flag)
flag = cadd_f4a8c0c6(flag)
flag = add_ab46dc0e(flag)
flag = xor_722e91a8(flag)
flag = chunk_1e635fb5(flag)
flag = chmul_67bd77bc(flag)
flag = chsub_70e4436e(flag)
flag = chunk_90824d65(flag)
flag = cadd_8c4577cf(flag)
flag = cadd_1521484b(flag)
flag = sub_7198b6a2(flag)
flag = csub_557e07a6(flag)
flag = shuffle_3bb1ab6d(flag)
flag = shuffle_f44f0fc5(flag)
flag = shuffle_e8a5f5ef(flag)
flag = xor_a8eff498(flag)
flag = mul_c0b36007(flag)
flag = add_00eb45a8(flag)
flag = chadd_226738ed(flag)
flag = csub_ecf51562(flag)
flag = cmul_16ddfa97(flag)
flag = sub_ef03b32c(flag)
flag = csub_160421ef(flag)
flag = chsub_7178b8f3(flag)
flag = chsub_1a499bac(flag)
flag = add_30b3e082(flag)
flag = xor_90755689(flag)
flag = chxor_a2b08b13(flag)
flag = cmul_22a48cb5(flag)
flag = shuffle_74725db2(flag)
flag = cxor_53f93269(flag)
flag = cxor_df42d206(flag)
flag = cadd_f1510001(flag)
flag = chunk_9b5e7e5c(flag)
flag = sub_83e670dd(flag)
flag = chxor_b9b02bcc(flag)
flag = add_03dc5f83(flag)
flag = xor_722e91a8(flag)
flag = chmul_79e6dd5d(flag)
flag = cxor_40c47f57(flag)
flag = shuffle_8a66e8f2(flag)
flag = add_1688c841(flag)
flag = add_a00a7d48(flag)
flag = chmul_a39be275(flag)
flag = chsub_e01faa71(flag)
flag = chmul_794b5292(flag)
flag = xor_a175d05f(flag)
flag = shuffle_520f2eb6(flag)
flag = mul_a43ce0da(flag)
flag = add_ebcc13ce(flag)
flag = mul_b9305b76(flag)
flag = sub_be3b1a5a(flag)
flag = add_b6e74b73(flag)
flag = cadd_e9f8600c(flag)
flag = cxor_9a341cfa(flag)
flag = cadd_a5b24fcc(flag)
flag = cmul_1b746adb(flag)
flag = chadd_323e5325(flag)
flag = shuffle_b22f1c56(flag)
flag = csub_2d425659(flag)
flag = chunk_757730c2(flag)
flag = add_3cfe5566(flag)
flag = mul_0a969cbc(flag)
flag = chadd_028f229e(flag)
flag = chunk_e808502e(flag)
flag = shuffle_7eddc63c(flag)
flag = cmul_a50583d3(flag)
flag = cmul_f0413f14(flag)
flag = sub_149a7d50(flag)
flag = shuffle_b6779950(flag)
flag = shuffle_0bc785b3(flag)
flag = chsub_4c1e3f38(flag)
flag = csub_9b1af639(flag)
flag = sub_c8b31549(flag)
flag = digsub_ea824f04(flag)
flag = add_8aaefd6e(flag)
flag = shuffle_ec9b15d1(flag)
flag = shuffle_c3bda042(flag)
flag = chsub_04fb6e14(flag)
flag = chmul_991b7825(flag)
flag = xor_7661c292(flag)
flag = chxor_daa5c35b(flag)
flag = add_0e1d894a(flag)
flag = shuffle_6c33ee33(flag)
flag = sub_ee08aad9(flag)
flag = xor_f87e36e2(flag)
flag = shuffle_30915728(flag)
flag = add_c93fcbda(flag)
flag = digsub_dbfc4977(flag)
flag = xor_11751251(flag)
flag = chsub_a12104be(flag)
flag = chadd_0badfcf5(flag)
flag = csub_96f86ad8(flag)
flag = cxor_96357748(flag)
flag = chadd_96a0ee76(flag)
flag = chadd_1feaf785(flag)
flag = cxor_1290e20b(flag)
flag = cadd_d4d5a797(flag)
flag = add_02374137(flag)
flag = chxor_da644b5f(flag)
flag = cxor_71e7ff03(flag)
flag = xor_abff1870(flag)
flag = xor_e8c8896d(flag)
flag = mul_bb31d66d(flag)
flag = chunk_16728eb8(flag)
flag = chxor_fa8c5c5f(flag)
flag = cadd_c0d41733(flag)
flag = chadd_983dad8d(flag)
flag = chadd_7620a0b7(flag)
flag = cmul_27f36b54(flag)
flag = cxor_3cac8696(flag)
flag = shuffle_b63d8098(flag)
flag = chsub_b9b2576f(flag)
flag = chxor_ee89b49e(flag)
flag = cmul_f579357e(flag)
flag = csub_702f94e1(flag)
flag = cmul_4381cbd5(flag)
flag = chunk_9758765f(flag)
flag = cmul_d77e3c24(flag)
flag = chsub_1d756bfc(flag)
flag = digsub_8326055f(flag)
flag = add_1c8d08f1(flag)
flag = cadd_b0a14b2d(flag)
flag = xor_c05b216d(flag)
flag = cmul_ae473405(flag)
flag = xor_c6061863(flag)
flag = csub_ef41ffb0(flag)
flag = chmul_ba6b991f(flag)
flag = chsub_e112aa83(flag)
flag = add_a2c38523(flag)
flag = sub_5da6bb53(flag)
flag = chxor_dadbfeff(flag)
flag = chadd_53eb2419(flag)
flag = chunk_9ce2d01b(flag)
flag = csub_d6e694b3(flag)
flag = chadd_3efd2ae8(flag)
flag = chsub_38be16e5(flag)
flag = digsub_c09c7211(flag)
flag = xor_446fe190(flag)
flag = add_565903f4(flag)
flag = xor_48d487cb(flag)
flag = cmul_8c0028d4(flag)
flag = cxor_6976fe3d(flag)
flag = cmul_e510f1c4(flag)
flag = chadd_0232afc0(flag)
flag = digsub_ea824f04(flag)
flag = chxor_dbe47d55(flag)
flag = shuffle_4e66918e(flag)
flag = chmul_8fdd15ff(flag)
flag = sub_4a2fd9ee(flag)
flag = shuffle_e204c945(flag)
flag = chunk_1f1becb3(flag)
flag = cmul_ea21bbf8(flag)
flag = cmul_36d19f08(flag)
flag = chadd_01e97c37(flag)
flag = sub_8eda253a(flag)
flag = digsub_f74d6e2c(flag)
flag = shuffle_b69552ce(flag)
flag = shuffle_29c0a60f(flag)
flag = add_917bbbbc(flag)
flag = shuffle_9076b7e7(flag)
flag = chunk_e20796de(flag)
flag = chmul_7cfdd3dc(flag)
flag = cadd_f83b216d(flag)
flag = chadd_5d344985(flag)
flag = mul_16385c48(flag)
flag = csub_20a6b2c3(flag)
flag = sub_60d9cd7a(flag)
flag = mul_89548da9(flag)
flag = xor_9ec16d95(flag)
flag = mul_f80a89cf(flag)
flag = cmul_ddef00cb(flag)
flag = digsub_af816cb4(flag)
flag = chunk_0f650cd2(flag)
flag = chsub_24c471c0(flag)
flag = cxor_4cfe1de0(flag)
flag = xor_64af3af1(flag)
flag = add_1eefd08b(flag)
flag = chsub_7ade6cf5(flag)
flag = chmul_5c39207d(flag)
flag = chmul_ca2a7a2b(flag)
flag = cadd_6f6cf5cb(flag)
flag = xor_51b2d18c(flag)
flag = chadd_224e17b1(flag)
flag = digsub_4ed94ee3(flag)
flag = csub_1ae697ba(flag)
flag = xor_6aa3c7e7(flag)
flag = mul_589a2ea6(flag)
flag = chsub_a3a9e242(flag)
flag = chsub_a2fdcc3b(flag)
flag = cmul_d22b5acf(flag)
flag = chsub_9b93213c(flag)
flag = sub_ec7f3f21(flag)
flag = xor_2ac1f33e(flag)
flag = cmul_0fec80e1(flag)
flag = sub_9c3c91b4(flag)
flag = add_d3cda0e4(flag)
flag = chadd_8658906e(flag)
flag = digsub_2a496578(flag)
flag = cxor_70fa2d45(flag)
flag = csub_d77927e4(flag)
flag = cmul_2eb68781(flag)
flag = cadd_5fc3a121(flag)
flag = cmul_27f36b54(flag)
flag = add_c908a5f4(flag)
flag = shuffle_dc92e6b1(flag)
flag = csub_b14e28f6(flag)
flag = sub_a96a1483(flag)
flag = cxor_f9bee875(flag)
flag = cmul_4172328f(flag)
flag = chsub_18094e03(flag)
flag = shuffle_ad9553b4(flag)
flag = chadd_8e51c71d(flag)
flag = shuffle_d65597c5(flag)
flag = csub_77053211(flag)
flag = chunk_180b51ff(flag)
flag = chadd_226738ed(flag)
flag = chunk_b195e92b(flag)
flag = xor_e1acd3bf(flag)
flag = chxor_aa6e4431(flag)
flag = chxor_e23f2cfd(flag)
flag = digsub_dddb1e6b(flag)
flag = cadd_007b2c57(flag)
flag = chmul_75d42cab(flag)
flag = chmul_79591ad9(flag)
flag = chunk_bdedc29f(flag)
flag = digsub_a453f5cd(flag)
flag = csub_83d96569(flag)
flag = xor_698d0c07(flag)
flag = mul_7fa6ac59(flag)
flag = mul_e020bc90(flag)
flag = csub_d24d889b(flag)
flag = chsub_968aab31(flag)
flag = cxor_94658244(flag)
flag = shuffle_8e02f517(flag)
flag = cmul_0ee39eec(flag)
flag = cxor_f2627c5a(flag)
flag = add_ab46dc0e(flag)
flag = xor_c0543d9e(flag)
flag = csub_2df7e131(flag)
flag = cmul_aaa17c90(flag)
flag = csub_d3a63092(flag)
flag = mul_fc9252b1(flag)
flag = csub_b9b5b150(flag)
flag = chadd_8afcabff(flag)
flag = chadd_fc7a65ec(flag)
flag = shuffle_def3ecab(flag)
flag = csub_0f2dcd11(flag)
flag = chsub_c0922438(flag)
flag = csub_7ae589be(flag)
flag = add_f4bd902e(flag)
flag = xor_78f0da60(flag)
flag = chsub_3cc05763(flag)
flag = chadd_42bbf689(flag)
flag = chadd_fed374e0(flag)
flag = sub_d6d53ea0(flag)
flag = chsub_6acb4ef8(flag)
flag = chxor_25d74c81(flag)
flag = cxor_8549d8eb(flag)
flag = chunk_e42e1b84(flag)
flag = digsub_ed6a3b94(flag)
flag = xor_840940ad(flag)
flag = add_00eb45a8(flag)
flag = chsub_5f944988(flag)
flag = chsub_62312f9d(flag)
flag = add_664be5fd(flag)
flag = chunk_fa703d6a(flag)
flag = digsub_8224944b(flag)
flag = chsub_b448dac1(flag)
flag = mul_62495a4a(flag)
flag = xor_25ac4148(flag)
flag = cadd_648dbdbd(flag)
flag = shuffle_719cf56c(flag)
flag = cadd_7db59ff9(flag)
flag = add_0f654473(flag)
flag = xor_060a0f63(flag)
flag = chadd_8b4d11a3(flag)
flag = chadd_bf6edb8a(flag)
flag = cmul_cd1aad88(flag)
flag = xor_23517ee7(flag)
flag = csub_247f37f1(flag)
flag = add_6aac990e(flag)
flag = mul_5d959d10(flag)
flag = add_dcb94ddc(flag)
flag = chunk_ddef464d(flag)
flag = cmul_c288fd59(flag)
flag = chunk_3c707853(flag)
flag = chadd_28036696(flag)
flag = cmul_e7c72b68(flag)
flag = add_ee203fd4(flag)
flag = chadd_2b71c3ea(flag)
flag = csub_bf7e54b2(flag)
flag = xor_702b624c(flag)
flag = chmul_9b06c74b(flag)
flag = cxor_0d1dcf5e(flag)
flag = mul_a43ce0da(flag)
flag = cmul_76043ee3(flag)
flag = cadd_1521484b(flag)
flag = sub_142fa244(flag)
flag = shuffle_a05741bb(flag)
flag = cadd_428d6ecc(flag)
flag = chunk_225b51ad(flag)
flag = shuffle_efa32ed0(flag)
flag = sub_c3134c11(flag)
flag = chadd_51cfbbb7(flag)
flag = sub_ca91f11f(flag)
flag = chxor_dbb28a03(flag)
flag = chunk_79cef8cd(flag)
flag = digsub_981b52ce(flag)
flag = chsub_f850c36b(flag)
flag = chsub_4364daac(flag)
flag = xor_b3655f1c(flag)
flag = digsub_cca1638e(flag)
flag = sub_ac9927d6(flag)
flag = shuffle_a293a45d(flag)
flag = cadd_bf48a745(flag)
flag = shuffle_3207f061(flag)
flag = chsub_bc163239(flag)
flag = chsub_f9d9c30e(flag)
flag = xor_2cce1391(flag)
flag = csub_a667ebea(flag)
flag = cadd_a6482f91(flag)
flag = cadd_27c86167(flag)
flag = shuffle_b0e9c01f(flag)
flag = chmul_37bb44ad(flag)
flag = chadd_dba6c166(flag)
flag = cadd_aef291ba(flag)
flag = chadd_069e430a(flag)
flag = xor_839d29d8(flag)
flag = chunk_e20796de(flag)
flag = sub_0b42484c(flag)
flag = cxor_f01c9df2(flag)
flag = sub_c7fb8e5e(flag)
flag = digsub_899a9f6d(flag)
flag = cmul_2a677be7(flag)
flag = cadd_b83d6dfa(flag)
flag = xor_e9151d45(flag)
flag = mul_520721f3(flag)
flag = sub_df1c5e46(flag)
flag = sub_88400353(flag)
flag = sub_00c9af82(flag)
flag = csub_cea15a0b(flag)
flag = shuffle_86e11db2(flag)
flag = shuffle_6fcd072c(flag)
flag = cmul_2f1c4ba6(flag)
flag = mul_ca0cc32d(flag)
flag = sub_c2ba5275(flag)
flag = shuffle_7b77028a(flag)
flag = cmul_e510f1c4(flag)
flag = shuffle_f4cba7dd(flag)
flag = shuffle_028022fe(flag)
flag = chunk_84a750a8(flag)
flag = sub_7aa7238b(flag)
flag = cmul_ee26b387(flag)
flag = chadd_fcb73b21(flag)
flag = chxor_69637723(flag)
flag = chunk_bd7c4f37(flag)
flag = shuffle_7b77028a(flag)
flag = add_2b6347c9(flag)
flag = xor_92fb1dc0(flag)
flag = digsub_7a739dc2(flag)
flag = mul_eb559523(flag)
flag = cmul_03ecbb18(flag)
flag = chunk_45aefbfc(flag)
flag = chxor_85f3bf12(flag)
flag = digsub_ce000989(flag)
flag = csub_7035f8db(flag)
flag = chxor_d48b7863(flag)
flag = cadd_8fc03570(flag)
flag = chxor_616b9569(flag)
flag = sub_97300f52(flag)
flag = cadd_8db3f2f3(flag)
flag = cmul_829e8d09(flag)
flag = chmul_743f98a5(flag)
flag = cxor_cc7ef037(flag)
flag = chxor_a8789254(flag)
flag = sub_05bc34d7(flag)
flag = chxor_1e5bb2ed(flag)
flag = xor_a1a977f9(flag)
flag = chunk_be89d48a(flag)
flag = chsub_bf5cdb36(flag)
flag = xor_071e51df(flag)
flag = mul_37e82792(flag)
flag = digsub_81042cb1(flag)
flag = shuffle_a3c6e740(flag)
flag = mul_e7784e75(flag)
flag = add_c0abe07c(flag)
flag = add_1dc9ccaa(flag)
flag = shuffle_b9aac0df(flag)
flag = xor_78429cb3(flag)
flag = sub_47cbdf28(flag)
flag = chadd_f45b5a3e(flag)
flag = chxor_f2f16c61(flag)
flag = chsub_b3a9e994(flag)
flag = cxor_5161196f(flag)
flag = chunk_7d26cddb(flag)
flag = chsub_56440f95(flag)
flag = chunk_8a131e32(flag)
flag = cxor_3cac8696(flag)
flag = chadd_a7330cb4(flag)
flag = xor_5c62e4ce(flag)
flag = digsub_441e29b0(flag)
flag = digsub_c71ff0e5(flag)
flag = mul_f7bcc313(flag)
flag = cxor_9eab5098(flag)
flag = cmul_c9f8e5a1(flag)
flag = chunk_75264af5(flag)
flag = csub_1d8c0c6b(flag)
flag = cmul_c52f5be0(flag)
flag = sub_8d4465ea(flag)
flag = cadd_a6482f91(flag)
flag = cadd_3879fa4f(flag)
flag = chsub_3121e9c6(flag)
flag = mul_62495a4a(flag)
flag = xor_19d4481b(flag)
flag = xor_bb19f697(flag)
flag = chxor_a697d1c3(flag)
flag = cmul_a51dd714(flag)
flag = cadd_f4a8c0c6(flag)
flag = chadd_cc7b7e1e(flag)
flag = chunk_02f12019(flag)
flag = digsub_9dafa980(flag)
flag = chadd_d5cb8b82(flag)
flag = cadd_603af25d(flag)
flag = cadd_bc61cc65(flag)
flag = cxor_6eff9336(flag)
flag = cadd_f79f3974(flag)
flag = chxor_b080755f(flag)
flag = add_39899af6(flag)
flag = cadd_1bbdcd45(flag)
flag = add_ca8439ba(flag)
flag = chsub_31abc2cf(flag)
flag = cxor_73c5cfae(flag)
flag = chunk_2a9e106f(flag)
flag = chmul_b11a8b8c(flag)
flag = digsub_efd7a1ee(flag)
flag = chadd_04672342(flag)
flag = sub_8fbf82f1(flag)
flag = shuffle_866b2261(flag)
flag = xor_984175c8(flag)
flag = cadd_3a7e4ac5(flag)
flag = add_e7bf4d1a(flag)
flag = digsub_081fcfe8(flag)
flag = xor_f80064d0(flag)
flag = digsub_f316d9e1(flag)
flag = cxor_31e27f48(flag)
flag = digsub_828ecd75(flag)
flag = cmul_280315b7(flag)
flag = sub_73c53d9f(flag)
flag = csub_7f2211d8(flag)
flag = add_378b40cb(flag)
flag = cadd_d04bb716(flag)
flag = chunk_d3ecfe82(flag)
flag = chmul_faead8d0(flag)
flag = mul_c00416be(flag)
flag = chxor_6d888483(flag)
flag = add_2b6347c9(flag)
flag = sub_32cc1a97(flag)
flag = shuffle_c5cb30a9(flag)
flag = digsub_d131ea62(flag)
flag = mul_833e4a11(flag)
flag = chxor_6d888483(flag)
flag = add_9670343c(flag)
flag = add_00eb45a8(flag)
flag = chadd_c2c2b7f7(flag)
flag = chmul_9cbb8a7f(flag)
flag = chsub_24c471c0(flag)
flag = digsub_732f28f7(flag)
flag = digsub_dddb1e6b(flag)
flag = sub_36eea33a(flag)
flag = csub_32783b79(flag)
flag = cadd_596e2779(flag)
flag = mul_0a969cbc(flag)
flag = chunk_b51aa621(flag)
flag = shuffle_ee42405e(flag)
flag = chadd_c2c2b7f7(flag)
flag = add_aa98b4ae(flag)
flag = chmul_f3f19079(flag)
flag = add_726cd7c7(flag)
flag = cadd_8db3f2f3(flag)
flag = digsub_c71698e9(flag)
flag = add_7553d25b(flag)
flag = cadd_991ec901(flag)
flag = csub_4392ba2f(flag)
flag = digsub_6dd6217e(flag)
flag = cadd_93747557(flag)
flag = csub_9bf22fee(flag)
flag = mul_8710992d(flag)
flag = chunk_6fa30167(flag)
flag = mul_2418a801(flag)
flag = mul_d63192f4(flag)
flag = chadd_24def8ad(flag)
flag = cadd_5acbd300(flag)
flag = chxor_7bc1a643(flag)
flag = chsub_46b53140(flag)
flag = chmul_b3677069(flag)
flag = shuffle_c507521b(flag)
flag = cxor_e86ea0c2(flag)
flag = mul_b8963b30(flag)
flag = shuffle_4e66918e(flag)
flag = cmul_012b5eb8(flag)
flag = chsub_ee1754a3(flag)
flag = cadd_15b9e74b(flag)
flag = mul_89bed2ea(flag)
flag = cxor_c57039b1(flag)
flag = cmul_892d62b0(flag)
flag = chxor_9eee4faf(flag)
flag = csub_2b0ae6b8(flag)
flag = chxor_18fcc0f2(flag)
flag = chsub_de16135d(flag)
flag = chxor_e3309cca(flag)
flag = cxor_6938f43d(flag)
flag = mul_f41b15dd(flag)
flag = digsub_bd11b809(flag)
flag = sub_3428aff7(flag)
flag = chxor_6c6e06b4(flag)
flag = chmul_d4a185e3(flag)
flag = cmul_dc2b00da(flag)
flag = sub_297255e0(flag)
flag = chadd_e5be5f3f(flag)
flag = chmul_663d5067(flag)
flag = add_74fa4c8a(flag)
flag = sub_9c3c91b4(flag)
flag = chmul_4af7800f(flag)
flag = chxor_69637723(flag)
flag = cxor_71e7ff03(flag)
flag = chunk_f554e6ab(flag)
flag = digsub_ea824f04(flag)
flag = digsub_7e09e05c(flag)
flag = cadd_b6aa1a21(flag)
flag = chunk_7050a958(flag)
flag = cxor_f14bf0f9(flag)
flag = digsub_ec12ae2a(flag)
flag = csub_8c5dcc87(flag)
flag = chmul_e6742997(flag)
flag = mul_1b781211(flag)
flag = chxor_3c2c0416(flag)
flag = cxor_03f5597b(flag)
flag = add_dbc17785(flag)
flag = csub_3c2b1960(flag)
flag = chmul_443266b3(flag)
flag = shuffle_3150238f(flag)
flag = chunk_45aefbfc(flag)
flag = cxor_29df8c0e(flag)
flag = chxor_fc74d45b(flag)
flag = cxor_05f70989(flag)
flag = sub_38bfe22f(flag)
flag = sub_92b6d92c(flag)
flag = csub_f6d8e64f(flag)
flag = chadd_6e3ce5fe(flag)
flag = shuffle_7813ad6f(flag)
flag = cmul_b2582678(flag)
flag = shuffle_181172b7(flag)
flag = add_8ef46bd6(flag)
flag = cadd_0a5ff345(flag)
flag = cmul_f65d51e7(flag)
flag = chadd_cb3aec1c(flag)
flag = chunk_d88231fa(flag)
flag = cmul_4691495a(flag)
flag = mul_eb201421(flag)
flag = digsub_ee047607(flag)
flag = chmul_826efe63(flag)
flag = chxor_6ebc3376(flag)
flag = cxor_f4744f0e(flag)
flag = sub_e8045aa7(flag)
flag = cadd_f74d4f6d(flag)
flag = chmul_79591ad9(flag)
flag = chsub_91add2c2(flag)
flag = xor_f80064d0(flag)
flag = xor_e437e0ae(flag)
flag = chadd_36b8739d(flag)
flag = sub_430d0f4c(flag)
flag = cxor_dfcb824e(flag)
flag = chunk_ba6b2283(flag)
flag = cxor_ae2b4026(flag)
flag = add_31efa65a(flag)
flag = chsub_7178b8f3(flag)
flag = chxor_c7b14201(flag)
flag = chmul_22d64a0f(flag)
flag = chxor_cc8c61bf(flag)
flag = xor_f80064d0(flag)
flag = chxor_f6c4d9ae(flag)
flag = csub_4a29a9b1(flag)
flag = cmul_513a78aa(flag)
flag = shuffle_14e44222(flag)
flag = chmul_a6c30448(flag)
flag = chunk_e20796de(flag)
flag = cmul_a05a6983(flag)
flag = xor_1c17469f(flag)
flag = chmul_207c7813(flag)
flag = sub_5e831919(flag)
flag = chxor_cd5d1c4b(flag)
flag = cadd_eca08b2e(flag)
flag = chadd_91feb455(flag)
flag = chunk_e3f6d2ec(flag)
flag = chxor_56abb2e0(flag)
flag = mul_e80fd803(flag)
flag = cadd_6ae07a4d(flag)
flag = chadd_e99579ed(flag)
flag = mul_0e478f31(flag)
flag = chunk_42bc522c(flag)
flag = chxor_6712129e(flag)
flag = chadd_42bbf689(flag)
flag = digsub_ee34dc69(flag)
flag = sub_12d5d25f(flag)
flag = xor_78429cb3(flag)
flag = mul_87965a17(flag)
flag = csub_63df48f0(flag)
flag = mul_bdb89cce(flag)
flag = chsub_e9070016(flag)
flag = chadd_8231f9c2(flag)
flag = shuffle_f380512c(flag)
flag = cxor_d8404029(flag)
flag = digsub_ea672c6d(flag)
flag = chmul_61efa118(flag)
flag = shuffle_c3a4eec2(flag)
flag = mul_8502f399(flag)
flag = digsub_6afbfca8(flag)
flag = chxor_44d65ee9(flag)
flag = chadd_d7b62183(flag)
flag = chxor_b10769e4(flag)
flag = cmul_a292d693(flag)
flag = csub_6cc93d0b(flag)
flag = sub_813bc423(flag)
flag = xor_084e61d3(flag)
flag = shuffle_e6522329(flag)
flag = cadd_a4fd2ffb(flag)
flag = cadd_626b1801(flag)
flag = cadd_9406ad37(flag)
flag = chadd_226738ed(flag)
flag = chadd_fa13451e(flag)
flag = chmul_522be87f(flag)
flag = chmul_d5be6ef1(flag)
flag = cxor_c57039b1(flag)
flag = csub_89d6db66(flag)
flag = chadd_1f526c5a(flag)
flag = mul_a54dfca0(flag)
flag = chxor_9b4a8975(flag)
flag = chadd_f7fad255(flag)
flag = chadd_a3542df8(flag)
flag = add_91babee9(flag)
flag = cmul_66f3a0d2(flag)
flag = chmul_37dc6c90(flag)
flag = add_16b704e9(flag)
flag = shuffle_6c33ee33(flag)
flag = cmul_94531f44(flag)
flag = chunk_ba9920ce(flag)
flag = cxor_f4c61b89(flag)
flag = chunk_b78988b6(flag)
flag = mul_4ca5f016(flag)
flag = cadd_bc61cc65(flag)
flag = shuffle_6136bc5b(flag)
flag = shuffle_dc92e6b1(flag)
flag = cmul_31b88b90(flag)
flag = sub_c8b31549(flag)
flag = csub_1ca516a7(flag)
flag = csub_220202ad(flag)
flag = cxor_0d19b008(flag)
flag = cxor_95401b5f(flag)
flag = cmul_19d02797(flag)
flag = mul_7a676b8f(flag)
flag = chxor_49c8f56a(flag)
flag = mul_835fdfd8(flag)
flag = chxor_31c39495(flag)
flag = chadd_474b9959(flag)
flag = shuffle_63b7a61d(flag)
flag = chsub_b3a9e994(flag)
flag = cxor_8396e79a(flag)
flag = sub_658747e3(flag)
flag = mul_fc6ac804(flag)
flag = cmul_1871b99c(flag)
flag = sub_4bcab1c3(flag)
flag = cxor_95c41471(flag)
flag = csub_4707f65f(flag)
flag = csub_efe13119(flag)
flag = add_547096c9(flag)
flag = csub_b56c06db(flag)
flag = sub_6a868517(flag)
flag = chmul_e406aa1a(flag)
flag = cadd_50d8a8d3(flag)
flag = chmul_d4a185e3(flag)
flag = sub_a0d3d89e(flag)
flag = cmul_9020ca8c(flag)
flag = add_306b249b(flag)
flag = xor_b5a69ced(flag)
flag = chmul_adc58ae6(flag)
flag = mul_15292c86(flag)
flag = cxor_0d19b008(flag)
flag = csub_07dcceeb(flag)
flag = digsub_211a2fee(flag)
flag = mul_bb31d66d(flag)
flag = shuffle_a6432e15(flag)
flag = chadd_43e1206d(flag)
flag = chunk_0a45d781(flag)
flag = sub_f3b58e44(flag)
flag = chadd_83134f29(flag)
flag = sub_65030a05(flag)
flag = sub_ec18d730(flag)
flag = xor_6c2819c2(flag)
flag = digsub_7d45ef3f(flag)
flag = mul_224595eb(flag)
flag = cmul_ddd178e6(flag)
flag = chxor_24ff0dd9(flag)
flag = shuffle_d348541e(flag)
flag = chsub_c6668097(flag)
flag = add_d1d41f14(flag)
flag = sub_9514a3ce(flag)
flag = csub_ecd1b6d0(flag)
flag = shuffle_86331a49(flag)
flag = xor_e7da9a66(flag)
flag = cmul_4691495a(flag)
flag = chunk_8361daed(flag)
flag = chadd_2f4760f5(flag)
flag = xor_19d4481b(flag)
flag = digsub_e2130014(flag)
flag = sub_657f5f3f(flag)
flag = sub_da5b779b(flag)
flag = chmul_d06b2f3e(flag)
flag = cxor_22b4a127(flag)
flag = xor_c3591520(flag)
flag = chadd_f560a4d3(flag)
flag = add_867182be(flag)
flag = add_8e1a7afe(flag)
flag = chsub_8809f725(flag)
flag = chxor_dda862c4(flag)
flag = cxor_f5f56306(flag)
flag = digsub_a240d2e8(flag)
flag = csub_8d8cd37f(flag)
flag = shuffle_f4bbf14d(flag)
flag = chunk_79cef8cd(flag)
flag = add_986dd560(flag)
flag = cadd_8fd791e9(flag)
flag = csub_7c363447(flag)
flag = chmul_b8a7f012(flag)
flag = mul_e5700c12(flag)
flag = cmul_4efbd341(flag)
flag = chmul_ee75a8f1(flag)
flag = cmul_bf506846(flag)
flag = chadd_742f064d(flag)
flag = chmul_b8c4917b(flag)
flag = digsub_e671df40(flag)
flag = chsub_e93fd882(flag)
flag = chadd_91feb455(flag)
flag = chmul_b820c945(flag)
flag = xor_61d47dbf(flag)
flag = chxor_f8174daf(flag)
flag = cadd_97b622f1(flag)
flag = digsub_f22e07b0(flag)
flag = sub_8fe1102c(flag)
flag = chunk_530108df(flag)
flag = sub_12d5d25f(flag)
flag = chunk_95566664(flag)
flag = csub_c123debf(flag)
flag = xor_1c0c670c(flag)
flag = shuffle_0d458069(flag)
flag = add_74fa4c8a(flag)
flag = chsub_b3a9e994(flag)
flag = csub_34d4359e(flag)
flag = cmul_8d626e12(flag)
flag = cadd_f435a64a(flag)
flag = chadd_f260ba56(flag)
flag = xor_2ac1f33e(flag)
flag = csub_d616f883(flag)
flag = cxor_5ac6b756(flag)
flag = chadd_3d456bc0(flag)
flag = chsub_7b8aa8b8(flag)
flag = shuffle_a17bb4ee(flag)
flag = shuffle_35e807af(flag)
flag = cadd_ffecf556(flag)
flag = chsub_ba0df272(flag)
flag = digsub_2c3da0c6(flag)
flag = chmul_12872986(flag)
flag = chadd_474b9959(flag)
flag = chunk_367e0942(flag)
flag = chmul_5c39207d(flag)
flag = chunk_e006d845(flag)
flag = chadd_c28b3253(flag)
flag = chunk_88f4a033(flag)
flag = digsub_db13869f(flag)
flag = sub_5e615eab(flag)
flag = sub_94808741(flag)
flag = shuffle_f861c12e(flag)
flag = digsub_832d65ad(flag)
flag = chunk_f5aa64b7(flag)
flag = cadd_81014cf5(flag)
flag = xor_446fe190(flag)
flag = chsub_dbd1ec78(flag)
flag = chadd_ff6b9cf5(flag)
flag = chunk_4bf6bdc4(flag)
flag = chadd_8231f9c2(flag)
flag = chxor_27993531(flag)
flag = cxor_1290e20b(flag)
flag = chmul_b5cd94ca(flag)
flag = shuffle_2a87a3a3(flag)
flag = chunk_2bbf6ee5(flag)
flag = chmul_64d93738(flag)
flag = chxor_bcf0771e(flag)
flag = cxor_86921258(flag)
flag = shuffle_b0e9c01f(flag)
flag = shuffle_0bc785b3(flag)
flag = cmul_a51dd714(flag)
flag = cmul_e577eda6(flag)
flag = add_a391835b(flag)
flag = chmul_330af750(flag)
flag = csub_b08e7ba7(flag)
flag = digsub_6ab37400(flag)
flag = xor_28c1cc46(flag)
flag = shuffle_a02cdb24(flag)
flag = sub_5e831919(flag)
flag = csub_44ad5428(flag)
flag = sub_7d90f9de(flag)
flag = xor_fc88f2e7(flag)
flag = cxor_88eef1ab(flag)
flag = chadd_0ef59fd4(flag)
flag = digsub_6be19c93(flag)
flag = chmul_96b3e78c(flag)
flag = mul_68b3556d(flag)
flag = cadd_b70fc370(flag)
flag = shuffle_1676c2c9(flag)
flag = chmul_02f67fce(flag)
flag = shuffle_bbb676d2(flag)
flag = csub_959f7557(flag)
flag = chsub_52e6291c(flag)
flag = mul_cf7af31a(flag)
flag = xor_f1cb1b28(flag)
flag = chmul_b8a4da05(flag)
flag = cxor_ce58803c(flag)
flag = cmul_f65d51e7(flag)
flag = mul_b9305b76(flag)
flag = shuffle_dc7ee1c6(flag)
flag = chmul_398837e8(flag)
flag = digsub_0410b672(flag)
flag = chmul_eda95d12(flag)
flag = chsub_195ef194(flag)
flag = cxor_29df8c0e(flag)
flag = chmul_cf7d31c7(flag)
flag = chxor_587ae605(flag)
flag = cmul_19d02797(flag)
flag = digsub_61a694a2(flag)
flag = cmul_75c87098(flag)
flag = add_40ed3353(flag)
flag = xor_3b807d61(flag)
flag = csub_cb2cec49(flag)
flag = cadd_75e1b32f(flag)
flag = cadd_1d1894a8(flag)
flag = shuffle_b6a2aa6c(flag)
flag = chsub_bb765577(flag)
flag = xor_5a1c8280(flag)
flag = add_108fd3c6(flag)
flag = chxor_b69b0e36(flag)
flag = csub_3564220e(flag)
flag = add_5f0798fd(flag)
flag = digsub_4034f057(flag)
flag = chsub_70fd4908(flag)
flag = chxor_6fdbabf9(flag)
flag = shuffle_f4cba7dd(flag)
flag = chmul_23bd481d(flag)
flag = cadd_1cd51d5c(flag)
flag = chadd_ced5aac5(flag)
flag = chsub_063a5399(flag)
flag = xor_c05b216d(flag)
flag = mul_d4fa63d2(flag)
flag = chxor_7d723b4b(flag)
flag = shuffle_3a497842(flag)
flag = add_02374137(flag)
flag = chsub_aebdb774(flag)
flag = cadd_8fd791e9(flag)
flag = csub_b56c06db(flag)
flag = cxor_7ec801e0(flag)
flag = xor_c1194f5a(flag)
flag = chxor_2bbe4cc1(flag)
flag = xor_3994c2ad(flag)
flag = xor_a36d3d94(flag)
flag = cxor_81cc1cc2(flag)
flag = shuffle_65d9ca2c(flag)
flag = mul_c4baebe4(flag)
flag = cmul_5f2f8cea(flag)
flag = chunk_3256d188(flag)
flag = chmul_ae2a8843(flag)
flag = add_770b1c6f(flag)
flag = chxor_27fd37e4(flag)
flag = shuffle_39351a8a(flag)
flag = cadd_f83b216d(flag)
flag = mul_0af7d935(flag)
flag = cmul_c9f8e5a1(flag)
flag = chmul_4863adb1(flag)
flag = chxor_dd87f2e6(flag)
flag = cmul_e510f1c4(flag)
flag = chmul_384134ae(flag)
flag = shuffle_6a6f7803(flag)
flag = add_26bde20c(flag)
flag = cadd_6e163781(flag)
flag = shuffle_cadeb447(flag)
flag = chxor_bca7bb47(flag)
flag = chmul_05b6d674(flag)
flag = chsub_f1540b87(flag)
flag = chsub_a12104be(flag)
flag = chunk_e157469e(flag)
flag = chadd_14d93540(flag)
flag = shuffle_602562e7(flag)
flag = sub_a3d54f98(flag)
flag = digsub_e671df40(flag)
flag = chunk_c2186f8f(flag)
flag = chunk_cbf1932b(flag)
flag = add_8357f559(flag)
flag = cadd_8bcff692(flag)
flag = cmul_b2582678(flag)
flag = sub_79391e33(flag)
flag = chunk_90824d65(flag)
flag = cadd_598cbf7e(flag)
flag = cxor_8fe94932(flag)
flag = mul_b5be71ee(flag)
flag = chunk_7d26cddb(flag)
flag = chxor_b69b0e36(flag)
flag = csub_74d531bb(flag)
flag = cxor_69705ab6(flag)
flag = cadd_5cb4a9bb(flag)
flag = chxor_59b7fb58(flag)
flag = csub_220202ad(flag)
flag = digsub_f7a754a1(flag)
flag = add_9d214583(flag)
flag = chmul_b8a7f012(flag)
flag = chmul_bfab997d(flag)
flag = cadd_d6913038(flag)
flag = chmul_77f9c95f(flag)
flag = add_917bbbbc(flag)
flag = chsub_7e45d909(flag)
flag = chxor_4ec23f54(flag)
flag = cxor_c146ee2f(flag)
flag = chsub_5a5cbf95(flag)
flag = chsub_b705b02f(flag)
flag = digsub_1f1582a8(flag)
flag = add_a5b30fdf(flag)
flag = cxor_4f2ad7d2(flag)
flag = cadd_21257952(flag)
flag = cmul_c52f5be0(flag)
flag = csub_dcf528e5(flag)
flag = chxor_79ffa521(flag)
flag = chsub_66a6c561(flag)
flag = chunk_db078de2(flag)
flag = chmul_b8a7f012(flag)
flag = mul_9d0c3682(flag)
flag = shuffle_5b02919b(flag)
flag = mul_bdb89cce(flag)
flag = cadd_a2760089(flag)
flag = shuffle_a17bb4ee(flag)
flag = xor_6cc1a542(flag)
flag = mul_fcc77ce6(flag)
flag = csub_452392a9(flag)
flag = add_3e8fa8db(flag)
flag = mul_5067d66a(flag)
flag = mul_5067d66a(flag)
flag = chmul_d909e81b(flag)
flag = digsub_093ca952(flag)
flag = shuffle_40277085(flag)
flag = xor_a1e6019f(flag)
flag = cmul_c52f5be0(flag)
flag = add_2071c6f7(flag)
flag = cadd_4658d16e(flag)
flag = chadd_ab12cde5(flag)
flag = chsub_6acb4ef8(flag)
flag = xor_028e2ac0(flag)
flag = add_c6556187(flag)
flag = sub_7a049de1(flag)
flag = chxor_d62951fc(flag)
flag = digsub_c09c7211(flag)
flag = chmul_eb007432(flag)
flag = sub_48430fed(flag)
flag = csub_395783d4(flag)
flag = chadd_0305d89a(flag)
flag = xor_c3591520(flag)
flag = csub_20a768aa(flag)
flag = sub_d67a4b16(flag)
flag = xor_5a1c8280(flag)
flag = sub_0bdcedb0(flag)
flag = chunk_b26605b9(flag)
flag = xor_f88ae7f1(flag)
flag = sub_f3871ca4(flag)
flag = chunk_1f1becb3(flag)
flag = chadd_bfbcfbbe(flag)
flag = cxor_075c21e0(flag)
flag = xor_5b72ca68(flag)
flag = chxor_97c61f30(flag)
flag = cxor_b2b4971b(flag)
flag = cadd_e9d43d97(flag)
flag = mul_efab7eff(flag)
flag = digsub_670300f2(flag)
flag = add_c1abafc2(flag)
flag = chunk_6fa30167(flag)
flag = add_ae27c2fc(flag)
flag = cadd_51596bc7(flag)
flag = chmul_78c19c03(flag)
flag = sub_a3d54f98(flag)
flag = digsub_b93022b5(flag)
flag = chunk_a431061a(flag)
flag = add_52b814e5(flag)
flag = mul_0cb6e2cc(flag)
flag = chunk_6b35af69(flag)
flag = chmul_edaf1927(flag)
flag = chmul_794b5292(flag)
flag = digsub_4ed94ee3(flag)
flag = add_3cfe5566(flag)
flag = cmul_f83e4df7(flag)
flag = chsub_3bf8b0c8(flag)
flag = add_71df7f95(flag)
flag = shuffle_0d936e4f(flag)
flag = shuffle_5f949cd5(flag)
flag = chxor_3a47885a(flag)
flag = chunk_4d08c9d5(flag)
flag = xor_6cabd79d(flag)
flag = mul_c3e69fa2(flag)
flag = csub_dcf528e5(flag)
flag = chadd_24def8ad(flag)
flag = chxor_b82fad32(flag)
flag = sub_90d65932(flag)
flag = cadd_a31d859b(flag)
flag = digsub_a821dc7d(flag)
flag = csub_2df7e131(flag)
flag = cxor_d43914ce(flag)
flag = chxor_79ffa521(flag)
flag = xor_0e75b77c(flag)
flag = mul_7fa6ac59(flag)
flag = chsub_f27f3438(flag)
flag = cxor_83571dc3(flag)
flag = xor_3d8de492(flag)
flag = mul_4bf9810d(flag)
flag = digsub_81a9c939(flag)
flag = cxor_30674cf4(flag)
flag = chmul_e0c73179(flag)
flag = csub_eb753ff1(flag)
flag = chxor_f0c78fe9(flag)
flag = cmul_76185aa2(flag)
flag = add_da6dae2b(flag)
flag = mul_53ea4a75(flag)
flag = mul_0cb6e2cc(flag)
flag = digsub_10a10009(flag)
flag = sub_dd4a6aab(flag)
flag = shuffle_987eaf21(flag)
flag = sub_79391e33(flag)
flag = shuffle_b3fe3e10(flag)
flag = xor_c1cdd552(flag)
flag = chmul_663d5067(flag)
flag = mul_34324887(flag)
flag = chxor_4909f0be(flag)
flag = cxor_025cbbe3(flag)
flag = cmul_c648ff5d(flag)
flag = csub_1017a6c4(flag)
flag = cmul_108a5ff2(flag)
flag = mul_3d2d3c98(flag)
flag = shuffle_f554897b(flag)
flag = shuffle_35e807af(flag)
flag = chsub_1cf94121(flag)
flag = xor_3994c2ad(flag)
flag = cmul_93ebf751(flag)
flag = chadd_c2c2b7f7(flag)
flag = chxor_353fb03b(flag)
flag = digsub_6dd6217e(flag)
flag = add_4584979d(flag)
flag = chunk_66d22063(flag)
flag = digsub_e0de2a5d(flag)
flag = chsub_c2ee0e2b(flag)
flag = cxor_0d19b008(flag)
flag = cmul_6f98e718(flag)
flag = csub_cb66374f(flag)
flag = xor_f41b0fa6(flag)
flag = csub_d97e3189(flag)
flag = chsub_0063bc32(flag)
flag = add_81776826(flag)
flag = cmul_25c2274e(flag)
flag = chmul_b7f6dccf(flag)
flag = add_de55f4f2(flag)
flag = shuffle_57fe470a(flag)
flag = shuffle_8ab6bb33(flag)
flag = cmul_63effb36(flag)
flag = cadd_dc2d39b3(flag)
flag = shuffle_20aac844(flag)
flag = mul_70770109(flag)
flag = chxor_4447550e(flag)
flag = chxor_442c0a5b(flag)
flag = chadd_a6e32549(flag)
flag = add_333323b1(flag)
flag = cadd_51596bc7(flag)
flag = chunk_158dd2b2(flag)
flag = add_8eb87b67(flag)
flag = xor_47cf200f(flag)
flag = cmul_fa2c1e3a(flag)
flag = chmul_4245aa0c(flag)
flag = chunk_0c74cc13(flag)
flag = csub_fc0bc142(flag)
flag = chmul_7ce961bc(flag)
flag = digsub_febb8b71(flag)
flag = cxor_892833c6(flag)
flag = chsub_4c009b94(flag)
flag = chadd_e14e4897(flag)
flag = chadd_24def8ad(flag)
flag = csub_2645ed31(flag)
flag = cmul_66170953(flag)
flag = digsub_caab5c9d(flag)
flag = csub_b56c06db(flag)
flag = chxor_5cda58cc(flag)
flag = chadd_6c281254(flag)
flag = cadd_d3782943(flag)
flag = digsub_2b3a8dfd(flag)
flag = mul_89bed2ea(flag)
flag = add_83aabfde(flag)
flag = cxor_9a4356f0(flag)
flag = cadd_df4a88c2(flag)
flag = chxor_dbd34bdf(flag)
flag = sub_ac9927d6(flag)
flag = chxor_b09e96f6(flag)
flag = csub_9560b32f(flag)
flag = sub_65030a05(flag)
flag = sub_00c9af82(flag)
flag = chadd_3c9e0be9(flag)
flag = cxor_7d6f0b67(flag)
flag = cmul_f579357e(flag)
flag = xor_2f985cdb(flag)
flag = add_c9854582(flag)
flag = chxor_85f13098(flag)
flag = chsub_4cadc753(flag)
flag = shuffle_9a408c44(flag)
flag = digsub_fc90a80f(flag)
flag = cxor_bac2ca1f(flag)
flag = sub_c126f74d(flag)
flag = add_333323b1(flag)
flag = chunk_0f48dab8(flag)
flag = mul_fc9252b1(flag)
flag = chmul_6d29d2c8(flag)
flag = chunk_f140121b(flag)
flag = cadd_79e79007(flag)
flag = add_8eb87b67(flag)
flag = sub_a091f45e(flag)
flag = csub_4660584b(flag)
flag = cadd_fdec7760(flag)
flag = cmul_30089d16(flag)
flag = sub_7198b6a2(flag)
flag = chxor_65adc1af(flag)
flag = add_ed2b53a6(flag)
flag = chmul_d22494d3(flag)
flag = cxor_29df8c0e(flag)
flag = cmul_994c1dcb(flag)
flag = chmul_23bd481d(flag)
flag = shuffle_2ad93819(flag)
flag = csub_68308d55(flag)
flag = chxor_7858401c(flag)
flag = add_23028792(flag)
flag = chmul_eda95d12(flag)
flag = chsub_74cf05a6(flag)
flag = cmul_2f1c4ba6(flag)
flag = sub_27d844ff(flag)
flag = csub_fda3f560(flag)
flag = cxor_fa552213(flag)
flag = digsub_2362ee33(flag)
flag = digsub_6b9010a5(flag)
flag = chsub_b9c56acf(flag)
flag = sub_ec7f3f21(flag)
flag = cmul_6cf9601c(flag)
flag = chunk_95566664(flag)
flag = sub_dfb02634(flag)
flag = shuffle_7c86708c(flag)
flag = cadd_e4e4c9c0(flag)
flag = chmul_cc8af1e6(flag)
flag = digsub_7c2a7053(flag)
flag = chmul_b11a8b8c(flag)
flag = cmul_c76db8f9(flag)
flag = digsub_db13869f(flag)
flag = digsub_94dd3136(flag)
flag = xor_34c86087(flag)
flag = xor_41405d72(flag)
flag = sub_8c5d52aa(flag)
flag = cmul_b7f51e10(flag)
flag = chsub_6ab39e5c(flag)
flag = chadd_40e55360(flag)
flag = chsub_a2fdcc3b(flag)
flag = shuffle_9eddde7b(flag)
flag = chsub_0b2321c1(flag)
flag = shuffle_0a4f92ab(flag)
flag = chmul_8fdd15ff(flag)
flag = chxor_49854e3d(flag)
flag = add_ebcc13ce(flag)
flag = csub_a55a8f74(flag)
flag = cxor_9064d63f(flag)
flag = chxor_041a698a(flag)
flag = cmul_2a502598(flag)
flag = cmul_3c18a69a(flag)
flag = cxor_f87a3a8a(flag)
flag = csub_8a4930e2(flag)
flag = sub_7198b6a2(flag)
flag = cadd_79d7fa85(flag)
flag = cadd_fd35b517(flag)
flag = mul_d900d8ed(flag)
flag = xor_071e51df(flag)
flag = chxor_6b41b0f3(flag)
flag = cadd_f5745b35(flag)
flag = mul_70d397f8(flag)
flag = chsub_f5c5e1fa(flag)
flag = chxor_f6c4d9ae(flag)
flag = xor_2d9c7e1d(flag)
flag = cmul_a0ab0dc2(flag)
flag = chsub_894d41c7(flag)
flag = sub_adc67d90(flag)
flag = sub_de79490f(flag)
flag = sub_38bfe22f(flag)
flag = chsub_8b936fd7(flag)
flag = cadd_594b40aa(flag)
flag = cxor_a009b999(flag)
flag = add_aa98b4ae(flag)
flag = cadd_d4d5a797(flag)
flag = sub_d67a4b16(flag)
flag = xor_abff1870(flag)
flag = chxor_1649570d(flag)
flag = chunk_43ad380e(flag)
flag = add_377e663e(flag)
flag = mul_62495a4a(flag)
flag = chsub_1a499bac(flag)
flag = xor_4742cccf(flag)
flag = xor_0e83be33(flag)
flag = chadd_5d64f99d(flag)
flag = cmul_b358c3b3(flag)
flag = chxor_ce40491b(flag)
flag = cxor_05f70989(flag)
flag = mul_68b3556d(flag)
flag = csub_af6b6944(flag)
flag = chmul_04e4a837(flag)
flag = add_c40251ff(flag)
flag = shuffle_6fcd072c(flag)
flag = cadd_3882e35e(flag)
flag = chsub_9fe7030d(flag)
flag = csub_77053211(flag)
flag = digsub_4bfe6492(flag)
flag = cadd_86ca3121(flag)
flag = sub_c8e4bd2d(flag)
flag = chunk_ac3a4598(flag)
flag = cmul_e4155cf9(flag)
flag = cmul_9ebbf06f(flag)
flag = chsub_f850c36b(flag)
flag = cxor_3ea0418e(flag)
flag = add_37600cfb(flag)
flag = cmul_18b5fc94(flag)
flag = xor_b2f63512(flag)
flag = chmul_27a340a5(flag)
flag = cadd_4dc54d10(flag)
flag = chsub_00adad20(flag)
flag = chadd_37bb2c71(flag)
flag = mul_1b781211(flag)
flag = chunk_cf1766d3(flag)
flag = digsub_19451cfd(flag)
flag = chmul_e4e712b9(flag)
flag = sub_656aa559(flag)
flag = chunk_a9c428c6(flag)
flag = chsub_27fbe141(flag)
flag = xor_d90ee923(flag)
flag = chsub_99c4b363(flag)
flag = xor_0f3a6446(flag)
flag = xor_a2999e10(flag)
flag = digsub_f2e8b007(flag)
flag = chunk_24c352a1(flag)
flag = add_b6cb0782(flag)
flag = chmul_b131f273(flag)
flag = digsub_54057ff2(flag)
flag = shuffle_ffc10c41(flag)
flag = add_f22a99f3(flag)
flag = chmul_2561cd28(flag)
flag = xor_75987462(flag)
flag = csub_16bab438(flag)
flag = xor_c0421e98(flag)
flag = cmul_f65d51e7(flag)
flag = digsub_1f6e32d7(flag)
flag = cadd_86ca3121(flag)
flag = sub_a40cb760(flag)
flag = mul_8cff30c9(flag)
flag = cxor_8ff25e39(flag)
flag = chsub_a2001711(flag)
flag = cxor_f01c9df2(flag)
flag = cmul_b805737d(flag)
flag = cmul_7bb17901(flag)
flag = add_c0abe07c(flag)
flag = chunk_397a3d62(flag)
flag = chunk_1ba6912f(flag)
flag = sub_3c434ee5(flag)
flag = csub_c59b429f(flag)
flag = chxor_5f238dda(flag)
flag = cadd_7db59ff9(flag)
flag = xor_fbcf5aa3(flag)
flag = chunk_9d77353c(flag)
flag = chadd_af05dbbf(flag)
flag = add_ae27c2fc(flag)
flag = chadd_a3542df8(flag)
flag = shuffle_47929ded(flag)
flag = chunk_bdaa57c3(flag)
flag = chmul_5c3ce310(flag)
flag = chadd_dba6c166(flag)
flag = add_1b3e26ab(flag)
flag = digsub_81042cb1(flag)
flag = csub_46c4ad67(flag)
flag = sub_61538669(flag)
flag = cadd_79e79007(flag)
flag = digsub_2f2a8750(flag)
flag = cxor_73c5cfae(flag)
flag = mul_712130c5(flag)
flag = digsub_f642c787(flag)
flag = chadd_c58d2df9(flag)
flag = cxor_0af289cf(flag)
flag = mul_9dbf3796(flag)
flag = shuffle_a293a45d(flag)
flag = mul_2c8e35d6(flag)
flag = cadd_f4a3a91b(flag)
flag = chadd_65a80365(flag)
flag = add_33350535(flag)
flag = chxor_822180c4(flag)
flag = chsub_4d7b9897(flag)
flag = chsub_ca548f97(flag)
flag = shuffle_057518f5(flag)
flag = digsub_981b52ce(flag)
flag = digsub_46d7afa7(flag)
flag = cxor_9064d63f(flag)
flag = digsub_125edb05(flag)
flag = chxor_0f6be034(flag)
flag = cxor_3addab66(flag)
flag = chadd_e14e4897(flag)
flag = chmul_7df9b320(flag)
flag = chmul_7eea79aa(flag)
flag = sub_c126f74d(flag)
flag = sub_65030a05(flag)
flag = sub_adc67d90(flag)
flag = chxor_0595f6c3(flag)
flag = add_1e3629e5(flag)
flag = chxor_d23e056d(flag)
flag = cadd_4658d16e(flag)
flag = cxor_a0fe64b3(flag)
flag = chsub_244387c4(flag)
flag = digsub_0eb180b8(flag)
flag = chunk_bb0e25ea(flag)
flag = add_f22a99f3(flag)
flag = cxor_4cb585c4(flag)
flag = csub_68308d55(flag)
flag = sub_27d844ff(flag)
flag = chunk_e53ff766(flag)
flag = csub_4392ba2f(flag)
flag = chmul_edaf1927(flag)
flag = cxor_da56bd65(flag)
flag = chunk_2a9e106f(flag)
flag = chsub_a70db66e(flag)
flag = chsub_75cdd33b(flag)
flag = csub_bc70c3a8(flag)
flag = mul_36a4bfa0(flag)
flag = chxor_6ef3ef24(flag)
flag = add_1ddc8330(flag)
flag = chadd_db3363a7(flag)
flag = sub_960a2209(flag)
flag = add_882b6a0b(flag)
flag = chadd_8cbc6e8c(flag)
flag = cxor_b646f68b(flag)
flag = chmul_e6b12a10(flag)
flag = chadd_37ffbfed(flag)
flag = sub_b665fdaf(flag)
flag = cmul_11e41b5d(flag)
flag = shuffle_7c9553cb(flag)
flag = chmul_a6bf2367(flag)
flag = cxor_b93aeb3d(flag)
flag = mul_2cd00355(flag)
flag = csub_6612390f(flag)
flag = chunk_878046b8(flag)
flag = cxor_ef4e4e70(flag)
flag = digsub_f7a754a1(flag)
flag = xor_0ade2d1f(flag)
flag = chxor_ce40491b(flag)
flag = chadd_df001d38(flag)
flag = xor_ac6e82c0(flag)
flag = cmul_3dfa51d9(flag)
flag = digsub_ea672c6d(flag)
flag = cxor_48ff1c3c(flag)
flag = chadd_1ed1777e(flag)
flag = sub_ef127564(flag)
flag = chunk_e808502e(flag)
flag = cmul_fa2c1e3a(flag)
flag = xor_07333316(flag)
flag = cxor_ff935c5e(flag)
flag = chxor_4ec23f54(flag)
flag = chmul_708c05e7(flag)
flag = mul_8cff30c9(flag)
flag = mul_60fbc31e(flag)
flag = add_f10a2818(flag)
flag = chunk_8703835d(flag)
flag = sub_361737a7(flag)
flag = cmul_60deac9a(flag)
flag = csub_0b2b5416(flag)
flag = chmul_d06b2f3e(flag)
flag = sub_658747e3(flag)
flag = shuffle_9076b7e7(flag)
flag = xor_79919c11(flag)
flag = cxor_41764223(flag)
flag = cxor_f125fa8a(flag)
flag = chsub_0ee9fb58(flag)
flag = chxor_187da4ac(flag)
flag = chadd_2732f1ee(flag)
flag = chxor_41c79131(flag)
flag = chunk_5fa20e0f(flag)
flag = chadd_4d98bf27(flag)
flag = chadd_3b98f1b0(flag)
flag = cadd_779b79cd(flag)
flag = chadd_a8439bc3(flag)
flag = chsub_2b33e666(flag)
flag = mul_bc232ddb(flag)
flag = chadd_cf40e026(flag)
flag = add_a45b80f9(flag)
flag = sub_79391e33(flag)
flag = sub_3cb32b59(flag)
flag = cmul_38593f30(flag)
flag = chmul_05459301(flag)
flag = add_ca8439ba(flag)
flag = sub_18770552(flag)
flag = chsub_dff9f4eb(flag)
flag = cxor_7948ea7c(flag)
flag = shuffle_b63d8098(flag)
flag = chsub_9b93213c(flag)
flag = chunk_d7f6d493(flag)
flag = chunk_7692aef1(flag)
flag = sub_6fb5c242(flag)
flag = cxor_6cae2cb6(flag)
flag = csub_25da5f24(flag)
flag = digsub_575bce65(flag)
flag = cxor_e799ce0f(flag)
flag = xor_df1ffac5(flag)
flag = cxor_86921258(flag)
flag = chunk_f5aa64b7(flag)
flag = xor_0cecea66(flag)
flag = mul_34324887(flag)
flag = cxor_65e0c2b5(flag)
flag = chunk_aac2455e(flag)
flag = cxor_c4236734(flag)
flag = chmul_d5be6ef1(flag)
flag = csub_717c9f99(flag)
flag = shuffle_7ccfcf66(flag)
flag = sub_8d4465ea(flag)
flag = mul_62495a4a(flag)
flag = xor_53ec0b4a(flag)
flag = chmul_58875bd8(flag)
flag = chadd_12bc44e9(flag)
flag = sub_3428aff7(flag)
flag = chmul_e6b12a10(flag)
flag = xor_c425535c(flag)
flag = cadd_93747557(flag)
flag = csub_a76aeaed(flag)
flag = cmul_0b1c712d(flag)
flag = chunk_80f5c942(flag)
flag = digsub_fcc47cc3(flag)
flag = chxor_0449a472(flag)
flag = add_87dad6e0(flag)
flag = chunk_a763fb97(flag)
flag = cxor_9752c63c(flag)
flag = chxor_fc74f7f2(flag)
flag = sub_8d22e619(flag)
flag = mul_c3e69fa2(flag)
flag = xor_2ec3c23c(flag)
flag = cmul_89d225a2(flag)
flag = chxor_385bc3a3(flag)
flag = cmul_789804bf(flag)
flag = mul_b8963b30(flag)
flag = add_20baca93(flag)
flag = add_1c8d08f1(flag)
flag = chsub_9a699614(flag)
flag = digsub_6dd6217e(flag)
flag = chsub_a9bb41f7(flag)
flag = chmul_c25d1cd0(flag)
flag = shuffle_6ed87304(flag)
flag = xor_7bdefd5e(flag)
flag = digsub_ef3c36c5(flag)
flag = add_4d5b7dd8(flag)
flag = sub_f3be4e25(flag)
flag = chsub_968aab31(flag)
flag = csub_9253b05f(flag)
flag = cxor_cd79085f(flag)
flag = xor_2495a11e(flag)
flag = digsub_af2d37bc(flag)
flag = chmul_b7f6dccf(flag)
flag = chsub_587b045c(flag)
flag = cmul_8872db98(flag)
flag = csub_2b0ae6b8(flag)
flag = chsub_71c61f9b(flag)
flag = xor_eca7972f(flag)
flag = add_0f283710(flag)
flag = chadd_97096590(flag)
flag = chsub_112adf2e(flag)
flag = chadd_f73b3974(flag)
flag = cmul_3bee8718(flag)
flag = add_ee203fd4(flag)
flag = add_f582d81c(flag)
flag = cxor_eaaa00cc(flag)
flag = mul_f58805a3(flag)
flag = chadd_2732f1ee(flag)
flag = chadd_01e97c37(flag)
flag = csub_20a984f0(flag)
flag = add_34a7ffc5(flag)
flag = cadd_a495112c(flag)
flag = chsub_8b38a202(flag)
flag = chsub_7178b8f3(flag)
flag = sub_5e615eab(flag)
flag = cxor_f929f224(flag)
flag = digsub_f56a1358(flag)
flag = chxor_3a47885a(flag)
flag = mul_31e8499c(flag)
flag = chxor_dd683543(flag)
flag = chmul_c4924d51(flag)
flag = xor_2ec3c23c(flag)
flag = shuffle_54e93000(flag)
flag = cadd_0a20014b(flag)
flag = shuffle_6136bc5b(flag)
flag = chmul_b7f6dccf(flag)
flag = add_8eb87b67(flag)
flag = cmul_cabb8b44(flag)
flag = cxor_974a0f64(flag)
flag = cxor_f14bf0f9(flag)
flag = chunk_8361daed(flag)
flag = cxor_c57039b1(flag)
flag = chunk_ab174f4a(flag)
flag = cxor_df42e878(flag)
flag = chunk_5a70d9ef(flag)
flag = chadd_01e97c37(flag)
flag = digsub_19451cfd(flag)
flag = cmul_3c96ba6e(flag)
flag = chxor_dbd34bdf(flag)
flag = xor_ff7262d6(flag)
flag = csub_34d4359e(flag)
flag = csub_359c8002(flag)
flag = shuffle_16a08001(flag)
flag = chmul_14ccb396(flag)
flag = cxor_20661e8f(flag)
flag = chadd_685bb625(flag)
flag = chxor_385bc3a3(flag)
flag = sub_e8045aa7(flag)
flag = xor_9fab62d4(flag)
flag = cmul_fa47ed88(flag)
flag = shuffle_2621171b(flag)
flag = add_0f654473(flag)
flag = add_fb49a21d(flag)
flag = chxor_e93460f8(flag)
flag = chadd_01e97c37(flag)
flag = chunk_5e4cee28(flag)
flag = digsub_9dafa980(flag)
flag = chsub_5d86241d(flag)
flag = shuffle_dd75cb23(flag)
flag = chmul_743f98a5(flag)
flag = digsub_ecf47b8f(flag)
flag = shuffle_1011fc21(flag)
flag = cmul_04ae6c22(flag)
flag = chsub_379e2ba1(flag)
flag = chadd_fc03260a(flag)
flag = shuffle_897b72ea(flag)
flag = chmul_2d88dd5b(flag)
flag = add_eee1f715(flag)
flag = cmul_6f98e718(flag)
flag = mul_62cf6aa4(flag)
flag = chunk_faeac0c7(flag)
flag = chxor_385bc3a3(flag)
flag = chadd_4162bfbe(flag)
flag = digsub_eb8aeb23(flag)
flag = sub_02f68178(flag)
flag = digsub_574e8941(flag)
flag = chunk_69dd3db9(flag)
flag = chxor_5c4c4d77(flag)
flag = cxor_0673e3e4(flag)
flag = sub_7a049de1(flag)
flag = mul_bc486461(flag)
flag = mul_66f10f71(flag)
flag = cmul_ff24f1b5(flag)
flag = shuffle_f861c12e(flag)
flag = add_b071c8e9(flag)
flag = add_c9b23e99(flag)
flag = csub_a0c64190(flag)
flag = cmul_d77e3c24(flag)
flag = sub_92f79353(flag)
flag = xor_abff1870(flag)
flag = chsub_76b2d7aa(flag)
flag = shuffle_028022fe(flag)
flag = csub_f6ee0768(flag)
flag = cmul_ace3a215(flag)
flag = cxor_1adfeb4e(flag)
flag = cadd_b70fc370(flag)
flag = cmul_97c0f64c(flag)
flag = chxor_42438acb(flag)
flag = cmul_ad3ab72b(flag)
flag = digsub_2a3c141d(flag)
flag = chunk_85747b20(flag)
flag = chmul_ab9cdb92(flag)
flag = chsub_ebadaefe(flag)
flag = add_31efa65a(flag)
flag = shuffle_3355fbaf(flag)
flag = chmul_ff76516d(flag)
flag = add_4734c18c(flag)
flag = chxor_72c80534(flag)
flag = xor_7465fff5(flag)
flag = add_d2ad8931(flag)
flag = chxor_a87f9d33(flag)
flag = chunk_649c4eba(flag)
flag = cadd_49e18892(flag)
flag = add_0cf48ce3(flag)
flag = chadd_10d426ca(flag)
flag = sub_4a2fd9ee(flag)
flag = cmul_6fb2378c(flag)
flag = add_4235831f(flag)
flag = chxor_7f2707c2(flag)
flag = chunk_e5cbb933(flag)
flag = xor_0ade2d1f(flag)
flag = cadd_a377ad5c(flag)
flag = chunk_b0f88afb(flag)
flag = shuffle_5c9d432d(flag)
flag = cxor_c321d96d(flag)
flag = cmul_76043ee3(flag)
flag = mul_095b48a3(flag)
flag = chsub_be5f9d3f(flag)
flag = digsub_09d4f702(flag)
flag = chxor_b4cd4919(flag)
flag = csub_31de6d2c(flag)
flag = chsub_c3fb1168(flag)
flag = cxor_6cae2cb6(flag)
flag = chsub_83dc3951(flag)
flag = chmul_be23499e(flag)
flag = sub_b5dac8cd(flag)
flag = digsub_225591cf(flag)
flag = sub_0cb0697d(flag)
flag = cadd_3150b11b(flag)
flag = digsub_2f2a8750(flag)
flag = digsub_093ca952(flag)
flag = cadd_6bde1e47(flag)
flag = shuffle_b38ea8bc(flag)
flag = chadd_0232afc0(flag)
flag = chadd_3efd2ae8(flag)
flag = xor_4bd4b2d3(flag)
flag = cadd_b83d6dfa(flag)
flag = chxor_daa5c35b(flag)
flag = chunk_e157469e(flag)
flag = csub_e0440f53(flag)
flag = csub_98af337d(flag)
flag = csub_b08e7ba7(flag)
flag = mul_5d959d10(flag)
flag = cadd_ae1d750b(flag)
flag = cmul_06256c90(flag)
flag = shuffle_6186b5b1(flag)
flag = chsub_32f5910d(flag)
flag = cxor_e7839ec0(flag)
flag = cxor_ff935c5e(flag)
flag = chadd_a7330cb4(flag)
flag = chunk_64907dea(flag)
flag = chadd_83134f29(flag)
flag = chmul_5e1cf1e0(flag)
flag = cxor_2e302e67(flag)
flag = shuffle_b16c2957(flag)
flag = chunk_80f5c942(flag)
flag = mul_652ee2e0(flag)
flag = cmul_38d68804(flag)
flag = chxor_49e5796a(flag)
flag = add_44200607(flag)
flag = cmul_0fec80e1(flag)
flag = cxor_bba6fa0a(flag)
flag = shuffle_0df0d459(flag)
flag = chunk_f5aa64b7(flag)
flag = chsub_9fe7030d(flag)
flag = chxor_0f6be034(flag)
flag = chsub_aa802604(flag)
flag = sub_eeb354ba(flag)
flag = chadd_84fac9b1(flag)
flag = cmul_86b4d215(flag)
flag = xor_1a989c5f(flag)
flag = chxor_59178ab0(flag)
flag = mul_00091c11(flag)
flag = add_eee1f715(flag)
flag = add_85e81d17(flag)
flag = shuffle_3f9d1ce8(flag)
flag = cxor_a9c59f97(flag)
flag = chmul_e62c2028(flag)
flag = chxor_b9b02bcc(flag)
flag = sub_f29558b8(flag)
flag = sub_65dfc4a9(flag)
flag = chsub_7e45d909(flag)
flag = mul_2c8e35d6(flag)
flag = chsub_b9dc2f68(flag)
flag = cadd_d04bb716(flag)
flag = chsub_b448dac1(flag)
flag = csub_479c2380(flag)
flag = digsub_6be19c93(flag)
flag = chxor_bbac4066(flag)
flag = xor_31c0451b(flag)
flag = cadd_b39fc11d(flag)
flag = chadd_93e431eb(flag)
flag = add_db36360f(flag)
flag = chadd_10d426ca(flag)
flag = sub_cfa999fe(flag)
flag = cmul_01d50eab(flag)
flag = sub_a62e014f(flag)
flag = mul_e0667d8e(flag)
flag = xor_22aa0e90(flag)
flag = chsub_082be74e(flag)
flag = add_565903f4(flag)
flag = cmul_99a00a24(flag)
flag = chunk_d09c17de(flag)
flag = cxor_f9bee875(flag)
flag = chsub_134ff6dd(flag)
flag = shuffle_c089e7f9(flag)
flag = csub_fc0bc142(flag)
flag = chmul_663d5067(flag)
flag = cxor_4ff36064(flag)
flag = chxor_7d723b4b(flag)
flag = mul_82f61bf9(flag)
flag = digsub_864e27e4(flag)
flag = chsub_6649ba27(flag)
flag = cmul_cf6813e9(flag)
flag = digsub_be5397e9(flag)
flag = mul_043ce6a6(flag)
flag = mul_18205495(flag)
flag = csub_37af1f58(flag)
flag = add_7af2fe07(flag)
flag = xor_0b406c7d(flag)
flag = xor_df1ffac5(flag)
flag = chunk_b4b187d5(flag)
flag = chmul_b8a4da05(flag)
flag = add_51b5d61d(flag)
flag = cmul_b01d887b(flag)
flag = xor_2ecafb68(flag)
flag = cxor_94658244(flag)
flag = cadd_12c3036e(flag)
flag = cmul_d77e3c24(flag)
flag = cadd_428d6ecc(flag)
flag = cmul_e03e8b1c(flag)
flag = xor_4946eb25(flag)
flag = chmul_26940e3b(flag)
flag = shuffle_692c856d(flag)
flag = chadd_e835abf7(flag)
flag = chunk_9532fc70(flag)
flag = xor_2ecafb68(flag)
flag = mul_e04a2c12(flag)
flag = xor_446fe190(flag)
flag = digsub_269bf7d5(flag)
flag = cmul_01d50eab(flag)
flag = cadd_ba362142(flag)
flag = csub_a667ebea(flag)
flag = shuffle_dd75cb23(flag)
flag = chadd_37ffbfed(flag)
flag = cadd_d4d5a797(flag)
flag = chmul_3d18df83(flag)
flag = cmul_4e66e309(flag)
flag = csub_20a6b2c3(flag)
flag = chunk_45c7c0f6(flag)
flag = chadd_97096590(flag)
flag = chxor_29db699e(flag)
flag = digsub_9b074471(flag)
flag = chxor_e3b5c5ae(flag)
flag = chadd_9c4be3af(flag)
flag = shuffle_2c2121d2(flag)
flag = cmul_fd921d5b(flag)
flag = cadd_ae3d5a54(flag)
flag = chadd_3efd2ae8(flag)
flag = shuffle_0847afe1(flag)
flag = shuffle_47929ded(flag)
flag = digsub_1f6e32d7(flag)
flag = chunk_64907dea(flag)
flag = cadd_503cc573(flag)
flag = shuffle_d70b85e8(flag)
flag = chunk_9b5e7e5c(flag)
flag = cmul_280315b7(flag)
flag = cxor_eb72bf39(flag)
flag = chxor_98102bb9(flag)
flag = cadd_3124bc3c(flag)
flag = shuffle_88823dcd(flag)
flag = shuffle_e6522329(flag)
flag = cadd_2ed55f8d(flag)
flag = sub_5a358ec6(flag)
flag = cxor_e6156798(flag)
flag = csub_a0c64190(flag)
flag = chsub_64d91494(flag)
flag = csub_d278adbd(flag)
flag = shuffle_87103ee1(flag)
flag = xor_31c0451b(flag)
flag = add_8cda84d9(flag)
flag = mul_1d0b4953(flag)
flag = csub_f291b39b(flag)
flag = cadd_b60bc8ff(flag)
flag = add_986dd560(flag)
flag = chadd_adaa5d2b(flag)
flag = add_79292e38(flag)
flag = xor_f580ac50(flag)
flag = add_ae27c2fc(flag)
flag = csub_daf0877b(flag)
flag = cxor_9a4356f0(flag)
flag = csub_61350fa4(flag)
flag = mul_c00416be(flag)
flag = chmul_b8a4da05(flag)
flag = csub_8cff1d96(flag)
flag = chxor_b4cd4919(flag)
flag = mul_3feda191(flag)
flag = mul_4bf9810d(flag)
flag = xor_fddd23ae(flag)
flag = chunk_ac3a4598(flag)
flag = chunk_45336ad9(flag)
flag = add_35671a57(flag)
flag = sub_2dfefd1b(flag)
flag = cadd_130f7b9b(flag)
flag = chunk_7692aef1(flag)
flag = chmul_decbe9f3(flag)
flag = xor_702b624c(flag)
flag = csub_1967fa7b(flag)
flag = cmul_859e8b2d(flag)
flag = sub_2d595d46(flag)
flag = add_88cb654b(flag)
flag = cadd_ed8e4346(flag)
flag = sub_31d58010(flag)
flag = chadd_6b07665a(flag)
flag = cmul_ca02e498(flag)
flag = cmul_6ae52f53(flag)
flag = csub_76313df2(flag)
flag = digsub_5a1f6d2f(flag)
flag = sub_91a9b671(flag)
flag = xor_0e75b77c(flag)
flag = chxor_cf80cd00(flag)
flag = add_f10a2818(flag)
flag = chxor_ee89b49e(flag)
flag = chunk_7050a958(flag)
flag = chsub_d64b63cc(flag)
flag = mul_cab49d47(flag)
flag = xor_abf7f988(flag)
flag = chadd_c2c2b7f7(flag)
flag = cmul_3c96ba6e(flag)
flag = digsub_0eb180b8(flag)
flag = cxor_a9c59f97(flag)
flag = xor_ba2cb10f(flag)
flag = add_f4113996(flag)
flag = chmul_8d98c6d1(flag)
flag = cadd_9406ad37(flag)
flag = sub_657f5f3f(flag)
flag = shuffle_1139f911(flag)
flag = cmul_b01d887b(flag)
flag = chxor_e23f2cfd(flag)
flag = chadd_e835abf7(flag)
flag = cadd_8bcff692(flag)
flag = chxor_6b786c2e(flag)
flag = shuffle_83b67bb5(flag)
flag = cxor_9a959665(flag)
flag = chsub_2f62951a(flag)
flag = mul_70d397f8(flag)
flag = chsub_b60cec96(flag)
flag = sub_df2b698e(flag)
flag = digsub_e717a1dc(flag)
flag = mul_9e94e89a(flag)
flag = chsub_7e45d909(flag)
flag = xor_9d8c4a8c(flag)
flag = chunk_8a131e32(flag)
flag = cxor_569fa700(flag)
flag = chunk_a9c428c6(flag)
flag = add_16b704e9(flag)
flag = digsub_bcb409f7(flag)
flag = chadd_df001d38(flag)
flag = digsub_1feeafe7(flag)
flag = add_882b6a0b(flag)
flag = chmul_e0c73179(flag)
flag = cadd_e86a7e16(flag)
flag = cmul_22a48cb5(flag)
flag = cmul_2eb68781(flag)
flag = cadd_3124bc3c(flag)
flag = cxor_53008000(flag)
flag = chsub_77fcdd6e(flag)
flag = xor_393c82c1(flag)
flag = chunk_594d46bc(flag)
flag = chxor_e1dd333b(flag)
flag = cmul_f05686bd(flag)
flag = cadd_0083dd15(flag)
flag = cxor_ae2b4026(flag)
flag = xor_53ca0b45(flag)
flag = cxor_c2fd3f28(flag)
flag = sub_4e6d826d(flag)
flag = add_b1383cfb(flag)
flag = digsub_a740a80e(flag)
flag = chmul_f8790cde(flag)
flag = csub_2448d6e4(flag)
flag = add_7ab0c406(flag)
flag = cadd_159797e5(flag)
flag = chadd_983dad8d(flag)
flag = cxor_81cc1cc2(flag)
flag = digsub_d4a46520(flag)
flag = chxor_7c1ad68d(flag)
flag = chsub_4d0982ce(flag)
flag = digsub_a7419844(flag)
flag = chsub_d05da0d8(flag)
flag = chxor_de5cf1af(flag)
flag = digsub_1348ccb0(flag)
flag = add_ea0e7dc4(flag)
flag = chmul_b3677069(flag)
flag = sub_d3158d9a(flag)
flag = cadd_97b622f1(flag)
flag = xor_2d9c7e1d(flag)
flag = cadd_ca2e862f(flag)
flag = xor_c0f387ba(flag)
flag = chadd_2fa4c3aa(flag)
flag = shuffle_c3a4eec2(flag)
flag = cmul_1ebf8c3e(flag)
flag = add_3cfe5566(flag)
flag = xor_fccb27f6(flag)
flag = chadd_a7330cb4(flag)
flag = shuffle_b08c994e(flag)
flag = chadd_12bc44e9(flag)
flag = add_f22a99f3(flag)
flag = cxor_f4c61b89(flag)
flag = add_c3711383(flag)
flag = sub_560b0d88(flag)
flag = shuffle_ee25c5d7(flag)
flag = digsub_1f1582a8(flag)
flag = csub_8c5dcc87(flag)
flag = chunk_a998eeb4(flag)
flag = chunk_e3f72016(flag)
flag = cadd_130f7b9b(flag)
flag = mul_bce42f5e(flag)
flag = chmul_8e52ad65(flag)
flag = digsub_d4a46520(flag)
flag = add_6e9d979e(flag)
flag = cxor_7bdcbf55(flag)
flag = cmul_c408d74b(flag)
flag = cxor_a1a8de03(flag)
flag = chmul_1a3d7c8c(flag)
flag = mul_fcc77ce6(flag)
flag = digsub_0410b672(flag)
flag = cmul_546b7971(flag)
flag = cxor_e4036825(flag)
flag = sub_a9414276(flag)
flag = xor_25ac4148(flag)
flag = cxor_0d19b008(flag)
flag = sub_1b35acd4(flag)
flag = csub_ee7d6d31(flag)
flag = chsub_a3a9e242(flag)
flag = chunk_c1b1042d(flag)
flag = shuffle_a09d75d9(flag)
flag = cxor_7645272c(flag)
flag = add_88ef453e(flag)
flag = digsub_703bfb0c(flag)
flag = digsub_4034f057(flag)
flag = chmul_510bb7ff(flag)
flag = xor_cc5d6b6d(flag)
flag = chxor_0c3b8e79(flag)
flag = add_c43e26d8(flag)
flag = cadd_0083dd15(flag)
flag = chunk_c72fb6c4(flag)
flag = chxor_c14e4305(flag)
flag = sub_71bf262c(flag)
flag = cadd_6fe68866(flag)
flag = shuffle_0df0d459(flag)
flag = xor_f19c0746(flag)
flag = digsub_e4832eb3(flag)
flag = cadd_1aff9833(flag)
flag = chsub_1b8086f6(flag)
flag = add_9e15da4e(flag)
flag = cmul_8ce7a691(flag)
flag = chxor_947d449e(flag)
flag = chxor_31537f25(flag)
flag = chsub_57719ac8(flag)
flag = cxor_060a98db(flag)
flag = chadd_50e33e22(flag)
flag = xor_dce2a545(flag)
flag = chadd_2b71c3ea(flag)
flag = chsub_92f27399(flag)
flag = add_271749c1(flag)
flag = digsub_4428ac60(flag)
flag = sub_7a049de1(flag)
flag = xor_cb183615(flag)
flag = cadd_fdc5f9f6(flag)
flag = digsub_172d24b0(flag)
flag = cxor_871a2d7f(flag)
flag = cmul_9ea3f862(flag)
flag = cmul_ea9160c7(flag)
flag = chmul_64d93738(flag)
flag = shuffle_14e44222(flag)
flag = chxor_23198c86(flag)
flag = csub_a5842efc(flag)
flag = xor_a53f1f68(flag)
flag = add_19eaf3b7(flag)
flag = chadd_c2c2b7f7(flag)
flag = digsub_6899cdac(flag)
flag = mul_a8c5006e(flag)
flag = cxor_2eec2815(flag)
flag = cxor_6976fe3d(flag)
flag = cadd_03187d75(flag)
flag = digsub_54057ff2(flag)
flag = chunk_3a4345ab(flag)
flag = xor_a175d05f(flag)
flag = shuffle_92fb44d4(flag)
flag = mul_6fc04a8d(flag)
flag = chxor_27fd37e4(flag)
flag = xor_34c86087(flag)
flag = sub_665d3f8a(flag)
flag = mul_abf95b28(flag)
flag = chxor_ea20e7b5(flag)
flag = cmul_1b7b7fb7(flag)
flag = shuffle_8ca0e8e2(flag)
flag = shuffle_29b39d8e(flag)
flag = cmul_60deac9a(flag)
flag = chsub_1a499bac(flag)
flag = cxor_98fe5771(flag)
flag = cadd_a4fd2ffb(flag)
flag = chmul_0b2874b7(flag)
flag = cmul_994c1dcb(flag)
flag = chunk_754adf93(flag)
flag = digsub_06f2e415(flag)
flag = xor_0ade2d1f(flag)
flag = shuffle_29b39d8e(flag)
flag = chxor_5cda58cc(flag)
flag = cadd_a4fd2ffb(flag)
flag = cmul_393b0cfb(flag)
flag = cmul_69eb6792(flag)
flag = shuffle_ca27178d(flag)
flag = add_02374137(flag)
flag = add_42869331(flag)
flag = chunk_0046d260(flag)
flag = mul_70d397f8(flag)
flag = chxor_3c678c19(flag)
flag = csub_22444c96(flag)
flag = cmul_cd2eddf4(flag)
flag = chxor_d15e0d3f(flag)
flag = cadd_d62d0fdd(flag)
flag = add_11c4ac68(flag)
flag = xor_ed479080(flag)
flag = chunk_c2186f8f(flag)
flag = cxor_14787d69(flag)
flag = chadd_96a0ee76(flag)
flag = cmul_971d0d43(flag)
flag = cadd_407bbf2e(flag)
flag = mul_b45cc04b(flag)
flag = add_9573eecb(flag)
flag = shuffle_e5071e98(flag)
flag = chmul_78c19c03(flag)
flag = mul_89548da9(flag)
flag = shuffle_0bc785b3(flag)
flag = chadd_3c9e0be9(flag)
flag = chxor_bca7bb47(flag)
flag = sub_be3b1a5a(flag)
flag = chxor_1c95a906(flag)
flag = xor_77377fa6(flag)
flag = shuffle_68814b98(flag)
flag = xor_ad34030d(flag)
flag = chadd_fe246cb1(flag)
flag = mul_f41b15dd(flag)
flag = mul_16385c48(flag)
flag = chxor_65adc1af(flag)
flag = chadd_fa13451e(flag)
flag = digsub_b6137e92(flag)
flag = xor_097a8a70(flag)
flag = digsub_f2e8b007(flag)
flag = chmul_ebd5a20e(flag)
flag = add_2cc0eef9(flag)
flag = shuffle_a6432e15(flag)
flag = chadd_8ab3b2a8(flag)
flag = cmul_b5356752(flag)
flag = csub_bdd64a1d(flag)
flag = chunk_88bc39ba(flag)
flag = chadd_ae237728(flag)
flag = chsub_8b936fd7(flag)
flag = sub_ee08aad9(flag)
flag = cxor_7948ea7c(flag)
flag = sub_dfeebbc3(flag)
flag = add_66171335(flag)
flag = cxor_1039bf70(flag)
flag = xor_d7c70d50(flag)
flag = digsub_dbfc4977(flag)
flag = chmul_160cacb0(flag)
flag = xor_a8eff498(flag)
flag = cmul_dc2b00da(flag)
flag = shuffle_0ca300ee(flag)
flag = cadd_f4a8c0c6(flag)
flag = shuffle_d1541fbc(flag)
flag = cadd_400b70cb(flag)
flag = chadd_1a40fd7d(flag)
flag = shuffle_2621171b(flag)
flag = cxor_53f93269(flag)
flag = chadd_3b98f1b0(flag)
flag = add_b94ae645(flag)
flag = cmul_606c6cc5(flag)
flag = chsub_e93fd882(flag)
flag = chmul_7ce961bc(flag)
flag = chsub_c1aff5fd(flag)
flag = xor_46b7d1d1(flag)
flag = chadd_1375b126(flag)
flag = chmul_0db588dd(flag)
flag = chunk_b3c680b6(flag)
flag = sub_1a66408e(flag)
flag = cmul_bb576c8f(flag)
flag = cadd_bf38d005(flag)
flag = chsub_0063bc32(flag)
flag = chsub_0b4adf36(flag)
flag = csub_8278d2c0(flag)
flag = chmul_f8790cde(flag)
flag = sub_f5f7ee7a(flag)
flag = mul_29392dc2(flag)
flag = chmul_48477e80(flag)
flag = csub_64c8c245(flag)
flag = cxor_5a1e89dc(flag)
flag = chsub_6acb4ef8(flag)
flag = chadd_3d456bc0(flag)
flag = chunk_e9bf280d(flag)
flag = xor_35062400(flag)
flag = cxor_81cc1cc2(flag)
flag = cadd_d08b740c(flag)
flag = digsub_03c94dae(flag)
flag = chmul_4bf09cb4(flag)
flag = chmul_330af750(flag)
flag = chadd_bbfef485(flag)
flag = csub_462e63d8(flag)
flag = chunk_f44dbb33(flag)
flag = chxor_02aa625d(flag)
flag = add_6e59afd0(flag)
flag = cadd_57a83163(flag)
flag = cxor_822e6d4f(flag)
flag = csub_d215325c(flag)
flag = xor_3b807d61(flag)
flag = chadd_f2fd70f1(flag)
flag = chmul_65689d19(flag)
flag = chmul_8f392c35(flag)
flag = csub_c323c891(flag)
flag = digsub_c09c7211(flag)
flag = csub_df5bd69a(flag)
flag = mul_78cdcde8(flag)
flag = csub_97ae1a88(flag)
flag = cmul_8ce7a691(flag)
flag = csub_959f7557(flag)
flag = add_9e4296de(flag)
flag = csub_70a8e307(flag)
flag = chsub_0b4adf36(flag)
flag = chmul_57848b7a(flag)
flag = sub_c62f3219(flag)
flag = chmul_34dab8e4(flag)
flag = chxor_d8c4549f(flag)
flag = chadd_8d7aa344(flag)
flag = xor_b601f000(flag)
flag = cxor_52629279(flag)
flag = chunk_0f48dab8(flag)
flag = shuffle_0a4f92ab(flag)
flag = mul_51ffc146(flag)
flag = mul_69dd5e3a(flag)
flag = add_d2c1e8bc(flag)
flag = digsub_81042cb1(flag)
flag = sub_c126f74d(flag)
flag = add_f10a2818(flag)
flag = cxor_0673e3e4(flag)
flag = cadd_79d7fa85(flag)
flag = chxor_7b570606(flag)
flag = xor_c0f387ba(flag)
flag = add_aae6cc04(flag)
flag = cxor_7a8c0f91(flag)
flag = mul_a43ce0da(flag)
flag = chadd_36b8739d(flag)
flag = add_c2f77d7b(flag)
flag = cmul_38593f30(flag)
flag = sub_f7bae9cf(flag)
flag = cmul_92323fe7(flag)
flag = cxor_3db736ba(flag)
flag = csub_d79026ba(flag)
flag = cxor_40c47f57(flag)
flag = shuffle_2621171b(flag)
flag = sub_d45b504c(flag)
flag = add_6792b1ea(flag)
flag = cadd_67f3772b(flag)
flag = cadd_a6482f91(flag)
flag = chxor_14ca1407(flag)
flag = chadd_2a7b5687(flag)
flag = chunk_1045daa0(flag)
flag = chsub_87204349(flag)
flag = csub_efe13119(flag)
flag = sub_a148160b(flag)
flag = sub_1a66408e(flag)
flag = mul_0e478f31(flag)
flag = mul_9dbf3796(flag)
flag = chsub_5f8a214c(flag)
flag = cadd_3c6d2025(flag)
flag = chunk_3256d188(flag)
flag = chsub_d05da0d8(flag)
flag = csub_645a6092(flag)
flag = chmul_d5be6ef1(flag)
flag = sub_7f903ea3(flag)
flag = chadd_967b4961(flag)
flag = shuffle_7b370edd(flag)
flag = sub_2cdb195c(flag)
flag = cmul_ba434ed3(flag)
flag = cmul_65983a34(flag)
flag = chadd_55d11883(flag)
flag = cadd_5afd7d69(flag)
flag = chxor_49c8f56a(flag)
flag = add_b7f3fb09(flag)
flag = add_3fa4a716(flag)
flag = cxor_c4236734(flag)
flag = chadd_8658906e(flag)
flag = add_6a75af42(flag)
flag = chmul_b8a4da05(flag)
flag = xor_581836de(flag)
flag = cxor_71e7ff03(flag)
flag = cadd_5b4e9aab(flag)
flag = chadd_932febde(flag)
flag = chadd_3b98f1b0(flag)
flag = digsub_a18b0d55(flag)
flag = cxor_c74d1258(flag)
flag = digsub_7d45ef3f(flag)
flag = chsub_8a25c41f(flag)
flag = chsub_c813b5d2(flag)
flag = mul_1b781211(flag)
flag = cmul_7b0890d6(flag)
flag = sub_3145bf03(flag)
flag = chsub_e0a5b7b9(flag)
flag = chadd_f5ab37d9(flag)
flag = cmul_c76db8f9(flag)
flag = chunk_ba6b2283(flag)
flag = chxor_3569bd0b(flag)
flag = chunk_7efebb77(flag)
flag = chadd_e1175475(flag)
flag = csub_35e65bc6(flag)
flag = sub_c9bfeab0(flag)
flag = digsub_bbf1a156(flag)
flag = xor_3d8de492(flag)
flag = shuffle_5f949cd5(flag)
flag = cadd_6719a051(flag)
flag = digsub_e4832eb3(flag)
flag = cxor_3ea0418e(flag)
flag = chmul_7cc3c4ab(flag)
flag = cadd_a4fd2ffb(flag)
flag = csub_ee7d6d31(flag)
flag = sub_1719880f(flag)
flag = chsub_ee48bdeb(flag)
flag = sub_77f3b344(flag)
flag = add_e7bf4d1a(flag)
flag = cxor_ce58803c(flag)
flag = xor_6ee9de87(flag)
flag = csub_8c481c30(flag)
flag = digsub_1f6e32d7(flag)
flag = sub_4bcab1c3(flag)
flag = cmul_7bb17901(flag)
flag = sub_ac9927d6(flag)
flag = digsub_6ab37400(flag)
flag = chunk_5e4879e0(flag)
flag = csub_717c9f99(flag)
flag = chadd_5a85e49b(flag)
flag = chxor_3972d07b(flag)
flag = chmul_c35fb5e9(flag)
flag = cmul_02507e59(flag)
flag = csub_a15374e1(flag)
flag = chadd_226738ed(flag)
flag = chsub_c1aff5fd(flag)
flag = xor_f88ae7f1(flag)
flag = sub_6baa906d(flag)
flag = add_1688c841(flag)
flag = add_c9854582(flag)
flag = digsub_3d37a56f(flag)
flag = chsub_24c471c0(flag)
flag = digsub_99f3c205(flag)
flag = cmul_ee26b387(flag)
flag = cmul_adf3adfd(flag)
flag = xor_e437e0ae(flag)
flag = shuffle_d2451358(flag)
flag = sub_04d98d74(flag)
flag = cadd_f288775d(flag)
flag = chunk_f140121b(flag)
flag = cxor_97867026(flag)
flag = shuffle_b1134b2a(flag)
flag = chunk_e120ffe1(flag)
flag = cadd_fdec7760(flag)
flag = chsub_a2001711(flag)
flag = csub_9560b32f(flag)
flag = chxor_d62951fc(flag)
flag = cxor_f20321f0(flag)
flag = sub_0b5acfeb(flag)
flag = cxor_0d19b008(flag)
flag = sub_0bdcedb0(flag)
flag = chunk_20e9ea05(flag)
flag = cxor_8666b092(flag)
flag = chsub_fd459d3e(flag)
flag = xor_1a989c5f(flag)
flag = csub_b0a1c121(flag)
flag = add_158186ec(flag)
flag = chxor_f309545e(flag)
flag = chunk_1d45076c(flag)
flag = shuffle_45b62e3f(flag)
flag = chunk_ac3a4598(flag)
flag = digsub_ac841ac3(flag)
flag = chmul_708c05e7(flag)
flag = chxor_6fdbabf9(flag)
flag = csub_c9f7e43b(flag)
flag = chmul_e62c2028(flag)
flag = cxor_d1f287be(flag)
flag = add_79292e38(flag)
flag = chadd_c427ca04(flag)
flag = add_06c4c375(flag)
flag = cadd_ffecf556(flag)
flag = xor_7c90aa84(flag)
flag = mul_194ab633(flag)
flag = chadd_df001d38(flag)
flag = chunk_8a131e32(flag)
flag = chsub_37756695(flag)
flag = cadd_dd57ed89(flag)
flag = chsub_84b4ec96(flag)
flag = shuffle_d2451358(flag)
flag = csub_c59b429f(flag)
flag = chsub_f15fc200(flag)
flag = cmul_8ce7a691(flag)
flag = chunk_3f96f374(flag)
flag = shuffle_8abc2b43(flag)
flag = cxor_25ff2742(flag)
flag = chsub_fd459d3e(flag)
flag = cmul_13e6bde9(flag)
flag = cadd_761effde(flag)
flag = cadd_f1510001(flag)
flag = sub_8d22e619(flag)
flag = cadd_ea8c28f4(flag)
flag = digsub_4034f057(flag)
flag = shuffle_b3fe3e10(flag)
flag = cmul_cb8500f8(flag)
flag = add_837ef20b(flag)
flag = digsub_575bce65(flag)
flag = shuffle_5c9d432d(flag)
flag = add_c6556187(flag)
flag = cmul_ddef00cb(flag)
flag = csub_2cc5f209(flag)
flag = chxor_9fa88068(flag)
flag = chunk_19abbb44(flag)
flag = xor_fbcf5aa3(flag)
flag = chunk_dfb92a41(flag)
flag = chxor_e6a0d155(flag)
flag = digsub_fc90a80f(flag)
flag = chxor_65adc1af(flag)
flag = digsub_0fcbc54c(flag)
flag = chxor_4639250f(flag)
flag = mul_df48e442(flag)
flag = cmul_7a36ad1f(flag)
flag = chadd_258b2420(flag)
flag = digsub_8e7fd683(flag)
flag = chsub_e6873048(flag)
flag = chxor_dadbfeff(flag)
flag = cmul_ae473405(flag)
flag = cmul_45d4d761(flag)
flag = chadd_3940932e(flag)
flag = add_7553d25b(flag)
flag = chmul_18ecaa08(flag)
flag = xor_35062400(flag)
flag = mul_6906b8ec(flag)
flag = cxor_567d1d52(flag)
flag = cxor_8fe94932(flag)
flag = add_a391835b(flag)
flag = digsub_a56c83c8(flag)
flag = sub_e9895f44(flag)
flag = sub_edd0e8fb(flag)
flag = shuffle_6d9a62f9(flag)
flag = cadd_d0ad75bc(flag)
flag = chadd_97096590(flag)
flag = digsub_2f2a8750(flag)
flag = chsub_a0999ab2(flag)
flag = cmul_18b5fc94(flag)
flag = chadd_226738ed(flag)
flag = chmul_5b21f3a5(flag)
flag = mul_59b3d8b8(flag)
flag = chmul_58875bd8(flag)
flag = cxor_0017f17c(flag)
flag = shuffle_35e807af(flag)
flag = cadd_95ea1de0(flag)
flag = csub_d14c716c(flag)
flag = xor_eca7972f(flag)
flag = digsub_b7bd2cb5(flag)
flag = chxor_ee89b49e(flag)
flag = mul_9d0c3682(flag)
flag = add_31efa65a(flag)
flag = chmul_f8bbf12f(flag)
flag = shuffle_8a10d0b7(flag)
flag = add_c871a926(flag)
flag = chunk_d88231fa(flag)
flag = cxor_9752c63c(flag)
flag = shuffle_691df10d(flag)
flag = shuffle_76309fe2(flag)
flag = chxor_4a6282f5(flag)
flag = add_8f63cc91(flag)
flag = chadd_55d11883(flag)
flag = shuffle_16d074d1(flag)
flag = digsub_5f03912e(flag)
flag = add_e9f76a38(flag)
flag = cadd_69879170(flag)
flag = chsub_8396a9b9(flag)
flag = add_31efa65a(flag)
flag = cxor_bbd7e7fe(flag)
flag = chsub_7b8aa8b8(flag)
flag = mul_04000fe6(flag)
flag = add_9e4296de(flag)
flag = chunk_174427d2(flag)
flag = chunk_d7f6d493(flag)
flag = chmul_e6614b6a(flag)
flag = mul_bf01fdb9(flag)
flag = xor_e9151d45(flag)
flag = add_88ef453e(flag)
flag = cmul_7ca572e2(flag)
flag = chxor_dbe47d55(flag)
flag = add_dbc17785(flag)
flag = chsub_7cdcbbaf(flag)
flag = xor_51b2d18c(flag)
flag = chadd_cf38fd97(flag)
flag = cxor_9eab5098(flag)
flag = digsub_b8659438(flag)
flag = chsub_74365a3a(flag)
flag = chsub_56440f95(flag)
flag = cmul_70fa9f12(flag)
flag = chmul_af64f7e0(flag)
flag = xor_23eae5a3(flag)
flag = chunk_27ab9318(flag)
flag = chmul_bc251ec0(flag)
flag = mul_bce42f5e(flag)
flag = chadd_6b1daeac(flag)
flag = cadd_ea861103(flag)
flag = cadd_469004ba(flag)
flag = cxor_7645272c(flag)
flag = chsub_dbd1ec78(flag)
flag = cxor_89b073e0(flag)
flag = chxor_14176db9(flag)
flag = cmul_bc969278(flag)
flag = csub_8bb7278b(flag)
flag = sub_a62e014f(flag)
flag = mul_2a724485(flag)
flag = cadd_0083dd15(flag)
flag = chmul_27a340a5(flag)
flag = chadd_6b07665a(flag)
flag = add_02bb294f(flag)
flag = mul_62495a4a(flag)
flag = xor_af966677(flag)
flag = chadd_837f34c3(flag)
flag = chadd_abc266d5(flag)
flag = csub_b1b08f24(flag)
flag = chsub_379e2ba1(flag)
flag = digsub_f22e07b0(flag)
flag = chmul_22d64a0f(flag)
flag = shuffle_f3858d75(flag)
flag = shuffle_8a10d0b7(flag)
flag = chmul_330af750(flag)
flag = chunk_d4a3f365(flag)
flag = chunk_bdec9045(flag)
flag = cxor_5ac6b756(flag)
flag = cmul_e7965a1e(flag)
flag = add_0cecddf7(flag)
flag = mul_8502f399(flag)
flag = cmul_9020ca8c(flag)
flag = chadd_63faefcf(flag)
flag = cxor_77ffb5fc(flag)
flag = chmul_5c39207d(flag)
flag = cmul_0c68dd02(flag)
flag = xor_702b624c(flag)
flag = chsub_bf5cdb36(flag)
flag = add_31efa65a(flag)
flag = sub_6bf5673d(flag)
flag = mul_6a51d006(flag)
flag = cadd_5b4e9aab(flag)
flag = chmul_4245aa0c(flag)
flag = chxor_09e2622c(flag)
flag = chxor_2b81e3ec(flag)
flag = xor_eae9977a(flag)
flag = chmul_9455da11(flag)
flag = chadd_bf07e93b(flag)
flag = shuffle_81df2959(flag)
flag = csub_cb2cec49(flag)
flag = digsub_21c1f0e1(flag)
flag = cmul_318e5f45(flag)
flag = chsub_f17ba2e2(flag)
flag = sub_c2ba5275(flag)
flag = add_fb49a21d(flag)
flag = chxor_49c8f56a(flag)
flag = chunk_397a3d62(flag)
flag = chxor_595823d4(flag)
flag = cmul_ee26b387(flag)
flag = mul_a992e945(flag)
flag = cmul_893e1b56(flag)
flag = add_9dad90bf(flag)
flag = xor_8ae01235(flag)
flag = sub_716f026e(flag)
flag = add_6aac990e(flag)
flag = cmul_1f88fc08(flag)
flag = cxor_0e49988d(flag)
flag = cmul_9ebbf06f(flag)
flag = cadd_5162d960(flag)
flag = chsub_e2d10a29(flag)
flag = csub_4660584b(flag)
flag = xor_9ec16d95(flag)
flag = xor_8f24dd01(flag)
flag = shuffle_922a7e0d(flag)
flag = xor_ccce8b68(flag)
flag = cadd_9bed43d0(flag)
flag = add_9b544b2a(flag)
flag = add_88ef453e(flag)
flag = chsub_8a044489(flag)
flag = chmul_991b7825(flag)
flag = cmul_18b5fc94(flag)
flag = csub_8477e013(flag)
flag = chunk_24c352a1(flag)
flag = chadd_7620a0b7(flag)
flag = cmul_8d626e12(flag)
flag = chunk_41ac0046(flag)
flag = chunk_c154a4b0(flag)
flag = xor_4e5c29b0(flag)
flag = chxor_277a4952(flag)
flag = digsub_cb6346a1(flag)
flag = mul_a2581ad1(flag)
flag = cmul_3e4053fd(flag)
flag = sub_edd0e8fb(flag)
flag = csub_7ae589be(flag)
flag = shuffle_2d9fffb5(flag)
flag = sub_dfeebbc3(flag)
flag = csub_8477e013(flag)
flag = xor_1ffb5965(flag)
flag = add_a2c38523(flag)
flag = csub_c5965200(flag)
flag = cmul_18dd5479(flag)
flag = cmul_dc2b00da(flag)
flag = digsub_b6993817(flag)
flag = cxor_77ffb5fc(flag)
flag = digsub_19a384d0(flag)
flag = add_ea0e7dc4(flag)
flag = chadd_a331e2c1(flag)
flag = cmul_bb576c8f(flag)
flag = add_83aabfde(flag)
flag = cmul_c0727784(flag)
flag = sub_3c288b1c(flag)
flag = shuffle_6fcd072c(flag)
flag = csub_e6b3e198(flag)
flag = cmul_e7965a1e(flag)
flag = cadd_03a33025(flag)
flag = cmul_eefe9fa4(flag)
flag = mul_9ed02e6c(flag)
flag = chxor_6fca7a91(flag)
flag = add_9b544b2a(flag)
flag = chsub_d8e7f937(flag)
flag = cadd_3879fa4f(flag)
flag = chmul_5af32334(flag)
flag = cadd_bf6aacf5(flag)
flag = cxor_c8ef5dcc(flag)
flag = digsub_ff82e274(flag)
flag = cxor_a009b999(flag)
flag = add_0572be2d(flag)
flag = cadd_b38e11c1(flag)
flag = xor_310c33bd(flag)
flag = chsub_74cf05a6(flag)
flag = digsub_093ca952(flag)
flag = digsub_6bf0d618(flag)
flag = cadd_188bf301(flag)
flag = xor_c1cdd552(flag)
flag = csub_cb66374f(flag)
flag = chadd_83134f29(flag)
flag = xor_816adcd8(flag)
flag = chsub_fb961764(flag)
flag = chunk_e3f72016(flag)
flag = sub_6fb5c242(flag)
flag = chmul_a32f41a3(flag)
flag = cmul_546b7971(flag)
flag = cadd_3876a03b(flag)
flag = xor_50156ac2(flag)
flag = sub_734f1f1d(flag)
flag = chadd_d2d3bddf(flag)
flag = cmul_01ec6381(flag)
flag = cadd_caf674cf(flag)
flag = chmul_06d41645(flag)
flag = csub_3bacd8a7(flag)
flag = chmul_6f2b8735(flag)
flag = add_b4b55578(flag)
flag = add_c8ec5588(flag)
flag = cmul_6cf9601c(flag)
flag = chmul_e4e712b9(flag)
flag = chxor_b9af6481(flag)
flag = cxor_d43914ce(flag)
flag = digsub_a580518f(flag)
flag = xor_64a04adb(flag)
flag = chadd_3d5f0a2c(flag)
flag = chxor_30be5eb3(flag)
flag = sub_fa8a3be1(flag)
flag = cxor_6bc7237d(flag)
flag = chunk_ec01f5f0(flag)
flag = cxor_df42e878(flag)
flag = chmul_7cbf2205(flag)
flag = csub_20678af6(flag)
flag = chmul_97ccb142(flag)
flag = chunk_b40e3bec(flag)
flag = cadd_e856ecc9(flag)
flag = add_0582a092(flag)
flag = mul_30a2cd61(flag)
flag = add_1f81f37b(flag)
flag = xor_fddd23ae(flag)
flag = cmul_931552a6(flag)
flag = sub_f31829a3(flag)
flag = chadd_cc7b7e1e(flag)
flag = sub_4277a989(flag)
flag = cxor_3addab66(flag)
flag = chsub_9a699614(flag)
flag = csub_69098245(flag)
flag = cxor_53008000(flag)
flag = csub_4fc27255(flag)
flag = chsub_a23842be(flag)
flag = cmul_3df83c6a(flag)
flag = sub_665d3f8a(flag)
flag = chsub_6ab39e5c(flag)
flag = chadd_5290e7f2(flag)
flag = chadd_47332c73(flag)
flag = xor_30504fc8(flag)
flag = sub_0cd6568b(flag)
flag = chxor_38c0a7ad(flag)
flag = add_7cb7d116(flag)
flag = chadd_f78e9fb5(flag)
flag = chmul_b5f1b2d9(flag)
flag = cxor_9d8f4ca2(flag)
flag = xor_131c6ed1(flag)
flag = cxor_48ff1c3c(flag)
flag = cxor_7bdcbf55(flag)
flag = chunk_b26605b9(flag)
flag = chsub_b942a4e6(flag)
flag = digsub_4dd34aef(flag)
flag = chsub_357029f0(flag)
flag = digsub_1feeafe7(flag)
flag = cadd_6fbe94f5(flag)
flag = cxor_41be00fc(flag)
flag = chsub_8a044489(flag)
flag = sub_60d9cd7a(flag)
flag = chadd_7bc2adef(flag)
flag = shuffle_c5cb30a9(flag)
flag = add_333323b1(flag)
flag = mul_a0ace443(flag)
flag = chadd_c32db46a(flag)
flag = cxor_9a959665(flag)
flag = sub_40f8346a(flag)
flag = csub_f765621d(flag)
flag = chxor_6b786c2e(flag)
flag = chmul_ab9cdb92(flag)
flag = digsub_18fe324f(flag)
flag = cxor_29255d85(flag)
flag = digsub_18fe324f(flag)
flag = chsub_082be74e(flag)
flag = mul_833e4a11(flag)
flag = cmul_85b39864(flag)
flag = digsub_78f5b7bb(flag)
flag = chadd_88f9bb2d(flag)
flag = chadd_3fbbddb8(flag)
flag = sub_5525246a(flag)
flag = sub_e769f5cd(flag)
flag = digsub_abf0937e(flag)
flag = cxor_48ff1c3c(flag)
flag = xor_31c0451b(flag)
flag = chmul_20b6f48e(flag)
flag = csub_32783b79(flag)
flag = mul_cf7af31a(flag)
flag = chxor_6b41b0f3(flag)
flag = chadd_e884c28a(flag)
flag = chxor_6ebc3376(flag)
flag = chxor_1150451f(flag)
flag = mul_5c575cdb(flag)
flag = chmul_77349f1c(flag)
flag = shuffle_ca27178d(flag)
flag = sub_61538669(flag)
flag = cxor_9a341cfa(flag)
flag = cmul_87dca596(flag)
flag = xor_85d496cf(flag)
flag = cadd_c15fc794(flag)
flag = sub_4e853fbb(flag)
flag = csub_702f94e1(flag)
flag = sub_f29558b8(flag)
flag = chadd_404cff4b(flag)
flag = xor_b0ff6bbd(flag)
flag = shuffle_3125b36d(flag)
flag = chmul_4e871d0b(flag)
flag = chmul_8c7712e0(flag)
flag = mul_7ec01a05(flag)
flag = csub_d6e694b3(flag)
flag = sub_79391e33(flag)
flag = chunk_1fa032d8(flag)
flag = chmul_34dab8e4(flag)
flag = chxor_61629011(flag)
flag = chadd_8afcabff(flag)
flag = chsub_8396a9b9(flag)
flag = xor_e9fd82b3(flag)
flag = chmul_2c8f4393(flag)
flag = cmul_cb30aead(flag)
flag = add_c3181859(flag)
flag = sub_73c53d9f(flag)
flag = digsub_7d14062a(flag)
flag = cmul_ae473405(flag)
flag = sub_51002c26(flag)
flag = sub_40f8346a(flag)
flag = cxor_f30be4dd(flag)
flag = xor_f1cb1b28(flag)
flag = chxor_730db16c(flag)
flag = xor_14cbf59f(flag)
flag = sub_e8045aa7(flag)
flag = cadd_53f37c7e(flag)
flag = shuffle_6136bc5b(flag)
flag = chunk_cbf1932b(flag)
flag = digsub_d22e4d9e(flag)
flag = mul_c3e69fa2(flag)
flag = cadd_56eef358(flag)
flag = csub_e5b6d56f(flag)
flag = chsub_dbd1ec78(flag)
flag = xor_b1dcccdc(flag)
flag = chsub_357029f0(flag)
flag = chmul_9e62f058(flag)
flag = digsub_f0bd3d90(flag)
flag = mul_c00416be(flag)
flag = chmul_da4f7a7d(flag)
flag = xor_ccce8b68(flag)
flag = chunk_bd7c4f37(flag)
flag = mul_9d0c3682(flag)
flag = cmul_2971f624(flag)
flag = chxor_24ff0dd9(flag)
flag = shuffle_81df2959(flag)
flag = cadd_eca08b2e(flag)
flag = chunk_40051429(flag)
flag = cxor_4f2ad7d2(flag)
flag = csub_98f9a52a(flag)
flag = cxor_a4885bca(flag)
flag = mul_043ce6a6(flag)
flag = chunk_97e5e867(flag)
flag = add_eb6ed9ef(flag)
flag = shuffle_e14d57f5(flag)
flag = chadd_c33c08d6(flag)
flag = cmul_5b292fda(flag)
flag = digsub_0afb900b(flag)
flag = chxor_829e0b1c(flag)
flag = chsub_b090cf63(flag)
flag = add_8f63cc91(flag)
flag = cadd_6719a051(flag)
flag = chxor_187da4ac(flag)
flag = chmul_a1decfe1(flag)
flag = add_1ddc8330(flag)
flag = mul_bdb89cce(flag)
flag = xor_46eb3b29(flag)
flag = add_2551e3c7(flag)
flag = chmul_ec64c95f(flag)
flag = digsub_41290eb4(flag)
flag = mul_833e4a11(flag)
flag = chmul_c4196221(flag)
flag = add_3a8493e1(flag)
flag = sub_032906d0(flag)
flag = chunk_dbc6d3a2(flag)
flag = cmul_8facd3c6(flag)
flag = cxor_89cd8dcd(flag)
flag = cmul_dedddbbd(flag)
flag = sub_6b51b490(flag)
flag = cxor_b8b43d96(flag)
flag = chmul_d4a185e3(flag)
flag = sub_0d8062bd(flag)
flag = sub_2ec060e9(flag)
flag = shuffle_236a7376(flag)
flag = chsub_76771162(flag)
flag = digsub_15856403(flag)
flag = chadd_028f229e(flag)
flag = chmul_5c39207d(flag)
flag = xor_7465fff5(flag)
flag = cxor_98058884(flag)
flag = chxor_5cda58cc(flag)
flag = sub_baf4594d(flag)
flag = cadd_4d6b4b20(flag)
flag = add_da9b8954(flag)
flag = chxor_faf934e8(flag)
flag = digsub_154d7267(flag)
flag = cadd_5b4e9aab(flag)
flag = xor_3d551e50(flag)
flag = cmul_01d50eab(flag)
flag = add_2af4f21d(flag)
flag = chadd_47332c73(flag)
flag = shuffle_a6432e15(flag)
flag = xor_22f2f1f4(flag)
flag = cadd_81014cf5(flag)
flag = shuffle_64a08693(flag)
flag = cmul_9e6c0fb6(flag)
flag = cadd_6719a051(flag)
flag = add_0e1d894a(flag)
flag = xor_c425535c(flag)
flag = csub_9ccfaef5(flag)
flag = cmul_fa47ed88(flag)
flag = digsub_50bc72d1(flag)
flag = chmul_6a2ac61f(flag)
flag = sub_a9414276(flag)
flag = chxor_f6c4d9ae(flag)
flag = chsub_76cedeac(flag)
flag = csub_5174b08f(flag)
flag = digsub_d70c6f19(flag)
flag = mul_0af7d935(flag)
flag = shuffle_7ccfcf66(flag)
flag = csub_dfb6e078(flag)
flag = shuffle_899fbb68(flag)
flag = chunk_e0f4eb85(flag)
flag = chsub_dbd1ec78(flag)
flag = chxor_0a1291f0(flag)
flag = chmul_50bf6425(flag)
flag = chxor_f6dc12d6(flag)
flag = chsub_d228accf(flag)
flag = shuffle_e666492b(flag)
flag = xor_890e78b1(flag)
flag = chmul_e6b12a10(flag)
flag = xor_131c6ed1(flag)
flag = csub_b1b08f24(flag)
flag = xor_4208a184(flag)
flag = chxor_ffe97ebb(flag)
flag = chadd_d9f375ba(flag)
flag = chxor_471bdc7e(flag)
flag = csub_ee7d6d31(flag)
flag = cadd_6ad54956(flag)
flag = cmul_931552a6(flag)
flag = mul_224595eb(flag)
flag = chxor_6712129e(flag)
flag = sub_5730f691(flag)
flag = chadd_b29ed32e(flag)
flag = csub_359c8002(flag)
flag = chmul_db0dca9a(flag)
flag = cadd_400b70cb(flag)
flag = cadd_626b1801(flag)
flag = cxor_1290e20b(flag)
flag = sub_e1d8193c(flag)
flag = chsub_de16135d(flag)
flag = shuffle_9076b7e7(flag)
flag = csub_8322948c(flag)
flag = mul_9dbf3796(flag)
flag = mul_0b942967(flag)
flag = xor_5af6d272(flag)
flag = chunk_adb7a31f(flag)
flag = csub_34b73c2d(flag)
flag = chadd_c58d2df9(flag)
flag = csub_8bb7278b(flag)
flag = add_2be5c482(flag)
flag = digsub_cd61bbc0(flag)
flag = cxor_16cc8dc6(flag)
flag = shuffle_43decbdf(flag)
flag = digsub_e0de2a5d(flag)
flag = chsub_00adad20(flag)
flag = chunk_37604f81(flag)
flag = sub_a40cb760(flag)
flag = digsub_4a75fccf(flag)
flag = digsub_bb512531(flag)
flag = chmul_63977e71(flag)
flag = chxor_4ec23f54(flag)
flag = cadd_509c46a1(flag)
flag = shuffle_c51a19df(flag)
flag = shuffle_a9affa02(flag)
flag = chxor_3e87843f(flag)
flag = sub_e8045aa7(flag)
flag = cadd_a6482f91(flag)
flag = add_1f81f37b(flag)
flag = chsub_48f17d05(flag)
flag = mul_947580cb(flag)
flag = sub_2d595d46(flag)
flag = add_c3711383(flag)
flag = shuffle_a27257a0(flag)
flag = csub_2bce138a(flag)
flag = digsub_78ba6bc8(flag)
flag = cmul_9ea3f862(flag)
flag = mul_835fdfd8(flag)
flag = chsub_24c471c0(flag)
flag = chsub_9a699614(flag)
flag = chxor_6fca7a91(flag)
flag = shuffle_39351a8a(flag)
flag = chadd_714abd5f(flag)
flag = add_93fdd277(flag)
flag = csub_40fa37b4(flag)
flag = xor_816adcd8(flag)
flag = chunk_e5cbb933(flag)
flag = cmul_ad3ab72b(flag)
flag = sub_32cc1a97(flag)
flag = chmul_7cfdd3dc(flag)
flag = csub_b10244d8(flag)
flag = xor_a2999e10(flag)
flag = chmul_c2508e0f(flag)
flag = cadd_d3ea8638(flag)
flag = csub_f291b39b(flag)
flag = shuffle_6ed87304(flag)
flag = csub_cec4261b(flag)
flag = shuffle_1676c2c9(flag)
flag = chxor_29db699e(flag)
flag = cxor_f125fa8a(flag)
flag = xor_16c7c77d(flag)
flag = chunk_44d36e8a(flag)
flag = xor_581836de(flag)
flag = cxor_0aedee08(flag)
flag = cxor_ebeaa56d(flag)
flag = cmul_bb576c8f(flag)
flag = chxor_de63f975(flag)
flag = cadd_6d037df0(flag)
flag = chsub_be722dbb(flag)
flag = mul_2cd00355(flag)
flag = digsub_4a75fccf(flag)
flag = chadd_00e2dbca(flag)
flag = chsub_0b2321c1(flag)
flag = sub_5e069f47(flag)
flag = csub_eb753ff1(flag)
flag = shuffle_7c86708c(flag)
flag = csub_cb5867de(flag)
flag = cxor_bb8eddbd(flag)
flag = cxor_0673e3e4(flag)
flag = mul_589a2ea6(flag)
flag = chsub_02fa3ce0(flag)
flag = cxor_46b69f72(flag)
flag = cadd_21257952(flag)
flag = chunk_7496a2c0(flag)
flag = shuffle_721dc700(flag)
flag = chmul_50a23c29(flag)
flag = shuffle_29c93f75(flag)
flag = add_8ef46bd6(flag)
flag = xor_2b6a5232(flag)
flag = cadd_007b2c57(flag)
flag = add_60fa40cf(flag)
flag = chunk_31cdb624(flag)
flag = add_a69aa2f4(flag)
flag = mul_bb9e8c00(flag)
flag = chmul_608cd53e(flag)
flag = cadd_d279898b(flag)
flag = digsub_b6137e92(flag)
flag = csub_6e812142(flag)
flag = add_1f81f37b(flag)
flag = cxor_5161196f(flag)
flag = chunk_a8577417(flag)
flag = chxor_6d888483(flag)
flag = cadd_e7cd385e(flag)
flag = cadd_09d85417(flag)
flag = add_e08d6566(flag)
flag = chmul_ca2a7a2b(flag)
flag = csub_c5965200(flag)
flag = chxor_a987af1b(flag)
flag = chadd_f5ab37d9(flag)
flag = add_7cb7d116(flag)
flag = cxor_060a98db(flag)
flag = sub_837cb5a5(flag)
flag = cxor_31be8398(flag)
flag = add_f2a6c048(flag)
flag = digsub_065e725d(flag)
flag = cxor_da56bd65(flag)
flag = xor_0723c89e(flag)
flag = shuffle_de4afce0(flag)
flag = chadd_9f220dc2(flag)
flag = xor_339b9a13(flag)
flag = chxor_ea20e7b5(flag)
flag = chunk_01d5b245(flag)
flag = chunk_cb2fa615(flag)
flag = csub_a667ebea(flag)
flag = chxor_67aa494b(flag)
flag = csub_b56c06db(flag)
flag = cxor_24690d71(flag)
flag = chxor_dbb28a03(flag)
flag = cmul_7e84fb88(flag)
flag = cxor_7d6f0b67(flag)
flag = add_ed9a96c7(flag)
flag = digsub_7d236bf8(flag)
flag = digsub_915491ea(flag)
flag = sub_ee08aad9(flag)
flag = cmul_75c87098(flag)
flag = chadd_e5b699cb(flag)
flag = cadd_b1988d37(flag)
flag = csub_b08e7ba7(flag)
flag = chsub_421c0466(flag)
flag = chsub_dbf9111e(flag)
flag = chmul_0e5b89be(flag)
flag = chsub_4d0660a5(flag)
flag = chadd_cc6daaa1(flag)
flag = csub_ecd1b6d0(flag)
flag = add_6300f0c0(flag)
flag = cxor_b2b4971b(flag)
flag = cmul_c112008e(flag)
flag = add_48a6be62(flag)
flag = chunk_6f47d8f4(flag)
flag = chadd_36130bc9(flag)
flag = cmul_ee26b387(flag)
flag = sub_1b35acd4(flag)
flag = chmul_d5ba6298(flag)
flag = cadd_92b9fd37(flag)
flag = csub_db2c770b(flag)
flag = chunk_91f40280(flag)
flag = xor_3b14c897(flag)
flag = mul_86c064b1(flag)
flag = chmul_07a19689(flag)
flag = shuffle_c7e85def(flag)
flag = cadd_3876a03b(flag)
flag = cxor_30674cf4(flag)
flag = shuffle_5cd09bb7(flag)
flag = chunk_ddef464d(flag)
flag = cxor_21574829(flag)
flag = add_91bb43ca(flag)
flag = chsub_74cf05a6(flag)
flag = chunk_b1f55538(flag)
flag = cadd_d222898d(flag)
flag = shuffle_13171fff(flag)
flag = cmul_93ebf751(flag)
flag = cmul_bac2ec72(flag)
flag = chadd_bd55be6b(flag)
flag = csub_e69770c4(flag)
flag = cadd_a4aaf480(flag)
flag = chunk_efe1acab(flag)
flag = chunk_59cbae4c(flag)
flag = chunk_4a721cb6(flag)
flag = chadd_5fc42fbd(flag)
flag = chadd_51cbffb6(flag)
flag = chxor_ac024fc8(flag)
flag = cmul_bac2ec72(flag)
flag = cxor_8396e79a(flag)
flag = add_882b6a0b(flag)
flag = chxor_6371b750(flag)
flag = cmul_c76db8f9(flag)
flag = chxor_12caeb3c(flag)
flag = chmul_90f76848(flag)
flag = chxor_30be5eb3(flag)
flag = chmul_65689d19(flag)
flag = chadd_fed374e0(flag)
flag = chunk_158dd2b2(flag)
flag = csub_8cff1d96(flag)
flag = chxor_835e69ad(flag)
flag = add_a00a7d48(flag)
flag = add_b7a421e2(flag)
flag = chunk_1f1becb3(flag)
flag = shuffle_ee0a30fd(flag)
flag = cxor_20661e8f(flag)
flag = chunk_b9615aa9(flag)
flag = cxor_cd79085f(flag)
flag = chadd_f45b5a3e(flag)
flag = shuffle_0736ce82(flag)
flag = chadd_01e97c37(flag)
flag = mul_2dbeaa3b(flag)
flag = chadd_dba6c166(flag)
flag = add_882b6a0b(flag)
flag = cxor_7d13d92f(flag)
flag = shuffle_2c2121d2(flag)
flag = digsub_575bce65(flag)
flag = csub_9678c8c9(flag)
flag = cmul_2a502598(flag)
flag = cmul_c0727784(flag)
flag = cadd_e3f803ca(flag)
flag = shuffle_39351a8a(flag)
flag = chmul_bd4ac691(flag)
flag = chunk_ba2558cf(flag)
flag = chmul_0a614bf5(flag)
flag = csub_302bf054(flag)
flag = sub_2f70dd6e(flag)
flag = sub_65030a05(flag)
flag = csub_79c7fc2e(flag)
flag = chsub_6ff2c5bf(flag)
flag = cadd_1af81cdc(flag)
flag = sub_d625c555(flag)
flag = chxor_d01563ec(flag)
flag = chunk_01c25ee4(flag)
flag = cmul_b6542da7(flag)
flag = chunk_ba2558cf(flag)
flag = chsub_dfabe48a(flag)
flag = cadd_64142db2(flag)
flag = chxor_9eee4faf(flag)
flag = add_c1c20de3(flag)
flag = xor_b5a69ced(flag)
flag = chadd_58981664(flag)
flag = cadd_aef291ba(flag)
flag = chmul_49e5e1c7(flag)
flag = mul_df940fbe(flag)
flag = digsub_7638ee12(flag)
flag = chsub_daf292bd(flag)
flag = cadd_f288775d(flag)
flag = cadd_f52e7820(flag)
flag = digsub_b8659438(flag)
flag = cmul_0ee0ce26(flag)
flag = sub_0b42484c(flag)
flag = add_bd22edc2(flag)
flag = xor_3481ed60(flag)
flag = shuffle_aabdc81c(flag)
flag = digsub_a740a80e(flag)
flag = chxor_59b7fb58(flag)
flag = sub_11293e74(flag)
flag = cadd_8b78f764(flag)
flag = chmul_207c7813(flag)
flag = cmul_630424de(flag)
flag = chadd_eb195385(flag)
flag = xor_5a1c8280(flag)
flag = xor_b055d8c5(flag)
flag = cadd_0079a56b(flag)
flag = chunk_205e30c0(flag)
flag = chsub_9e3a2eb0(flag)
flag = shuffle_8abc2b43(flag)
flag = cmul_b9b05446(flag)
flag = sub_ba98e537(flag)
flag = digsub_ba829062(flag)
flag = csub_8d8cd37f(flag)
flag = cadd_774989e3(flag)
flag = chadd_5488a6fe(flag)
flag = cmul_67fd8ca7(flag)
flag = cxor_8396e79a(flag)
flag = cmul_76043ee3(flag)
flag = mul_8155b14e(flag)
flag = cadd_7bfaa07b(flag)
flag = mul_30a2cd61(flag)
flag = cxor_719205d0(flag)
flag = cxor_22b4a127(flag)
flag = shuffle_1a7b4aba(flag)
flag = cadd_93ce9459(flag)
flag = sub_ec7f3f21(flag)
flag = csub_564b5e2c(flag)
flag = chsub_be9e6b3a(flag)
flag = chadd_d95f9ffa(flag)
flag = add_e696fc9f(flag)
flag = shuffle_65d9ca2c(flag)
flag = chmul_826efe63(flag)
flag = cadd_ea8c28f4(flag)
flag = sub_91a9b671(flag)
flag = chsub_9ce25212(flag)
flag = mul_b19c9677(flag)
flag = cmul_971d0d43(flag)
flag = add_e3a56377(flag)
flag = chxor_1150451f(flag)
flag = shuffle_b08c994e(flag)
flag = add_30b3e082(flag)
flag = chmul_b8a7f012(flag)
flag = chxor_da644b5f(flag)
flag = chmul_90381a7d(flag)
flag = chsub_bb765577(flag)
flag = cadd_294f2792(flag)
flag = cadd_ea861103(flag)
flag = digsub_6dd6217e(flag)
flag = csub_cf019266(flag)
flag = chsub_de16135d(flag)
flag = chmul_1f5faa54(flag)
flag = cmul_85b39864(flag)
flag = digsub_ab800369(flag)
flag = mul_14ad1525(flag)
flag = shuffle_ffe4fef7(flag)
flag = add_e9f76a38(flag)
flag = chadd_5d64f99d(flag)
flag = chxor_d17e07b3(flag)
flag = chunk_7d26cddb(flag)
flag = cmul_a3103f38(flag)
flag = chadd_ec0fef0e(flag)
flag = csub_98af337d(flag)
flag = xor_6cc1a542(flag)
flag = cxor_4cfe1de0(flag)
flag = chunk_13e026f7(flag)
flag = add_ebcc13ce(flag)
flag = chmul_160cacb0(flag)
flag = cxor_6976fe3d(flag)
flag = chunk_45336ad9(flag)
flag = sub_a244688a(flag)
flag = csub_35e65bc6(flag)
flag = csub_e0440f53(flag)
flag = cadd_407bbf2e(flag)
flag = chxor_85f3bf12(flag)
flag = mul_3d2d3c98(flag)
flag = cxor_83571dc3(flag)
flag = cxor_d42f4ceb(flag)
flag = shuffle_3cf7a793(flag)
flag = csub_737d4c67(flag)
flag = csub_557e07a6(flag)
flag = chadd_fe09deb1(flag)
flag = add_02bb294f(flag)
flag = csub_46c4ad67(flag)
flag = chadd_40e55360(flag)
flag = chunk_45336ad9(flag)
flag = cxor_3cac8696(flag)
flag = chsub_a2fdcc3b(flag)
flag = add_ebcc13ce(flag)
flag = digsub_864e27e4(flag)
flag = mul_4b619987(flag)
flag = add_0942c03a(flag)
flag = chmul_a1f9f8ca(flag)
flag = cmul_82b0086b(flag)
flag = cadd_8a476763(flag)
flag = cadd_1c3f6ab8(flag)
flag = chmul_ae2a8843(flag)
flag = chxor_de63b1bc(flag)
flag = cmul_1fd240a5(flag)
flag = cxor_892833c6(flag)
flag = xor_9a3a96a8(flag)
flag = csub_2d425659(flag)
flag = digsub_19451cfd(flag)
flag = cmul_7b0890d6(flag)
flag = sub_8fbf82f1(flag)
flag = cadd_64c6e595(flag)
flag = chxor_5323ed11(flag)
flag = chmul_c3fa7120(flag)
flag = sub_d67326ec(flag)
flag = sub_0c6430ff(flag)
flag = chadd_8cbc6e8c(flag)
flag = csub_fd81f025(flag)
flag = chsub_f97f894e(flag)
flag = chunk_ce966b63(flag)
flag = chmul_f1598a09(flag)
flag = add_c8475b4e(flag)
flag = chmul_adc58ae6(flag)
flag = chmul_7cbf2205(flag)
flag = chxor_cf80cd00(flag)
flag = chunk_bdaa57c3(flag)
flag = chmul_f3f19079(flag)
flag = xor_895658c8(flag)
flag = chsub_8b936fd7(flag)
flag = cxor_31cd7c00(flag)
flag = chunk_c55c643f(flag)
flag = chadd_88d19b3c(flag)
flag = chadd_1ed1777e(flag)
flag = xor_29589c28(flag)
flag = shuffle_68d954ec(flag)
flag = add_e3a56377(flag)
flag = xor_b741c18e(flag)
flag = cadd_97daaa50(flag)
flag = chadd_3e7b3151(flag)
flag = xor_f580ac50(flag)
flag = mul_70c4cf79(flag)
flag = cadd_07c72dba(flag)
flag = digsub_eccd1606(flag)
flag = cmul_8c0028d4(flag)
flag = cxor_8549d8eb(flag)
flag = add_52b814e5(flag)
flag = chxor_4659a736(flag)
flag = cmul_e577eda6(flag)
flag = digsub_0eb180b8(flag)
flag = mul_a992e945(flag)
flag = cadd_e9f8600c(flag)
flag = shuffle_7c86708c(flag)
flag = digsub_f7a754a1(flag)
flag = cxor_71a4351f(flag)
flag = chadd_6b1daeac(flag)
flag = chunk_406fc18b(flag)
flag = chadd_60898084(flag)
flag = cmul_aaa17c90(flag)
flag = cadd_503cc573(flag)
flag = chsub_27dae3ae(flag)
flag = cxor_c321d96d(flag)
flag = xor_7ede4fd2(flag)
flag = shuffle_520f2eb6(flag)
flag = chmul_faca1df3(flag)
flag = chunk_3fec31ed(flag)
flag = chunk_bdedc29f(flag)
flag = add_3cfe5566(flag)
flag = cadd_b1988d37(flag)
flag = chxor_aa6e4431(flag)
flag = chadd_8658906e(flag)
flag = cadd_3a2cd387(flag)
flag = chxor_da644b5f(flag)
flag = xor_eca7972f(flag)
flag = shuffle_d88e3f7d(flag)
flag = shuffle_2d9fffb5(flag)
flag = digsub_a740a80e(flag)
flag = chadd_3a3f3b47(flag)
flag = mul_a3a1940e(flag)
flag = xor_deeded30(flag)
flag = chunk_eb268372(flag)
flag = digsub_b8659438(flag)
flag = digsub_ced825e4(flag)
flag = chadd_14d93540(flag)
flag = shuffle_d0a6fda1(flag)
flag = mul_9d4040eb(flag)
flag = add_059f9292(flag)
flag = chunk_21515ec1(flag)
flag = cadd_91c03cb7(flag)
flag = chxor_65adc1af(flag)
flag = cmul_8a7021fa(flag)
flag = sub_4efcb7e6(flag)
flag = chmul_a0fda47c(flag)
flag = csub_bc70c3a8(flag)
flag = shuffle_a7b0cb57(flag)
flag = chadd_5a85e49b(flag)
flag = cxor_2e4819bf(flag)
flag = cmul_ddef00cb(flag)
flag = shuffle_0d458069(flag)
flag = chunk_55f369b0(flag)
flag = chmul_49e5e1c7(flag)
flag = mul_7fa6ac59(flag)
flag = digsub_e6768cff(flag)
flag = chmul_d9fd0dcd(flag)
flag = xor_8297deee(flag)
flag = mul_0a969cbc(flag)
flag = xor_a175d05f(flag)
flag = cxor_c9ef0e8c(flag)
flag = chadd_47332c73(flag)
flag = shuffle_dd75cb23(flag)
flag = cadd_63b5febd(flag)
flag = digsub_cca1638e(flag)
flag = cadd_19b7645a(flag)
flag = sub_d3dc3330(flag)
flag = digsub_b7bd2cb5(flag)
flag = cxor_3e27fbe8(flag)
flag = xor_9fab62d4(flag)
flag = chunk_bf78a71f(flag)
flag = cadd_629049ed(flag)
flag = chadd_47332c73(flag)
flag = mul_87965a17(flag)
flag = chxor_87ec1ab5(flag)
flag = shuffle_2693d526(flag)
flag = cadd_22f01a9a(flag)
flag = sub_ef03b32c(flag)
flag = chsub_91d04f68(flag)
flag = digsub_574e8941(flag)
flag = chsub_0b185319(flag)
flag = cmul_4f99fe69(flag)
flag = chmul_991b7825(flag)
flag = cxor_52a04787(flag)
flag = chadd_5290e7f2(flag)
flag = mul_3d2d3c98(flag)
flag = chmul_443266b3(flag)
flag = chadd_9f220dc2(flag)
flag = chxor_46d80275(flag)
flag = xor_e1acd3bf(flag)
flag = shuffle_b6a2aa6c(flag)
flag = chadd_e99579ed(flag)
flag = sub_3935d689(flag)
flag = xor_8297deee(flag)
flag = mul_70770109(flag)
flag = shuffle_fbcb4ff2(flag)
flag = chunk_e2c320ee(flag)
flag = sub_6f40f29f(flag)
flag = add_6e59afd0(flag)
flag = chadd_d6631ab3(flag)
flag = cxor_0e701321(flag)
flag = chmul_dac3ab2b(flag)
flag = cmul_29ff7c2b(flag)
flag = chmul_90f76848(flag)
flag = sub_d625c555(flag)
flag = chsub_d05da0d8(flag)
flag = mul_1f240b2b(flag)
flag = chunk_09573d85(flag)
flag = chxor_ee89b49e(flag)
flag = sub_7ca185a5(flag)
flag = chxor_c7f6ad65(flag)
flag = chadd_d95f9ffa(flag)
flag = chxor_c399373f(flag)
flag = shuffle_b63d8098(flag)
flag = sub_92b6d92c(flag)
flag = chxor_22bbbf9c(flag)
flag = chsub_4d0982ce(flag)
flag = cxor_5ac6b756(flag)
flag = cadd_8d1c2ebb(flag)
flag = add_79292e38(flag)
flag = mul_4bf9810d(flag)
flag = chmul_de111dfb(flag)
flag = xor_0b406c7d(flag)
flag = mul_87b720f5(flag)
flag = xor_c05b216d(flag)
flag = mul_619c394d(flag)
flag = xor_0cecea66(flag)
flag = chmul_f3f19079(flag)
flag = add_0090343e(flag)
flag = shuffle_181172b7(flag)
flag = chxor_4f175e3b(flag)
flag = chsub_a3a9e242(flag)
flag = chxor_12caeb3c(flag)
flag = chsub_48f17d05(flag)
flag = digsub_eccd1606(flag)
flag = cmul_87dca596(flag)
flag = add_93fdd277(flag)
flag = chunk_9970853d(flag)
flag = chmul_d22494d3(flag)
flag = shuffle_09604b13(flag)
flag = sub_b49bbcc9(flag)
flag = sub_90d65932(flag)
flag = chadd_40293e24(flag)
flag = chunk_73de87d2(flag)
flag = shuffle_d2451358(flag)
flag = chxor_b8ec7b4f(flag)
flag = chmul_1f5faa54(flag)
flag = chmul_2d88dd5b(flag)
flag = digsub_afa62336(flag)
flag = cadd_51596bc7(flag)
flag = xor_fd001add(flag)
flag = chadd_75030af7(flag)
flag = shuffle_81777ea5(flag)
flag = chadd_8ab3b2a8(flag)
flag = cmul_b5356752(flag)
flag = xor_51b2d18c(flag)
flag = cmul_ea21bbf8(flag)
flag = chsub_38e8f84c(flag)
flag = chxor_d17e07b3(flag)
flag = sub_00bb1bb8(flag)
flag = chadd_dba6c166(flag)
flag = add_eb403f7b(flag)
flag = shuffle_425fc483(flag)
flag = chmul_20654021(flag)
flag = mul_50110bad(flag)
flag = chxor_02646472(flag)
flag = cadd_4d6b4b20(flag)
flag = chunk_5e4cee28(flag)
flag = cmul_8189d30e(flag)
flag = shuffle_0736ce82(flag)
flag = cxor_4dfc7289(flag)
flag = chxor_616b9569(flag)
flag = chxor_a2b08b13(flag)
flag = cadd_8bcff692(flag)
flag = chxor_3dd86e1b(flag)
flag = cxor_eaaa00cc(flag)
flag = sub_91d3d73f(flag)
flag = chmul_6a2ac61f(flag)
flag = cadd_3879fa4f(flag)
flag = xor_d30c564f(flag)
flag = chxor_6e6160e1(flag)
flag = chmul_9455da11(flag)
flag = chadd_6e3ce5fe(flag)
flag = chadd_163d8ed7(flag)
flag = cadd_d3ea8638(flag)
flag = csub_1967fa7b(flag)
flag = shuffle_b6a2aa6c(flag)
flag = xor_b1dcccdc(flag)
flag = sub_d45b504c(flag)
flag = csub_f8935355(flag)
flag = chsub_70fd4908(flag)
flag = chadd_3a3f3b47(flag)
flag = cmul_45d4d761(flag)
flag = sub_4d3e2340(flag)
flag = csub_ad630998(flag)
flag = chsub_59843fee(flag)
flag = xor_46b7d1d1(flag)
flag = add_e051c869(flag)
flag = shuffle_5ea1f654(flag)
flag = chsub_339c9633(flag)
flag = chxor_6371b750(flag)
flag = add_ea027a3a(flag)
flag = chadd_a6e32549(flag)
flag = cmul_c408d74b(flag)
flag = chadd_04672342(flag)
flag = csub_f9d99859(flag)
flag = cxor_871a2d7f(flag)
flag = cxor_df42e878(flag)
flag = chxor_d48b7863(flag)
flag = chxor_65fb61d8(flag)
flag = sub_de9b7e77(flag)
flag = chmul_7eb45a9e(flag)
flag = xor_79919c11(flag)
flag = xor_2b415907(flag)
flag = digsub_ea672c6d(flag)
flag = cadd_8db97cbc(flag)
flag = cxor_95c41471(flag)
flag = shuffle_39351a8a(flag)
flag = xor_7c3bd1e8(flag)
flag = chunk_22bd5647(flag)
flag = xor_8e04350f(flag)
flag = mul_e04a2c12(flag)
flag = chxor_72127666(flag)
flag = chmul_77349f1c(flag)
flag = shuffle_7b60ebb6(flag)
flag = chadd_c32db46a(flag)
flag = chunk_3f96f374(flag)
flag = chxor_d01563ec(flag)
flag = digsub_288ef9ea(flag)
flag = chsub_d866d58b(flag)
flag = digsub_ff82e274(flag)
flag = chunk_bdec9045(flag)
flag = cxor_9d8f4ca2(flag)
flag = add_059f9292(flag)
flag = add_f10a2818(flag)
flag = digsub_8326055f(flag)
flag = chmul_5dac5c0c(flag)
flag = chunk_3f96f374(flag)
flag = cmul_b61008be(flag)
flag = shuffle_dc438735(flag)
flag = xor_00e48dde(flag)
flag = shuffle_b1134b2a(flag)
flag = chmul_608cd53e(flag)
flag = chunk_0b233094(flag)
flag = add_55670ea5(flag)
flag = add_91bf6c2c(flag)
flag = xor_a36d3d94(flag)
flag = add_ae27c2fc(flag)
flag = mul_69dd5e3a(flag)
flag = cadd_1af81cdc(flag)
flag = cmul_3c96ba6e(flag)
flag = chunk_25c9a817(flag)
flag = csub_7f2211d8(flag)
flag = add_fc842ea7(flag)
flag = csub_2c8eacf9(flag)
flag = xor_e32cc6e3(flag)
flag = csub_07dcceeb(flag)
flag = chxor_fad6bade(flag)
flag = chmul_ca2a7a2b(flag)
flag = chunk_e0f4eb85(flag)
flag = csub_dcf528e5(flag)
flag = sub_60d9cd7a(flag)
flag = cmul_06a971d4(flag)
flag = chmul_fc1bd11c(flag)
flag = sub_1719880f(flag)
flag = shuffle_e4527971(flag)
flag = chunk_ba9920ce(flag)
flag = digsub_6b9010a5(flag)
flag = xor_2a24945c(flag)
flag = add_bd22edc2(flag)
flag = sub_53b0de62(flag)
flag = shuffle_d1541fbc(flag)
flag = chsub_f27f3438(flag)
flag = chadd_68273988(flag)
flag = xor_a04b2880(flag)
flag = chmul_ab4034bb(flag)
flag = sub_8fe1102c(flag)
flag = chmul_048c1718(flag)
flag = xor_75987462(flag)
flag = cxor_6953d2a7(flag)
flag = chunk_df8009b6(flag)
flag = cxor_255a694d(flag)
flag = chadd_c28b3253(flag)
flag = chmul_b5cd94ca(flag)
flag = cadd_e7cd385e(flag)
flag = shuffle_866b2261(flag)
flag = cxor_8666b092(flag)
flag = csub_9856c97f(flag)
flag = shuffle_8c84166e(flag)
flag = cmul_a089bf19(flag)
flag = chsub_91add2c2(flag)
flag = sub_5810de75(flag)
flag = chunk_45336ad9(flag)
flag = cmul_b805737d(flag)
flag = csub_ee940cd2(flag)
flag = digsub_d9a13c5e(flag)
flag = chunk_be89d48a(flag)
flag = cmul_c57ae7de(flag)
flag = chmul_32362a1d(flag)
flag = shuffle_f0fadf4b(flag)
flag = chxor_02646472(flag)
flag = chadd_df001d38(flag)
flag = chxor_30be5eb3(flag)
flag = digsub_dbfc4977(flag)
flag = chsub_d7ccd4eb(flag)
flag = digsub_cb6346a1(flag)
flag = add_e26173d3(flag)
flag = chsub_aea82172(flag)
flag = csub_7f9b642d(flag)
flag = xor_3481ed60(flag)
flag = chsub_fa709b53(flag)
flag = cmul_5410e40d(flag)
flag = chadd_61a15596(flag)
flag = cadd_5c3e86ea(flag)
flag = add_6e59afd0(flag)
flag = chxor_fc74f7f2(flag)
flag = cadd_8db3f2f3(flag)
flag = digsub_6899cdac(flag)
flag = cxor_b93aeb3d(flag)
flag = chsub_91add2c2(flag)
flag = digsub_20c16447(flag)
flag = cxor_fa552213(flag)
flag = chsub_27dae3ae(flag)
flag = mul_60a92fff(flag)
flag = cxor_eb72bf39(flag)
flag = chmul_d909e81b(flag)
flag = csub_74a6e474(flag)
flag = csub_fe2f121a(flag)
flag = chadd_df001d38(flag)
flag = xor_b741c18e(flag)
flag = chmul_0db588dd(flag)
flag = cadd_ba362142(flag)
flag = sub_d4145101(flag)
flag = shuffle_2d9fffb5(flag)
flag = chadd_e835abf7(flag)
flag = digsub_15140dd6(flag)
flag = chxor_3c2c0416(flag)
flag = cadd_07c72dba(flag)
flag = chsub_8b38a202(flag)
flag = mul_fc9252b1(flag)
flag = mul_3dd9a13e(flag)
flag = chxor_1272b4b3(flag)
flag = chmul_9e62f058(flag)
flag = shuffle_45b62e3f(flag)
flag = csub_76313df2(flag)
flag = csub_c59b429f(flag)
flag = chxor_5cda58cc(flag)
flag = chxor_d62951fc(flag)
flag = xor_75987462(flag)
flag = sub_b665fdaf(flag)
flag = mul_1d0b4953(flag)
flag = digsub_7aec5b80(flag)
flag = chadd_40293e24(flag)
flag = chxor_57e0c9f1(flag)
flag = cmul_66f3a0d2(flag)
flag = chmul_885659c9(flag)
flag = chxor_829e0b1c(flag)
flag = sub_aa1109df(flag)
flag = sub_032906d0(flag)
flag = mul_9d4040eb(flag)
flag = cxor_8fe94932(flag)
flag = sub_658747e3(flag)
flag = csub_d77927e4(flag)
flag = cmul_3aff1e18(flag)
flag = chsub_6ab39e5c(flag)
flag = mul_7a676b8f(flag)
flag = digsub_d22e4d9e(flag)
flag = chmul_2f893b62(flag)
flag = xor_131c6ed1(flag)
flag = add_d153a7bf(flag)
flag = sub_df1c5e46(flag)
flag = shuffle_8dc55f06(flag)
flag = add_c9854582(flag)
flag = cadd_bf38d005(flag)
flag = mul_959ccef4(flag)
flag = csub_b14e28f6(flag)
flag = chsub_dbb4ae01(flag)
flag = csub_98f9a52a(flag)
flag = chunk_816b54df(flag)
flag = cmul_fb7cc4ca(flag)
flag = cmul_15edb219(flag)
flag = shuffle_883a1be7(flag)
flag = cxor_677dcdda(flag)
flag = mul_b9305b76(flag)
flag = cmul_21388cd8(flag)
flag = chmul_23d520ac(flag)
flag = chunk_bdaa57c3(flag)
flag = cxor_db034137(flag)
flag = digsub_46ad768c(flag)
flag = mul_50110bad(flag)
flag = chmul_2332b1f2(flag)
flag = cadd_02aec3ae(flag)
flag = add_91babee9(flag)
flag = sub_2e2758dc(flag)
flag = chsub_66a6c561(flag)
flag = chxor_855b33d8(flag)
flag = chadd_e99579ed(flag)
flag = shuffle_f3858d75(flag)
flag = digsub_8e7fd683(flag)
flag = chsub_e20ff930(flag)
flag = digsub_899a9f6d(flag)
flag = csub_74a6e474(flag)
flag = xor_da634428(flag)
flag = sub_92f79353(flag)
flag = cadd_fb2c7b99(flag)
flag = mul_89548da9(flag)
flag = digsub_febb8b71(flag)
flag = add_8f63cc91(flag)
flag = shuffle_63b7a61d(flag)
flag = csub_417a5b3f(flag)
flag = chunk_e20352cb(flag)
flag = chmul_ca2a7a2b(flag)
flag = cxor_df720e52(flag)
flag = chxor_dd683543(flag)
flag = sub_e383e4d5(flag)
flag = chsub_76a99240(flag)
flag = chxor_ffe3793d(flag)
flag = csub_b08e7ba7(flag)
flag = cxor_21574829(flag)
flag = cmul_92323fe7(flag)
flag = cmul_06256c90(flag)
flag = digsub_61dd20a0(flag)
flag = shuffle_9076b7e7(flag)
flag = mul_18205495(flag)
flag = chmul_04e4a837(flag)
flag = sub_56d810e7(flag)
flag = mul_150845b8(flag)
flag = cxor_b7550d4d(flag)
flag = chadd_df001d38(flag)
flag = shuffle_dc92e6b1(flag)
flag = chxor_00408453(flag)
flag = shuffle_9d73add2(flag)
flag = cmul_0ee0ce26(flag)
flag = cmul_9ea3f862(flag)
flag = shuffle_3cf7a793(flag)
flag = sub_8476e2a1(flag)
flag = cmul_77da69c4(flag)
flag = chunk_0934570f(flag)
flag = cxor_4cfe1de0(flag)
flag = chmul_96b3e78c(flag)
flag = chxor_34a2c770(flag)
flag = chxor_18337976(flag)
flag = digsub_f44f1764(flag)
flag = chunk_bb0e25ea(flag)
flag = sub_d67a4b16(flag)
flag = shuffle_d0a6fda1(flag)
flag = chunk_16728eb8(flag)
flag = chxor_cb71a848(flag)
flag = chsub_f7d05960(flag)
flag = cadd_9a06eb38(flag)
flag = cmul_6f98e718(flag)
flag = chxor_daa5c35b(flag)
flag = cmul_4e66e309(flag)
flag = add_a5b30fdf(flag)
flag = csub_6cc93d0b(flag)
flag = mul_8cff30c9(flag)
flag = mul_77c55019(flag)
flag = chxor_2b81e3ec(flag)
flag = add_f10a2818(flag)
flag = shuffle_dd75cb23(flag)
flag = sub_aabddf03(flag)
flag = cadd_8fd791e9(flag)
flag = digsub_b6137e92(flag)
flag = chxor_83f63c74(flag)
flag = add_0b0a39a3(flag)
flag = cadd_f1510001(flag)
flag = cadd_45b798ff(flag)
flag = chsub_f75e24ea(flag)
flag = cmul_8c0028d4(flag)
flag = chsub_6ab39e5c(flag)
flag = chxor_be9a01b5(flag)
flag = chxor_a2b08b13(flag)
flag = shuffle_5ea1f654(flag)
flag = add_eb403f7b(flag)
flag = csub_98f9a52a(flag)
flag = chsub_808e087e(flag)
flag = cadd_79d7fa85(flag)
flag = cxor_5fa90da0(flag)
flag = chadd_8e15ee9b(flag)
flag = chxor_665eed2c(flag)
flag = cmul_1c2bf9c2(flag)
flag = chadd_3a7cbca3(flag)
flag = xor_827e6b83(flag)
flag = chsub_25609124(flag)
flag = chadd_8231f9c2(flag)
flag = cmul_9bf9f69d(flag)
flag = cxor_41be00fc(flag)
flag = shuffle_865caf5e(flag)
flag = cxor_bacb039a(flag)
flag = chadd_79e35c1e(flag)
flag = sub_665d3f8a(flag)
flag = mul_520721f3(flag)
flag = xor_5b72ca68(flag)
flag = cmul_b358c3b3(flag)
flag = digsub_081fcfe8(flag)
flag = mul_1d0b4953(flag)
flag = chunk_cd87c4de(flag)
flag = add_48a6be62(flag)
flag = chmul_5af32334(flag)
flag = chsub_18094e03(flag)
flag = chunk_518ff916(flag)
flag = shuffle_2ad93819(flag)
flag = chmul_57848b7a(flag)
flag = cmul_1b7b7fb7(flag)
flag = xor_ac535945(flag)
flag = chmul_1666c516(flag)
flag = mul_137ad3d1(flag)
flag = add_14d5f474(flag)
flag = shuffle_f5a6f753(flag)
flag = shuffle_86e11db2(flag)
flag = sub_753032fe(flag)
flag = chsub_a2001711(flag)
flag = digsub_db13869f(flag)
flag = chunk_d9ce60f8(flag)
flag = csub_30ac2fb9(flag)
flag = sub_c3134c11(flag)
flag = csub_e6b3e198(flag)
flag = cadd_3882e35e(flag)
flag = cmul_880f9e67(flag)
flag = add_e7bf4d1a(flag)
flag = chunk_c72fb6c4(flag)
flag = cadd_ffecf556(flag)
flag = cxor_aaa07a69(flag)
flag = chmul_ca2a7a2b(flag)
flag = chmul_afd7fea6(flag)
flag = chxor_02aa625d(flag)
flag = xor_a2c95310(flag)
flag = digsub_aecf9a86(flag)
flag = cxor_3db736ba(flag)
flag = add_ed2b53a6(flag)
flag = xor_e994fa9c(flag)
flag = chmul_2f893b62(flag)
flag = cmul_38593f30(flag)
flag = chunk_53760c11(flag)
flag = cmul_5bbd0126(flag)
flag = mul_947580cb(flag)
flag = digsub_f316d9e1(flag)
flag = chxor_42438acb(flag)
flag = digsub_99f3c205(flag)
flag = add_12e64206(flag)
flag = cmul_a3103f38(flag)
flag = cxor_30674cf4(flag)
flag = chxor_4909f0be(flag)
flag = sub_560b0d88(flag)
flag = chmul_cee9aae6(flag)
flag = cadd_709ceb61(flag)
flag = chmul_c4196221(flag)
flag = cadd_e86a7e16(flag)
flag = chxor_bca7bb47(flag)
flag = chsub_e0feb99d(flag)
flag = cadd_86ca3121(flag)
flag = mul_87965a17(flag)
flag = mul_89bed2ea(flag)
flag = mul_2dbeaa3b(flag)
flag = digsub_5a1f6d2f(flag)
flag = mul_9d0c3682(flag)
flag = chmul_c3f87a7a(flag)
flag = chsub_e87a1297(flag)
flag = chxor_d50259ba(flag)
flag = chxor_00dbbc36(flag)
flag = shuffle_7894ad24(flag)
flag = shuffle_0d936e4f(flag)
flag = shuffle_86331a49(flag)
flag = mul_0e478f31(flag)
flag = chxor_1649570d(flag)
flag = cxor_46b69f72(flag)
flag = csub_77053211(flag)
flag = mul_53ea4a75(flag)
flag = chmul_ca2a7a2b(flag)
flag = chmul_b923d46c(flag)
flag = mul_c4188e74(flag)
flag = shuffle_f4bbf14d(flag)
flag = add_23028792(flag)
flag = csub_97ae1a88(flag)
flag = csub_2645ed31(flag)
flag = cmul_0faaa6e2(flag)
flag = shuffle_2c2121d2(flag)
flag = csub_f4c94d76(flag)
flag = cmul_66170953(flag)
flag = cmul_26f5ab98(flag)
flag = chadd_09e456ed(flag)
flag = add_158186ec(flag)
flag = chxor_835e69ad(flag)
flag = shuffle_1676c2c9(flag)
flag = xor_a53f1f68(flag)
flag = digsub_f642c787(flag)
flag = chadd_0232afc0(flag)
flag = shuffle_def3ecab(flag)
flag = shuffle_8a66e8f2(flag)
flag = chxor_8ee7d3f7(flag)
flag = sub_8c65785f(flag)
flag = csub_a60ad993(flag)
flag = chunk_41b017cd(flag)
flag = csub_c5965200(flag)
flag = chadd_28036696(flag)
flag = cxor_51d9f2ee(flag)
flag = sub_61538669(flag)
flag = shuffle_9294cfce(flag)
flag = sub_a2adabad(flag)
flag = xor_a2c95310(flag)
flag = cadd_3cbc013d(flag)
flag = chxor_b9b02bcc(flag)
flag = xor_38573e9d(flag)
flag = chsub_46fd8bb3(flag)
flag = mul_34324887(flag)
flag = cxor_bfb33206(flag)
flag = csub_77053211(flag)
flag = shuffle_328f0268(flag)
flag = chxor_14176db9(flag)
flag = cmul_e4155cf9(flag)
flag = cadd_775bd2a3(flag)
flag = chxor_28f8a717(flag)
flag = sub_ec7f3f21(flag)
flag = digsub_ee67309b(flag)
flag = mul_9ed02e6c(flag)
flag = cadd_65434b8c(flag)
flag = chmul_d3237ea8(flag)
flag = digsub_46ad768c(flag)
flag = cmul_931552a6(flag)
flag = digsub_98eb887b(flag)
flag = digsub_5e8b7a8a(flag)
flag = chunk_a998eeb4(flag)
flag = chadd_5544e38e(flag)
flag = shuffle_2ce02926(flag)
flag = cxor_b70fe991(flag)
flag = cmul_cd2eddf4(flag)
flag = chsub_9e3a2eb0(flag)
flag = cadd_c66b787a(flag)
flag = sub_83e670dd(flag)
flag = xor_f580ac50(flag)
flag = cxor_df97c526(flag)
flag = add_454ffaaf(flag)
flag = mul_fcc77ce6(flag)
flag = xor_84fc41ea(flag)
flag = chunk_f25c6152(flag)
flag = add_ebcc13ce(flag)
flag = chunk_a431061a(flag)
flag = csub_1f106834(flag)
flag = add_ee203fd4(flag)
flag = chxor_3972d07b(flag)
flag = chunk_df8009b6(flag)
flag = chxor_32814bee(flag)
flag = add_022bab8d(flag)
flag = add_6300f0c0(flag)
flag = chadd_7620a0b7(flag)
flag = shuffle_f0fadf4b(flag)
flag = xor_0ade2d1f(flag)
flag = cmul_c0727784(flag)
flag = chxor_e23f2cfd(flag)
flag = cadd_509c46a1(flag)
flag = chsub_167fa647(flag)
flag = csub_96d5d023(flag)
flag = cxor_40c47f57(flag)
flag = digsub_b0591b22(flag)
flag = cxor_4cb585c4(flag)
flag = chsub_4ebc0819(flag)
flag = add_f66fdb75(flag)
flag = chsub_76b2d7aa(flag)
flag = shuffle_a6432e15(flag)
flag = chunk_4bf6bdc4(flag)
flag = shuffle_69db3f4f(flag)
flag = shuffle_5ea1f654(flag)
flag = cadd_428d6ecc(flag)
flag = chadd_8e15ee9b(flag)
flag = mul_2c8e35d6(flag)
flag = xor_64af3af1(flag)
flag = cmul_7a2b74fe(flag)
flag = digsub_61a694a2(flag)
flag = xor_0ade2d1f(flag)
flag = cadd_0079a56b(flag)
flag = cmul_3152eceb(flag)
flag = cadd_261a4a1d(flag)
flag = chmul_695202ac(flag)
flag = shuffle_81df2959(flag)
flag = chmul_a6c30448(flag)
flag = shuffle_922a7e0d(flag)
flag = digsub_4ed94ee3(flag)
flag = chsub_ccea72cb(flag)
flag = cadd_4dc54d10(flag)
flag = cmul_66f3a0d2(flag)
flag = shuffle_e14d57f5(flag)
flag = xor_339b9a13(flag)
flag = cxor_e3ac0f88(flag)
flag = mul_d23185db(flag)
flag = chadd_c9f53918(flag)
flag = cmul_b61008be(flag)
flag = add_30b3e082(flag)
flag = xor_d5273bd6(flag)
flag = chmul_d43d1a9f(flag)
flag = chxor_4447550e(flag)
flag = chadd_14d93540(flag)
flag = chxor_1649570d(flag)
flag = chunk_7efebb77(flag)
flag = sub_1ddf1ef7(flag)
flag = chmul_e4e712b9(flag)
flag = cmul_db003c24(flag)
flag = chxor_d62951fc(flag)
flag = chsub_ebadaefe(flag)
flag = add_91bf6c2c(flag)
flag = chxor_a697d1c3(flag)
flag = cxor_bfb33206(flag)
flag = chunk_b0f88afb(flag)
flag = cmul_2eb8bc9e(flag)
flag = chmul_d1afe9b0(flag)
flag = digsub_18fc0c9e(flag)
flag = add_52b814e5(flag)
flag = chxor_67aa494b(flag)
flag = chxor_14ca1407(flag)
flag = chadd_0124a79d(flag)
flag = chmul_227b1b2a(flag)
flag = csub_f6d8e64f(flag)
flag = mul_92b1b71e(flag)
flag = sub_541963fb(flag)
flag = xor_5250859e(flag)
flag = xor_23eae5a3(flag)
flag = digsub_61dd20a0(flag)
flag = xor_76cd9a81(flag)
flag = cxor_695c7de2(flag)
flag = chsub_fb961764(flag)
flag = add_de55f4f2(flag)
flag = shuffle_865caf5e(flag)
flag = add_4584979d(flag)
flag = cmul_9513451d(flag)
flag = chsub_70fd4908(flag)
flag = cadd_cab4819e(flag)
flag = cxor_2eec2815(flag)
flag = chxor_5f238dda(flag)
flag = xor_32fe74f6(flag)
flag = add_88cb654b(flag)
flag = cmul_8189d30e(flag)
flag = csub_efe13119(flag)
flag = add_4d5b7dd8(flag)
flag = sub_430d0f4c(flag)
flag = cxor_42ec5686(flag)
flag = chmul_78c19c03(flag)
flag = mul_b9305b76(flag)
flag = cxor_dc7aac3c(flag)
flag = mul_137ad3d1(flag)
flag = cadd_36d81dd6(flag)
flag = xor_f41b0fa6(flag)
flag = cxor_0d19b008(flag)
flag = chmul_05459301(flag)
flag = mul_8cff30c9(flag)
flag = chmul_de111dfb(flag)
flag = add_87dad6e0(flag)
flag = chxor_42438acb(flag)
flag = cadd_648dbdbd(flag)
flag = chsub_07a262a0(flag)
flag = digsub_f22e07b0(flag)
flag = cxor_454d9bad(flag)
flag = cmul_10dcbe35(flag)
flag = csub_dcf528e5(flag)
flag = chadd_6662b275(flag)
flag = shuffle_f4ee3eb0(flag)
flag = xor_7c3bd1e8(flag)
flag = chunk_be89d48a(flag)
flag = digsub_636b7f9c(flag)
flag = cadd_8a476763(flag)
flag = chadd_5290e7f2(flag)
flag = chxor_7b570606(flag)
flag = cmul_16d7f1e9(flag)
flag = add_ee203fd4(flag)
flag = shuffle_c71df508(flag)
flag = chadd_bfbcfbbe(flag)
flag = chsub_8396a9b9(flag)
flag = cadd_648dbdbd(flag)
flag = add_c93fcbda(flag)
flag = cadd_d279898b(flag)
flag = chunk_bdec9045(flag)
flag = xor_edf3c9f3(flag)
flag = cmul_40bb0e2b(flag)
flag = chsub_4a4043a6(flag)
flag = mul_b45cc04b(flag)
flag = shuffle_6c33ee33(flag)
flag = chmul_645c1d15(flag)
flag = csub_359c8002(flag)
flag = chunk_b40e3bec(flag)
flag = chunk_9532fc70(flag)
flag = digsub_e2130014(flag)
flag = sub_d67326ec(flag)
flag = xor_9d8c4a8c(flag)
flag = chxor_b82fad32(flag)
flag = chunk_6fa30167(flag)
flag = digsub_ddee790f(flag)
flag = add_c40251ff(flag)
flag = sub_bbf06d64(flag)
flag = mul_8e78cc44(flag)
flag = cxor_46b69f72(flag)
flag = digsub_74f80d9b(flag)
flag = chunk_6fa30167(flag)
flag = chadd_d4f4e60b(flag)
flag = chsub_b9dc2f68(flag)
flag = digsub_99f3c205(flag)
flag = add_81776826(flag)
flag = chadd_2732f1ee(flag)
flag = shuffle_69db3f4f(flag)
flag = xor_34863588(flag)
flag = sub_a96a1483(flag)
flag = add_2a4aac0f(flag)
flag = csub_34d4359e(flag)
flag = chsub_9fe7030d(flag)
flag = chadd_fa13451e(flag)
flag = xor_d4b3bf17(flag)
flag = cmul_3e4053fd(flag)
flag = csub_cb2cec49(flag)
flag = cxor_695c7de2(flag)
flag = chsub_64d91494(flag)
flag = chmul_9b06c74b(flag)
flag = chadd_6156d6db(flag)
flag = chxor_de5cf1af(flag)
flag = cadd_99696e25(flag)
flag = shuffle_35e807af(flag)
flag = cxor_4d3c5896(flag)
flag = shuffle_efa32ed0(flag)
flag = chxor_49854e3d(flag)
flag = chmul_57848b7a(flag)
flag = chsub_4c5385aa(flag)
flag = add_e0bbf910(flag)
flag = cmul_dd8d739c(flag)
flag = digsub_0afb900b(flag)
flag = mul_67e87c31(flag)
flag = mul_712130c5(flag)
flag = cxor_c6e16ecc(flag)
flag = add_1688c841(flag)
flag = cxor_dfcb824e(flag)
flag = cmul_029f5e8d(flag)
flag = digsub_504110f5(flag)
flag = chunk_cbcd0993(flag)
flag = cmul_e510f1c4(flag)
flag = chunk_ab1c7f5f(flag)
flag = cadd_54b12cd0(flag)
flag = add_278192d9(flag)
flag = csub_69098245(flag)
flag = chunk_f46f605c(flag)
flag = sub_dfb02634(flag)
flag = chunk_dd75a83f(flag)
flag = chsub_b090cf63(flag)
flag = chadd_96a0ee76(flag)
flag = digsub_575bce65(flag)
flag = add_e9f76a38(flag)
flag = cmul_892d62b0(flag)
flag = chsub_00adad20(flag)
flag = cadd_b38e11c1(flag)
flag = csub_2d425659(flag)
flag = add_d1eb8814(flag)
flag = cmul_ec6817f2(flag)
flag = chmul_5dac5c0c(flag)
flag = chxor_9b4a8975(flag)
flag = mul_8155b14e(flag)
flag = chsub_46fd8bb3(flag)
flag = chmul_ebd5a20e(flag)
flag = chsub_f17ba2e2(flag)
flag = chsub_934ba014(flag)
flag = chmul_fb4d75c9(flag)
flag = xor_3d8de492(flag)
flag = add_39899af6(flag)
flag = mul_0af7d935(flag)
flag = chadd_ddff28b1(flag)
flag = chsub_207ccdea(flag)
flag = csub_6cc93d0b(flag)
flag = chsub_a9bb41f7(flag)
flag = chxor_a614acf2(flag)
flag = sub_1b55f541(flag)
flag = chsub_57719ac8(flag)
flag = add_5dfc4b74(flag)
flag = cmul_f7e015fa(flag)
flag = chunk_f32c7c2f(flag)
flag = cmul_d64253b9(flag)
flag = chxor_6fca7a91(flag)
flag = mul_b5be71ee(flag)
flag = xor_eca7972f(flag)
flag = chunk_fd32f837(flag)
flag = xor_e1acd3bf(flag)
flag = mul_897a634a(flag)
flag = mul_9d4040eb(flag)
flag = sub_9514a3ce(flag)
flag = shuffle_81777ea5(flag)
flag = shuffle_45b62e3f(flag)
flag = shuffle_6ed87304(flag)
flag = cxor_6476b200(flag)
flag = chsub_b942a4e6(flag)
flag = add_378b40cb(flag)
flag = chmul_e6742997(flag)
flag = cxor_7be08bad(flag)
flag = mul_4e5e1932(flag)
flag = cadd_d957f629(flag)
flag = chxor_bca7bb47(flag)
flag = cadd_b51d3eba(flag)
flag = sub_656aa559(flag)
flag = xor_4e43f7ea(flag)
flag = cadd_8d1c2ebb(flag)
flag = mul_f345af6b(flag)
flag = chmul_d3cbaa99(flag)
flag = chunk_e120ffe1(flag)
flag = xor_46b7d1d1(flag)
flag = add_e6d0a399(flag)
flag = cadd_8db3f2f3(flag)
flag = chadd_658a720b(flag)
flag = digsub_19a384d0(flag)
flag = chxor_6c38cb27(flag)
flag = chadd_f2fd70f1(flag)
flag = chmul_882a927d(flag)
flag = sub_7aa7238b(flag)
flag = csub_c5965200(flag)
flag = chxor_4f175e3b(flag)
flag = mul_947580cb(flag)
flag = chunk_55f369b0(flag)
flag = mul_c50eb88b(flag)
flag = xor_2a24945c(flag)
flag = chsub_ef4867dc(flag)
flag = shuffle_028022fe(flag)
flag = sub_7e5f5612(flag)
flag = sub_90d65932(flag)
flag = csub_160421ef(flag)
flag = cadd_3882e35e(flag)
flag = digsub_2a3c141d(flag)
flag = chsub_112adf2e(flag)
flag = cadd_9bed43d0(flag)
flag = chxor_d01563ec(flag)
flag = xor_4bd4b2d3(flag)
flag = cadd_f79f3974(flag)
flag = shuffle_f5a6f753(flag)
flag = add_6aeef0e9(flag)
flag = chadd_74c2ec36(flag)
flag = chsub_19dd999e(flag)
flag = chunk_dd75a83f(flag)
flag = chadd_fed374e0(flag)
flag = cmul_8705a015(flag)
flag = chsub_24c471c0(flag)
flag = shuffle_c51a19df(flag)
flag = xor_2bdb6650(flag)
flag = chxor_56c9e723(flag)
flag = xor_23517ee7(flag)
flag = shuffle_efb3207c(flag)
flag = csub_59e78f82(flag)
flag = chsub_27343013(flag)
flag = xor_a175d05f(flag)
flag = cadd_a4fd2ffb(flag)
flag = mul_652ee2e0(flag)
flag = cxor_2e302e67(flag)
flag = digsub_e1f5dc03(flag)
flag = chmul_e7f67d19(flag)
flag = shuffle_b0e9c01f(flag)
flag = chmul_1f5faa54(flag)
flag = chunk_a8577417(flag)
flag = cadd_fa34d6b4(flag)
flag = sub_32cc1a97(flag)
flag = cmul_b5356752(flag)
flag = digsub_74f80d9b(flag)
flag = chsub_3bf8b0c8(flag)
flag = cadd_66bcc5a2(flag)
flag = cadd_5b4e9aab(flag)
flag = xor_90c0a051(flag)
flag = sub_56d810e7(flag)
flag = chmul_d95ce6fa(flag)
flag = cxor_a1a8de03(flag)
flag = chadd_069e430a(flag)
flag = chunk_8476d997(flag)
flag = xor_41405d72(flag)
flag = sub_8476e2a1(flag)
flag = shuffle_a17bb4ee(flag)
flag = digsub_c71698e9(flag)
flag = chsub_134ff6dd(flag)
flag = chunk_a5854668(flag)
flag = digsub_6ab37400(flag)
flag = cadd_e86a7e16(flag)
flag = sub_3c434ee5(flag)
flag = chadd_f7fad255(flag)
flag = csub_3d47b491(flag)
flag = chmul_5e1cf1e0(flag)
flag = cadd_577d5f70(flag)
flag = chsub_32f5910d(flag)
flag = csub_a2102746(flag)
flag = chmul_79e6dd5d(flag)
flag = xor_f904d9a6(flag)
flag = xor_7465fff5(flag)
flag = chadd_db3363a7(flag)
flag = chsub_f3e2875f(flag)
flag = chxor_b1f5dc0d(flag)
flag = chunk_e5683735(flag)
flag = digsub_d4a46520(flag)
flag = cmul_e7965a1e(flag)
flag = cmul_ddef00cb(flag)
flag = sub_0a7dad65(flag)
flag = chadd_65bf6072(flag)
flag = chsub_5d86241d(flag)
flag = digsub_f38ffcc2(flag)
flag = csub_8a4930e2(flag)
flag = cmul_ca71521f(flag)
flag = chsub_167fa647(flag)
flag = chunk_6b35af69(flag)
flag = xor_ab75a784(flag)
flag = chsub_b335ae97(flag)
flag = chunk_b26605b9(flag)
flag = cmul_b01d887b(flag)
flag = cmul_ba8b037d(flag)
flag = chsub_379e2ba1(flag)
flag = mul_14ad1525(flag)
flag = cadd_159797e5(flag)
flag = sub_64547020(flag)
flag = cadd_6ae07a4d(flag)
flag = cmul_4b4ceaf4(flag)
flag = chsub_a9bb41f7(flag)
flag = csub_44ad5428(flag)
flag = chsub_a70db66e(flag)
flag = cxor_075c21e0(flag)
flag = csub_392cef70(flag)
flag = cadd_fd1d6bfc(flag)
flag = chxor_835e69ad(flag)
flag = mul_2f486d74(flag)
flag = chmul_905d7d7a(flag)
flag = chxor_0f3c245c(flag)
flag = cmul_1871b99c(flag)
flag = cmul_7fe479fd(flag)
flag = csub_5a6c81e3(flag)
flag = csub_df5bd69a(flag)
flag = chadd_8658906e(flag)
flag = shuffle_3f68185e(flag)
flag = chmul_18bbd248(flag)
flag = shuffle_49d97f75(flag)
flag = cmul_318e5f45(flag)
flag = chsub_0b185319(flag)
flag = shuffle_1676c2c9(flag)
flag = add_ef37b006(flag)
flag = cmul_3062560c(flag)
flag = mul_c3e69fa2(flag)
flag = chxor_a2b08b13(flag)
flag = chxor_9426335a(flag)
flag = xor_af966677(flag)
flag = xor_3edbcd7c(flag)
flag = chmul_4d8aa24b(flag)
flag = add_c1f5edb7(flag)
flag = mul_4a9471da(flag)
flag = chunk_a763fb97(flag)
flag = cmul_97c0f64c(flag)
flag = cadd_f288775d(flag)
flag = chxor_bbf3589a(flag)
flag = cmul_5d27452a(flag)
flag = add_67af3ff4(flag)
flag = sub_7d90f9de(flag)
flag = shuffle_de9df0cf(flag)
flag = chmul_def74a51(flag)
flag = shuffle_dd27dbb1(flag)
flag = digsub_a56c83c8(flag)
flag = chadd_2fa4c3aa(flag)
flag = shuffle_f43f69f9(flag)
flag = cxor_6c5cd5c7(flag)
flag = chadd_3aa9c371(flag)
flag = mul_9d4040eb(flag)
flag = cadd_12c3036e(flag)
flag = chxor_6fca7a91(flag)
flag = sub_58eb1409(flag)
flag = cxor_0673e3e4(flag)
flag = xor_3583ad2a(flag)
flag = chmul_26b6373e(flag)
flag = cmul_b57f5cfc(flag)
flag = csub_a0c513d9(flag)
flag = mul_3d2d3c98(flag)
flag = cmul_e55c9291(flag)
flag = chadd_b0d8f554(flag)
flag = cmul_3c18a69a(flag)
flag = chmul_ab23c18c(flag)
flag = sub_0a7dad65(flag)
flag = sub_c62f3219(flag)
flag = xor_4e43f7ea(flag)
flag = cxor_2e4819bf(flag)
flag = sub_8d22e619(flag)
flag = mul_b2b433f9(flag)
flag = cxor_ccd49eb2(flag)
flag = chadd_da1b4b19(flag)
flag = xor_f5bcc389(flag)
flag = sub_5810de75(flag)
flag = cxor_b42cfa90(flag)
flag = chsub_7af0731b(flag)
flag = chunk_44d36e8a(flag)
flag = chadd_747dfa2f(flag)
flag = chunk_bb0e25ea(flag)
flag = shuffle_692c856d(flag)
flag = shuffle_c5e07151(flag)
flag = shuffle_b14477ff(flag)
flag = xor_f68eb9b6(flag)
flag = cadd_652099bf(flag)
flag = chadd_ddff28b1(flag)
flag = mul_224595eb(flag)
flag = chxor_1649570d(flag)
flag = chunk_21515ec1(flag)
flag = chmul_1bf400c7(flag)
flag = add_ea027a3a(flag)
flag = cxor_7be08bad(flag)
flag = shuffle_6fcd072c(flag)
flag = mul_31e8499c(flag)
flag = sub_92b6d92c(flag)
flag = add_1039dc95(flag)
flag = cxor_f929f224(flag)
flag = chsub_85be1feb(flag)
flag = csub_1bf63629(flag)
flag = cmul_c9f41697(flag)
flag = cadd_1d1894a8(flag)
flag = mul_1c457d63(flag)
flag = chsub_7e45d909(flag)
flag = cxor_7d6f0b67(flag)
flag = shuffle_028022fe(flag)
flag = chxor_56c9e723(flag)
flag = cmul_40bb0e2b(flag)
flag = chsub_6ee60616(flag)
flag = csub_70a8e307(flag)
flag = chxor_90da6de6(flag)
flag = csub_d77927e4(flag)
flag = chsub_37756695(flag)
flag = digsub_4ed94ee3(flag)
flag = shuffle_dd27dbb1(flag)
flag = chxor_556134a0(flag)
flag = cmul_738aef71(flag)
flag = shuffle_5ad024ad(flag)
flag = chsub_c7e9cf5d(flag)
flag = chsub_87204349(flag)
flag = xor_2ec3c23c(flag)
flag = mul_c4479db6(flag)
flag = chadd_e1175475(flag)
flag = chxor_a6995b41(flag)
flag = cmul_4172328f(flag)
flag = cmul_dc6ecbe6(flag)
flag = mul_5067d66a(flag)
flag = chunk_45336ad9(flag)
flag = add_7553d25b(flag)
flag = xor_e32cc6e3(flag)
flag = cadd_991ec901(flag)
flag = cmul_b6542da7(flag)
flag = xor_f99e5d04(flag)
flag = chmul_97ccb142(flag)
flag = csub_a0c513d9(flag)
flag = xor_8ae01235(flag)
flag = shuffle_f554897b(flag)
flag = chunk_e3f6d2ec(flag)
flag = xor_097a8a70(flag)
flag = cadd_991ec901(flag)
flag = cadd_079c91f6(flag)
flag = chunk_f44dbb33(flag)
flag = add_bb299925(flag)
flag = digsub_67b6032a(flag)
flag = add_0cecddf7(flag)
flag = chmul_adc58ae6(flag)
flag = chmul_b28ec3c8(flag)
flag = shuffle_76c2382f(flag)
flag = mul_bb9e8c00(flag)
flag = add_4a7519db(flag)
flag = mul_ca0cc32d(flag)
flag = sub_71bf262c(flag)
flag = chunk_8af8feea(flag)
flag = chadd_ed0711d8(flag)
flag = cxor_f929f224(flag)
flag = chsub_5d43cf4f(flag)
flag = chadd_5d344985(flag)
flag = xor_f580ac50(flag)
flag = digsub_f7a754a1(flag)
flag = cmul_028527b6(flag)
flag = cmul_63effb36(flag)
flag = cmul_4691495a(flag)
flag = cmul_1b7b7fb7(flag)
flag = xor_68464c0d(flag)
flag = csub_d24d889b(flag)
flag = xor_e689ffa0(flag)
flag = cxor_b93aeb3d(flag)
flag = add_ed2b53a6(flag)
flag = chsub_3832a22b(flag)
flag = cmul_b01d887b(flag)
flag = chadd_2e85df59(flag)
flag = xor_dce2a545(flag)
flag = chadd_c28b3253(flag)
flag = digsub_1feeafe7(flag)
flag = chmul_b20c3846(flag)
flag = csub_9856c97f(flag)
flag = cadd_65434b8c(flag)
flag = chunk_b6e52a0f(flag)
flag = cadd_6d7e714e(flag)
flag = chadd_4d98bf27(flag)
flag = chsub_112adf2e(flag)
flag = mul_e5700c12(flag)
flag = mul_589a2ea6(flag)
flag = shuffle_eeea5e4e(flag)
flag = sub_abe98fac(flag)
flag = xor_8da999ff(flag)
flag = cxor_df42e878(flag)
flag = chunk_e2c320ee(flag)
flag = chunk_2a7d8d80(flag)
flag = mul_f41b15dd(flag)
flag = shuffle_823fa35f(flag)
flag = chadd_ec0fef0e(flag)
flag = chmul_dac3ab2b(flag)
flag = chxor_2e7e40ef(flag)
flag = xor_25ac4148(flag)
flag = chunk_3a4345ab(flag)
flag = cadd_e7cd385e(flag)
flag = cmul_4efbd341(flag)
flag = chadd_cc6daaa1(flag)
flag = shuffle_cb627e8c(flag)
flag = chxor_1272b4b3(flag)
flag = digsub_aecf9a86(flag)
flag = add_664be5fd(flag)
flag = chadd_12bc44e9(flag)
flag = mul_e04a2c12(flag)
flag = cadd_5c3e86ea(flag)
flag = chxor_835e69ad(flag)
flag = add_909f31dc(flag)
flag = xor_8da999ff(flag)
flag = cxor_504085b7(flag)
flag = xor_cd4a30ee(flag)
flag = mul_af43f0cd(flag)
flag = cxor_025cbbe3(flag)
flag = shuffle_1cae3f87(flag)
flag = cadd_92239d35(flag)
flag = chxor_24ff0dd9(flag)
flag = add_a1fe299c(flag)
flag = chadd_d2932b24(flag)
flag = cxor_f30be4dd(flag)
flag = digsub_81042cb1(flag)
flag = xor_f13936e3(flag)
flag = add_b071c8e9(flag)
flag = add_dcb94ddc(flag)
flag = chunk_b0a3ccde(flag)
flag = chxor_bca7bb47(flag)
flag = cadd_6ae07a4d(flag)
flag = cmul_3bee8718(flag)
flag = cmul_9e6c0fb6(flag)
flag = chmul_f175d1d7(flag)
flag = shuffle_f4ee3eb0(flag)
flag = csub_8d8cd37f(flag)
flag = digsub_bbf1a156(flag)
flag = chmul_afd7fea6(flag)
flag = chmul_d5ba6298(flag)
flag = shuffle_6c33ee33(flag)
flag = chmul_398837e8(flag)
flag = add_278192d9(flag)
flag = cxor_ed3b1b28(flag)
flag = sub_6bf5673d(flag)
flag = cmul_8ce7a691(flag)
flag = chsub_f27f3438(flag)
flag = csub_83d96569(flag)
flag = sub_e9895f44(flag)
flag = csub_4a29a9b1(flag)
flag = cxor_0e49988d(flag)
flag = csub_656995cb(flag)
flag = shuffle_e666492b(flag)
flag = cmul_da51d310(flag)
flag = cadd_03a33025(flag)
flag = xor_4644c8d4(flag)
flag = chunk_8476d997(flag)
flag = csub_c5965200(flag)
flag = digsub_6e4a7a18(flag)
flag = cmul_dc6ecbe6(flag)
flag = mul_7fa6ac59(flag)
flag = chadd_bd55be6b(flag)
flag = chadd_7c5f1cde(flag)
flag = chsub_bae85472(flag)
flag = chadd_4a09bd0d(flag)
flag = digsub_262ebaa4(flag)
flag = cmul_00fd6c30(flag)
flag = add_9670343c(flag)
flag = chadd_79e35c1e(flag)
flag = xor_ba1d287c(flag)
flag = cmul_ea21bbf8(flag)
flag = chmul_f5416998(flag)
flag = chmul_882a927d(flag)
flag = mul_4de4594c(flag)
flag = cadd_775bd2a3(flag)
flag = cmul_3dfa51d9(flag)
flag = chxor_ea20e7b5(flag)
flag = chmul_522be87f(flag)
flag = shuffle_7c9553cb(flag)
flag = chxor_b64d0435(flag)
flag = chsub_1a499bac(flag)
flag = cxor_bfb33206(flag)
flag = chsub_36aaf90a(flag)
flag = digsub_225591cf(flag)
flag = add_6300f0c0(flag)
flag = cadd_509c46a1(flag)
flag = csub_5eadc310(flag)
flag = cxor_d1f287be(flag)
flag = add_bc7653a1(flag)
flag = csub_9856c97f(flag)
flag = sub_ac9927d6(flag)
flag = cxor_da9ff7d9(flag)
flag = add_3e1e2c0b(flag)
flag = digsub_ff82e274(flag)
flag = xor_ddf28b31(flag)
flag = cmul_aaa17c90(flag)
flag = chxor_c8d60001(flag)
flag = shuffle_de4afce0(flag)
flag = chmul_db134c2c(flag)
flag = chxor_ea027ec2(flag)
flag = chxor_da81821a(flag)
flag = add_5dfc4b74(flag)
flag = chadd_7bc2adef(flag)
flag = chadd_14d93540(flag)
flag = chsub_77fcdd6e(flag)
flag = cxor_86de55f2(flag)
flag = add_1ddc8330(flag)
flag = chmul_c4c465cb(flag)
flag = chsub_71c61f9b(flag)
flag = cmul_f65d51e7(flag)
flag = mul_36a4bfa0(flag)
flag = chsub_e93fd882(flag)
flag = cxor_060ce4e2(flag)
flag = sub_a244688a(flag)
flag = cadd_0fb9e0bd(flag)
flag = chadd_b29ed32e(flag)
flag = shuffle_2a77ed9b(flag)
flag = add_c176d98f(flag)
flag = chmul_26b6373e(flag)
flag = digsub_f2fb52b7(flag)
flag = digsub_7c2a7053(flag)
flag = xor_ccce8b68(flag)
flag = chxor_09e2622c(flag)
flag = csub_b56c06db(flag)
flag = chmul_05459301(flag)
flag = cxor_ccd49eb2(flag)
flag = xor_2b415907(flag)
flag = chsub_3e828f05(flag)
flag = chsub_e20ff930(flag)
flag = csub_b08e7ba7(flag)
flag = cmul_5f2f8cea(flag)
flag = chsub_ad24fefb(flag)
flag = chxor_ce07c0ad(flag)
flag = shuffle_e6522329(flag)
flag = digsub_79a3f207(flag)
flag = cmul_0bb3391d(flag)
flag = chsub_38e8f84c(flag)
flag = cxor_719205d0(flag)
flag = digsub_081fcfe8(flag)
flag = mul_386487fa(flag)
flag = cxor_e7839ec0(flag)
flag = chxor_f274337d(flag)
flag = chsub_0642b6ad(flag)
flag = cxor_7bdcbf55(flag)
flag = cmul_4172328f(flag)
flag = cmul_8ef7a9fc(flag)
flag = chxor_14176db9(flag)
flag = chxor_b212e95c(flag)
flag = chxor_7b570606(flag)
flag = chunk_95566664(flag)
flag = cxor_93784217(flag)
flag = csub_daf0877b(flag)
flag = chmul_47e5352e(flag)
flag = shuffle_c51a19df(flag)
flag = xor_c1194f5a(flag)
flag = cxor_93784217(flag)
flag = cadd_bf38d005(flag)
flag = xor_d4b3bf17(flag)
flag = cadd_626b1801(flag)
flag = cmul_ac2fe6b4(flag)
flag = chunk_f1e74b7b(flag)
flag = shuffle_467b8ca7(flag)
flag = chmul_1bd08914(flag)
flag = cmul_5bbd0126(flag)
flag = mul_947580cb(flag)
flag = digsub_c4e4d709(flag)
flag = chunk_d09c17de(flag)
flag = digsub_093ca952(flag)
flag = shuffle_823fa35f(flag)
flag = xor_b0ff6bbd(flag)
flag = csub_1f106834(flag)
flag = chsub_de16135d(flag)
flag = chunk_4bf6bdc4(flag)
flag = chxor_e11d30ee(flag)
flag = chmul_decbe9f3(flag)
flag = cmul_72112381(flag)
flag = csub_b73a0cb6(flag)
flag = chsub_62a8f1cd(flag)
flag = xor_11dd9cd2(flag)
flag = csub_a667ebea(flag)
flag = shuffle_28f1a858(flag)
flag = cadd_65434b8c(flag)
flag = cxor_871a2d7f(flag)
flag = add_00eb45a8(flag)
flag = chmul_9d6b502f(flag)
flag = cxor_892833c6(flag)
flag = chunk_c2186f8f(flag)
flag = shuffle_2a813d89(flag)
flag = sub_a10ca0c8(flag)
flag = digsub_f316d9e1(flag)
flag = cadd_15b9e74b(flag)
flag = sub_bbf06d64(flag)
flag = chxor_595823d4(flag)
flag = sub_a9414276(flag)
flag = cadd_02aec3ae(flag)
flag = cadd_ba5550aa(flag)
flag = chmul_1a3d7c8c(flag)
flag = cmul_b6dff247(flag)
flag = chunk_dadea384(flag)
flag = sub_3145bf03(flag)
flag = sub_43f562fe(flag)
flag = shuffle_41eb3e26(flag)
flag = xor_50156ac2(flag)
flag = csub_79c7fc2e(flag)
flag = xor_11dd9cd2(flag)
flag = cmul_3c18a69a(flag)
flag = chadd_8d7aa344(flag)
flag = csub_cd81496c(flag)
flag = chsub_aebdb774(flag)
flag = cxor_37164c6f(flag)
flag = cxor_bfb33206(flag)
flag = cmul_b358c3b3(flag)
flag = chunk_4d08c9d5(flag)
flag = sub_468e1495(flag)
flag = chunk_bdaa57c3(flag)
flag = add_12e64206(flag)
flag = cxor_07785927(flag)
flag = sub_d3158d9a(flag)
flag = chsub_3832a22b(flag)
flag = xor_028e2ac0(flag)
flag = csub_ad5db692(flag)
flag = chunk_aac2455e(flag)
flag = mul_a2581ad1(flag)
flag = chsub_a9bb41f7(flag)
flag = cxor_a9c59f97(flag)
flag = csub_d3a63092(flag)
flag = chsub_76a99240(flag)
flag = add_39899af6(flag)
flag = xor_b59cd77f(flag)
flag = xor_3366a9d3(flag)
flag = chsub_b942a4e6(flag)
flag = xor_ac6e82c0(flag)
flag = cadd_d62d0fdd(flag)
flag = sub_753032fe(flag)
flag = sub_a62e014f(flag)
flag = chxor_3972d07b(flag)
flag = cmul_3c96ba6e(flag)
flag = xor_78429cb3(flag)
flag = chxor_1c95a906(flag)
flag = sub_f1ab5525(flag)
flag = cxor_a4885bca(flag)
flag = chsub_a81063be(flag)
flag = chmul_227b1b2a(flag)
flag = xor_214fe10e(flag)
flag = sub_79391e33(flag)
flag = cadd_130f7b9b(flag)
flag = cmul_02507e59(flag)
flag = chsub_b60cec96(flag)
flag = chadd_3a6ba43e(flag)
flag = cxor_f87a3a8a(flag)
flag = chxor_d44107b6(flag)
flag = digsub_9b074471(flag)
flag = sub_be3b1a5a(flag)
flag = chunk_64907dea(flag)
flag = chadd_069e430a(flag)
flag = shuffle_7c86708c(flag)
flag = xor_b2f63512(flag)
flag = cxor_41764223(flag)
flag = cadd_c2e41a30(flag)
flag = xor_6495a383(flag)
flag = chsub_dbb4ae01(flag)
flag = cmul_dce80096(flag)
flag = chadd_2a11532c(flag)
flag = csub_1ae697ba(flag)
flag = digsub_2ab90ae8(flag)
flag = chsub_f09042f0(flag)
flag = add_da9b8954(flag)
flag = cmul_16d7f1e9(flag)
flag = add_aae6cc04(flag)
flag = cadd_838fe20a(flag)
flag = cxor_1330b89b(flag)
flag = chsub_244387c4(flag)
flag = digsub_af816cb4(flag)
flag = chunk_607218b8(flag)
flag = cxor_57e03f14(flag)
flag = chadd_1353d1ce(flag)
flag = chadd_d6631ab3(flag)
flag = shuffle_987eaf21(flag)
flag = cmul_38593f30(flag)
flag = xor_d4b3bf17(flag)
flag = chadd_c58d2df9(flag)
flag = shuffle_98accf0f(flag)
flag = chxor_69637723(flag)
flag = cxor_8d584727(flag)
flag = chadd_fe246cb1(flag)
flag = shuffle_2ad93819(flag)
flag = cxor_f4744f0e(flag)
flag = chadd_1475aaba(flag)
flag = chxor_3bea6df8(flag)
flag = cadd_3deee9ba(flag)
flag = chmul_351f9d39(flag)
flag = add_6c75725b(flag)
flag = sub_8b45b630(flag)
flag = csub_74a6e474(flag)
flag = add_e07c15bd(flag)
flag = chadd_b13cc8ae(flag)
flag = cmul_2badfc5b(flag)
flag = cmul_b57f5cfc(flag)
flag = cmul_c648ff5d(flag)
flag = shuffle_ee0a30fd(flag)
flag = csub_30ac2fb9(flag)
flag = csub_d37a1bf3(flag)
flag = mul_b2b433f9(flag)
flag = sub_dd4a6aab(flag)
flag = chadd_932febde(flag)
flag = cmul_b6dff247(flag)
flag = xor_90c0a051(flag)
flag = cxor_7628c3fc(flag)
flag = cxor_7be08bad(flag)
flag = cmul_93ebf751(flag)
flag = shuffle_c71df508(flag)
flag = chunk_28acccb3(flag)
flag = mul_224595eb(flag)
flag = cmul_829e8d09(flag)
flag = mul_60a92fff(flag)
flag = add_1269779e(flag)
flag = add_b4b55578(flag)
flag = cadd_a6482f91(flag)
flag = xor_310c33bd(flag)
flag = chsub_063a5399(flag)
flag = cadd_bf48a745(flag)
flag = cxor_df97c526(flag)
flag = chadd_65a80365(flag)
flag = chxor_3972d07b(flag)
flag = chmul_9522f239(flag)
flag = chadd_2fa4c3aa(flag)
flag = chadd_4b0b608a(flag)
flag = chmul_cee9aae6(flag)
flag = digsub_6afbfca8(flag)
flag = sub_f1ab5525(flag)
flag = mul_386487fa(flag)
flag = shuffle_2693d526(flag)
flag = digsub_800f76fb(flag)
flag = cmul_ad3ab72b(flag)
flag = chxor_ae76ed5a(flag)
flag = chunk_90824d65(flag)
flag = chsub_e6873048(flag)
flag = xor_f904d9a6(flag)
flag = shuffle_82fd1e74(flag)
flag = chmul_5dac5c0c(flag)
flag = add_eee1f715(flag)
flag = chunk_be89d48a(flag)
flag = chadd_bd55be6b(flag)
flag = chadd_ced5aac5(flag)
flag = chsub_b335ae97(flag)
flag = chsub_3832a22b(flag)
flag = sub_5e615eab(flag)
flag = sub_a2aa3ba7(flag)
flag = chsub_32f5910d(flag)
flag = xor_0b406c7d(flag)
flag = csub_daf0877b(flag)
flag = shuffle_def3ecab(flag)
flag = digsub_bbf1a156(flag)
flag = chxor_c8d60001(flag)
flag = cmul_880f9e67(flag)
flag = chxor_e3309cca(flag)
flag = sub_c24992e8(flag)
flag = chmul_068c4ae9(flag)
flag = shuffle_2693d526(flag)
flag = sub_665d3f8a(flag)
flag = digsub_b6993817(flag)
flag = sub_5b169d21(flag)
flag = xor_e8c8896d(flag)
flag = xor_f68eb9b6(flag)
flag = shuffle_3a497842(flag)
flag = cxor_182bdecc(flag)
flag = mul_6906b8ec(flag)
flag = chadd_d7cdb5da(flag)
flag = cmul_c9b92e36(flag)
flag = xor_5250859e(flag)
flag = cxor_f744fca4(flag)
flag = sub_32cc1a97(flag)
flag = chunk_36ffef9b(flag)
flag = cadd_5c3e86ea(flag)
flag = sub_dfb02634(flag)
flag = digsub_f316d9e1(flag)
flag = cxor_ff935c5e(flag)
flag = chadd_eb195385(flag)
flag = mul_36bc3f6e(flag)
flag = csub_c59b429f(flag)
flag = chxor_036cfe7a(flag)
flag = chunk_b195e92b(flag)
flag = cadd_2b51aac8(flag)
flag = chunk_e808502e(flag)
flag = cmul_ac2fe6b4(flag)
flag = cxor_ec93c298(flag)
flag = sub_60d9cd7a(flag)
flag = cadd_caf674cf(flag)
flag = chunk_205e30c0(flag)
flag = cmul_32eb4436(flag)
flag = cxor_f4c61b89(flag)
flag = chxor_57e0c9f1(flag)
flag = xor_5c4520e3(flag)
flag = cxor_15061824(flag)
flag = cmul_bb576c8f(flag)
flag = csub_9033c843(flag)
flag = digsub_324078ea(flag)
flag = cxor_ebeaa56d(flag)
flag = chsub_38be16e5(flag)
flag = xor_446fe190(flag)
flag = mul_40c0f816(flag)
flag = chunk_be4b9bb8(flag)
flag = xor_35062400(flag)
flag = digsub_bbf1a156(flag)
flag = shuffle_de4afce0(flag)
flag = sub_4d3e2340(flag)
flag = chsub_27343013(flag)
flag = sub_5d7857eb(flag)
flag = xor_70e5e457(flag)
flag = chsub_3bf8b0c8(flag)
flag = chxor_471bdc7e(flag)
flag = shuffle_506b50c8(flag)
flag = chsub_004b681b(flag)
flag = chxor_e1dd333b(flag)
flag = chunk_01c25ee4(flag)
flag = digsub_cca1638e(flag)
flag = csub_c9f7e43b(flag)
flag = xor_eca7972f(flag)
flag = chxor_db678917(flag)
flag = chadd_1ed1777e(flag)
flag = sub_58eb1409(flag)
flag = shuffle_68d954ec(flag)
flag = cadd_95ea1de0(flag)
flag = cmul_87fd4468(flag)
flag = chunk_44d36e8a(flag)
flag = chmul_e08d8ea1(flag)
flag = chunk_4099648b(flag)
flag = chxor_1272b4b3(flag)
flag = sub_dbea1d09(flag)
flag = chmul_221b0f47(flag)
flag = chmul_b5cd94ca(flag)
flag = mul_194ab633(flag)
flag = mul_cba48e57(flag)
flag = digsub_aecf9a86(flag)
flag = shuffle_5ea1f654(flag)
flag = cmul_2f1c4ba6(flag)
flag = csub_ad630998(flag)
flag = chunk_95566664(flag)
flag = mul_a47d4993(flag)
flag = sub_a2adabad(flag)
flag = chsub_8dd5ab11(flag)
flag = digsub_8224944b(flag)
flag = cadd_0228ee52(flag)
flag = chsub_b942a4e6(flag)
flag = mul_8e78cc44(flag)
flag = sub_91d3d73f(flag)
flag = chadd_8cbc6e8c(flag)
flag = shuffle_496b2c86(flag)
flag = digsub_ec34bd78(flag)
flag = chadd_186dd996(flag)
flag = csub_ef41ffb0(flag)
flag = chunk_59cbae4c(flag)
flag = cxor_fe5870fc(flag)
flag = digsub_88a027ca(flag)
flag = xor_2cce1391(flag)
flag = chadd_c8951761(flag)
flag = chunk_aad9a6a9(flag)
flag = cxor_da9ff7d9(flag)
flag = mul_224595eb(flag)
flag = chunk_e20352cb(flag)
flag = chmul_663d5067(flag)
flag = digsub_a580518f(flag)
flag = chunk_01c25ee4(flag)
flag = cadd_f59f3dd1(flag)
flag = mul_b97eacc4(flag)
flag = chadd_0ef59fd4(flag)
flag = cxor_73c5cfae(flag)
flag = csub_24fb716e(flag)
flag = add_8357f559(flag)
flag = chxor_6e6160e1(flag)
flag = shuffle_f554897b(flag)
flag = chxor_e3309cca(flag)
flag = cxor_f5f56306(flag)
flag = cxor_a7504c76(flag)
flag = chmul_048c1718(flag)
flag = shuffle_0bc785b3(flag)
flag = chsub_c4c05ce8(flag)
flag = cxor_9eab5098(flag)
flag = chxor_e1dd333b(flag)
flag = cmul_63b57c2a(flag)
flag = add_f4bd902e(flag)
flag = sub_31290fb7(flag)
flag = chmul_dac3ab2b(flag)
flag = chunk_c761d499(flag)
flag = cxor_d05587bc(flag)
flag = csub_d3a63092(flag)
flag = chmul_bd4ac691(flag)
flag = chadd_0badfcf5(flag)
flag = mul_897a634a(flag)
flag = shuffle_ac6dd478(flag)
flag = add_28d6777c(flag)
flag = chunk_d7f6d493(flag)
flag = cmul_87dca596(flag)
flag = chmul_28162caa(flag)
flag = add_3fa4a716(flag)
flag = cmul_971d0d43(flag)
flag = chadd_163fc505(flag)
flag = xor_31c0451b(flag)
flag = chsub_b543d1d6(flag)
flag = xor_49a34b54(flag)
flag = chunk_aad9a6a9(flag)
flag = cadd_a2760089(flag)
flag = sub_a40cb760(flag)
flag = chadd_a5fda7f8(flag)
flag = chadd_d7cdb5da(flag)
flag = shuffle_d70b85e8(flag)
flag = cmul_0ee39eec(flag)
flag = mul_89bed2ea(flag)
flag = shuffle_0a4f92ab(flag)
flag = digsub_2f2a8750(flag)
flag = chxor_ea20e7b5(flag)
flag = chmul_414bc877(flag)
flag = cxor_ed3b1b28(flag)
flag = xor_92fb1dc0(flag)
flag = chmul_b5dab014(flag)
flag = digsub_081fcfe8(flag)
flag = chxor_3c678c19(flag)
flag = chxor_56abb2e0(flag)
flag = digsub_b40bee06(flag)
flag = chmul_746a3788(flag)
flag = chunk_59cbae4c(flag)
flag = xor_39a60514(flag)
flag = xor_e9e26f3f(flag)
flag = shuffle_7ccfcf66(flag)
flag = cxor_0e49988d(flag)
flag = xor_032ec723(flag)
flag = cadd_d6acbbb6(flag)
flag = digsub_f0bd3d90(flag)
flag = chxor_24ff0dd9(flag)
flag = chadd_896dc902(flag)
flag = chxor_665eed2c(flag)
flag = mul_94dd1b49(flag)
flag = chxor_aa8e1df9(flag)
flag = cadd_7db59ff9(flag)
flag = cadd_0208daec(flag)
flag = chunk_b0d8cc2d(flag)
flag = cmul_85b39864(flag)
flag = chunk_8356e7c8(flag)
flag = cmul_29ff7c2b(flag)
flag = sub_4efcb7e6(flag)
flag = digsub_74f80d9b(flag)
flag = digsub_67b6032a(flag)
flag = cxor_16cc8dc6(flag)
flag = add_f22a99f3(flag)
flag = digsub_4c6a11c2(flag)
flag = chmul_fc1bd11c(flag)
flag = mul_0cb6e2cc(flag)
flag = xor_3481ed60(flag)
flag = chsub_3f26a959(flag)
flag = digsub_9bb50253(flag)
flag = shuffle_c433a286(flag)
flag = add_f22a99f3(flag)
flag = cadd_428d6ecc(flag)
flag = shuffle_41b9328e(flag)
flag = mul_74c39d4d(flag)
flag = chmul_22d64a0f(flag)
flag = mul_87b720f5(flag)
flag = chmul_e6742997(flag)
flag = chunk_cb2fa615(flag)
flag = add_fc581b51(flag)
flag = cadd_49e18892(flag)
flag = chunk_f037e109(flag)
flag = sub_3c288b1c(flag)
flag = sub_3935d689(flag)
flag = add_9188b7d9(flag)
flag = chunk_1d45076c(flag)
flag = digsub_5c02cf5d(flag)
flag = mul_6d210a06(flag)
flag = cxor_7628c3fc(flag)
flag = csub_83d96569(flag)
flag = chsub_99c9e6ed(flag)
flag = cxor_b93aeb3d(flag)
flag = sub_29f5a027(flag)
flag = chadd_6b1daeac(flag)
flag = xor_46b7d1d1(flag)
flag = add_278192d9(flag)
flag = shuffle_692c856d(flag)
flag = chmul_991b7825(flag)
flag = cadd_ecff1ada(flag)
flag = chadd_61a15596(flag)
flag = chsub_e4b39d3b(flag)
flag = add_1039dc95(flag)
flag = csub_9bf22fee(flag)
flag = chadd_14d93540(flag)
flag = chxor_27993531(flag)
flag = xor_70e5e457(flag)
flag = chsub_3af5214b(flag)
flag = chmul_e2b38bce(flag)
flag = xor_a175d05f(flag)
flag = chunk_b26605b9(flag)
flag = add_b0406f7d(flag)
flag = chadd_5d64f99d(flag)
flag = cadd_57a83163(flag)
flag = sub_656aa559(flag)
flag = chunk_af869716(flag)
flag = xor_3b14c897(flag)
flag = shuffle_47929ded(flag)
flag = cxor_1c819fcf(flag)
flag = chsub_e0a5b7b9(flag)
flag = csub_087d6e8e(flag)
flag = mul_6fc04a8d(flag)
flag = digsub_2b3a8dfd(flag)
flag = cadd_6d7e714e(flag)
flag = digsub_907a9a8a(flag)
flag = cxor_69cd9f4e(flag)
flag = cmul_27f36b54(flag)
flag = cmul_cb30aead(flag)
flag = chxor_37bb6be2(flag)
flag = chsub_2b33e666(flag)
flag = chadd_79e35c1e(flag)
flag = chsub_894d41c7(flag)
flag = chsub_6acb4ef8(flag)
flag = mul_fc6ac804(flag)
flag = chmul_0a614bf5(flag)
flag = chadd_3d456bc0(flag)
flag = cmul_a0ab0dc2(flag)
flag = digsub_574e8941(flag)
flag = chsub_6ff2c5bf(flag)
flag = shuffle_7eddc63c(flag)
flag = sub_541963fb(flag)
flag = digsub_20744944(flag)
flag = digsub_ab800369(flag)
flag = digsub_081fcfe8(flag)
flag = digsub_5e7cd6f6(flag)
flag = sub_a62e014f(flag)
flag = shuffle_dc438735(flag)
flag = cxor_8ff25e39(flag)
flag = add_6e59afd0(flag)
flag = chxor_18337976(flag)
flag = chsub_3679cdb7(flag)
flag = cxor_296a856b(flag)
flag = chmul_d6a4e65e(flag)
flag = shuffle_e56a1778(flag)
flag = sub_4d3e2340(flag)
flag = add_33350535(flag)
flag = chsub_84e2be83(flag)
flag = add_2361d033(flag)
flag = digsub_5f03912e(flag)
flag = digsub_7c2a7053(flag)
flag = digsub_ecaa949d(flag)
flag = cxor_15061824(flag)
flag = xor_4c95d03b(flag)
flag = chunk_7efebb77(flag)
flag = chunk_dfb92a41(flag)
flag = xor_d30c564f(flag)
flag = add_b0ac8236(flag)
flag = chadd_55d11883(flag)
flag = shuffle_a2ef4315(flag)
flag = chsub_d228accf(flag)
flag = cmul_fa2c1e3a(flag)
flag = cadd_9406ad37(flag)
flag = csub_a60ad993(flag)
flag = cxor_6938f43d(flag)
flag = digsub_3d37a56f(flag)
flag = chsub_e1699c5c(flag)
flag = digsub_d5cf3761(flag)
flag = cadd_5afd7d69(flag)
flag = chxor_ca9732e1(flag)
flag = chxor_49e5796a(flag)
flag = chsub_5a5cbf95(flag)
flag = csub_8a92b818(flag)
flag = sub_a091f45e(flag)
flag = shuffle_86331a49(flag)
flag = chxor_da354166(flag)
flag = cadd_8a476763(flag)
flag = cadd_93747557(flag)
flag = add_664be5fd(flag)
flag = chunk_bd36eb6a(flag)
flag = digsub_39cc5a0e(flag)
flag = sub_0bdcedb0(flag)
flag = digsub_81358f03(flag)
flag = shuffle_7eddc63c(flag)
flag = digsub_ef43a4f8(flag)
flag = cxor_ce58803c(flag)
flag = chadd_fe246cb1(flag)
flag = chadd_967b4961(flag)
flag = cxor_30674cf4(flag)
flag = cadd_bf6aacf5(flag)
flag = sub_f3be4e25(flag)
flag = chmul_998ab1ea(flag)
flag = digsub_ef3c36c5(flag)
flag = cxor_bac2ca1f(flag)
flag = add_4235831f(flag)
flag = shuffle_2d9fffb5(flag)
flag = xor_35062400(flag)
flag = mul_095b48a3(flag)
flag = cadd_6f6cf5cb(flag)
flag = cmul_0b0ac64f(flag)
flag = chadd_ec0fef0e(flag)
flag = chunk_26bea2d1(flag)
flag = sub_29f5a027(flag)
flag = cadd_ce6a8f1f(flag)
flag = mul_a337ba89(flag)
flag = cmul_bac2ec72(flag)
flag = cxor_a7504c76(flag)
flag = digsub_61dd20a0(flag)
flag = chxor_b1f5dc0d(flag)
flag = chunk_aeecc76a(flag)
flag = chadd_db3363a7(flag)
flag = chadd_24def8ad(flag)
flag = chsub_bf5cdb36(flag)
flag = add_df9616a0(flag)
flag = chmul_ab54c89e(flag)
flag = chxor_041a698a(flag)
flag = chxor_a120d278(flag)
flag = chxor_b9b02bcc(flag)
flag = csub_4660584b(flag)
flag = chsub_4c009b94(flag)
flag = shuffle_ffe4fef7(flag)
flag = shuffle_6c9a670f(flag)
flag = csub_737d4c67(flag)
flag = chxor_27fd37e4(flag)
flag = digsub_504110f5(flag)
flag = cadd_69879170(flag)
flag = chadd_a331e2c1(flag)
flag = chsub_bae85472(flag)
flag = cxor_16f4270b(flag)
flag = shuffle_a7b0cb57(flag)
flag = chsub_dd5b964f(flag)
flag = chxor_69637723(flag)
flag = xor_e1acd3bf(flag)
flag = cmul_27f36b54(flag)
flag = digsub_f8bfc612(flag)
flag = sub_1866fa1c(flag)
flag = cadd_640c9c4d(flag)
flag = chunk_7efebb77(flag)
flag = chxor_23198c86(flag)
flag = chmul_88eb44fc(flag)
flag = cadd_210c6dc4(flag)
flag = sub_8fbf82f1(flag)
flag = mul_d952127d(flag)
flag = digsub_18fc0c9e(flag)
flag = chunk_29281be2(flag)
flag = chxor_44d65ee9(flag)
flag = cadd_6a1ee984(flag)
flag = mul_6a63acf6(flag)
flag = chadd_151f0f0e(flag)
flag = chadd_d7b62183(flag)
flag = chmul_79e6dd5d(flag)
flag = cxor_2eec2815(flag)
flag = cxor_ef4e4e70(flag)
flag = chunk_4a721cb6(flag)
flag = shuffle_fe7bcc78(flag)
flag = cxor_f929f224(flag)
flag = csub_22d4400c(flag)
flag = cadd_d1616fc6(flag)
flag = xor_0ade2d1f(flag)
flag = xor_9fab62d4(flag)
flag = cmul_06256c90(flag)
flag = chxor_4447550e(flag)
flag = chunk_faeac0c7(flag)
flag = chmul_998ab1ea(flag)
flag = chxor_b64d0435(flag)
flag = add_885196c7(flag)
flag = digsub_7e09e05c(flag)
flag = chunk_4a721cb6(flag)
flag = digsub_80e4e5c7(flag)
flag = chmul_49ccc560(flag)
flag = cadd_1aff9833(flag)
flag = chxor_f396db26(flag)
flag = chadd_c8c1b7ad(flag)
flag = shuffle_4e66918e(flag)
flag = chsub_258a5c14(flag)
flag = chadd_7c0c3e14(flag)
flag = sub_a9414276(flag)
flag = digsub_81358f03(flag)
flag = digsub_af816cb4(flag)
flag = chsub_9c3ae2d0(flag)
flag = digsub_99f3c205(flag)
flag = mul_dd59ae79(flag)
flag = cmul_b358c3b3(flag)
flag = digsub_093ca952(flag)
flag = digsub_c4e4d709(flag)
flag = cadd_bbf43e6f(flag)
flag = cadd_ba5550aa(flag)
flag = mul_4bd300c9(flag)
flag = digsub_262ebaa4(flag)
flag = csub_7abf52ba(flag)
flag = chsub_dbf9111e(flag)
flag = csub_24fb716e(flag)
flag = chmul_12872986(flag)
flag = chxor_277a4952(flag)
flag = shuffle_40f99305(flag)
flag = cadd_7db59ff9(flag)
flag = xor_e1acd3bf(flag)
flag = digsub_ec12ae2a(flag)
flag = cxor_c321d96d(flag)
flag = add_1b3e26ab(flag)
flag = xor_24b008b9(flag)
flag = xor_4e43f7ea(flag)
flag = shuffle_3113cb7a(flag)
flag = cmul_dce80096(flag)
flag = chmul_1bf400c7(flag)
flag = sub_00bb1bb8(flag)
flag = shuffle_b22f1c56(flag)
flag = cmul_93bd1510(flag)
flag = cadd_074e39fc(flag)
flag = add_ebcc13ce(flag)
flag = csub_5e8b3577(flag)
flag = digsub_06f2e415(flag)
flag = digsub_b93022b5(flag)
flag = chxor_a2b08b13(flag)
flag = add_664be5fd(flag)
flag = sub_be3b1a5a(flag)
flag = mul_60fbc31e(flag)
flag = xor_4a69189b(flag)
flag = sub_b4f35853(flag)
flag = chxor_56abb2e0(flag)
flag = csub_5c981857(flag)
flag = cxor_ed3b1b28(flag)
flag = add_ca8439ba(flag)
flag = xor_abf7f988(flag)
flag = csub_97ae1a88(flag)
flag = chadd_52f847ab(flag)
flag = sub_ee08aad9(flag)
flag = chmul_9b06c74b(flag)
flag = chxor_be8a1cce(flag)
flag = chsub_27ecb709(flag)
flag = chxor_a8789254(flag)
flag = chsub_0063bc32(flag)
flag = sub_d37c6c7c(flag)
flag = chmul_522be87f(flag)
flag = cadd_9406ad37(flag)
flag = xor_31c0451b(flag)
flag = mul_d900d8ed(flag)
flag = chunk_22f90678(flag)
flag = chmul_9fbf4859(flag)
flag = chadd_93c92f11(flag)
flag = sub_a0d3d89e(flag)
flag = cadd_838fe20a(flag)
flag = chmul_a32f41a3(flag)
flag = chxor_46d80275(flag)
flag = cadd_fe8798b7(flag)
flag = chsub_3bf8b0c8(flag)
flag = mul_eb201421(flag)
flag = sub_a62e014f(flag)
flag = cmul_f0b91a4d(flag)
flag = chadd_0124a79d(flag)
flag = chunk_d9ce60f8(flag)
flag = shuffle_8e2c57eb(flag)
flag = shuffle_edb8a938(flag)
flag = cmul_615b3bac(flag)
flag = digsub_06f2e415(flag)
flag = chadd_d8ce38a5(flag)
flag = cadd_caab3e28(flag)
flag = cmul_ed0fd163(flag)
flag = xor_3994c2ad(flag)
flag = cmul_85b39864(flag)
flag = chxor_da22b4fb(flag)
flag = cxor_eaaa00cc(flag)
flag = chxor_de63f975(flag)
flag = chadd_6b07665a(flag)
flag = chmul_28162caa(flag)
flag = chmul_f1598a09(flag)
flag = mul_fac797c0(flag)
flag = mul_62a37d48(flag)
flag = chadd_2f4760f5(flag)
flag = digsub_0c60c240(flag)
flag = mul_9d0c3682(flag)
flag = xor_b5a69ced(flag)
flag = chunk_95566664(flag)
flag = sub_9f4055fc(flag)
flag = sub_40f8346a(flag)
flag = mul_652ee2e0(flag)
flag = shuffle_39351a8a(flag)
flag = chadd_2a7b5687(flag)
flag = xor_df31e322(flag)
flag = cmul_5ceeaceb(flag)
flag = mul_a47d4993(flag)
flag = chxor_27fd37e4(flag)
flag = shuffle_0736ce82(flag)
flag = shuffle_f4bbf14d(flag)
flag = chsub_f3e2875f(flag)
flag = chsub_84e9e2bd(flag)
flag = digsub_54057ff2(flag)
flag = cmul_8d626e12(flag)
flag = chxor_d7d9bf32(flag)
flag = chsub_134ff6dd(flag)
flag = chadd_0232afc0(flag)
flag = chxor_471bdc7e(flag)
flag = chunk_352f49d6(flag)
flag = sub_a148160b(flag)
flag = chunk_4099648b(flag)
flag = digsub_bd11b809(flag)
flag = xor_4644c8d4(flag)
flag = shuffle_ac6dd478(flag)
flag = sub_88400353(flag)
flag = chxor_38018a02(flag)
flag = chunk_a8577417(flag)
flag = cmul_7dfade82(flag)
flag = chadd_8cbc6e8c(flag)
flag = sub_a74b5cf9(flag)
flag = mul_dd59ae79(flag)
flag = csub_44ad5428(flag)
flag = digsub_0ea92eac(flag)
flag = sub_5e069f47(flag)
flag = cadd_53f37c7e(flag)
flag = digsub_d70c6f19(flag)
flag = chxor_b041b00c(flag)
flag = chadd_069e430a(flag)
flag = sub_e0ca897d(flag)
flag = chsub_714e8ec9(flag)
flag = chxor_ffe97ebb(flag)
flag = chmul_49e5e1c7(flag)
flag = digsub_46d7afa7(flag)
flag = cadd_294f2792(flag)
flag = chmul_384134ae(flag)
flag = chsub_2d19348f(flag)
flag = digsub_20744944(flag)
flag = add_886697c1(flag)
flag = xor_c0655006(flag)
flag = xor_df70e045(flag)
flag = sub_d4145101(flag)
flag = cadd_c1763a61(flag)
flag = cmul_9e6c0fb6(flag)
flag = digsub_6d16b628(flag)
flag = shuffle_28f1a858(flag)
flag = xor_18093134(flag)
flag = chunk_6fa30167(flag)
flag = csub_61350fa4(flag)
flag = chunk_be89d48a(flag)
flag = chsub_4364daac(flag)
flag = chxor_d3897d6a(flag)
flag = shuffle_1ff845ef(flag)
flag = csub_564b5e2c(flag)
flag = chsub_aebdb774(flag)
flag = mul_194ab633(flag)
flag = digsub_a740a80e(flag)
flag = cmul_ff24f1b5(flag)
flag = cxor_695c7de2(flag)
flag = shuffle_2a87a3a3(flag)
flag = xor_a04b2880(flag)
flag = shuffle_b69552ce(flag)
flag = chsub_7178b8f3(flag)
flag = chmul_4e871d0b(flag)
flag = add_c1abafc2(flag)
flag = add_42869331(flag)
flag = cmul_3aff1e18(flag)
flag = cxor_695c7de2(flag)
flag = chadd_b3214236(flag)
flag = shuffle_204502b1(flag)
flag = chxor_cf80cd00(flag)
flag = chxor_bbac4066(flag)
flag = chadd_79e35c1e(flag)
flag = cxor_fa552213(flag)
flag = chxor_61629011(flag)
flag = digsub_af2d37bc(flag)
flag = chadd_61a15596(flag)
flag = mul_54b3dab3(flag)
flag = shuffle_6cc67bbf(flag)
flag = shuffle_f44f0fc5(flag)
flag = cmul_4381cbd5(flag)
flag = chmul_680cf464(flag)
flag = cadd_e3f803ca(flag)
flag = mul_39856c8b(flag)
flag = csub_d6e694b3(flag)
flag = chsub_e20ff930(flag)
flag = digsub_636b7f9c(flag)
flag = chadd_b29ed32e(flag)
flag = digsub_ee34dc69(flag)
flag = csub_70a8e307(flag)
flag = chadd_31ab6514(flag)
flag = add_b6dbb476(flag)
flag = xor_3d8de492(flag)
flag = cmul_8ef7a9fc(flag)
flag = cmul_45d4d761(flag)
flag = cmul_ddd178e6(flag)
flag = shuffle_7bf7a2c9(flag)
flag = chxor_30be5eb3(flag)
flag = chmul_05b6d674(flag)
flag = chxor_ddc3a6b5(flag)
flag = add_06c4c375(flag)
flag = add_a00a7d48(flag)
flag = xor_c0bb5777(flag)
flag = cmul_dedddbbd(flag)
flag = xor_e50d3684(flag)
flag = cadd_2b51aac8(flag)
flag = chunk_a763fb97(flag)
flag = shuffle_9eddde7b(flag)
flag = mul_8f7d3564(flag)
flag = shuffle_8c84166e(flag)
flag = chmul_07a19689(flag)
flag = cmul_ba8b037d(flag)
flag = mul_5500afcf(flag)
flag = chadd_d980e2e3(flag)
flag = chunk_3f96f374(flag)
flag = mul_6bdc88d2(flag)
flag = add_1dc9ccaa(flag)
flag = digsub_0410b672(flag)
flag = xor_dfe62c40(flag)
flag = chsub_3679cdb7(flag)
flag = cmul_cb30aead(flag)
flag = csub_a0c64190(flag)
flag = cmul_eae26d7e(flag)
flag = chsub_b591ca37(flag)
flag = cadd_2dd09d3d(flag)
flag = digsub_5513d3dd(flag)
flag = sub_04d98d74(flag)
flag = xor_3c5d07f5(flag)
flag = chadd_e1175475(flag)
flag = csub_fe63b620(flag)
flag = sub_05bc34d7(flag)
flag = xor_7d423e0f(flag)
flag = add_a00a7d48(flag)
flag = cmul_63f9fdde(flag)
flag = mul_70c4cf79(flag)
flag = chunk_524ad27b(flag)
flag = cadd_dd57ed89(flag)
flag = csub_088507c1(flag)
flag = xor_39a60514(flag)
flag = chsub_37756695(flag)
flag = chmul_b8c4917b(flag)
flag = shuffle_9cedec4d(flag)
flag = xor_b5a69ced(flag)
flag = digsub_c09c7211(flag)
flag = cmul_cb8500f8(flag)
flag = xor_64af3af1(flag)
flag = chxor_ce07c0ad(flag)
flag = xor_47cf200f(flag)
flag = sub_1a66408e(flag)
flag = sub_6fb5c242(flag)
flag = add_67af3ff4(flag)
flag = chadd_1feaf785(flag)
flag = chmul_a4bed1f5(flag)
flag = add_c0abe07c(flag)
flag = sub_9c3c91b4(flag)
flag = xor_78429cb3(flag)
flag = chadd_8f394b29(flag)
flag = xor_4c2f2b2e(flag)
flag = cmul_1c2bf9c2(flag)
flag = cmul_89d225a2(flag)
flag = chmul_18bbd248(flag)
flag = chxor_3569bd0b(flag)
flag = cadd_1521484b(flag)
flag = chunk_26bea2d1(flag)
flag = cadd_bf38d005(flag)
flag = chunk_c72fb6c4(flag)
flag = shuffle_0ca300ee(flag)
flag = cxor_c0bd96a1(flag)
flag = mul_9d4040eb(flag)
flag = cadd_0788aaad(flag)
flag = chunk_c47f2b0e(flag)
flag = chadd_12bc44e9(flag)
flag = chmul_e6614b6a(flag)
flag = xor_339b9a13(flag)
flag = add_204a88d5(flag)
flag = csub_0b2b5416(flag)
flag = add_204a88d5(flag)
flag = sub_b28bd4f8(flag)
flag = shuffle_f3858d75(flag)
flag = chadd_83134f29(flag)
flag = digsub_2f6deeb4(flag)
flag = mul_3feda191(flag)
flag = chmul_65689d19(flag)
flag = digsub_caab5c9d(flag)
flag = xor_ba1d287c(flag)
flag = digsub_f44f1764(flag)
flag = xor_9a3a96a8(flag)
flag = cxor_8549d8eb(flag)
flag = cadd_2a11e194(flag)
flag = csub_af6b6944(flag)
flag = cmul_d22b5acf(flag)
flag = shuffle_cb627e8c(flag)
flag = sub_085ded8f(flag)
flag = chsub_b9dc2f68(flag)
flag = shuffle_1a7b4aba(flag)
flag = sub_77f3b344(flag)
flag = shuffle_a3c6e740(flag)
flag = csub_395783d4(flag)
flag = chadd_a59f17f7(flag)
flag = xor_2f985cdb(flag)
flag = chxor_e5000f9b(flag)
flag = csub_34b73c2d(flag)
flag = digsub_172d24b0(flag)
flag = chxor_ea027ec2(flag)
flag = cadd_66bcc5a2(flag)
flag = shuffle_ffc10c41(flag)
flag = cadd_bf6aacf5(flag)
flag = sub_e97e1ac7(flag)
flag = xor_b5a69ced(flag)
flag = sub_f21c7d69(flag)
flag = digsub_78f5b7bb(flag)
flag = cmul_910def34(flag)
flag = chunk_f75e2f55(flag)
flag = cmul_606c6cc5(flag)
flag = xor_a1e6019f(flag)
flag = cmul_c53a95ce(flag)
flag = shuffle_f4cba7dd(flag)
flag = chsub_c5b0dbf8(flag)
flag = chunk_9d77353c(flag)
flag = mul_49d2ca13(flag)
flag = chadd_63faefcf(flag)
flag = shuffle_54e93000(flag)
flag = chmul_991b7825(flag)
flag = mul_04e23b1b(flag)
flag = cmul_148c07dc(flag)
flag = chunk_8476d997(flag)
flag = xor_3bff953a(flag)
flag = chmul_048c1718(flag)
flag = mul_53e2ce11(flag)
flag = chxor_18337976(flag)
flag = chsub_d07297d3(flag)
flag = csub_fda3f560(flag)
flag = chadd_0ef59fd4(flag)
flag = shuffle_3cf7a793(flag)
flag = chxor_e5000f9b(flag)
flag = cmul_bf506846(flag)
flag = chunk_dd75a83f(flag)
flag = chadd_91feb455(flag)
flag = shuffle_6fcd072c(flag)
flag = shuffle_c5e07151(flag)
flag = csub_8322948c(flag)
flag = chsub_d2de1fcc(flag)
flag = chsub_91d04f68(flag)
flag = chadd_5fc42fbd(flag)
flag = chadd_1fa30d24(flag)
flag = cmul_6ae52f53(flag)
flag = chxor_97c3e5f8(flag)
flag = sub_4b935f92(flag)
flag = xor_2cce1391(flag)
flag = chunk_13e026f7(flag)
flag = sub_0a7dad65(flag)
flag = cmul_cf6813e9(flag)
flag = digsub_6be19c93(flag)
flag = chunk_29281be2(flag)
flag = shuffle_496b2c86(flag)
flag = csub_642b1701(flag)
flag = cmul_ca71521f(flag)
flag = add_e696fc9f(flag)
flag = cadd_a6332778(flag)
flag = chmul_05b3201a(flag)
flag = xor_a35575ce(flag)
flag = shuffle_8a10d0b7(flag)
flag = xor_385da77c(flag)
flag = digsub_cd07c1c5(flag)
flag = chadd_969cf400(flag)
flag = digsub_899a9f6d(flag)
flag = add_306b249b(flag)
flag = chmul_d5be6ef1(flag)
flag = mul_9d0c3682(flag)
flag = cmul_75c87098(flag)
flag = mul_1a3b698e(flag)
flag = sub_d37c6c7c(flag)
flag = chmul_d909e81b(flag)
flag = shuffle_a6432e15(flag)
flag = sub_ba98e537(flag)
flag = sub_f31829a3(flag)
flag = cmul_892d62b0(flag)
flag = xor_cdbf869f(flag)
flag = chmul_7eb45a9e(flag)
flag = xor_ba1d287c(flag)
flag = chxor_72127666(flag)
flag = cmul_2a677be7(flag)
flag = chmul_44c9b2ed(flag)
flag = chsub_b796fd36(flag)
flag = cmul_e4155cf9(flag)
flag = chsub_dea76069(flag)
flag = chxor_65fb61d8(flag)
flag = add_ec1d658a(flag)
flag = chxor_0256cccb(flag)
flag = sub_b5dac8cd(flag)
flag = digsub_09d4f702(flag)
flag = chadd_5171aa72(flag)
flag = chsub_cbfe2a72(flag)
flag = chxor_d01563ec(flag)
flag = chxor_595823d4(flag)
flag = shuffle_39351a8a(flag)
flag = mul_d62641f4(flag)
flag = shuffle_82faa11e(flag)
flag = cadd_53f37c7e(flag)
flag = cmul_6c27ae5b(flag)
flag = add_0942c03a(flag)
flag = chxor_59178ab0(flag)
flag = chmul_49ccc560(flag)
flag = chmul_0e5b89be(flag)
flag = cxor_40a00f38(flag)
flag = chsub_b543d1d6(flag)
flag = mul_36bc3f6e(flag)
flag = chmul_ab4034bb(flag)
flag = chsub_1c4c548c(flag)
flag = shuffle_09604b13(flag)
flag = xor_ba1d287c(flag)
flag = digsub_e09ab638(flag)
flag = mul_001d570f(flag)
flag = chmul_315f2063(flag)
flag = cxor_fa552213(flag)
flag = chunk_d88231fa(flag)
flag = csub_fd81f025(flag)
flag = chunk_e42e1b84(flag)
flag = chunk_fe7fd1c6(flag)
flag = cmul_9e6c0fb6(flag)
flag = mul_a1ba17e5(flag)
flag = cmul_06a971d4(flag)
flag = chxor_dd87f2e6(flag)
flag = shuffle_ad9553b4(flag)
flag = chsub_244387c4(flag)
flag = digsub_732f28f7(flag)
flag = chxor_3bea6df8(flag)
flag = chsub_207ccdea(flag)
flag = mul_60fbc31e(flag)
flag = xor_0f3a6446(flag)
flag = xor_df4800db(flag)
flag = chsub_1b8086f6(flag)
flag = chadd_40e55360(flag)
flag = cadd_2dcf1992(flag)
flag = cxor_9d8f4ca2(flag)
flag = chunk_66d22063(flag)
flag = csub_5c981857(flag)
flag = digsub_ae82b4af(flag)
flag = shuffle_922a7e0d(flag)
flag = chadd_36148017(flag)
flag = add_03dc5f83(flag)
flag = chsub_258a5c14(flag)
flag = chunk_e120ffe1(flag)
flag = digsub_e4832eb3(flag)
flag = chxor_b10769e4(flag)
flag = cmul_e7965a1e(flag)
flag = mul_b97eacc4(flag)
flag = add_b94ae645(flag)
flag = chxor_6f5bf7ea(flag)
flag = add_769c8b28(flag)
flag = sub_5810de75(flag)
flag = cadd_95ea1de0(flag)
flag = cxor_bbd7e7fe(flag)
flag = chsub_a81063be(flag)
flag = chunk_25c9a817(flag)
flag = chmul_c84a1d05(flag)
flag = shuffle_d65597c5(flag)
flag = chmul_90f76848(flag)
flag = xor_214fe10e(flag)
flag = xor_278fef34(flag)
flag = mul_92b1b71e(flag)
flag = xor_7d423e0f(flag)
flag = mul_1e5ed056(flag)
flag = xor_cc5d6b6d(flag)
flag = chunk_88f4a033(flag)
flag = chxor_c7b14201(flag)
flag = digsub_f74d6e2c(flag)
flag = csub_cec4261b(flag)
flag = chsub_f850c36b(flag)
flag = csub_a0c64190(flag)
flag = chsub_84b4ec96(flag)
flag = shuffle_74813596(flag)
flag = add_50d7387e(flag)
flag = chunk_e7835142(flag)
flag = xor_f80d29fb(flag)
flag = chxor_3c678c19(flag)
flag = xor_2b6a5232(flag)
flag = cmul_ea9160c7(flag)
flag = cxor_b9faaea4(flag)
flag = chmul_e6b12a10(flag)
flag = chunk_5e4cee28(flag)
flag = add_9e4296de(flag)
flag = csub_d480ce5f(flag)
flag = cmul_a2ec48eb(flag)
flag = cadd_7cbc750f(flag)
flag = mul_53e2ce11(flag)
flag = chunk_bd36eb6a(flag)
flag = chsub_0d419486(flag)
flag = xor_bf47bb3a(flag)
flag = add_9009d319(flag)
flag = chxor_6b41b0f3(flag)
flag = chadd_2fa4c3aa(flag)
flag = chmul_5f9891b6(flag)
flag = digsub_be47e356(flag)
flag = chsub_8a044489(flag)
flag = xor_78f0da60(flag)
flag = digsub_f316d9e1(flag)
flag = digsub_b6993817(flag)
flag = mul_87965a17(flag)
flag = cadd_d9e8611e(flag)
flag = chsub_619c6037(flag)
flag = cadd_7ed856d4(flag)
flag = cmul_3062560c(flag)
flag = xor_df1ffac5(flag)
flag = chmul_bd4ac691(flag)
flag = shuffle_72671ce6(flag)
flag = digsub_4034f057(flag)
flag = csub_1bf63629(flag)
flag = add_c40251ff(flag)
flag = chxor_8550301d(flag)
flag = digsub_6afbfca8(flag)
flag = csub_1967fa7b(flag)
flag = mul_67e87c31(flag)
flag = chadd_51cfbbb7(flag)
flag = chxor_2b2282b6(flag)
flag = cmul_dce80096(flag)
flag = cxor_8396e79a(flag)
flag = csub_23f2ff18(flag)
flag = chunk_bfd2f50a(flag)
flag = cadd_b1988d37(flag)
flag = cmul_13e6bde9(flag)
flag = chmul_23d520ac(flag)
flag = cadd_fc1ffff9(flag)
flag = digsub_2ab90ae8(flag)
flag = chxor_de63b1bc(flag)
flag = chxor_7b570606(flag)
flag = digsub_1d28a867(flag)
flag = cmul_c6f9ed4d(flag)
flag = add_f22a99f3(flag)
flag = cmul_18dd5479(flag)
flag = mul_fac797c0(flag)
flag = add_02374137(flag)
flag = csub_1082bb6a(flag)
flag = cmul_028527b6(flag)
flag = csub_9033c843(flag)
flag = xor_4d6d322c(flag)
flag = cmul_86b4d215(flag)
flag = chsub_5f8a214c(flag)
flag = cmul_82b0086b(flag)
flag = chunk_5e4879e0(flag)
flag = csub_087d6e8e(flag)
flag = add_67af3ff4(flag)
flag = chunk_e9bf280d(flag)
flag = add_b6cb0782(flag)
flag = mul_49cd764a(flag)
flag = sub_63fceeb9(flag)
flag = sub_5e831919(flag)
flag = shuffle_2fffd50a(flag)
flag = chxor_2b81e3ec(flag)
flag = csub_20a984f0(flag)
flag = xor_77c70db2(flag)
flag = cmul_4e66e309(flag)
flag = cxor_2e4819bf(flag)
flag = chunk_24c352a1(flag)
flag = chxor_595823d4(flag)
flag = add_4db6bc88(flag)
flag = add_0a6cff9e(flag)
flag = cxor_6476b200(flag)
flag = sub_96b63796(flag)
flag = shuffle_cef04b1b(flag)
flag = mul_355bc0a3(flag)
flag = cxor_c2fd3f28(flag)
flag = add_0f283710(flag)
flag = cxor_4ff36064(flag)
flag = cadd_6fbe94f5(flag)
flag = chunk_b51aa621(flag)
flag = add_35671a57(flag)
flag = chxor_18337976(flag)
flag = chxor_e6a0d155(flag)
flag = chadd_3efd2ae8(flag)
flag = chsub_2d19348f(flag)
flag = shuffle_8e2c57eb(flag)
flag = chadd_8d7aa344(flag)
flag = cmul_e55c9291(flag)
flag = cxor_a7504c76(flag)
flag = chmul_a0fda47c(flag)
flag = chxor_da81821a(flag)
flag = chunk_b195e92b(flag)
flag = add_f582d81c(flag)
flag = cxor_0e49988d(flag)
flag = chmul_bd71c400(flag)
flag = sub_ef127564(flag)
flag = sub_1719880f(flag)
flag = xor_393c82c1(flag)
flag = mul_ce14d872(flag)
flag = xor_29589c28(flag)
flag = cxor_0b39c3e8(flag)
flag = xor_48d487cb(flag)
flag = csub_302bf054(flag)
flag = digsub_ce000989(flag)
flag = digsub_24f7cbd7(flag)
flag = cadd_3150b11b(flag)
flag = xor_dfe62c40(flag)
flag = digsub_7cd65058(flag)
flag = xor_a8eff498(flag)
flag = cadd_c170383d(flag)
flag = chmul_cc8af1e6(flag)
flag = cxor_f4c61b89(flag)
flag = chadd_aff7759b(flag)
flag = cmul_c4987507(flag)
flag = csub_8278d2c0(flag)
flag = cadd_603af25d(flag)
flag = chunk_e20352cb(flag)
flag = cmul_06a971d4(flag)
flag = chmul_bc251ec0(flag)
flag = cmul_65983a34(flag)
flag = chmul_d6a4e65e(flag)
flag = chmul_0e5b89be(flag)
flag = xor_9bd4e1fb(flag)
flag = mul_29392dc2(flag)
flag = xor_8dc6fc89(flag)
flag = cxor_fb665168(flag)
flag = chadd_65b8d0ef(flag)
flag = add_8db2a643(flag)
flag = cmul_c57ae7de(flag)
flag = add_a45b80f9(flag)
flag = cadd_e87be691(flag)
flag = cadd_b0a14b2d(flag)
flag = chsub_3af5214b(flag)
flag = chmul_96b3e78c(flag)
flag = add_03dc5f83(flag)
flag = mul_53ea4a75(flag)
flag = cxor_3829c9db(flag)
flag = chadd_14d93540(flag)
flag = cmul_893e1b56(flag)
flag = cmul_ee26b387(flag)
flag = cadd_2b51aac8(flag)
flag = sub_716f026e(flag)
flag = mul_228941c9(flag)
flag = chunk_5d8873dc(flag)
flag = cxor_ae2b4026(flag)
flag = csub_fbcb846c(flag)
flag = chadd_f73b3974(flag)
flag = chadd_eb195385(flag)
flag = sub_6411cb05(flag)
flag = cxor_83571dc3(flag)
flag = xor_bbeda458(flag)
flag = shuffle_5f949cd5(flag)
flag = chsub_74365a3a(flag)
flag = digsub_69f7a7ef(flag)
flag = cmul_cabb8b44(flag)
flag = sub_f1819d8e(flag)
flag = sub_f1819d8e(flag)
flag = csub_e2410a5c(flag)
flag = cmul_76043ee3(flag)
flag = chmul_b131f273(flag)
flag = chadd_163fc505(flag)
flag = xor_a04b2880(flag)
flag = add_8aaefd6e(flag)
flag = chunk_13e026f7(flag)
flag = mul_94dd1b49(flag)
flag = add_f4113996(flag)
flag = cadd_8fd791e9(flag)
flag = chsub_bc163239(flag)
flag = chsub_e1699c5c(flag)
flag = shuffle_5ad024ad(flag)
flag = add_91babee9(flag)
flag = cxor_567d1d52(flag)
flag = cadd_640c9c4d(flag)
flag = cadd_81afebad(flag)
flag = digsub_3534e3b8(flag)
flag = chsub_863e4a9e(flag)
flag = cadd_eb1a77e6(flag)
flag = chxor_26ed8369(flag)
flag = digsub_f9d31323(flag)
flag = cxor_89bf897f(flag)
flag = chunk_0188117c(flag)
flag = chunk_ab1c7f5f(flag)
flag = digsub_80e4e5c7(flag)
flag = chadd_52f847ab(flag)
flag = chsub_ba0df272(flag)
flag = chunk_459d40d3(flag)
flag = xor_eca7972f(flag)
flag = chxor_22bbbf9c(flag)
flag = cxor_16cc8dc6(flag)
flag = chadd_36148017(flag)
flag = chxor_e024e3e0(flag)
flag = cxor_ae138bf7(flag)
flag = chunk_0e1a47db(flag)
flag = xor_35062400(flag)
flag = xor_214fe10e(flag)
flag = csub_fdf338ac(flag)
flag = mul_3a6b9086(flag)
flag = shuffle_7b77028a(flag)
flag = mul_3dd9a13e(flag)
flag = xor_b055d8c5(flag)
flag = chadd_87bfe060(flag)
flag = cxor_a1a8de03(flag)
flag = shuffle_f4cba7dd(flag)
flag = add_758d2268(flag)
flag = chxor_88e67ab1(flag)
flag = cxor_4cb585c4(flag)
flag = chmul_0db588dd(flag)
flag = csub_417a5b3f(flag)
flag = xor_d4b3bf17(flag)
flag = chunk_b62eda1a(flag)
flag = xor_82a4d513(flag)
flag = digsub_a7419844(flag)
flag = cxor_94df939a(flag)
flag = xor_cc5d6b6d(flag)
flag = chsub_24c471c0(flag)
flag = mul_f345af6b(flag)
flag = csub_31de2ba3(flag)
flag = add_f2a6c048(flag)
flag = csub_5bd78a36(flag)
flag = cxor_0673e3e4(flag)
flag = xor_cc5d6b6d(flag)
flag = shuffle_a6432e15(flag)
flag = chadd_04672342(flag)
flag = chxor_27993531(flag)
flag = cxor_6cae2cb6(flag)
flag = cadd_3882e35e(flag)
flag = mul_2cd00355(flag)
flag = cmul_738aef71(flag)
flag = chxor_7b570606(flag)
flag = cxor_2e4b26f4(flag)
flag = sub_97300f52(flag)
flag = chsub_29874234(flag)
flag = digsub_ee67309b(flag)
flag = chmul_05459301(flag)
flag = chunk_957ebc7b(flag)
flag = sub_00c9af82(flag)
flag = chadd_50e33e22(flag)
flag = chadd_63faefcf(flag)
flag = chmul_88eb44fc(flag)
flag = shuffle_c5e07151(flag)
flag = add_393870bc(flag)
flag = chmul_885659c9(flag)
flag = cmul_0bb3391d(flag)
flag = sub_2cdb195c(flag)
flag = cmul_931552a6(flag)
flag = cxor_f20321f0(flag)
flag = chunk_406fc18b(flag)
flag = chunk_2a7d8d80(flag)
flag = xor_393c82c1(flag)
flag = mul_34d9a702(flag)
flag = cxor_6eff9336(flag)
flag = xor_b5a69ced(flag)
flag = chunk_987d4b79(flag)
flag = xor_0e75b77c(flag)
flag = csub_25da5f24(flag)
flag = chxor_59178ab0(flag)
flag = chadd_2a7b5687(flag)
flag = digsub_7d236bf8(flag)
flag = cadd_c1fbc654(flag)
flag = chxor_595823d4(flag)
flag = shuffle_72671ce6(flag)
flag = xor_e9e26f3f(flag)
flag = add_306b249b(flag)
flag = chmul_6c610e81(flag)
flag = chxor_59178ab0(flag)
flag = shuffle_b3fe3e10(flag)
flag = chmul_0c946b47(flag)
flag = add_91babee9(flag)
flag = cxor_df720e52(flag)
flag = chxor_6c38cb27(flag)
flag = xor_4bd4b2d3(flag)
flag = digsub_eb8aeb23(flag)
flag = xor_23eae5a3(flag)
flag = shuffle_8dc55f06(flag)
flag = mul_abf95b28(flag)
flag = digsub_a56c83c8(flag)
flag = shuffle_a2ef4315(flag)
flag = chxor_fad6bade(flag)
flag = cmul_5bbd0126(flag)
flag = chsub_4fe6a0b8(flag)
flag = chsub_4ebc0819(flag)
flag = cmul_4691495a(flag)
flag = sub_e383e4d5(flag)
flag = chadd_0fbbf4b8(flag)
flag = sub_47cbdf28(flag)
flag = chadd_a8439bc3(flag)
flag = xor_96b234b4(flag)
flag = digsub_4c404e0f(flag)
flag = cmul_5b292fda(flag)
flag = sub_fb458c7e(flag)
flag = chadd_50e33e22(flag)
flag = cadd_991ec901(flag)
flag = xor_3d2b41ae(flag)
flag = add_da6dae2b(flag)
flag = chadd_1e481fb6(flag)
flag = chxor_26ed8369(flag)
flag = cadd_a6332778(flag)
flag = chmul_05b3201a(flag)
flag = cadd_5162d960(flag)
flag = cxor_1f2b9c26(flag)
flag = cxor_bfb33206(flag)
flag = mul_df48e442(flag)
flag = chsub_c10f331f(flag)
flag = mul_b62c8153(flag)
flag = xor_fddd23ae(flag)
flag = chadd_58981664(flag)
flag = chsub_c6725cc1(flag)
flag = add_ea027a3a(flag)
flag = sub_5e831919(flag)
flag = add_2be5c482(flag)
flag = chadd_c951759a(flag)
flag = chsub_ee1754a3(flag)
flag = chadd_868635c7(flag)
flag = chmul_221b0f47(flag)
flag = shuffle_0a4f92ab(flag)
flag = chxor_dda862c4(flag)
flag = sub_58947fb5(flag)
flag = chadd_4162bfbe(flag)
flag = sub_eeb354ba(flag)
flag = cmul_00fd6c30(flag)
flag = sub_2291bf41(flag)
flag = chsub_d27566eb(flag)
flag = cadd_e3f803ca(flag)
flag = chsub_112adf2e(flag)
flag = chsub_27343013(flag)
flag = chmul_14ccb396(flag)
flag = digsub_441e29b0(flag)
flag = xor_f2a99984(flag)
flag = mul_b8963b30(flag)
flag = chxor_8550301d(flag)
flag = xor_fddd23ae(flag)
flag = chsub_59843fee(flag)
flag = cxor_1c819fcf(flag)
flag = xor_084e61d3(flag)
flag = cmul_dc2b00da(flag)
flag = csub_d46575ec(flag)
flag = mul_51ffc146(flag)
flag = cadd_d9e8611e(flag)
flag = cmul_45d4d761(flag)
flag = chmul_ebd5a20e(flag)
flag = chadd_1feaf785(flag)
flag = digsub_e2130014(flag)
flag = digsub_e2130014(flag)
flag = chunk_0591e3c5(flag)
flag = digsub_1f1582a8(flag)
flag = csub_965ea16b(flag)
flag = xor_9ec16d95(flag)
flag = chunk_181817bc(flag)
flag = chmul_d6a4e65e(flag)
flag = digsub_be5397e9(flag)
flag = csub_0356de94(flag)
flag = chadd_ec0fef0e(flag)
flag = digsub_1755eb85(flag)
flag = shuffle_b38ea8bc(flag)
flag = add_fb172b98(flag)
flag = chmul_1c0bdb7a(flag)
flag = cxor_ebeaa56d(flag)
flag = chsub_3bf8b0c8(flag)
flag = shuffle_3113cb7a(flag)
flag = chunk_524ad27b(flag)
flag = add_4db6bc88(flag)
flag = chxor_6eac24b1(flag)
flag = cadd_ae3d5a54(flag)
flag = chsub_aebdb774(flag)
flag = cxor_454d9bad(flag)
flag = sub_665d3f8a(flag)
flag = shuffle_a05741bb(flag)
flag = cadd_95ea1de0(flag)
flag = xor_e32cc6e3(flag)
flag = xor_f13936e3(flag)
flag = digsub_0ca9e7fd(flag)
flag = add_8eb87b67(flag)
flag = digsub_b6c1346d(flag)
flag = cadd_0c2307f0(flag)
flag = add_f22a99f3(flag)
flag = sub_36eea33a(flag)
flag = csub_1951cfda(flag)
flag = chxor_65adc1af(flag)
flag = cadd_d62d0fdd(flag)
flag = shuffle_a722dfed(flag)
flag = csub_f268e803(flag)
flag = xor_e2704680(flag)
flag = xor_f80d29fb(flag)
flag = chmul_c67e0f7b(flag)
flag = xor_79919c11(flag)
flag = chadd_186dd996(flag)
flag = xor_2ac1f33e(flag)
flag = cmul_d1b5c43d(flag)
flag = sub_a762259f(flag)
flag = csub_8322948c(flag)
flag = chxor_18337976(flag)
flag = add_718a4547(flag)
flag = cxor_b9faaea4(flag)
flag = cmul_85b39864(flag)
flag = chxor_36059956(flag)
flag = chadd_63faefcf(flag)
flag = chmul_c4924d51(flag)
flag = shuffle_6c33ee33(flag)
flag = chmul_02f67fce(flag)
flag = chunk_01d5b245(flag)
flag = digsub_b40bee06(flag)
flag = chadd_620d941e(flag)
flag = chsub_38e8f84c(flag)
flag = cadd_991ec901(flag)
flag = cxor_e7839ec0(flag)
flag = cxor_bba6fa0a(flag)
flag = digsub_732f28f7(flag)
flag = digsub_f56a1358(flag)
flag = chadd_5d344985(flag)
flag = chunk_e42e1b84(flag)
flag = xor_b8479b53(flag)
flag = add_d7079839(flag)
flag = add_1e3629e5(flag)
flag = chunk_4b50f9e1(flag)
flag = digsub_ccbd2ea6(flag)
flag = cmul_9ea3f862(flag)
flag = shuffle_dd75cb23(flag)
flag = sub_e0bac344(flag)
flag = digsub_8e44fdbd(flag)
flag = sub_4bcab1c3(flag)
flag = chunk_45336ad9(flag)
flag = csub_417a5b3f(flag)
flag = cmul_0ee0ce26(flag)
flag = cadd_ea861103(flag)
flag = add_d7079839(flag)
flag = sub_d67326ec(flag)
flag = cadd_c751d9e4(flag)
flag = digsub_94dd3136(flag)
flag = shuffle_41eb3e26(flag)
flag = chmul_79591ad9(flag)
flag = sub_c8b31549(flag)
flag = chxor_65adc1af(flag)
flag = chunk_9903c486(flag)
flag = add_91babee9(flag)
flag = digsub_7638ee12(flag)
flag = chxor_d94a9bdc(flag)
flag = chadd_f7fad255(flag)
flag = cadd_09c2f719(flag)
flag = chunk_02f12019(flag)
flag = chmul_38133c10(flag)
flag = cadd_c66b787a(flag)
flag = shuffle_3f68185e(flag)
flag = chadd_40e55360(flag)
flag = chadd_6e3ce5fe(flag)
flag = cmul_e4190864(flag)
flag = shuffle_8c84166e(flag)
flag = cmul_fd921d5b(flag)
flag = add_d153a7bf(flag)
flag = digsub_f316d9e1(flag)
flag = digsub_0410b672(flag)
flag = chunk_1ba6912f(flag)
flag = xor_82a4d513(flag)
flag = sub_7ca185a5(flag)
flag = chunk_e798b09f(flag)
flag = xor_cc5d6b6d(flag)
flag = xor_131c6ed1(flag)
flag = chmul_6834bec9(flag)
flag = mul_1e5ed056(flag)
flag = chxor_eaba9d0d(flag)
flag = sub_5730f691(flag)
flag = csub_20a768aa(flag)
flag = xor_37922856(flag)
flag = chmul_edaf1927(flag)
flag = cxor_94df939a(flag)
flag = chadd_f137e21d(flag)
flag = cadd_c0d41733(flag)
flag = chxor_de5cf1af(flag)
flag = chxor_cd5d1c4b(flag)
flag = chxor_6fdbabf9(flag)
flag = shuffle_de9df0cf(flag)
flag = cxor_c7240b25(flag)
flag = chxor_d3897d6a(flag)
flag = sub_5e615eab(flag)
flag = chsub_863e4a9e(flag)
flag = cadd_bf38d005(flag)
flag = sub_5e615eab(flag)
flag = shuffle_c0cc818c(flag)
flag = sub_ba98e537(flag)
flag = xor_381364cd(flag)
flag = shuffle_7c9553cb(flag)
flag = cadd_775bd2a3(flag)
flag = chsub_20dd3740(flag)
flag = chsub_e8aa8b79(flag)
flag = chxor_7bc1a643(flag)
flag = cmul_f851d67c(flag)
flag = cxor_b9faaea4(flag)
flag = chxor_8a775b98(flag)
flag = chadd_974a7c54(flag)
flag = cadd_e4b46665(flag)
flag = csub_df5bd69a(flag)
flag = csub_ea9d41b8(flag)
flag = xor_e2704680(flag)
flag = mul_a1ba17e5(flag)
flag = shuffle_a05741bb(flag)
flag = xor_ac6e82c0(flag)
flag = csub_76313df2(flag)
flag = cadd_9bed43d0(flag)
flag = chxor_c7b14201(flag)
flag = cmul_d22b5acf(flag)
flag = chadd_83a5c6be(flag)
flag = sub_a5b2a08c(flag)
flag = cmul_de3ea36c(flag)
flag = cxor_e256fb84(flag)
flag = sub_c126f74d(flag)
flag = chsub_0e10b13d(flag)
flag = chxor_665eed2c(flag)
flag = mul_4a9471da(flag)
flag = xor_8a3ad979(flag)
flag = shuffle_3f9d1ce8(flag)
flag = add_0f654473(flag)
flag = chmul_2f893b62(flag)
flag = sub_734f1f1d(flag)
flag = digsub_f56a1358(flag)
flag = digsub_f2e8b007(flag)
flag = xor_75987462(flag)
flag = cxor_bac2ca1f(flag)
flag = chsub_92f27399(flag)
flag = cadd_7f81973a(flag)
flag = chunk_406e7c05(flag)
flag = chxor_6712129e(flag)
flag = mul_5f51bead(flag)
flag = digsub_211a2fee(flag)
flag = chunk_f32c7c2f(flag)
flag = cmul_5f59af38(flag)
flag = chsub_70e4436e(flag)
flag = chadd_8fc702a9(flag)
flag = chadd_09e456ed(flag)
flag = chmul_5ed084ad(flag)
flag = sub_9de672fa(flag)
flag = cmul_f65d51e7(flag)
flag = digsub_eb8aeb23(flag)
flag = shuffle_ff476bf3(flag)
flag = shuffle_ee0a30fd(flag)
flag = cadd_75e1b32f(flag)
flag = chxor_a987af1b(flag)
flag = cxor_d20accc3(flag)
flag = xor_3bb0008c(flag)
flag = chunk_bd7c4f37(flag)
flag = xor_c3591520(flag)
flag = sub_64547020(flag)
flag = shuffle_6cc67bbf(flag)
flag = cadd_598cbf7e(flag)
flag = chunk_5f5b8349(flag)
flag = cmul_99a00a24(flag)
flag = xor_071e51df(flag)
flag = chunk_41ac0046(flag)
flag = cadd_0788aaad(flag)
flag = xor_7ede4fd2(flag)
flag = cxor_e4b3ee28(flag)
flag = digsub_6899cdac(flag)
flag = chadd_db3363a7(flag)
flag = mul_2b51c8be(flag)
flag = chunk_8880753c(flag)
flag = digsub_1f6e32d7(flag)
flag = cmul_f05686bd(flag)
flag = csub_b10244d8(flag)
flag = digsub_9adbb647(flag)
flag = csub_395783d4(flag)
flag = csub_0f2dcd11(flag)
flag = chxor_23fb4dc2(flag)
flag = chmul_743f98a5(flag)
flag = chmul_04649cec(flag)
flag = cxor_2e5f8990(flag)
flag = shuffle_c3bda042(flag)
flag = shuffle_a722dfed(flag)
flag = xor_da634428(flag)
flag = cadd_01e4dea4(flag)
flag = add_8357f559(flag)
flag = chsub_3af5214b(flag)
flag = csub_ecf51562(flag)
flag = add_bc200f67(flag)
flag = chsub_0b2321c1(flag)
flag = chxor_fc74f7f2(flag)
flag = cmul_86b4d215(flag)
flag = chxor_a697d1c3(flag)
flag = chunk_530e625c(flag)
flag = add_87dad6e0(flag)
flag = cadd_6b0bc3e3(flag)
flag = cmul_c9f41697(flag)
flag = csub_b25f1796(flag)
flag = cmul_db96fc2e(flag)
flag = add_2b6347c9(flag)
flag = digsub_ecf47b8f(flag)
flag = mul_c4479db6(flag)
flag = mul_4a9471da(flag)
flag = cadd_603af25d(flag)
flag = mul_62495a4a(flag)
flag = sub_6bf5673d(flag)
flag = add_108fd3c6(flag)
flag = cmul_7a36ad1f(flag)
flag = csub_973b4044(flag)
flag = chmul_6b279231(flag)
flag = cmul_0b6d9f9a(flag)
flag = cmul_f65d51e7(flag)
flag = cxor_ad95af8e(flag)
flag = chunk_5d8873dc(flag)
flag = csub_bf7e54b2(flag)
flag = chxor_3bea6df8(flag)
flag = xor_f99e5d04(flag)
flag = mul_89bed2ea(flag)
flag = chsub_7bc426c7(flag)
flag = chmul_d4a185e3(flag)
flag = chxor_2e7e40ef(flag)
flag = shuffle_83b67bb5(flag)
flag = chsub_fb961764(flag)
flag = chsub_4e9faeee(flag)
flag = cmul_9535a158(flag)
flag = add_4e407894(flag)
flag = add_c2f77d7b(flag)
flag = chsub_66a6c561(flag)
flag = cxor_1039bf70(flag)
flag = cxor_0afe7e7a(flag)
flag = xor_92fb1dc0(flag)
flag = sub_04d98d74(flag)
flag = chmul_eb007432(flag)
flag = digsub_6e4a7a18(flag)
flag = add_f4bd902e(flag)
flag = chmul_47e5352e(flag)
flag = cmul_0d8033d0(flag)
flag = chmul_9d6b502f(flag)
flag = csub_9ccfaef5(flag)
flag = sub_785b373a(flag)
flag = csub_7abf52ba(flag)
flag = digsub_69f7a7ef(flag)
flag = digsub_82f27ce9(flag)
flag = mul_b2698654(flag)
flag = cmul_06256c90(flag)
flag = xor_e7da9a66(flag)
flag = cmul_259fe9ec(flag)
flag = cmul_d487af89(flag)
flag = chadd_d980e2e3(flag)
flag = csub_737d4c67(flag)
flag = shuffle_40f99305(flag)
flag = csub_23f2ff18(flag)
flag = digsub_19a384d0(flag)
flag = cadd_fb85a094(flag)
flag = mul_6a51d006(flag)
flag = sub_60d9cd7a(flag)
flag = csub_cb2cec49(flag)
flag = cxor_ad9ae418(flag)
flag = csub_1f106834(flag)
flag = chxor_bca7bb47(flag)
flag = sub_653c19b3(flag)
flag = cxor_e5a9ee6a(flag)
flag = mul_f38a2a76(flag)
flag = mul_e04a2c12(flag)
flag = chunk_da01c0e7(flag)
flag = cxor_d1f287be(flag)
flag = sub_653c19b3(flag)
flag = chmul_b9bc1a28(flag)
flag = csub_a0c64190(flag)
flag = chxor_835e69ad(flag)
flag = chxor_79ffa521(flag)
flag = cxor_6938f43d(flag)
flag = mul_bb31d66d(flag)
flag = xor_ac535945(flag)
flag = cmul_0ee39eec(flag)
flag = cxor_d339f91c(flag)
flag = chxor_30705179(flag)
flag = sub_26a484b7(flag)
flag = digsub_d131ea62(flag)
flag = sub_a8ed3df9(flag)
flag = xor_ddf28b31(flag)
flag = add_ae27c2fc(flag)
flag = chxor_4909f0be(flag)
flag = digsub_2f2a8750(flag)
flag = cmul_f59de4d7(flag)
flag = shuffle_f3858d75(flag)
flag = chsub_01e56b12(flag)
flag = chxor_eae131e0(flag)
flag = add_e0bbf910(flag)
flag = cxor_d2e5bfdf(flag)
flag = sub_bc852ad6(flag)
flag = shuffle_879744de(flag)
flag = chunk_aad9a6a9(flag)
flag = chxor_72c80534(flag)
flag = digsub_b6c1346d(flag)
flag = mul_2a5a432a(flag)
flag = xor_a53f1f68(flag)
flag = sub_04d98d74(flag)
flag = chunk_9532fc70(flag)
flag = xor_13c063a7(flag)
flag = shuffle_ffe4fef7(flag)
flag = chunk_5fa20e0f(flag)
flag = csub_a667ebea(flag)
flag = chadd_c58d2df9(flag)
flag = shuffle_a924ad8b(flag)
flag = chmul_71128504(flag)
flag = add_67499497(flag)
flag = digsub_ac841ac3(flag)
flag = chxor_b212e95c(flag)
flag = cxor_1c819fcf(flag)
flag = mul_520721f3(flag)
flag = mul_520721f3(flag)
flag = cxor_33678a18(flag)
flag = cadd_5afd7d69(flag)
flag = sub_1939e4b0(flag)
flag = xor_6cc1a542(flag)
flag = xor_51b2d18c(flag)
flag = chsub_e01faa71(flag)
flag = cadd_cab4819e(flag)
flag = shuffle_6a6f7803(flag)
flag = shuffle_fbcb4ff2(flag)
flag = sub_d625c555(flag)
flag = csub_6e812142(flag)
flag = add_885196c7(flag)
flag = add_e7bb6b2d(flag)
flag = digsub_93fe4930(flag)
flag = chadd_af05dbbf(flag)
flag = chmul_16176275(flag)
flag = digsub_61a694a2(flag)
flag = add_52b814e5(flag)
flag = digsub_d5cf3761(flag)
flag = csub_7abf52ba(flag)
flag = digsub_f38ffcc2(flag)
flag = xor_eae9977a(flag)
flag = csub_69098245(flag)
flag = shuffle_3125b36d(flag)
flag = chsub_c0922438(flag)
flag = cmul_3e5a5794(flag)
flag = csub_31de2ba3(flag)
flag = shuffle_c0cc818c(flag)
flag = chadd_75030af7(flag)
flag = sub_e9895f44(flag)
flag = csub_7321b0e9(flag)
flag = chunk_0e1a47db(flag)
flag = chmul_da4f7a7d(flag)
flag = chunk_cd87c4de(flag)
flag = cmul_4efbd341(flag)
flag = xor_3b14c897(flag)
flag = shuffle_ffe4fef7(flag)
flag = cadd_2d211677(flag)
flag = add_74483928(flag)
flag = chxor_00dbbc36(flag)
flag = cadd_d1616fc6(flag)
flag = sub_f7bae9cf(flag)
flag = sub_abe98fac(flag)
flag = xor_698d0c07(flag)
flag = xor_b3655f1c(flag)
flag = xor_a6cea8c8(flag)
flag = sub_d67a4b16(flag)
flag = digsub_a708386c(flag)
flag = mul_959ccef4(flag)
flag = add_eb6ed9ef(flag)
flag = sub_2d595d46(flag)
flag = add_e0bbf910(flag)
flag = cmul_393b0cfb(flag)
flag = cmul_ec6817f2(flag)
flag = chsub_f57de7cd(flag)
flag = cmul_65983a34(flag)
flag = chmul_b65f3bc2(flag)
flag = sub_a091f45e(flag)
flag = cxor_9752c63c(flag)
flag = digsub_1209d475(flag)
flag = cxor_567d1d52(flag)
flag = cadd_596e2779(flag)
flag = cxor_9064d63f(flag)
flag = xor_0b406c7d(flag)
flag = cxor_98fe5771(flag)
flag = digsub_1209d475(flag)
flag = cxor_5a1e89dc(flag)
flag = chunk_19abbb44(flag)
flag = chunk_1f1becb3(flag)
flag = add_aae6cc04(flag)
flag = xor_07333316(flag)
flag = mul_f5f13d24(flag)
flag = add_454ffaaf(flag)
flag = csub_7ae589be(flag)
flag = digsub_24f7cbd7(flag)
flag = xor_19983c03(flag)
flag = chmul_7e4acef8(flag)
flag = cadd_b83d6dfa(flag)
flag = cadd_79d7fa85(flag)
flag = digsub_41290eb4(flag)
flag = chxor_2f1310f4(flag)
flag = chmul_38133c10(flag)
flag = xor_94f0d244(flag)
flag = cmul_d7a4e37f(flag)
flag = chsub_7b8aa8b8(flag)
flag = digsub_f8ed932c(flag)
flag = cadd_d4d5a797(flag)
flag = chadd_7fc84678(flag)
flag = chmul_0db588dd(flag)
flag = mul_1f240b2b(flag)
flag = digsub_2945b343(flag)
flag = chmul_ba6b991f(flag)
flag = chadd_658a720b(flag)
flag = digsub_8e44fdbd(flag)
flag = mul_2f89e56a(flag)
flag = sub_7e5f5612(flag)
flag = sub_4e853fbb(flag)
flag = chmul_9d6b502f(flag)
flag = chsub_5b0f6d80(flag)
flag = cmul_697c5558(flag)
flag = chsub_64d91494(flag)
flag = chadd_a8439bc3(flag)
flag = shuffle_7bf7a2c9(flag)
flag = cmul_16ddfa97(flag)
flag = chadd_2fa4c3aa(flag)
flag = chadd_ae237728(flag)
flag = cxor_112ee4fc(flag)
flag = digsub_bd11b809(flag)
flag = cmul_a089bf19(flag)
flag = cadd_a6482f91(flag)
flag = chunk_37604f81(flag)
flag = chmul_885659c9(flag)
flag = cmul_4f99fe69(flag)
flag = xor_2ec3c23c(flag)
flag = cmul_eefe9fa4(flag)
flag = chmul_c67e0f7b(flag)
flag = mul_e8d4d029(flag)
flag = mul_f41b15dd(flag)
flag = chsub_27fbe141(flag)
flag = cmul_c9f41697(flag)
flag = sub_0b42484c(flag)
flag = cadd_b138e6e3(flag)
flag = chmul_991b7825(flag)
flag = digsub_9dcf4316(flag)
flag = digsub_ce000989(flag)
flag = chsub_8dd5ab11(flag)
flag = cadd_f61d1530(flag)
flag = chadd_ed0711d8(flag)
flag = add_b2a61490(flag)
flag = chunk_e808502e(flag)
flag = chxor_f2f16c61(flag)
flag = cadd_1af81cdc(flag)
flag = chxor_27993531(flag)
flag = cadd_fb2c7b99(flag)
flag = chxor_4fe33b06(flag)
flag = chunk_c5398c39(flag)
flag = csub_6612390f(flag)
flag = cmul_280315b7(flag)
flag = chsub_d05da0d8(flag)
flag = chsub_dbb4ae01(flag)
flag = chunk_20e19fb4(flag)
flag = chsub_70e4436e(flag)
flag = chxor_6eac24b1(flag)
flag = chxor_b82fad32(flag)
flag = shuffle_8c8dc376(flag)
flag = chxor_3bea6df8(flag)
flag = cmul_4172328f(flag)
flag = cxor_89cd8dcd(flag)
flag = csub_417a5b3f(flag)
flag = shuffle_5de0aca9(flag)
flag = chxor_277a4952(flag)
flag = chadd_932febde(flag)
flag = chsub_a81063be(flag)
flag = chsub_d07297d3(flag)
flag = chxor_62bb4f9e(flag)
flag = cmul_9ea3f862(flag)
flag = chxor_f309545e(flag)
flag = chunk_a5854668(flag)
flag = chsub_fded2730(flag)
flag = add_333323b1(flag)
flag = chsub_a2001711(flag)
flag = chunk_ba6b2283(flag)
flag = sub_0c6430ff(flag)
flag = mul_54bc5eb1(flag)
flag = csub_0c9dc34d(flag)
flag = cadd_7936e180(flag)
flag = chunk_607218b8(flag)
flag = mul_70c4cf79(flag)
flag = cxor_f01c9df2(flag)
flag = chsub_87204349(flag)
flag = cadd_6fbe94f5(flag)
flag = xor_6aa3c7e7(flag)
flag = chsub_934ba014(flag)
flag = mul_2898db69(flag)
flag = cmul_95802649(flag)
flag = cxor_9bda6371(flag)
flag = chunk_b62eda1a(flag)
flag = chsub_4364daac(flag)
flag = digsub_f7a754a1(flag)
flag = csub_a76aeaed(flag)
flag = csub_6e812142(flag)
flag = cxor_ad9ae418(flag)
flag = chsub_df08aee7(flag)
flag = cadd_261a4a1d(flag)
flag = shuffle_abafc5c1(flag)
flag = add_aae6cc04(flag)
flag = mul_d9dbdb53(flag)
flag = chunk_b26605b9(flag)
flag = digsub_b6993817(flag)
flag = chunk_9d77353c(flag)
flag = chmul_9cb342ae(flag)
flag = chunk_fe7fd1c6(flag)
flag = sub_f0758554(flag)
flag = chsub_b3a9e994(flag)
flag = chxor_9d86eb3b(flag)
flag = chmul_90f76848(flag)
flag = chxor_835e69ad(flag)
flag = chadd_36010571(flag)
flag = chadd_37bb2c71(flag)
flag = chadd_ddff28b1(flag)
flag = chmul_9fd400d3(flag)
flag = xor_78f0da60(flag)
flag = digsub_a580518f(flag)
flag = add_204a88d5(flag)
flag = cxor_3829c9db(flag)
flag = chxor_595823d4(flag)
flag = cmul_bf506846(flag)
flag = chxor_f2f16c61(flag)
flag = cxor_52629279(flag)
flag = sub_c15c0c16(flag)
flag = cadd_f79f3974(flag)
flag = cxor_822e6d4f(flag)
flag = cadd_6abb159d(flag)
flag = cxor_21574829(flag)
flag = chsub_6ab39e5c(flag)
flag = digsub_4a75fccf(flag)
flag = chadd_0124a79d(flag)
flag = sub_05bc34d7(flag)
flag = add_377e663e(flag)
flag = cxor_e5a9ee6a(flag)
flag = add_d3cda0e4(flag)
flag = csub_bc70c3a8(flag)
flag = chsub_ca548f97(flag)
flag = cadd_ffecf556(flag)
flag = cmul_27f36b54(flag)
flag = xor_e7da9a66(flag)
flag = cxor_7948ea7c(flag)
flag = cmul_23a5f304(flag)
flag = chadd_50e33e22(flag)
flag = add_ec1d658a(flag)
flag = cadd_a377ad5c(flag)
flag = chxor_013d1031(flag)
flag = sub_1939e4b0(flag)
flag = sub_653c19b3(flag)
flag = cadd_1c3f6ab8(flag)
flag = mul_a1ba17e5(flag)
flag = cmul_63f9fdde(flag)
flag = chmul_ffc882e5(flag)
flag = chxor_f0c78fe9(flag)
flag = digsub_03f54ba3(flag)
flag = cmul_d487af89(flag)
flag = chunk_97afc148(flag)
flag = csub_efe13119(flag)
flag = mul_2cd00355(flag)
flag = chsub_258a5c14(flag)
flag = cxor_81cc1cc2(flag)
flag = chsub_df08aee7(flag)
flag = cmul_9fab9317(flag)
flag = cadd_7bfaa07b(flag)
flag = add_c8475b4e(flag)
flag = chxor_edba075a(flag)
flag = chsub_aa802604(flag)
flag = mul_a4e5921f(flag)
flag = chunk_1fa032d8(flag)
flag = cmul_148c07dc(flag)
flag = cadd_2a11e194(flag)
flag = cxor_4b979532(flag)
flag = cadd_432be002(flag)
flag = chmul_9cb342ae(flag)
flag = csub_6612390f(flag)
flag = mul_a337ba89(flag)
flag = chsub_27dae3ae(flag)
flag = sub_31cd283b(flag)
flag = chmul_8fdd15ff(flag)
flag = cmul_31b88b90(flag)
flag = chxor_30be5eb3(flag)
flag = xor_19d4481b(flag)
flag = digsub_f74d6e2c(flag)
flag = chunk_c1b1042d(flag)
flag = chsub_9b93213c(flag)
flag = add_ec1d658a(flag)
flag = cmul_6fb2378c(flag)
flag = csub_302bf054(flag)
flag = xor_3b807d61(flag)
flag = chadd_75030af7(flag)
flag = chmul_bd71c400(flag)
flag = digsub_a580518f(flag)
flag = xor_9e9f7a8b(flag)
flag = shuffle_41b9328e(flag)
flag = chunk_45336ad9(flag)
flag = shuffle_0ca300ee(flag)
flag = chmul_c4c465cb(flag)
flag = shuffle_23d41aeb(flag)
flag = digsub_20744944(flag)
flag = chmul_384134ae(flag)
flag = chxor_f0558dbb(flag)
flag = sub_d37c6c7c(flag)
flag = xor_875a544d(flag)
flag = sub_4e6d826d(flag)
flag = chxor_84d7073f(flag)
flag = chunk_225b51ad(flag)
flag = cxor_cd79085f(flag)
flag = chmul_207c7813(flag)
flag = chsub_26373389(flag)
flag = sub_0b5acfeb(flag)
flag = chunk_b0d8cc2d(flag)
flag = chmul_a39be275(flag)
flag = cadd_ffecf556(flag)
flag = chsub_7178b8f3(flag)
flag = csub_642b1701(flag)
flag = add_19eaf3b7(flag)
flag = chunk_367e0942(flag)
flag = chunk_29281be2(flag)
flag = chunk_0e5f27e0(flag)
flag = csub_cd81496c(flag)
flag = chunk_caa9baa3(flag)
flag = xor_07333316(flag)
flag = chxor_385bc3a3(flag)
flag = add_f22a99f3(flag)
flag = chsub_a16ed93a(flag)
flag = chunk_88bc39ba(flag)
flag = xor_93a9262d(flag)
flag = cxor_1e0efad7(flag)
flag = sub_854261bd(flag)
flag = chmul_20654021(flag)
flag = chsub_f75e24ea(flag)
flag = cmul_931552a6(flag)
flag = chxor_ce07c0ad(flag)
flag = cadd_99696e25(flag)
flag = cxor_15061824(flag)
flag = chadd_3a3f3b47(flag)
flag = shuffle_6d9a62f9(flag)
flag = chxor_1c95a906(flag)
flag = cadd_6e163781(flag)
flag = cadd_0a20014b(flag)
flag = shuffle_6ed87304(flag)
flag = chadd_db065984(flag)
flag = chxor_7bd8fe19(flag)
flag = mul_355bc0a3(flag)
flag = xor_6cc1a542(flag)
flag = cadd_b1988d37(flag)
flag = cadd_0228ee52(flag)
flag = chsub_4c009b94(flag)
flag = chadd_47332c73(flag)
flag = cadd_de624ff2(flag)
flag = sub_4b935f92(flag)
flag = csub_d77927e4(flag)
flag = chadd_01e97c37(flag)
flag = chxor_a1104840(flag)
flag = chxor_6c6e06b4(flag)
flag = xor_c0f387ba(flag)
flag = mul_2cd00355(flag)
flag = cmul_ea158364(flag)
flag = add_c1c20de3(flag)
flag = chsub_6ee60616(flag)
flag = chsub_f1540b87(flag)
flag = cxor_8666b092(flag)
flag = digsub_3534e3b8(flag)
flag = chxor_01d4c54e(flag)
flag = chadd_969cf400(flag)
flag = cadd_bc61cc65(flag)
flag = sub_ce128c36(flag)
flag = sub_58eb1409(flag)
flag = chsub_063a5399(flag)
flag = chxor_7bd8fe19(flag)
flag = sub_adc67d90(flag)
flag = shuffle_b1134b2a(flag)
flag = chmul_f48a5878(flag)
flag = chadd_c8951761(flag)
flag = cxor_86921258(flag)
flag = chadd_51cbffb6(flag)
flag = chsub_3a9fd4f5(flag)
flag = sub_3c288b1c(flag)
flag = chadd_6d0c80a6(flag)
flag = mul_bb9e8c00(flag)
flag = xor_61d47dbf(flag)
flag = mul_6ed04b93(flag)
flag = chmul_9522f239(flag)
flag = cmul_6ae52f53(flag)
flag = shuffle_2a77e1f0(flag)
flag = chadd_a3542df8(flag)
flag = chxor_79ffa521(flag)
flag = add_c0abe07c(flag)
flag = cxor_31cd7c00(flag)
flag = cadd_ba362142(flag)
flag = mul_d23185db(flag)
flag = add_a1fe299c(flag)
flag = cadd_d08b740c(flag)
flag = xor_e35626c5(flag)
flag = csub_f4c94d76(flag)
flag = shuffle_dc2ed635(flag)
flag = cxor_2e4819bf(flag)
flag = add_d3cda0e4(flag)
flag = shuffle_a8092414(flag)
flag = chxor_41c79131(flag)
flag = xor_64af3af1(flag)
flag = chsub_e2d10a29(flag)
flag = csub_cf019266(flag)
flag = sub_4b79348d(flag)
flag = csub_7e745ec0(flag)
flag = chsub_863e4a9e(flag)
flag = chmul_5dac5c0c(flag)
flag = chunk_4113b7f6(flag)
flag = add_e08d6566(flag)
flag = sub_df2b698e(flag)
flag = sub_a2adabad(flag)
flag = chmul_5dac5c0c(flag)
flag = cxor_18c1314e(flag)
flag = sub_ec7f3f21(flag)
flag = add_28d6777c(flag)
flag = chsub_4fe6a0b8(flag)
flag = chmul_9517c309(flag)
flag = chsub_4d7b9897(flag)
flag = chxor_29db699e(flag)
flag = csub_f9d99859(flag)
flag = chxor_da354166(flag)
flag = shuffle_0df0d459(flag)
flag = mul_2a724485(flag)
flag = cmul_513a78aa(flag)
flag = add_1c8d08f1(flag)
flag = csub_cea15a0b(flag)
flag = add_53fcaa0e(flag)
flag = cmul_029f5e8d(flag)
flag = mul_4bf9810d(flag)
flag = cxor_f14bf0f9(flag)
flag = chxor_699d5577(flag)
flag = chadd_88f9bb2d(flag)
flag = cmul_87fd4468(flag)
flag = digsub_be5397e9(flag)
flag = cxor_c8ef5dcc(flag)
flag = sub_3145bf03(flag)
flag = chunk_42bc522c(flag)
flag = sub_bea3fee1(flag)
flag = cadd_c0d41733(flag)
flag = cmul_b01d887b(flag)
flag = chadd_ed0711d8(flag)
flag = chunk_82b4fb76(flag)
flag = cxor_52629279(flag)
flag = csub_8a92b818(flag)
flag = xor_2495a11e(flag)
flag = cxor_d1b86499(flag)
flag = chmul_90f76848(flag)
flag = mul_77c55019(flag)
flag = chmul_e406aa1a(flag)
flag = cmul_f0413f14(flag)
flag = xor_4a69189b(flag)
flag = chadd_d4f4e60b(flag)
flag = csub_486467f4(flag)
flag = chunk_b4139adc(flag)
flag = shuffle_692c856d(flag)
flag = cmul_e7c72b68(flag)
flag = csub_754c0169(flag)
flag = chsub_167fa647(flag)
flag = chunk_88bc39ba(flag)
flag = add_0572be2d(flag)
flag = chmul_0c946b47(flag)
flag = cmul_d64253b9(flag)
flag = chsub_48f17d05(flag)
flag = cmul_be878186(flag)
flag = xor_d4b3bf17(flag)
flag = cmul_697c5558(flag)
flag = chxor_733c74e9(flag)
flag = chmul_26940e3b(flag)
flag = shuffle_897b72ea(flag)
flag = xor_a04b2880(flag)
flag = sub_31290fb7(flag)
flag = chunk_3f96f374(flag)
flag = csub_c123debf(flag)
flag = csub_d3a63092(flag)
flag = cmul_2eb8bc9e(flag)
flag = add_2b6347c9(flag)
flag = sub_c3134c11(flag)
flag = cxor_c4236734(flag)
flag = cxor_b9faaea4(flag)
flag = sub_2a18cec8(flag)
flag = chxor_88e67ab1(flag)
flag = sub_72e0ad9e(flag)
flag = add_3a8493e1(flag)
flag = sub_0bdcedb0(flag)
flag = cadd_2d211677(flag)
flag = digsub_09d4f702(flag)
flag = csub_44ad5428(flag)
flag = cmul_280315b7(flag)
flag = chunk_45aefbfc(flag)
flag = add_1559ce63(flag)
flag = mul_a5d1eb4a(flag)
flag = chmul_02f67fce(flag)
flag = xor_2b6a5232(flag)
flag = chsub_4fe6a0b8(flag)
flag = cxor_88eef1ab(flag)
flag = chsub_d8b43803(flag)
flag = chadd_3c9e0be9(flag)
flag = csub_5bd78a36(flag)
flag = cadd_ae1d750b(flag)
flag = digsub_f642c787(flag)
flag = chunk_69dd3db9(flag)
flag = mul_b19c9677(flag)
flag = chunk_a998eeb4(flag)
flag = cmul_fe6ecce9(flag)
flag = chunk_e172109d(flag)
flag = cadd_a4fd2ffb(flag)
flag = add_0cecddf7(flag)
flag = chsub_b090cf63(flag)
flag = mul_3d1b9786(flag)
flag = shuffle_1011fc21(flag)
flag = chmul_ab23c18c(flag)
flag = chunk_4bf6bdc4(flag)
flag = digsub_abf0937e(flag)
flag = sub_47698898(flag)
flag = cxor_2aa22b89(flag)
flag = chunk_97573788(flag)
flag = chadd_977a0637(flag)
flag = xor_032ec723(flag)
flag = xor_14cbf59f(flag)
flag = sub_2637de69(flag)
flag = chunk_a763fb97(flag)
flag = chxor_471bdc7e(flag)
flag = xor_2ac1f33e(flag)
flag = xor_a1e6019f(flag)
flag = sub_71bf262c(flag)
flag = cmul_6c27ae5b(flag)
flag = chmul_b8a7f012(flag)
flag = csub_9560b32f(flag)
flag = chunk_73de87d2(flag)
flag = chsub_74d9532d(flag)
flag = chunk_5e4cee28(flag)
flag = mul_a47d4993(flag)
flag = shuffle_2c2121d2(flag)
flag = chmul_9d6b502f(flag)
flag = add_9dad90bf(flag)
flag = chxor_1e5bb2ed(flag)
flag = chunk_c47f2b0e(flag)
flag = cmul_5ceeaceb(flag)
flag = shuffle_58938b75(flag)
flag = shuffle_987eaf21(flag)
flag = shuffle_d0a6fda1(flag)
flag = digsub_8224944b(flag)
flag = cmul_02507e59(flag)
flag = sub_f5f7ee7a(flag)
flag = chmul_23bd481d(flag)
flag = csub_25da5f24(flag)
flag = chxor_a76b0441(flag)
flag = chmul_ab54c89e(flag)
flag = cadd_0228ee52(flag)
flag = cxor_faa42ed7(flag)
flag = chxor_442c0a5b(flag)
flag = chmul_d6a4e65e(flag)
flag = xor_5707171e(flag)
flag = sub_0d8062bd(flag)
flag = chunk_a9bb69a3(flag)
flag = mul_d4e4b51b(flag)
flag = chsub_a40de1d7(flag)
flag = xor_07333316(flag)
flag = sub_5044b2cf(flag)
flag = cmul_6fb2378c(flag)
flag = chmul_315f2063(flag)
flag = chmul_e513d3af(flag)
flag = xor_0ade2d1f(flag)
flag = chsub_3cc05763(flag)
flag = shuffle_eb45c1f4(flag)
flag = cmul_318e5f45(flag)
flag = shuffle_0d458069(flag)
flag = add_50d7387e(flag)
flag = sub_8c65785f(flag)
flag = chunk_c8598499(flag)
flag = digsub_6b9010a5(flag)
flag = cmul_21388cd8(flag)
flag = shuffle_49d97f75(flag)
flag = chadd_ced5aac5(flag)
flag = cmul_9ea3f862(flag)
flag = mul_4b619987(flag)
flag = add_da9b8954(flag)
flag = chsub_07a262a0(flag)
flag = cmul_0b6d9f9a(flag)
flag = chsub_2d6c78f3(flag)
flag = chxor_2f1310f4(flag)
flag = add_6300f0c0(flag)
flag = mul_d900d8ed(flag)
flag = chmul_584b1b88(flag)
flag = chxor_ce07c0ad(flag)
flag = digsub_324078ea(flag)
flag = chunk_459d40d3(flag)
flag = cmul_fdbbadd8(flag)
flag = xor_78429cb3(flag)
flag = cadd_53f37c7e(flag)
flag = cadd_c170383d(flag)
flag = add_f2a6c048(flag)
flag = chxor_22bbbf9c(flag)
flag = mul_9d0c3682(flag)
flag = mul_67e87c31(flag)
flag = csub_cb5867de(flag)
flag = chxor_f84733a4(flag)
flag = sub_9514a3ce(flag)
flag = cxor_9a341cfa(flag)
flag = sub_d45b504c(flag)
flag = chmul_ba6b991f(flag)
flag = sub_2291bf41(flag)
flag = digsub_69f3e773(flag)
flag = cadd_fc1ffff9(flag)
flag = chadd_d2d3bddf(flag)
flag = digsub_189a0416(flag)
flag = add_88cb654b(flag)
flag = chunk_f5342e5d(flag)
flag = chadd_b13cc8ae(flag)
flag = mul_137ad3d1(flag)
flag = cmul_b1a79f4a(flag)
flag = shuffle_3207f061(flag)
flag = cxor_f744fca4(flag)
flag = chxor_aa6e4431(flag)
flag = cmul_76043ee3(flag)
flag = chxor_ac024fc8(flag)
flag = xor_90755689(flag)
flag = cmul_d487af89(flag)
flag = csub_cec4261b(flag)
flag = chadd_14d93540(flag)
flag = add_f22a99f3(flag)
flag = chmul_a32f41a3(flag)
flag = chunk_6a5424b4(flag)
flag = cxor_9d8f4ca2(flag)
flag = xor_1a989c5f(flag)
flag = cadd_407bbf2e(flag)
flag = cadd_65434b8c(flag)
flag = chunk_e53ff766(flag)
flag = sub_5a358ec6(flag)
flag = chmul_7ebba446(flag)
flag = xor_060a0f63(flag)
flag = digsub_3835b3e1(flag)
flag = chsub_c1db5393(flag)
flag = shuffle_f3858d75(flag)
flag = cadd_5352b247(flag)
flag = cadd_0a5ff345(flag)
flag = shuffle_efb3207c(flag)
flag = chmul_498a4104(flag)
flag = cadd_629049ed(flag)
flag = xor_46eb3b29(flag)
flag = shuffle_03c855c6(flag)
flag = chxor_41c79131(flag)
flag = chunk_31411086(flag)
flag = sub_653c19b3(flag)
flag = csub_20a6b2c3(flag)
flag = shuffle_c8f4c133(flag)
flag = cmul_4f99fe69(flag)
flag = chadd_983dad8d(flag)
flag = shuffle_8a66e8f2(flag)
flag = chxor_db85cf59(flag)
flag = add_278192d9(flag)
flag = xor_7b6d7222(flag)
flag = chunk_4113b7f6(flag)
flag = cxor_46b69f72(flag)
flag = cmul_60deac9a(flag)
flag = digsub_a56c83c8(flag)
flag = cmul_ca478228(flag)
flag = add_df9616a0(flag)
flag = chmul_97ccb142(flag)
flag = add_c6556187(flag)
flag = mul_50110bad(flag)
flag = csub_fda3f560(flag)
flag = csub_23110697(flag)
flag = csub_f291b39b(flag)
flag = sub_dd4a6aab(flag)
flag = chsub_a2fdcc3b(flag)
flag = chsub_83dc3951(flag)
flag = cxor_53f93269(flag)
flag = chunk_97573788(flag)
flag = csub_965ea16b(flag)
flag = mul_4b619987(flag)
flag = chsub_2d6c78f3(flag)
flag = chmul_ae2a8843(flag)
flag = shuffle_f4cba7dd(flag)
flag = digsub_7638ee12(flag)
flag = chmul_5fbe910e(flag)
flag = chsub_b448dac1(flag)
flag = chadd_3e7b3151(flag)
flag = digsub_caab5c9d(flag)
flag = csub_5e8b3577(flag)
flag = mul_5918bc39(flag)
flag = chmul_a6bf2367(flag)
flag = chmul_7df9b320(flag)
flag = mul_bce42f5e(flag)
flag = cadd_9ae3f2d8(flag)
flag = cxor_f40371fb(flag)
flag = chxor_12caeb3c(flag)
flag = cmul_2eb68781(flag)
flag = cmul_b01d887b(flag)
flag = chunk_c47f2b0e(flag)
flag = cadd_01e4dea4(flag)
flag = chmul_4af7800f(flag)
flag = cmul_108a5ff2(flag)
flag = cadd_441443f1(flag)
flag = sub_f1819d8e(flag)
flag = chxor_9b4a8975(flag)
flag = add_fb49a21d(flag)
flag = shuffle_6186b5b1(flag)
flag = mul_fcc77ce6(flag)
flag = chxor_cc620f44(flag)
flag = chmul_27f0b944(flag)
flag = chmul_e6742997(flag)
flag = mul_b2b433f9(flag)
flag = chmul_b9bc1a28(flag)
flag = digsub_828ecd75(flag)
flag = mul_452d9445(flag)
flag = chadd_da1b4b19(flag)
flag = cxor_6eabaf02(flag)
flag = cxor_d05587bc(flag)
flag = add_f22a99f3(flag)
flag = chadd_685bb625(flag)
flag = chmul_fb4d75c9(flag)
flag = add_cfe45120(flag)
flag = digsub_cd61bbc0(flag)
flag = sub_653c19b3(flag)
flag = chunk_45336ad9(flag)
flag = sub_f3b58e44(flag)
flag = csub_f9235964(flag)
flag = cadd_f1e2dc73(flag)
flag = chsub_3d2428ad(flag)
flag = xor_060a0f63(flag)
flag = chxor_65fb61d8(flag)
flag = mul_a1ba17e5(flag)
flag = chxor_18337976(flag)
flag = mul_8502f399(flag)
flag = sub_53dd4b93(flag)
flag = chmul_d95ce6fa(flag)
flag = csub_08317493(flag)
flag = cxor_89cd8dcd(flag)
flag = cxor_8e45b4c4(flag)
flag = sub_960a2209(flag)
flag = cxor_e4b3ee28(flag)
flag = chmul_63977e71(flag)
flag = cmul_9513451d(flag)
flag = cxor_8ff25e39(flag)
flag = shuffle_7c9553cb(flag)
flag = sub_c24992e8(flag)
flag = cxor_a1a8de03(flag)
flag = chadd_658a720b(flag)
flag = shuffle_3f9d1ce8(flag)
flag = cmul_7ca572e2(flag)
flag = csub_959f7557(flag)
flag = mul_2418a801(flag)
flag = cadd_8d1c2ebb(flag)
flag = csub_1d8c0c6b(flag)
flag = sub_4a2fd9ee(flag)
flag = chunk_6a5424b4(flag)
flag = chxor_da702120(flag)
flag = mul_492399d6(flag)
flag = chxor_02aa625d(flag)
flag = chsub_2b33e666(flag)
flag = chmul_04649cec(flag)
flag = chmul_8e52ad65(flag)
flag = shuffle_dc92e6b1(flag)
flag = shuffle_922a7e0d(flag)
flag = shuffle_18bb44b8(flag)
flag = chmul_e2b38bce(flag)
flag = chxor_6eac24b1(flag)
flag = chadd_5290e7f2(flag)
flag = shuffle_8cc50403(flag)
flag = chsub_27fbe141(flag)
flag = cmul_393b0cfb(flag)
flag = chmul_32362a1d(flag)
flag = digsub_7e09e05c(flag)
flag = digsub_db13869f(flag)
flag = mul_0b942967(flag)
flag = chunk_d4a3f365(flag)
flag = csub_2cc5f209(flag)
flag = cmul_66170953(flag)
flag = cadd_6a1ee984(flag)
flag = chadd_e5be5f3f(flag)
flag = xor_bbeda458(flag)
flag = cxor_6476b200(flag)
flag = chadd_43e1206d(flag)
flag = xor_75987462(flag)
flag = chmul_20654021(flag)
flag = cadd_69879170(flag)
flag = shuffle_6a444585(flag)
flag = chunk_f87a2350(flag)
flag = xor_a42aac9f(flag)
flag = add_dbc17785(flag)
flag = chmul_70ce2001(flag)
flag = chxor_46d80275(flag)
flag = cadd_8fd791e9(flag)
flag = cxor_f9bee875(flag)
flag = chmul_215a2fee(flag)
flag = sub_53dd4b93(flag)
flag = mul_0fc3ddc1(flag)
flag = xor_22aa0e90(flag)
flag = sub_ecf0a346(flag)
flag = mul_8e78cc44(flag)
flag = chxor_f8174daf(flag)
flag = digsub_172d24b0(flag)
flag = cxor_0c6bb32e(flag)
flag = chmul_d9fd0dcd(flag)
flag = add_87dad6e0(flag)
flag = cmul_18b5fc94(flag)
flag = mul_00091c11(flag)
flag = shuffle_8cc50403(flag)
flag = add_88cb654b(flag)
flag = cadd_22e59670(flag)
flag = cxor_bba6fa0a(flag)
flag = chunk_55f369b0(flag)
flag = cadd_648dbdbd(flag)
flag = mul_0b942967(flag)
flag = chadd_f137e21d(flag)
flag = chunk_64907dea(flag)
flag = chunk_20e9ea05(flag)
flag = csub_395783d4(flag)
flag = chsub_d05da0d8(flag)
flag = sub_f502ff48(flag)
flag = sub_0992e83f(flag)
flag = chmul_923598c6(flag)
flag = digsub_899a9f6d(flag)
flag = mul_2fea700d(flag)
flag = chxor_3a47885a(flag)
flag = cadd_ad85576d(flag)
flag = cmul_c6f9ed4d(flag)
flag = shuffle_5f97b5a9(flag)
flag = cxor_b8b43d96(flag)
flag = shuffle_28f1a858(flag)
flag = sub_f1819d8e(flag)
flag = chmul_b8a4da05(flag)
flag = xor_702b624c(flag)
flag = shuffle_879744de(flag)
flag = chmul_160cacb0(flag)
flag = digsub_1d4087e8(flag)
flag = csub_302bf054(flag)
flag = xor_b055d8c5(flag)
flag = cxor_41f67d77(flag)
flag = mul_897a634a(flag)
flag = chxor_be9a01b5(flag)
flag = chmul_c1277148(flag)
flag = cadd_7f81973a(flag)
flag = chadd_4b0b608a(flag)
flag = add_53fcaa0e(flag)
flag = cmul_7ca572e2(flag)
flag = shuffle_49d97f75(flag)
flag = chmul_0ef7cc5e(flag)
flag = cmul_8c0028d4(flag)
flag = chadd_ebbb5dc5(flag)
flag = chunk_8af8feea(flag)
flag = chmul_e6614b6a(flag)
flag = cadd_d07896bc(flag)
flag = sub_f1ab5525(flag)
flag = chadd_cb3aec1c(flag)
flag = csub_0356de94(flag)
flag = cxor_46b69f72(flag)
flag = cxor_65e0c2b5(flag)
flag = xor_6ee9de87(flag)
flag = cxor_71e7ff03(flag)
flag = xor_1c0c670c(flag)
flag = chunk_839a5ccb(flag)
flag = chmul_e4e712b9(flag)
flag = digsub_caab5c9d(flag)
flag = cadd_88038a55(flag)
flag = chadd_8afcabff(flag)
flag = chxor_ae76ed5a(flag)
flag = digsub_081fcfe8(flag)
flag = chadd_3d456bc0(flag)
flag = mul_1caf7ce9(flag)
flag = xor_35ce8bcd(flag)
flag = chunk_f037e109(flag)
flag = chunk_8356e7c8(flag)
flag = xor_860fd005(flag)
flag = xor_2495a11e(flag)
flag = sub_d67326ec(flag)
flag = add_1b3e26ab(flag)
flag = chadd_d5cb8b82(flag)
flag = chsub_f3e2875f(flag)
flag = sub_04d98d74(flag)
flag = sub_79391e33(flag)
flag = chadd_36130bc9(flag)
flag = add_58fa684a(flag)
flag = csub_ad630998(flag)
flag = chxor_e3b5c5ae(flag)
flag = cmul_ed0fd163(flag)
flag = digsub_d131ea62(flag)
flag = mul_bb31d66d(flag)
flag = xor_fc88f2e7(flag)
flag = add_2cc0eef9(flag)
flag = cadd_dd57ed89(flag)
flag = chadd_fed374e0(flag)
flag = cadd_ea861103(flag)
flag = csub_237fd55f(flag)
flag = digsub_e6768cff(flag)
flag = sub_b28bd4f8(flag)
flag = digsub_4a75fccf(flag)
flag = csub_9560b32f(flag)
flag = chmul_f8bbf12f(flag)
flag = chmul_885659c9(flag)
flag = chsub_c7e9cf5d(flag)
flag = cxor_3829c9db(flag)
flag = chunk_12fc1604(flag)
flag = shuffle_aabdc81c(flag)
flag = chmul_a39be275(flag)
flag = digsub_703bfb0c(flag)
flag = digsub_2ab90ae8(flag)
flag = mul_67e87c31(flag)
flag = cxor_ccd49eb2(flag)
flag = cadd_598cbf7e(flag)
flag = mul_7fd5912a(flag)
flag = chmul_5af32334(flag)
flag = xor_60d3ac80(flag)
flag = cmul_c9f8e5a1(flag)
flag = shuffle_3113cb7a(flag)
flag = cmul_5193391a(flag)
flag = csub_8a92b818(flag)
flag = chsub_76cedeac(flag)
flag = chadd_d68e3c7a(flag)
flag = xor_3d2b41ae(flag)
flag = xor_eca7972f(flag)
flag = digsub_ce000989(flag)
flag = add_0e1d894a(flag)
flag = digsub_8fc854f8(flag)
flag = chxor_14ca1407(flag)
flag = mul_1e5ed056(flag)
flag = chunk_db078de2(flag)
flag = chmul_e2b38bce(flag)
flag = chxor_a84644b1(flag)
flag = chunk_cea296ca(flag)
flag = chunk_45c083a0(flag)
flag = chunk_406e7c05(flag)
flag = sub_18770552(flag)
flag = cadd_cfe7bb7a(flag)
flag = chunk_cd87c4de(flag)
flag = chadd_99b8ad72(flag)
flag = cadd_f83b216d(flag)
flag = chunk_bb0e25ea(flag)
flag = chadd_76b3ac4f(flag)
flag = csub_35e65bc6(flag)
flag = csub_d3a63092(flag)
flag = digsub_24f7cbd7(flag)
flag = mul_67e87c31(flag)
flag = add_cfe45120(flag)
flag = mul_c0b36007(flag)
flag = cmul_a3103f38(flag)
flag = chunk_20e19fb4(flag)
flag = chadd_acce32b7(flag)
flag = chadd_d12574c1(flag)
flag = chadd_5816fd7f(flag)
flag = chmul_b5f1b2d9(flag)
flag = sub_122f24d4(flag)
flag = chadd_d4f4e60b(flag)
flag = chsub_5a5cbf95(flag)
flag = sub_91a9b671(flag)
flag = cmul_82b0086b(flag)
flag = sub_63fceeb9(flag)
flag = csub_f0b67669(flag)
flag = chxor_2b2282b6(flag)
flag = chadd_0badfcf5(flag)
flag = chadd_0232afc0(flag)
flag = cadd_ba5550aa(flag)
flag = chmul_4bf09cb4(flag)
flag = cxor_4e153811(flag)
flag = chxor_db85cf59(flag)
flag = xor_f87e36e2(flag)
flag = shuffle_76309fe2(flag)
flag = csub_16bab438(flag)
flag = add_0f283710(flag)
flag = digsub_bcdd2125(flag)
flag = cxor_454d9bad(flag)
flag = add_c1c20de3(flag)
flag = csub_642b1701(flag)
flag = cmul_4381cbd5(flag)
flag = sub_de9b7e77(flag)
flag = chunk_205e30c0(flag)
flag = csub_efe13119(flag)
flag = chunk_cf8a51ed(flag)
flag = chadd_474b9959(flag)
flag = csub_efe13119(flag)
flag = cmul_892d62b0(flag)
flag = chsub_5f8a214c(flag)
flag = chmul_615c46c1(flag)
flag = chxor_6fca7a91(flag)
flag = chsub_3a9fd4f5(flag)
flag = chunk_fd32f837(flag)
flag = cmul_8189d30e(flag)
flag = sub_8476e2a1(flag)
flag = cadd_27c86167(flag)
flag = chadd_f73b3974(flag)
flag = csub_68308d55(flag)
flag = shuffle_3113cb7a(flag)
flag = cadd_a31a177e(flag)
flag = digsub_8e44fdbd(flag)
flag = sub_8d22e619(flag)
flag = chxor_7e8369a9(flag)
flag = chmul_f8bd0b15(flag)
flag = shuffle_def3ecab(flag)
flag = cmul_7e84fb88(flag)
flag = chsub_e0feb99d(flag)
flag = chsub_e8aa8b79(flag)
flag = chmul_b20c3846(flag)
flag = csub_ea9d41b8(flag)
flag = chunk_25c9a817(flag)
flag = sub_de79490f(flag)
flag = chsub_0d419486(flag)
flag = sub_96b63796(flag)
flag = csub_efe13119(flag)
flag = chxor_1150451f(flag)
flag = shuffle_6c9a670f(flag)
flag = xor_14cbf59f(flag)
flag = chadd_b9888b8b(flag)
flag = digsub_67b6032a(flag)
flag = chsub_e4b39d3b(flag)
flag = cxor_f20321f0(flag)
flag = add_ed2b53a6(flag)
flag = cxor_c2fd3f28(flag)
flag = add_022bab8d(flag)
flag = cxor_567d1d52(flag)
flag = chunk_205e30c0(flag)
flag = cadd_cf6071d3(flag)
flag = sub_bea3fee1(flag)
flag = add_35671a57(flag)
flag = xor_8297deee(flag)
flag = chunk_bdedc29f(flag)
flag = chsub_9ce25212(flag)
flag = csub_ad5db692(flag)
flag = chsub_e87a1297(flag)
flag = cadd_61a362c2(flag)
flag = cadd_130f7b9b(flag)
flag = digsub_e6768cff(flag)
flag = mul_d4fa63d2(flag)
flag = chsub_b591ca37(flag)
flag = mul_137ad3d1(flag)
flag = mul_66f10f71(flag)
flag = shuffle_506b50c8(flag)
flag = cmul_054249fc(flag)
flag = chadd_52f847ab(flag)
flag = chxor_02646472(flag)
flag = add_53fcaa0e(flag)
flag = chadd_93e431eb(flag)
flag = sub_60d9cd7a(flag)
flag = sub_381e766c(flag)
flag = csub_0f2dcd11(flag)
flag = chadd_88d19b3c(flag)
flag = cadd_9a06eb38(flag)
flag = xor_c0bb5777(flag)
flag = shuffle_8e02f517(flag)
flag = xor_4bd4b2d3(flag)
flag = chmul_49ccc560(flag)
flag = csub_70a8e307(flag)
flag = add_4584979d(flag)
flag = chunk_45c7c0f6(flag)
flag = csub_4392ba2f(flag)
flag = chxor_f2f16c61(flag)
flag = cxor_6953d2a7(flag)
flag = shuffle_17e23897(flag)
flag = chxor_b041b00c(flag)
flag = add_a45b80f9(flag)
flag = xor_813cf8a0(flag)
flag = cadd_d08b740c(flag)
flag = chunk_ba9920ce(flag)
flag = cadd_40a2d9f1(flag)
flag = digsub_bcd14776(flag)
flag = cmul_f98bab5d(flag)
flag = cxor_ccd49eb2(flag)
flag = digsub_46d7afa7(flag)
flag = chxor_f8174daf(flag)
flag = mul_3d2d3c98(flag)
flag = chunk_d09c17de(flag)
flag = chunk_a998eeb4(flag)
flag = csub_32783b79(flag)
flag = digsub_34bac6be(flag)
flag = chxor_18fcc0f2(flag)
flag = csub_395783d4(flag)
flag = cxor_53f93269(flag)
flag = cmul_77da69c4(flag)
flag = chsub_0ee9fb58(flag)
flag = chadd_5fc42fbd(flag)
flag = chsub_ee48bdeb(flag)
flag = chsub_d8b43803(flag)
flag = chadd_96a0ee76(flag)
flag = csub_2b0ae6b8(flag)
flag = chunk_b51aa621(flag)
flag = mul_d4e4b51b(flag)
flag = shuffle_6df04177(flag)
flag = xor_47cf200f(flag)
flag = sub_e9895f44(flag)
flag = cmul_f59de4d7(flag)
flag = cmul_b5dc4245(flag)
flag = chmul_5add5ae2(flag)
flag = mul_8028fe56(flag)
flag = cadd_b60bc8ff(flag)
flag = chsub_cd79e5f6(flag)
flag = cadd_7bfaa07b(flag)
flag = add_a391835b(flag)
flag = sub_6a9bc171(flag)
flag = add_770b1c6f(flag)
flag = cxor_29df8c0e(flag)
flag = chadd_3d456bc0(flag)
flag = cadd_074e39fc(flag)
flag = shuffle_8e02f517(flag)
flag = cadd_c170383d(flag)
flag = digsub_ac841ac3(flag)
flag = chxor_a244aa4c(flag)
flag = chmul_a2ab16cb(flag)
flag = cxor_e4b3ee28(flag)
flag = chmul_f48a5878(flag)
flag = cxor_eb72bf39(flag)
flag = chsub_e508cd4b(flag)
flag = chsub_c3fb1168(flag)
flag = chxor_f5fbcae0(flag)
flag = chmul_38133c10(flag)
flag = cxor_0b39c3e8(flag)
flag = shuffle_dd75cb23(flag)
flag = chmul_5add5ae2(flag)
flag = add_23028792(flag)
flag = chmul_1666c516(flag)
flag = chunk_d09c17de(flag)
flag = digsub_ff82e274(flag)
flag = cadd_a6482f91(flag)
flag = sub_71ca3f1b(flag)
flag = shuffle_ec9b15d1(flag)
flag = add_ed2b53a6(flag)
flag = digsub_31bf04a3(flag)
flag = xor_23d58644(flag)
flag = chsub_68113691(flag)
flag = cadd_8d1c2ebb(flag)
flag = cxor_6938f43d(flag)
flag = cadd_1af81cdc(flag)
flag = mul_c50eb88b(flag)
flag = mul_d952127d(flag)
flag = sub_8d4465ea(flag)
flag = mul_384fbf08(flag)
flag = csub_d77927e4(flag)
flag = chunk_9758765f(flag)
flag = chadd_32554a61(flag)
flag = sub_fa8a3be1(flag)
flag = mul_658a4b4b(flag)
flag = shuffle_de4afce0(flag)
flag = chadd_16ea1a60(flag)
flag = chadd_3016fa48(flag)
flag = add_8ef46bd6(flag)
flag = chunk_7692aef1(flag)
flag = csub_ad630998(flag)
flag = add_547096c9(flag)
flag = xor_5b9dbd1c(flag)
flag = cxor_16cc8dc6(flag)
flag = chxor_b3db6e83(flag)
flag = cxor_075c21e0(flag)
flag = xor_e994fa9c(flag)
flag = chmul_ab9cdb92(flag)
flag = add_0572be2d(flag)
flag = shuffle_b6a2aa6c(flag)
flag = chmul_f3f19079(flag)
flag = mul_f41b15dd(flag)
flag = chsub_3d2428ad(flag)
flag = chmul_885659c9(flag)
flag = chsub_792c2235(flag)
flag = digsub_3ff40549(flag)
flag = mul_d9dbdb53(flag)
flag = sub_e8045aa7(flag)
flag = chsub_134ff6dd(flag)
flag = sub_dfb02634(flag)
flag = chsub_91553a2c(flag)
flag = cxor_37164c6f(flag)
flag = mul_5918bc39(flag)
flag = mul_2a724485(flag)
flag = chsub_76b2d7aa(flag)
flag = csub_2d425659(flag)
flag = xor_23517ee7(flag)
flag = mul_bdb89cce(flag)
flag = add_c1abafc2(flag)
flag = shuffle_86331a49(flag)
flag = chxor_65aad212(flag)
flag = digsub_e717a1dc(flag)
flag = add_51b5d61d(flag)
flag = xor_addb072f(flag)
flag = xor_fbcf5aa3(flag)
flag = mul_c50eb88b(flag)
flag = shuffle_204502b1(flag)
flag = cadd_15b9e74b(flag)
flag = chadd_e14e4897(flag)
flag = mul_7fa6ac59(flag)
flag = chunk_97573788(flag)
flag = csub_40fa37b4(flag)
flag = chxor_85ae54d2(flag)
flag = chxor_2b81e3ec(flag)
flag = sub_51002c26(flag)
flag = chsub_7e45d909(flag)
flag = mul_77c55019(flag)
flag = chunk_5a70d9ef(flag)
flag = shuffle_69db3f4f(flag)
flag = xor_b75a23b1(flag)
flag = chunk_d697c787(flag)
flag = chmul_0e5b89be(flag)
flag = chsub_619c6037(flag)
flag = chadd_65bf6072(flag)
flag = chxor_84d7073f(flag)
flag = chxor_31b5069b(flag)
flag = chunk_6f47d8f4(flag)
flag = sub_854261bd(flag)
flag = shuffle_3d5811d2(flag)
flag = sub_f3871ca4(flag)
flag = add_a2c38523(flag)
flag = cadd_c0d41733(flag)
flag = sub_657f5f3f(flag)
flag = cadd_27c86167(flag)
flag = mul_60a92fff(flag)
flag = sub_ee08aad9(flag)
flag = csub_841d8ee8(flag)
flag = chunk_b51aa621(flag)
flag = shuffle_9a408c44(flag)
flag = add_a91e1171(flag)
flag = mul_36a4bfa0(flag)
flag = mul_0fc3ddc1(flag)
flag = add_4db6bc88(flag)
flag = sub_47cbdf28(flag)
flag = chxor_de63b1bc(flag)
flag = cmul_0c68dd02(flag)
flag = cxor_112ee4fc(flag)
flag = csub_ee940cd2(flag)
flag = chsub_02246759(flag)
flag = cxor_14787d69(flag)
flag = chxor_5323ed11(flag)
flag = chmul_0db588dd(flag)
flag = cmul_7a36ad1f(flag)
flag = chadd_2bcca0b5(flag)
flag = xor_a2c95310(flag)
flag = shuffle_897b72ea(flag)
flag = xor_3994c2ad(flag)
flag = cxor_802236be(flag)
flag = shuffle_d2451358(flag)
flag = cadd_3876a03b(flag)
flag = cmul_1871b99c(flag)
flag = shuffle_a17bb4ee(flag)
flag = mul_bf01fdb9(flag)
flag = chunk_a008d507(flag)
flag = cxor_a1a8de03(flag)
flag = digsub_bcb409f7(flag)
flag = add_9e4296de(flag)
flag = cadd_44729e6e(flag)
flag = cadd_27c86167(flag)
flag = chxor_4909f0be(flag)
flag = shuffle_ff476bf3(flag)
flag = cadd_a377ad5c(flag)
flag = add_3d1c6187(flag)
flag = mul_a8c5006e(flag)
flag = add_e08d6566(flag)
flag = add_a1fe299c(flag)
flag = digsub_a580518f(flag)
flag = add_07231911(flag)
flag = chxor_57e0c9f1(flag)
flag = cxor_71fd1f39(flag)
flag = cxor_ed3b1b28(flag)
flag = cadd_0fb9e0bd(flag)
flag = chxor_6b41b0f3(flag)
flag = sub_f7bae9cf(flag)
flag = chmul_de111dfb(flag)
flag = csub_8bb7278b(flag)
flag = chsub_e20ff930(flag)
flag = chsub_7a75b07e(flag)
flag = digsub_03c94dae(flag)
flag = add_c1c20de3(flag)
flag = digsub_1755eb85(flag)
flag = mul_6858d87e(flag)
flag = digsub_8a9512c3(flag)
flag = sub_a40cb760(flag)
flag = chxor_dbe47d55(flag)
flag = chadd_b9c3b1c6(flag)
flag = cxor_cc7ef037(flag)
flag = chsub_27ecb709(flag)
flag = xor_abf7f988(flag)
flag = cmul_f0b91a4d(flag)
flag = cmul_3cb7c090(flag)
flag = chxor_ffe3793d(flag)
flag = chxor_3e87843f(flag)
flag = shuffle_8c84166e(flag)
flag = digsub_2a3c141d(flag)
flag = mul_1b781211(flag)
flag = xor_4d6d322c(flag)
flag = digsub_e9fbb5e0(flag)
flag = cxor_cd79085f(flag)
flag = shuffle_32641923(flag)
flag = mul_c00416be(flag)
flag = cadd_eca08b2e(flag)
flag = xor_ccce8b68(flag)
flag = cxor_da56bd65(flag)
flag = digsub_575bce65(flag)
flag = xor_4c2f2b2e(flag)
flag = chadd_cf40e026(flag)
flag = chsub_01e56b12(flag)
flag = chadd_6a1bd216(flag)
flag = chmul_a1decfe1(flag)
flag = add_d1d41f14(flag)
flag = chadd_24def8ad(flag)
flag = chsub_e30c03a4(flag)
flag = cmul_9edf8822(flag)
flag = cxor_f0f82070(flag)
flag = chsub_70e4436e(flag)
flag = shuffle_c089e7f9(flag)
flag = cxor_802236be(flag)
flag = chadd_2b71c3ea(flag)
flag = chxor_85f13098(flag)
flag = chmul_6d29d2c8(flag)
flag = chadd_a3542df8(flag)
flag = mul_c991ef9e(flag)
flag = sub_ef127564(flag)
flag = mul_82f61bf9(flag)
flag = chunk_9970853d(flag)
flag = sub_11293e74(flag)
flag = chxor_79daeaf3(flag)
flag = digsub_cd61bbc0(flag)
flag = chxor_b3e205ec(flag)
flag = add_a391835b(flag)
flag = xor_93a9262d(flag)
flag = sub_c2ba5275(flag)
flag = mul_9ed02e6c(flag)
flag = chmul_d3cbaa99(flag)
flag = add_8eb87b67(flag)
flag = chxor_2bbe4cc1(flag)
flag = sub_3428aff7(flag)
flag = add_91babee9(flag)
flag = shuffle_b69552ce(flag)
flag = chadd_d54dcfab(flag)
flag = csub_20678af6(flag)
flag = chsub_619c6037(flag)
flag = mul_d62641f4(flag)
flag = cmul_0d8033d0(flag)
flag = cadd_79e79007(flag)
flag = shuffle_a3c6e740(flag)
flag = cxor_83571dc3(flag)
flag = cmul_6fb2378c(flag)
flag = cxor_974a0f64(flag)
flag = chxor_30705179(flag)
flag = cxor_dc7aac3c(flag)
flag = cadd_e87be691(flag)
flag = csub_9856c97f(flag)
flag = chunk_4961df80(flag)
flag = chadd_474b9959(flag)
flag = mul_14ad1525(flag)
flag = shuffle_f44f0fc5(flag)
flag = cmul_06a971d4(flag)
flag = chunk_97e5e867(flag)
flag = chxor_36059956(flag)
flag = mul_df48e442(flag)
flag = chxor_57a0d20a(flag)
flag = chunk_b3c680b6(flag)
flag = add_d1eb8814(flag)
flag = shuffle_8a10d0b7(flag)
flag = xor_7661c292(flag)
flag = cmul_880f9e67(flag)
flag = chsub_84e2be83(flag)
flag = cxor_c0bd96a1(flag)
flag = digsub_0410b672(flag)
flag = chadd_87bfe060(flag)
flag = shuffle_e204c945(flag)
flag = cxor_e6156798(flag)
flag = chxor_ad45b413(flag)
flag = shuffle_ce932b10(flag)
flag = shuffle_ddc42a39(flag)
flag = chunk_b0d8cc2d(flag)
flag = csub_0ebe7c05(flag)
flag = digsub_03f54ba3(flag)
flag = cmul_9a7d5570(flag)
flag = shuffle_5ad024ad(flag)
flag = cmul_ddef00cb(flag)
flag = digsub_caab5c9d(flag)
flag = chxor_6f5bf7ea(flag)
flag = xor_ec9f1bc5(flag)
flag = chmul_a32f41a3(flag)
flag = xor_a1a977f9(flag)
flag = add_a3d5d1da(flag)
flag = chsub_619c6037(flag)
flag = chxor_a614acf2(flag)
flag = cadd_503cc573(flag)
flag = chmul_cee9aae6(flag)
flag = xor_c1194f5a(flag)
flag = digsub_a740a80e(flag)
flag = mul_4084757c(flag)
flag = chunk_be4b9bb8(flag)
flag = xor_23eae5a3(flag)
flag = chadd_ec0fef0e(flag)
flag = xor_b1dcccdc(flag)
flag = chunk_e798b09f(flag)
flag = shuffle_1a7b4aba(flag)
flag = chunk_e7835142(flag)
flag = csub_25da5f24(flag)
flag = mul_a54dfca0(flag)
flag = digsub_1d28a867(flag)
flag = chadd_a6e32549(flag)
flag = add_b510c979(flag)
flag = chxor_0c3b8e79(flag)
flag = cmul_dce80096(flag)
flag = cadd_f83b216d(flag)
flag = add_0cf48ce3(flag)
flag = cmul_7a36ad1f(flag)
flag = mul_ebff36e1(flag)
flag = cxor_d2e5bfdf(flag)
flag = digsub_ecaa949d(flag)
flag = chunk_c8598499(flag)
flag = shuffle_883a1be7(flag)
flag = shuffle_7eddc63c(flag)
flag = chmul_36d54a3c(flag)
flag = chxor_2167eaf6(flag)
flag = mul_f345af6b(flag)
flag = chmul_d8f1c0f8(flag)
flag = chadd_1475aaba(flag)
flag = sub_de9b7e77(flag)
flag = chmul_f8409008(flag)
flag = digsub_46d7afa7(flag)
flag = chxor_947d449e(flag)
flag = cxor_5e014b04(flag)
flag = chmul_def74a51(flag)
flag = mul_89548da9(flag)
flag = digsub_2ab90ae8(flag)
flag = chxor_730db16c(flag)
flag = digsub_211a2fee(flag)
flag = chmul_37406cbe(flag)
flag = sub_b83b0b5a(flag)
flag = cxor_87ecf0a7(flag)
flag = cxor_d8404029(flag)
flag = csub_087d6e8e(flag)
flag = cmul_f769c78a(flag)
flag = csub_daf0877b(flag)
flag = chunk_0934570f(flag)
flag = add_9188b7d9(flag)
flag = cxor_5ab74c0d(flag)
flag = shuffle_204502b1(flag)
flag = chsub_cbfe2a72(flag)
flag = chxor_cf758070(flag)
flag = cmul_2a502598(flag)
flag = cmul_e510f1c4(flag)
flag = cadd_527ebfe5(flag)
flag = cmul_a05a6983(flag)
flag = xor_36e98afe(flag)
flag = cxor_ce58803c(flag)
flag = csub_2d425659(flag)
flag = sub_9de672fa(flag)
flag = shuffle_0b97d7ce(flag)
flag = chmul_8c7712e0(flag)
flag = shuffle_20aac844(flag)
flag = sub_72e0ad9e(flag)
flag = chadd_983dad8d(flag)
flag = mul_0bbc1674(flag)
flag = chunk_f037e109(flag)
flag = add_c2f77d7b(flag)
flag = add_6e9d979e(flag)
flag = chsub_b3a9e994(flag)
flag = cadd_b39a5b0b(flag)
flag = cmul_111bce58(flag)
flag = chadd_323e5325(flag)
flag = cadd_62b6ad0e(flag)
flag = cxor_c4236734(flag)
flag = cxor_14787d69(flag)
flag = shuffle_8abc2b43(flag)
flag = cadd_d957f629(flag)
flag = sub_9de672fa(flag)
flag = add_6e59afd0(flag)
flag = cadd_2dcf1992(flag)
flag = cxor_29df8c0e(flag)
flag = digsub_82f27ce9(flag)
flag = sub_8058d94d(flag)
flag = sub_aa1109df(flag)
flag = cmul_b5356752(flag)
flag = chadd_65b8d0ef(flag)
flag = chsub_258a5c14(flag)
flag = chunk_f75e2f55(flag)
flag = sub_fb458c7e(flag)
flag = chxor_e6a0d155(flag)
flag = chxor_595823d4(flag)
flag = add_a91e1171(flag)
flag = xor_7c90aa84(flag)
flag = add_1aa75a60(flag)
flag = cmul_318e5f45(flag)
flag = chxor_38018a02(flag)
flag = chadd_4d98bf27(flag)
flag = chmul_b8c4917b(flag)
flag = xor_25ac4148(flag)
flag = chadd_e835abf7(flag)
flag = cadd_e4b46665(flag)
flag = xor_5b72ca68(flag)
flag = csub_d24d889b(flag)
flag = cxor_c4236734(flag)
flag = chunk_c9018375(flag)
flag = chxor_0449a472(flag)
flag = mul_1e5ed056(flag)
flag = chxor_6c38cb27(flag)
flag = chmul_dd1920ab(flag)
flag = chsub_1cf94121(flag)
flag = chunk_757730c2(flag)
flag = add_8a75fd19(flag)
flag = xor_34863588(flag)
flag = chadd_d4f4e60b(flag)
flag = mul_cba48e57(flag)
flag = chsub_d27566eb(flag)
flag = chxor_013d1031(flag)
flag = xor_3994c2ad(flag)
flag = cxor_0b39c3e8(flag)
flag = cxor_3db736ba(flag)
flag = chunk_5fa20e0f(flag)
flag = cadd_1aff9833(flag)
flag = chsub_29d24d89(flag)
flag = digsub_4bfe6492(flag)
flag = mul_194ab633(flag)
flag = mul_0a969cbc(flag)
flag = chmul_680cf464(flag)
flag = chsub_3e828f05(flag)
flag = cmul_06a971d4(flag)
flag = mul_001d570f(flag)
flag = chadd_8658906e(flag)
flag = mul_194ab633(flag)
flag = chxor_da22b4fb(flag)
flag = add_2cc0eef9(flag)
flag = chadd_2f4760f5(flag)
flag = chxor_02aa625d(flag)
flag = cmul_ca71521f(flag)
flag = chxor_6712129e(flag)
flag = chmul_12872986(flag)
flag = chmul_decbe9f3(flag)
flag = cmul_4efbd341(flag)
flag = chsub_7af0731b(flag)
flag = chadd_404cff4b(flag)
flag = cadd_56facd4a(flag)
flag = cmul_d77e3c24(flag)
flag = xor_2cce1391(flag)
flag = chmul_680cf464(flag)
flag = cmul_2971f624(flag)
flag = csub_bdd64a1d(flag)
flag = shuffle_28f1a858(flag)
flag = cadd_f4a3a91b(flag)
flag = chmul_92c7a281(flag)
flag = add_66171335(flag)
flag = csub_fd81f025(flag)
flag = sub_a30eb08d(flag)
flag = csub_2b0ae6b8(flag)
flag = mul_9dbf3796(flag)
flag = chadd_a59f17f7(flag)
flag = chadd_6128a54c(flag)
flag = csub_237fd55f(flag)
flag = chadd_d9f375ba(flag)
flag = add_07231911(flag)
flag = cmul_7a2b74fe(flag)
flag = chsub_9a699614(flag)
flag = cadd_fc1ffff9(flag)
flag = sub_44011266(flag)
flag = chadd_d980e2e3(flag)
flag = chadd_4b0b608a(flag)
flag = chmul_ef7fa6ac(flag)
flag = add_e3a56377(flag)
flag = chsub_004b681b(flag)
flag = chxor_da22b4fb(flag)
flag = shuffle_3d5811d2(flag)
flag = cxor_e3ac0f88(flag)
flag = chunk_93ca5889(flag)
flag = cadd_1cd51d5c(flag)
flag = sub_734f1f1d(flag)
flag = chunk_406fc18b(flag)
flag = add_604f7a16(flag)
flag = csub_e0440f53(flag)
flag = chsub_a13b0c4e(flag)
flag = cxor_1290e20b(flag)
flag = add_fc842ea7(flag)
flag = chmul_e559b45c(flag)
flag = chadd_37bb2c71(flag)
flag = chunk_cd87c4de(flag)
flag = cadd_81a69b3f(flag)
flag = cadd_56728fa3(flag)
flag = shuffle_7b60ebb6(flag)
flag = mul_62cf6aa4(flag)
flag = csub_d6e694b3(flag)
flag = add_547096c9(flag)
flag = chunk_8356e7c8(flag)
flag = chxor_d15e0d3f(flag)
flag = chsub_33711b4f(flag)
flag = add_bd22edc2(flag)
flag = sub_47cbdf28(flag)
flag = shuffle_55c1c340(flag)
flag = add_718a4547(flag)
flag = chunk_e53ff766(flag)
flag = chmul_49efe464(flag)
flag = add_79292e38(flag)
flag = chunk_518ff916(flag)
flag = chsub_b60cec96(flag)
flag = chxor_9fa88068(flag)
flag = sub_02f68178(flag)
flag = cadd_bf48a745(flag)
flag = csub_59e78f82(flag)
flag = add_770b1c6f(flag)
flag = digsub_af2d37bc(flag)
flag = digsub_7d45ef3f(flag)
flag = add_5f346d84(flag)
flag = cmul_9513451d(flag)
flag = mul_386487fa(flag)
flag = chunk_5d103edd(flag)
flag = chxor_1272b4b3(flag)
flag = chxor_de5cf1af(flag)
flag = digsub_d085a426(flag)
flag = chxor_7b570606(flag)
flag = chxor_3a47885a(flag)
flag = xor_3edbcd7c(flag)
flag = chunk_eb268372(flag)
flag = chxor_ce31e412(flag)
flag = cadd_d3ea8638(flag)
flag = mul_043ce6a6(flag)
flag = chmul_6d29d2c8(flag)
flag = chxor_c7b14201(flag)
flag = mul_6906b8ec(flag)
flag = chmul_8c7712e0(flag)
flag = chmul_67bd77bc(flag)
flag = chmul_61efa118(flag)
flag = xor_c0f387ba(flag)
flag = chmul_c9980e5a(flag)
flag = add_0090343e(flag)
flag = cxor_b4a5b937(flag)
flag = add_bd22edc2(flag)
flag = shuffle_f4bbf14d(flag)
flag = chmul_3267fabc(flag)
flag = cxor_b7550d4d(flag)
flag = chxor_9bc8ede2(flag)
flag = mul_bdbf4994(flag)
flag = chsub_98a13db8(flag)
flag = sub_4e6d826d(flag)
flag = chsub_98a13db8(flag)
flag = add_3e1e2c0b(flag)
flag = shuffle_d69d2c9b(flag)
flag = csub_656995cb(flag)
flag = chmul_05b3201a(flag)
flag = shuffle_0d458069(flag)
flag = chxor_fb59e14c(flag)
flag = chunk_25c9a817(flag)
flag = add_06c4c375(flag)
flag = xor_e8c8896d(flag)
flag = chadd_1fa30d24(flag)
flag = chsub_2f62951a(flag)
flag = xor_b1850163(flag)
flag = chmul_998ab1ea(flag)
flag = cadd_4d6936c6(flag)
flag = cmul_bac2ec72(flag)
flag = digsub_b6c1346d(flag)
flag = chunk_225b51ad(flag)
flag = chunk_ab1c7f5f(flag)
flag = shuffle_1676c2c9(flag)
flag = chmul_77349f1c(flag)
flag = shuffle_7b370edd(flag)
flag = sub_f1ab5525(flag)
flag = chmul_61efa118(flag)
flag = cadd_b138e6e3(flag)
flag = xor_d90ee923(flag)
flag = shuffle_8cc50403(flag)
flag = chmul_615c46c1(flag)
flag = cmul_06256c90(flag)
flag = cmul_9fab9317(flag)
flag = shuffle_987eaf21(flag)
flag = cmul_87dca596(flag)
flag = chadd_3b98f1b0(flag)
flag = add_bd22edc2(flag)
flag = chsub_36aaf90a(flag)
flag = cadd_12c3036e(flag)
flag = chadd_8231f9c2(flag)
flag = chmul_27f0b944(flag)
flag = chmul_63977e71(flag)
flag = chxor_6e6160e1(flag)
flag = chsub_8809f725(flag)
flag = csub_a76aeaed(flag)
flag = sub_32cc1a97(flag)
flag = chunk_9ce2d01b(flag)
flag = chxor_a8789254(flag)
flag = sub_7bf8c980(flag)
flag = xor_cc5d6b6d(flag)
flag = chsub_968aab31(flag)
flag = shuffle_e204c945(flag)
flag = chadd_4d2a9496(flag)
flag = cxor_719205d0(flag)
flag = chunk_1ba6912f(flag)
flag = cxor_ef4e4e70(flag)
flag = chsub_83dc3951(flag)
flag = chxor_5c4c4d77(flag)
flag = xor_6a5cf5a7(flag)
flag = mul_2898db69(flag)
flag = mul_652ee2e0(flag)
flag = chadd_cb3aec1c(flag)
flag = chxor_041a698a(flag)
flag = chsub_808e087e(flag)
flag = chmul_035bd60a(flag)
flag = xor_a6e7fa68(flag)
flag = cxor_4b979532(flag)
flag = chmul_bc8c721f(flag)
flag = cadd_50d8a8d3(flag)
flag = shuffle_86e11db2(flag)
flag = cxor_e6156798(flag)
flag = chmul_cee9aae6(flag)
flag = chmul_c4924d51(flag)
flag = digsub_15856403(flag)
flag = chxor_a120d278(flag)
flag = chxor_d6bf3b04(flag)
flag = mul_c4baebe4(flag)
flag = chmul_e6614b6a(flag)
flag = csub_2d425659(flag)
flag = sub_2ec060e9(flag)
flag = cadd_a5b24fcc(flag)
flag = digsub_e2a32d2b(flag)
flag = csub_23f2ff18(flag)
flag = cmul_cd1aad88(flag)
flag = sub_a99136b5(flag)
flag = cxor_ffad6101(flag)
flag = digsub_6ab37400(flag)
flag = chadd_c28b3253(flag)
flag = digsub_7638ee12(flag)
flag = add_b510c979(flag)
flag = csub_486467f4(flag)
flag = chxor_f0c78fe9(flag)
flag = cadd_ba5550aa(flag)
flag = mul_18205495(flag)
flag = chunk_42bc522c(flag)
flag = cmul_8facd3c6(flag)
flag = chsub_e4b39d3b(flag)
flag = chmul_ee75a8f1(flag)
flag = chadd_58981664(flag)
flag = cadd_36d81dd6(flag)
flag = shuffle_ac6dd478(flag)
flag = cmul_4efbd341(flag)
flag = cadd_22f01a9a(flag)
flag = csub_b14e28f6(flag)
flag = chunk_b195e92b(flag)
flag = shuffle_b6779950(flag)
flag = chunk_27ab9318(flag)
flag = chadd_d4f4e60b(flag)
flag = shuffle_10c94be6(flag)
flag = cadd_36d81dd6(flag)
flag = chadd_d12574c1(flag)
flag = csub_087d6e8e(flag)
flag = chadd_d5cb8b82(flag)
flag = shuffle_e4527971(flag)
flag = chunk_205e30c0(flag)
flag = mul_095b48a3(flag)
flag = chsub_fded2730(flag)
flag = chmul_843e27ef(flag)
flag = digsub_cca1638e(flag)
flag = chunk_f44dbb33(flag)
flag = shuffle_d69d2c9b(flag)
flag = sub_d37c6c7c(flag)
flag = xor_d4b3bf17(flag)
flag = chmul_608cd53e(flag)
flag = cadd_ce6a8f1f(flag)
flag = xor_11751251(flag)
flag = chxor_ca9732e1(flag)
flag = cadd_a31d859b(flag)
flag = chmul_c042377c(flag)
flag = chxor_85f3bf12(flag)
flag = chunk_36ffef9b(flag)
flag = shuffle_dc92e6b1(flag)
flag = add_49cf2359(flag)
flag = chmul_ffc882e5(flag)
flag = add_c908a5f4(flag)
flag = add_49cf2359(flag)
flag = xor_18093134(flag)
flag = csub_8cff1d96(flag)
flag = shuffle_b14477ff(flag)
flag = cadd_1cd51d5c(flag)
flag = add_52b814e5(flag)
flag = csub_1f106834(flag)
flag = shuffle_9cedec4d(flag)
flag = add_8cda84d9(flag)
flag = cxor_7645272c(flag)
flag = cxor_fa9fe64d(flag)
flag = cxor_d42f4ceb(flag)
flag = cxor_c74d1258(flag)
flag = cmul_db96fc2e(flag)
flag = cxor_182bdecc(flag)
flag = shuffle_4289061c(flag)
flag = cxor_c146ee2f(flag)
flag = chmul_65689d19(flag)
flag = xor_816adcd8(flag)
flag = xor_c05b216d(flag)
flag = chunk_f5aa64b7(flag)
flag = xor_3b14c897(flag)
flag = sub_3c434ee5(flag)
flag = chmul_bc8c721f(flag)
flag = digsub_1f6e32d7(flag)
flag = digsub_61a694a2(flag)
flag = add_ab46dc0e(flag)
flag = chadd_93e431eb(flag)
flag = digsub_b6993817(flag)
flag = shuffle_1a7b4aba(flag)
flag = digsub_5f03912e(flag)
flag = mul_29392dc2(flag)
flag = mul_cab49d47(flag)
flag = cmul_5f2f8cea(flag)
flag = xor_cdbf869f(flag)
flag = chadd_c427ca04(flag)
flag = chadd_fe246cb1(flag)
flag = cmul_66170953(flag)
flag = cadd_f61d1530(flag)
flag = chadd_fcb73b21(flag)
flag = cxor_18c1314e(flag)
flag = mul_e04a2c12(flag)
flag = cadd_7db59ff9(flag)
flag = chadd_da891bd7(flag)
flag = add_60fa40cf(flag)
flag = digsub_fcf8a8ee(flag)
flag = chunk_9b5e7e5c(flag)
flag = mul_714f7f13(flag)
flag = shuffle_865caf5e(flag)
flag = sub_36eea33a(flag)
flag = cxor_e729022e(flag)
flag = chsub_19dd999e(flag)
flag = chsub_0ee9fb58(flag)
flag = mul_1b990e40(flag)
flag = shuffle_c5cb30a9(flag)
flag = add_9e4296de(flag)
flag = cmul_cabb8b44(flag)
flag = xor_b8937290(flag)
flag = sub_dbea1d09(flag)
flag = add_ea027a3a(flag)
flag = cmul_cb8500f8(flag)
flag = digsub_78f5b7bb(flag)
flag = chsub_a0999ab2(flag)
flag = xor_2b6a5232(flag)
flag = xor_0e83be33(flag)
flag = chmul_2c8f4393(flag)
flag = sub_60d9cd7a(flag)
flag = csub_35e65bc6(flag)
flag = chxor_ea027ec2(flag)
flag = cxor_69705ab6(flag)
flag = chxor_dd683543(flag)
flag = cxor_0aedee08(flag)
flag = cadd_9a96d521(flag)
flag = chsub_75cdd33b(flag)
flag = chadd_163d8ed7(flag)
flag = chsub_daf292bd(flag)
flag = chxor_85ae54d2(flag)
flag = digsub_ba2f366a(flag)
flag = digsub_0afb900b(flag)
flag = chunk_6a5424b4(flag)
flag = sub_c62f3219(flag)
flag = chsub_8809f725(flag)
flag = cadd_dd57ed89(flag)
flag = chadd_028f229e(flag)
flag = cxor_53f93269(flag)
flag = add_88ef453e(flag)
flag = chsub_1b8086f6(flag)
flag = chadd_e92d3462(flag)
flag = sub_f1320d35(flag)
flag = add_c43e26d8(flag)
flag = chmul_f5416998(flag)
flag = csub_ad630998(flag)
flag = add_e696fc9f(flag)
flag = add_e0500d96(flag)
flag = chxor_34a2c770(flag)
flag = chunk_cb2fa615(flag)
flag = chsub_e112aa83(flag)
flag = chmul_47a26e6f(flag)
flag = csub_d480ce5f(flag)
flag = xor_895658c8(flag)
flag = add_0f283710(flag)
flag = chsub_4d7b9897(flag)
flag = sub_7d90f9de(flag)
flag = xor_a04b2880(flag)
flag = chxor_09e2622c(flag)
flag = sub_1d06041f(flag)
flag = cmul_19d02797(flag)
flag = shuffle_897b72ea(flag)
flag = cxor_bb8eddbd(flag)
flag = add_b7f3fb09(flag)
flag = sub_2e2758dc(flag)
flag = digsub_172d24b0(flag)
flag = csub_59e78f82(flag)
flag = mul_2cd00355(flag)
flag = chunk_22f90678(flag)
flag = xor_94f0d244(flag)
flag = shuffle_0a4f92ab(flag)
flag = chxor_69637723(flag)
flag = digsub_1f1582a8(flag)
flag = chunk_caa9baa3(flag)
flag = add_fb172b98(flag)
flag = csub_8cff1d96(flag)
flag = shuffle_14e44222(flag)
flag = xor_abff1870(flag)
flag = chxor_ce31e412(flag)
flag = digsub_d131ea62(flag)
flag = cmul_cabb8b44(flag)
flag = mul_9ed02e6c(flag)
flag = chunk_4423d984(flag)
flag = chunk_f5342e5d(flag)
flag = cadd_1d1894a8(flag)
flag = xor_eca7972f(flag)
flag = chsub_c6725cc1(flag)
flag = chxor_4427bf9d(flag)
flag = chunk_8356e7c8(flag)
flag = chadd_0badfcf5(flag)
flag = xor_64a04adb(flag)
flag = chsub_4cadc753(flag)
flag = shuffle_de4afce0(flag)
flag = chsub_65723dab(flag)
flag = csub_c123debf(flag)
flag = shuffle_3bb1ab6d(flag)
flag = cadd_e87be691(flag)
flag = csub_5a6c81e3(flag)
flag = xor_bf47bb3a(flag)
flag = chsub_7178b8f3(flag)
flag = chadd_d5cb8b82(flag)
flag = shuffle_3b482bb3(flag)
flag = cmul_db003c24(flag)
flag = chunk_e53ff766(flag)
flag = sub_7aa7238b(flag)
flag = add_8cda84d9(flag)
flag = xor_22aa0e90(flag)
flag = cmul_a51dd714(flag)
flag = xor_0ec01206(flag)
flag = chunk_a998eeb4(flag)
flag = cadd_27c86167(flag)
flag = mul_16385c48(flag)
flag = csub_bf7e54b2(flag)
flag = xor_e8c8896d(flag)
flag = chxor_7f2707c2(flag)
flag = mul_3dd9a13e(flag)
flag = cxor_1c819fcf(flag)
flag = mul_a4e5921f(flag)
flag = shuffle_68814b98(flag)
flag = digsub_15140dd6(flag)
flag = cmul_2d4425ba(flag)
flag = add_c1f5edb7(flag)
flag = sub_0c6430ff(flag)
flag = xor_276ba897(flag)
flag = chsub_1ad0c5fe(flag)
flag = chadd_c33c08d6(flag)
flag = xor_f98f4d97(flag)
flag = chmul_36d54a3c(flag)
flag = chmul_b8a7f012(flag)
flag = chxor_38c0a7ad(flag)
flag = digsub_ee047607(flag)
flag = chsub_3d2428ad(flag)
flag = shuffle_8a66e8f2(flag)
flag = xor_0e83be33(flag)
flag = cmul_ae473405(flag)
flag = chxor_699d5577(flag)
flag = cmul_b7f51e10(flag)
flag = cmul_8705a015(flag)
flag = shuffle_236a7376(flag)
flag = chxor_0449a472(flag)
flag = cmul_c6f9ed4d(flag)
flag = chunk_0e5f27e0(flag)
flag = xor_ed479080(flag)
flag = chmul_1c0bdb7a(flag)
flag = xor_0b406c7d(flag)
flag = mul_70c4cf79(flag)
flag = csub_0356de94(flag)
flag = cmul_cb30aead(flag)
flag = sub_e9895f44(flag)
flag = xor_32fe74f6(flag)
flag = cadd_b70e8959(flag)
flag = cxor_a9c59f97(flag)
flag = chxor_fad6bade(flag)
flag = chadd_a3542df8(flag)
flag = csub_f8935355(flag)
flag = chxor_855b33d8(flag)
flag = xor_339b9a13(flag)
flag = chsub_3bf8b0c8(flag)
flag = cxor_802236be(flag)
flag = chunk_41ac0046(flag)
flag = mul_eb201421(flag)
flag = chunk_b51aa621(flag)
flag = digsub_c71ff0e5(flag)
flag = csub_7ef295f1(flag)
flag = cxor_29df8c0e(flag)
flag = mul_abf95b28(flag)
flag = chxor_d23e056d(flag)
flag = cmul_ddd178e6(flag)
flag = chadd_3aa9c371(flag)
flag = add_de55f4f2(flag)
flag = xor_36e98afe(flag)
flag = shuffle_2621171b(flag)
flag = cmul_b358c3b3(flag)
flag = add_88ef453e(flag)
flag = sub_3c288b1c(flag)
flag = add_4d5b7dd8(flag)
flag = cmul_1db73e1b(flag)
flag = cxor_41f67d77(flag)
flag = xor_bf90865c(flag)
flag = cadd_603af25d(flag)
flag = chmul_826efe63(flag)
flag = sub_2ccd274d(flag)
flag = chmul_b3677069(flag)
flag = cmul_2d4425ba(flag)
flag = chxor_3569bd0b(flag)
flag = cmul_b358c3b3(flag)
flag = chxor_62bb4f9e(flag)
flag = chxor_f274337d(flag)
flag = cadd_b6aa1a21(flag)
flag = cadd_5afd7d69(flag)
flag = mul_9ed02e6c(flag)
flag = cmul_e4190864(flag)
flag = chsub_91add2c2(flag)
flag = cxor_9a4356f0(flag)
flag = xor_7661c292(flag)
flag = cxor_2f7b49f0(flag)
flag = cadd_de624ff2(flag)
flag = cmul_decdbb6d(flag)
flag = chxor_aa6e4431(flag)
flag = chunk_a5854668(flag)
flag = chxor_edba075a(flag)
flag = cadd_b138e6e3(flag)
flag = chxor_2b81e3ec(flag)
flag = cxor_d43914ce(flag)
flag = csub_2bce138a(flag)
flag = mul_68b3556d(flag)
flag = chadd_186dd996(flag)
flag = chxor_ea20e7b5(flag)
flag = chadd_5d64f99d(flag)
flag = add_3fa4a716(flag)
flag = cmul_829e8d09(flag)
flag = shuffle_719cf56c(flag)
flag = shuffle_8c84166e(flag)
flag = chunk_01c25ee4(flag)
flag = mul_efab7eff(flag)
flag = add_50d7387e(flag)
flag = shuffle_3e606129(flag)
flag = chadd_224e17b1(flag)
flag = shuffle_30915728(flag)
flag = xor_e2704680(flag)
flag = csub_44ad5428(flag)
flag = cmul_6ae52f53(flag)
flag = cxor_48ff1c3c(flag)
flag = shuffle_5f949cd5(flag)
flag = digsub_8e7fd683(flag)
flag = cxor_5161196f(flag)
flag = chxor_c55e532b(flag)
flag = csub_b9b5b150(flag)
flag = cxor_56b535b1(flag)
flag = cxor_51d9f2ee(flag)
flag = chadd_00e2dbca(flag)
flag = mul_8c6fc3ce(flag)
flag = shuffle_d88e3f7d(flag)
flag = shuffle_8cc50403(flag)
flag = cmul_5e8f38d5(flag)
flag = chunk_6b870e2e(flag)
flag = mul_78cdcde8(flag)
flag = mul_6fc04a8d(flag)
flag = mul_21b7a6b1(flag)
flag = chunk_da01c0e7(flag)
flag = chxor_cd5d1c4b(flag)
flag = xor_e994fa9c(flag)
flag = shuffle_b6a2aa6c(flag)
flag = cxor_5161196f(flag)
flag = cxor_a56196fd(flag)
flag = chmul_faca1df3(flag)
flag = chadd_a8439bc3(flag)
flag = cxor_7f33f858(flag)
flag = chadd_d9f375ba(flag)
flag = xor_f88ae7f1(flag)
flag = chunk_a5854668(flag)
flag = add_f10a2818(flag)
flag = xor_82a4d513(flag)
flag = cmul_318e5f45(flag)
flag = cadd_81afebad(flag)
flag = digsub_a821dc7d(flag)
flag = add_e44ea43f(flag)
flag = xor_2b415907(flag)
flag = cxor_4ff36064(flag)
flag = xor_9bd4e1fb(flag)
flag = cmul_db792b73(flag)
flag = cxor_15061824(flag)
flag = cadd_fa34d6b4(flag)
flag = mul_043ce6a6(flag)
flag = cmul_8d226a5e(flag)
flag = cadd_838fe20a(flag)
flag = csub_e5b6d56f(flag)
flag = csub_23f2ff18(flag)
flag = chunk_9903c486(flag)
flag = chxor_0449a472(flag)
flag = chadd_37bb2c71(flag)
flag = sub_ca91f11f(flag)
flag = chsub_f97f894e(flag)
flag = xor_4c95d03b(flag)
flag = add_44200607(flag)
flag = chadd_ff6b9cf5(flag)
flag = shuffle_425fc483(flag)
flag = xor_f8437474(flag)
flag = xor_34863588(flag)
flag = cmul_69eb6792(flag)
flag = chxor_dd87f2e6(flag)
flag = chmul_8e52ad65(flag)
flag = chadd_f2fd70f1(flag)
flag = chadd_ed0711d8(flag)
flag = chsub_84e9e2bd(flag)
flag = cxor_30674cf4(flag)
flag = cxor_f2627c5a(flag)
flag = cmul_c4987507(flag)
flag = digsub_426ca25d(flag)
flag = cmul_0c91bf4c(flag)
flag = chadd_88ba6a81(flag)
flag = cxor_c6e16ecc(flag)
flag = add_a1fe299c(flag)
flag = shuffle_e204c945(flag)
flag = chmul_1a3d7c8c(flag)
flag = shuffle_a9affa02(flag)
flag = cxor_697bee04(flag)
flag = cmul_31b88b90(flag)
flag = chunk_e2c320ee(flag)
flag = add_3fa4a716(flag)
flag = chxor_be9a01b5(flag)
flag = cxor_9bda6371(flag)
flag = cadd_6719a051(flag)
flag = xor_f19c0746(flag)
flag = chadd_09e456ed(flag)
flag = chsub_56440f95(flag)
flag = chadd_db3363a7(flag)
flag = chunk_f44dbb33(flag)
flag = xor_b59cd77f(flag)
flag = chunk_a431061a(flag)
flag = cxor_79917601(flag)
flag = cxor_eb72bf39(flag)
flag = cxor_454d9bad(flag)
flag = xor_a1a977f9(flag)
flag = sub_0992e83f(flag)
flag = cmul_7630284a(flag)
flag = chmul_0b2874b7(flag)
flag = chxor_c7f6ad65(flag)
flag = chadd_63faefcf(flag)
flag = sub_bea3fee1(flag)
flag = chxor_de63f975(flag)
flag = shuffle_d2451358(flag)
flag = chunk_31cdb624(flag)
flag = chmul_f1598a09(flag)
flag = chxor_3972d07b(flag)
flag = chxor_31b5069b(flag)
flag = mul_dd59ae79(flag)
flag = xor_c425535c(flag)
flag = sub_f31829a3(flag)
flag = csub_a0c513d9(flag)
flag = cmul_c52f5be0(flag)
flag = add_b071c8e9(flag)
flag = csub_af6b6944(flag)
flag = chxor_f5fbcae0(flag)
flag = chxor_2f1310f4(flag)
flag = add_fc581b51(flag)
flag = xor_bb4022b1(flag)
flag = cxor_bbd7e7fe(flag)
flag = add_0942c03a(flag)
flag = cmul_e4155cf9(flag)
flag = mul_51ffc146(flag)
flag = digsub_2362ee33(flag)
flag = add_c8330084(flag)
flag = chadd_7fc84678(flag)
flag = chmul_8f392c35(flag)
flag = sub_c7fb8e5e(flag)
flag = digsub_8326055f(flag)
flag = cadd_8fd791e9(flag)
flag = cmul_8d626e12(flag)
flag = cxor_ef4e4e70(flag)
flag = xor_4e43f7ea(flag)
flag = xor_dce2a545(flag)
flag = chsub_c0922438(flag)
flag = mul_1d0b4953(flag)
flag = mul_993204a9(flag)
flag = csub_2cc5f209(flag)
flag = cmul_1f88fc08(flag)
flag = cadd_caf674cf(flag)
flag = xor_1e24aa63(flag)
flag = csub_754c0169(flag)
flag = add_23028792(flag)
flag = csub_9678c8c9(flag)
flag = chmul_794b5292(flag)
flag = chxor_83f63c74(flag)
flag = cadd_a2b15006(flag)
flag = sub_1719880f(flag)
flag = csub_74d531bb(flag)
flag = cmul_06a86517(flag)
flag = cxor_bacb039a(flag)
flag = digsub_ec34bd78(flag)
flag = chmul_8fdd15ff(flag)
flag = chunk_22f90678(flag)
flag = sub_92b6d92c(flag)
flag = cmul_dce80096(flag)
flag = cmul_f05686bd(flag)
flag = chsub_411c54c2(flag)
flag = cxor_2e4b26f4(flag)
flag = mul_3d1b9786(flag)
flag = digsub_15856403(flag)
flag = csub_d14c716c(flag)
flag = chxor_da702120(flag)
flag = chsub_e93fd882(flag)
flag = csub_cf019266(flag)
flag = chmul_451b1e6b(flag)
flag = mul_959ccef4(flag)
flag = chadd_5290e7f2(flag)
flag = cmul_c6f9ed4d(flag)
flag = chsub_74d9532d(flag)
flag = mul_62a37d48(flag)
flag = chxor_e4593d98(flag)
flag = add_378b40cb(flag)
flag = xor_df910360(flag)
flag = cxor_bb8eddbd(flag)
flag = cxor_d2e5bfdf(flag)
flag = xor_7661c292(flag)
flag = chunk_59cbae4c(flag)
flag = chunk_45336ad9(flag)
flag = sub_481904d7(flag)
flag = chmul_7cfdd3dc(flag)
flag = chxor_23fb4dc2(flag)
flag = chunk_fd32f837(flag)
flag = chxor_7bc1a643(flag)
flag = cadd_01e4dea4(flag)
flag = chadd_04ef3ad8(flag)
flag = chsub_b4abe193(flag)
flag = chxor_eae131e0(flag)
flag = cmul_de3ea36c(flag)
flag = mul_cab49d47(flag)
flag = chunk_cbcd0993(flag)
flag = csub_4660584b(flag)
flag = cxor_d1b86499(flag)
flag = cadd_370c5e9e(flag)
flag = cxor_0e49988d(flag)
flag = add_3631a2fd(flag)
flag = mul_9ed02e6c(flag)
flag = chxor_22bbbf9c(flag)
flag = shuffle_cb627e8c(flag)
flag = sub_ef03b32c(flag)
flag = add_b7f3fb09(flag)
flag = cxor_c7240b25(flag)
flag = chxor_6b41b0f3(flag)
flag = chmul_af64f7e0(flag)
flag = chxor_23198c86(flag)
flag = sub_541963fb(flag)
flag = cadd_9a96d521(flag)
flag = digsub_ee67309b(flag)
flag = chsub_e8aa8b79(flag)
flag = chunk_05980501(flag)
flag = chsub_76b2d7aa(flag)
flag = xor_4c2f2b2e(flag)
flag = chmul_04649cec(flag)
flag = xor_b3655f1c(flag)
flag = sub_43f562fe(flag)
flag = chsub_aad79c73(flag)
flag = cxor_6953d2a7(flag)
flag = xor_1ffb5965(flag)
flag = mul_dd59ae79(flag)
flag = csub_eb753ff1(flag)
flag = chsub_f75e24ea(flag)
flag = csub_7f2211d8(flag)
flag = xor_bb19f697(flag)
flag = shuffle_2ad93819(flag)
flag = chadd_6a1bd216(flag)
flag = sub_00c9af82(flag)
flag = chmul_da4f7a7d(flag)
flag = mul_987e03f2(flag)
flag = cadd_a5b24fcc(flag)
flag = sub_2d595d46(flag)
flag = digsub_78ba6bc8(flag)
flag = cadd_3876a03b(flag)
flag = cmul_7e424373(flag)
flag = cmul_8c0028d4(flag)
flag = mul_89548da9(flag)
flag = cmul_3bee8718(flag)
flag = mul_92b1b71e(flag)
flag = chadd_db065984(flag)
flag = sub_6b51b490(flag)
flag = xor_a2999e10(flag)
flag = shuffle_74725db2(flag)
flag = chxor_b4cd4919(flag)
flag = add_3fa4a716(flag)
flag = chxor_d44107b6(flag)
flag = chunk_9758765f(flag)
flag = chadd_4b37b268(flag)
flag = cadd_ea861103(flag)
flag = csub_479c2380(flag)
flag = chxor_4f175e3b(flag)
flag = chsub_a9bb41f7(flag)
flag = chmul_81ec0d4f(flag)
flag = cxor_20661e8f(flag)
flag = cmul_22a48cb5(flag)
flag = csub_34d4359e(flag)
flag = add_917bbbbc(flag)
flag = chsub_e6873048(flag)
flag = mul_5067d66a(flag)
flag = chmul_eb007432(flag)
flag = shuffle_d9cf5546(flag)
flag = digsub_99f3c205(flag)
flag = cxor_dfcb824e(flag)
flag = digsub_6e4a7a18(flag)
flag = sub_468e1495(flag)
flag = chsub_91d04f68(flag)
flag = chmul_05459301(flag)
flag = digsub_cb6346a1(flag)
flag = mul_54bc5eb1(flag)
flag = chmul_e9eb8471(flag)
flag = digsub_39cc5a0e(flag)
flag = shuffle_f44f0fc5(flag)
flag = sub_d67326ec(flag)
flag = chsub_3bf8b0c8(flag)
flag = chxor_6d888483(flag)
flag = cmul_00fd6c30(flag)
flag = chxor_ac024fc8(flag)
flag = cxor_e3dd1135(flag)
flag = chadd_65b8d0ef(flag)
flag = cadd_b83d6dfa(flag)
flag = csub_23110697(flag)
flag = chunk_65bd8d47(flag)
flag = chadd_620d941e(flag)
flag = digsub_3534e3b8(flag)
flag = chmul_5add5ae2(flag)
flag = chmul_28162caa(flag)
flag = digsub_2b3a8dfd(flag)
flag = add_059f9292(flag)
flag = chadd_baaab600(flag)
flag = csub_f291b39b(flag)
flag = chunk_28acccb3(flag)
flag = mul_f58805a3(flag)
flag = digsub_1f1582a8(flag)
flag = chsub_f15fc200(flag)
flag = chsub_93324e19(flag)
flag = digsub_e2dd946e(flag)
flag = cxor_9d8f4ca2(flag)
flag = chadd_3c9e0be9(flag)
flag = cmul_135161b4(flag)
flag = chmul_885659c9(flag)
flag = cadd_640c9c4d(flag)
flag = sub_3c434ee5(flag)
flag = chsub_77fcdd6e(flag)
flag = cxor_c2fd3f28(flag)
flag = csub_0356de94(flag)
flag = shuffle_98accf0f(flag)
flag = chmul_ab23c18c(flag)
flag = cadd_7936e180(flag)
flag = cadd_36d81dd6(flag)
flag = chmul_dd1920ab(flag)
flag = digsub_d5cf3761(flag)
flag = cadd_d44bbdbd(flag)
flag = cxor_b8e23c90(flag)
flag = chunk_cd87c4de(flag)
flag = sub_a244688a(flag)
flag = digsub_2b3a8dfd(flag)
flag = csub_8477e013(flag)
flag = cadd_b39a5b0b(flag)
flag = cadd_709ceb61(flag)
flag = cadd_f435a64a(flag)
flag = chxor_55bd1b17(flag)
flag = shuffle_f4ee3eb0(flag)
flag = cxor_a56196fd(flag)
flag = chunk_ba6b2283(flag)
flag = chadd_96a0ee76(flag)
flag = chadd_620d941e(flag)
flag = mul_bc486461(flag)
flag = add_c1f5edb7(flag)
flag = chsub_57719ac8(flag)
flag = xor_28c1cc46(flag)
flag = mul_f58805a3(flag)
flag = shuffle_68814b98(flag)
flag = chadd_fcb73b21(flag)
flag = sub_b676ab61(flag)
flag = sub_0ac2ba9f(flag)
flag = mul_a2581ad1(flag)
flag = chmul_36d54a3c(flag)
flag = add_2af4f21d(flag)
flag = sub_e0bac344(flag)
flag = sub_d163ba0e(flag)
flag = chunk_f899efdf(flag)
flag = xor_7465fff5(flag)
flag = cxor_1039bf70(flag)
flag = shuffle_285ae96d(flag)
flag = shuffle_496b2c86(flag)
flag = add_bb11d3eb(flag)
flag = sub_de79490f(flag)
flag = csub_fe2f121a(flag)
flag = shuffle_987eaf21(flag)
flag = chmul_9fbf4859(flag)
flag = chunk_b0d8cc2d(flag)
flag = xor_5c21cfc7(flag)
flag = sub_d37c6c7c(flag)
flag = cadd_d96fc4cc(flag)
flag = digsub_a240d2e8(flag)
flag = cxor_c4a0e97e(flag)
flag = sub_7f903ea3(flag)
flag = csub_cdf29b6e(flag)
flag = chsub_714e8ec9(flag)
flag = chadd_66038ddf(flag)
flag = digsub_21c1f0e1(flag)
flag = sub_4e853fbb(flag)
flag = xor_4e43f7ea(flag)
flag = chunk_181817bc(flag)
flag = chxor_c8d60001(flag)
flag = cadd_ea8c28f4(flag)
flag = chunk_4d08c9d5(flag)
flag = cmul_606c6cc5(flag)
flag = chsub_0d419486(flag)
flag = shuffle_47929ded(flag)
flag = chxor_55925b33(flag)
flag = add_158186ec(flag)
flag = shuffle_aabdc81c(flag)
flag = cadd_9bed43d0(flag)
flag = cmul_2eb8bc9e(flag)
flag = add_c8ec5588(flag)
flag = csub_8278d2c0(flag)
flag = cxor_aea954dc(flag)
flag = shuffle_236a7376(flag)
flag = cmul_a51dd714(flag)
flag = shuffle_65d9ca2c(flag)
flag = chsub_863e4a9e(flag)
flag = chunk_97573788(flag)
flag = chunk_3256d188(flag)
flag = mul_59b3d8b8(flag)
flag = sub_33da435e(flag)
flag = chadd_8d7aa344(flag)
flag = sub_a10ca0c8(flag)
flag = chadd_abc266d5(flag)
flag = shuffle_358e16be(flag)
flag = csub_fe63b620(flag)
flag = chsub_8dd5ab11(flag)
flag = mul_a0ace443(flag)
flag = cadd_fd35b517(flag)
flag = cmul_c9f8e5a1(flag)
flag = chsub_6649ba27(flag)
flag = chxor_ac024fc8(flag)
flag = csub_0ebe7c05(flag)
flag = csub_f0b67669(flag)
flag = cmul_029f5e8d(flag)
flag = cadd_e0fbc1fa(flag)
flag = chadd_16ea1a60(flag)
flag = cadd_ba362142(flag)
flag = add_1559ce63(flag)
flag = xor_df910360(flag)
flag = shuffle_922a7e0d(flag)
flag = shuffle_20aac844(flag)
flag = chxor_12caeb3c(flag)
flag = add_8a75fd19(flag)
flag = xor_e7da9a66(flag)
flag = chunk_f25c6152(flag)
flag = shuffle_e666492b(flag)
flag = xor_310c33bd(flag)
flag = cmul_db96fc2e(flag)
flag = shuffle_40277085(flag)
flag = chadd_069e430a(flag)
flag = add_378b40cb(flag)
flag = sub_481904d7(flag)
flag = shuffle_64f815bd(flag)
flag = digsub_bd11b809(flag)
flag = cadd_4003b254(flag)
flag = sub_fa8a3be1(flag)
flag = chxor_d94a9bdc(flag)
flag = xor_3d551e50(flag)
flag = chadd_151f0f0e(flag)
flag = mul_150845b8(flag)
flag = add_3631a2fd(flag)
flag = cadd_c2498f1a(flag)
flag = sub_df2b698e(flag)
flag = cxor_ff935c5e(flag)
flag = shuffle_47929ded(flag)
flag = shuffle_e14d57f5(flag)
flag = shuffle_2a87a3a3(flag)
flag = cadd_e0fbc1fa(flag)
flag = chsub_75cdd33b(flag)
flag = csub_30ac2fb9(flag)
flag = xor_e689ffa0(flag)
flag = csub_4a29a9b1(flag)
flag = csub_8477e013(flag)
flag = mul_62cf6aa4(flag)
flag = chunk_397a3d62(flag)
flag = chmul_18ecaa08(flag)
flag = digsub_b6993817(flag)
flag = chmul_57848b7a(flag)
flag = mul_78cdcde8(flag)
flag = xor_339b9a13(flag)
flag = cadd_81834239(flag)
flag = mul_6a90bbfe(flag)
flag = chmul_f5bde247(flag)
flag = mul_fc9252b1(flag)
flag = xor_1a989c5f(flag)
flag = shuffle_13171fff(flag)
flag = shuffle_719cf56c(flag)
flag = shuffle_a722dfed(flag)
flag = chsub_f09042f0(flag)
flag = sub_2ec060e9(flag)
flag = csub_2c8eacf9(flag)
flag = chmul_d3cbaa99(flag)
flag = sub_0ac2ba9f(flag)
flag = shuffle_47929ded(flag)
flag = chxor_85ae54d2(flag)
flag = cmul_3062560c(flag)
flag = cxor_2e4b26f4(flag)
flag = cmul_f0b91a4d(flag)
flag = cxor_567d1d52(flag)
flag = chmul_12872986(flag)
flag = cxor_b7550d4d(flag)
flag = sub_899f4720(flag)
flag = chunk_c828ed7d(flag)
flag = xor_e7da9a66(flag)
flag = shuffle_36c9353b(flag)
flag = chsub_1cf94121(flag)
flag = digsub_dddb1e6b(flag)
flag = csub_20a984f0(flag)
flag = add_9573eecb(flag)
flag = add_b071c8e9(flag)
flag = chadd_f45b5a3e(flag)
flag = cmul_94531f44(flag)
flag = chunk_1ba6912f(flag)
flag = chunk_b1f55538(flag)
flag = csub_4660584b(flag)
flag = chsub_56440f95(flag)
flag = chsub_5a5cbf95(flag)
flag = chadd_bfbcfbbe(flag)
flag = sub_d37c6c7c(flag)
flag = cmul_4e66e309(flag)
flag = mul_a8c5006e(flag)
flag = mul_095b48a3(flag)
flag = cxor_9a341cfa(flag)
flag = xor_4c2f2b2e(flag)
flag = sub_61538669(flag)
flag = mul_ca0cc32d(flag)
flag = chadd_0b49bf84(flag)
flag = chxor_31537f25(flag)
flag = sub_481904d7(flag)
flag = chadd_e14e4897(flag)
flag = sub_716f026e(flag)
flag = cxor_c146ee2f(flag)
flag = cadd_d07896bc(flag)
flag = xor_22f2f1f4(flag)
flag = add_35671a57(flag)
flag = sub_0b5acfeb(flag)
flag = cadd_774989e3(flag)
flag = add_9009d319(flag)
flag = csub_fdb702b6(flag)
flag = shuffle_bbb676d2(flag)
flag = sub_77f3b344(flag)
flag = chxor_fc74d45b(flag)
flag = chmul_c25d1cd0(flag)
flag = xor_1eba93e4(flag)
flag = cmul_ea9160c7(flag)
flag = chsub_792c2235(flag)
flag = mul_2dbeaa3b(flag)
flag = mul_69dd5e3a(flag)
flag = cmul_21388cd8(flag)
flag = digsub_99f3c205(flag)
flag = chunk_42bc522c(flag)
flag = chmul_37bb44ad(flag)
flag = add_0a6cff9e(flag)
flag = cxor_ed3b1b28(flag)
flag = shuffle_68814b98(flag)
flag = chxor_d23e056d(flag)
flag = chmul_12872986(flag)
flag = chunk_b0a3ccde(flag)
flag = chunk_1d45076c(flag)
flag = digsub_154d7267(flag)
flag = cxor_f4c61b89(flag)
flag = mul_67e87c31(flag)
flag = chxor_835e69ad(flag)
flag = add_87dad6e0(flag)
flag = shuffle_879744de(flag)
flag = chxor_8550301d(flag)
flag = csub_19752fd1(flag)
flag = chunk_bfd2f50a(flag)
flag = shuffle_057518f5(flag)
flag = cadd_0788aaad(flag)
flag = sub_92f79353(flag)
flag = chsub_85be1feb(flag)
flag = xor_9fab62d4(flag)
flag = sub_60d9cd7a(flag)
flag = chsub_36aaf90a(flag)
flag = chunk_40051429(flag)
flag = chunk_e5cbb933(flag)
flag = chmul_97ccb142(flag)
flag = cadd_3a2cd387(flag)
flag = digsub_b93022b5(flag)
flag = chxor_72127666(flag)
flag = chunk_e006d845(flag)
flag = digsub_9ab35f2e(flag)
flag = chsub_b80a9f15(flag)
flag = chsub_357029f0(flag)
flag = chunk_a9c428c6(flag)
flag = csub_f0b67669(flag)
flag = mul_f38a2a76(flag)
flag = xor_edf3c9f3(flag)
flag = xor_0ec01206(flag)
flag = chsub_5f944988(flag)
flag = digsub_038640b7(flag)
flag = chxor_f84733a4(flag)
flag = cxor_aea954dc(flag)
flag = add_cfe45120(flag)
flag = chsub_e20ff930(flag)
flag = cadd_ea861103(flag)
flag = xor_b2f63512(flag)
flag = chadd_adaa5d2b(flag)
flag = chsub_29d24d89(flag)
flag = chunk_d99ad65b(flag)
flag = cmul_ff24f1b5(flag)
flag = cxor_1039bf70(flag)
flag = chunk_e5aaf751(flag)
flag = chunk_0f650cd2(flag)
flag = cmul_a36f268e(flag)
flag = chadd_4a09bd0d(flag)
flag = chxor_72127666(flag)
flag = chxor_c8d60001(flag)
flag = cmul_95802649(flag)
flag = cmul_49a44f99(flag)
flag = cxor_ebeaa56d(flag)
flag = xor_e9fd82b3(flag)
flag = chunk_4c3d6535(flag)
flag = cxor_c0bd96a1(flag)
flag = add_33350535(flag)
flag = chmul_37406cbe(flag)
flag = chxor_5323ed11(flag)
flag = digsub_3f272635(flag)
flag = cadd_a495112c(flag)
flag = cadd_8db97cbc(flag)
flag = cmul_fedaeb35(flag)
flag = xor_7ede4fd2(flag)
flag = cxor_569fa700(flag)
flag = mul_3d2d3c98(flag)
flag = add_a04dd9fa(flag)
flag = cxor_71e7ff03(flag)
flag = sub_fe1bac9b(flag)
flag = chunk_37604f81(flag)
flag = chadd_28036696(flag)
flag = mul_bdb89cce(flag)
flag = shuffle_c71df508(flag)
flag = chadd_6c281254(flag)
flag = xor_34c86087(flag)
flag = sub_c126f74d(flag)
flag = cadd_e0fbc1fa(flag)
flag = chmul_3d9011bc(flag)
flag = cadd_2bb6b4bc(flag)
flag = chadd_52640d1f(flag)
flag = digsub_d085a426(flag)
flag = add_ed9a96c7(flag)
flag = chmul_fa12100c(flag)
flag = shuffle_5ea1f654(flag)
flag = mul_2c8e35d6(flag)
flag = cmul_1620fc61(flag)
flag = xor_ba1d287c(flag)
flag = chadd_e1175475(flag)
flag = chunk_a431061a(flag)
flag = csub_bce4bb70(flag)
flag = add_886697c1(flag)
flag = mul_89548da9(flag)
flag = cmul_5f2f8cea(flag)
flag = csub_452392a9(flag)
flag = cmul_b1a79f4a(flag)
flag = shuffle_28f1a858(flag)
flag = add_1eefd08b(flag)
flag = chmul_78c19c03(flag)
flag = chmul_4863adb1(flag)
flag = csub_1951cfda(flag)
flag = add_c1f5edb7(flag)
flag = chsub_e01faa71(flag)
flag = chunk_90824d65(flag)
flag = cmul_7dfade82(flag)
flag = cxor_c7240b25(flag)
flag = cadd_6ae07a4d(flag)
flag = add_b6dbb476(flag)
flag = chunk_aad9a6a9(flag)
flag = sub_f1819d8e(flag)
flag = cxor_892833c6(flag)
flag = digsub_e2130014(flag)
flag = cadd_79d7fa85(flag)
flag = cadd_432be002(flag)
flag = xor_cfc75b41(flag)
flag = chxor_65aad212(flag)
flag = sub_c15c0c16(flag)
flag = chsub_fb961764(flag)
flag = csub_a76aeaed(flag)
flag = sub_8c5d52aa(flag)
flag = chsub_38e8f84c(flag)
flag = xor_b055d8c5(flag)
flag = chmul_aae03452(flag)
flag = chadd_ed8436eb(flag)
flag = cmul_c53a95ce(flag)
flag = csub_f0b67669(flag)
flag = digsub_2945b343(flag)
flag = csub_bce4bb70(flag)
flag = add_3631a2fd(flag)
flag = cadd_e0fbc1fa(flag)
flag = chadd_1f526c5a(flag)
flag = cadd_fd35b517(flag)
flag = xor_cc5d6b6d(flag)
flag = cxor_c9ef0e8c(flag)
flag = digsub_dbfc4977(flag)
flag = cmul_ee26b387(flag)
flag = shuffle_9294cfce(flag)
flag = chmul_2d88dd5b(flag)
flag = chxor_0449a472(flag)
flag = cmul_7e424373(flag)
flag = shuffle_3a497842(flag)
flag = shuffle_86e11db2(flag)
flag = cadd_a5b24fcc(flag)
flag = chmul_49e5e1c7(flag)
flag = cadd_0a5ff345(flag)
flag = chsub_33711b4f(flag)
flag = sub_d4145101(flag)
flag = chxor_187da4ac(flag)
flag = cmul_0c68dd02(flag)
flag = csub_61a277c4(flag)
flag = chsub_339c9633(flag)
flag = sub_a62e014f(flag)
flag = cadd_bbf43e6f(flag)
flag = cmul_ea9160c7(flag)
flag = shuffle_4e8ad324(flag)
flag = chadd_fe09deb1(flag)
flag = digsub_7c2a7053(flag)
flag = xor_46b7d1d1(flag)
flag = digsub_c71698e9(flag)
flag = chsub_56813bb5(flag)
flag = chadd_1fa30d24(flag)
flag = chmul_b3677069(flag)
flag = chmul_18ecaa08(flag)
flag = chunk_2e1e8db3(flag)
flag = chadd_2bcca0b5(flag)
flag = csub_d46575ec(flag)
flag = sub_0bdcedb0(flag)
flag = chadd_53eb2419(flag)
flag = digsub_e1f5dc03(flag)
flag = cadd_f435a64a(flag)
flag = mul_d23185db(flag)
flag = csub_a0c64190(flag)
flag = cmul_f65d51e7(flag)
flag = sub_02f68178(flag)
flag = digsub_06f2e415(flag)
flag = sub_71bf262c(flag)
flag = xor_7465fff5(flag)
flag = chxor_d6bf3b04(flag)
flag = chsub_f9d9c30e(flag)
flag = mul_62cf6aa4(flag)
flag = add_de55f4f2(flag)
flag = shuffle_d43c63b3(flag)
flag = sub_c2ba5275(flag)
flag = shuffle_def3ecab(flag)
flag = xor_f80d29fb(flag)
flag = chxor_90da6de6(flag)
flag = mul_947580cb(flag)
flag = sub_43f562fe(flag)
flag = chadd_e99579ed(flag)
flag = chxor_bbf3589a(flag)
flag = chmul_e406aa1a(flag)
flag = chsub_33711b4f(flag)
flag = chadd_abc266d5(flag)
flag = chadd_24def8ad(flag)
flag = chunk_20e19fb4(flag)
flag = chunk_bdec9045(flag)
flag = add_d2c1e8bc(flag)
flag = csub_f765621d(flag)
flag = cadd_603af25d(flag)
flag = cadd_3a2cd387(flag)
flag = cxor_53008000(flag)
flag = mul_987e03f2(flag)
flag = chunk_987d4b79(flag)
flag = add_64420416(flag)
flag = add_eb6ed9ef(flag)
flag = csub_e0440f53(flag)
flag = chsub_e6873048(flag)
flag = chsub_76771162(flag)
flag = digsub_b6c1346d(flag)
flag = shuffle_602562e7(flag)
flag = add_e3a56377(flag)
flag = cxor_da9ff7d9(flag)
flag = add_8ad39807(flag)
flag = chadd_32554a61(flag)
flag = shuffle_b20aa4f9(flag)
flag = xor_1e24aa63(flag)
flag = digsub_61a694a2(flag)
flag = csub_fe2f121a(flag)
flag = chsub_a13b0c4e(flag)
flag = add_8f63cc91(flag)
flag = csub_20a768aa(flag)
flag = chadd_258b2420(flag)
flag = chadd_2a7b5687(flag)
flag = csub_23f2ff18(flag)
flag = chsub_5f944988(flag)
flag = csub_d278adbd(flag)
flag = mul_eb559523(flag)
flag = chxor_f43465b0(flag)
flag = xor_94f0d244(flag)
flag = chunk_7ee32000(flag)
flag = sub_0d81146a(flag)
flag = digsub_9adbb647(flag)
flag = cadd_370c5e9e(flag)
flag = chxor_d01563ec(flag)
flag = cxor_0aedee08(flag)
flag = cmul_c112008e(flag)
flag = cmul_7630284a(flag)
flag = xor_1c0c670c(flag)
flag = digsub_5e8b7a8a(flag)
flag = cadd_6fe68866(flag)
flag = sub_f95a3649(flag)
flag = xor_35ce8bcd(flag)
flag = digsub_dbfc4977(flag)
flag = chadd_e14e4897(flag)
flag = cadd_f1510001(flag)
flag = sub_b665fdaf(flag)
flag = chmul_522be87f(flag)
flag = chmul_0db588dd(flag)
flag = sub_0992e83f(flag)
flag = chunk_dadea384(flag)
flag = cxor_5161196f(flag)
flag = mul_7fd5912a(flag)
flag = sub_31290fb7(flag)
flag = chmul_7ebba446(flag)
flag = cxor_13669885(flag)
flag = cadd_79d7fa85(flag)
flag = chmul_7cbf2205(flag)
flag = csub_1967fa7b(flag)
flag = cmul_880f9e67(flag)
flag = xor_addb072f(flag)
flag = chsub_2f62951a(flag)
flag = add_e08d6566(flag)
flag = cxor_b342528a(flag)
flag = cmul_5bbd0126(flag)
flag = cmul_45d4d761(flag)
flag = chxor_7af39ede(flag)
flag = cadd_5d182653(flag)
flag = digsub_f8bfc612(flag)
flag = chxor_24ff0dd9(flag)
flag = xor_eae9977a(flag)
flag = cmul_a51dd714(flag)
flag = chsub_92108511(flag)
flag = chsub_357029f0(flag)
flag = chsub_aa802604(flag)
flag = shuffle_0df0d459(flag)
flag = cmul_c648ff5d(flag)
flag = chadd_53eb2419(flag)
flag = chadd_36010571(flag)
flag = chmul_90381a7d(flag)
flag = sub_11293e74(flag)
flag = add_b1383cfb(flag)
flag = chmul_3d6abe7c(flag)
flag = cmul_57e3d5bf(flag)
flag = chadd_f5ab37d9(flag)
flag = digsub_e4832eb3(flag)
flag = cadd_e0fbc1fa(flag)
flag = cmul_e510f1c4(flag)
flag = mul_e04c3fbe(flag)
flag = xor_3c5d07f5(flag)
flag = chunk_91f40280(flag)
flag = chxor_a614acf2(flag)
flag = cxor_df97c526(flag)
flag = chadd_31ab6514(flag)
flag = cxor_303b54c5(flag)
flag = chmul_ff76516d(flag)
flag = add_158186ec(flag)
flag = xor_875a544d(flag)
flag = shuffle_86331a49(flag)
flag = mul_82f61bf9(flag)
flag = xor_10552f50(flag)
flag = chmul_8e421910(flag)
flag = mul_c4baebe4(flag)
flag = shuffle_fe7bcc78(flag)
flag = chunk_45c7c0f6(flag)
flag = cxor_18ccd1a8(flag)
flag = chadd_09e456ed(flag)
flag = chsub_84e9e2bd(flag)
flag = xor_385da77c(flag)
flag = chmul_aae03452(flag)
flag = cxor_0afe7e7a(flag)
flag = chunk_5a70d9ef(flag)
flag = xor_278fef34(flag)
flag = shuffle_6fcd072c(flag)
flag = cadd_91c03cb7(flag)
flag = xor_fccb27f6(flag)
flag = add_a04dd9fa(flag)
flag = chunk_7692aef1(flag)
flag = digsub_b4a68c58(flag)
flag = cadd_7936e180(flag)
flag = add_e696fc9f(flag)
flag = chmul_315f2063(flag)
flag = add_a5b30fdf(flag)
flag = add_3e8fa8db(flag)
flag = chsub_d866d58b(flag)
flag = cxor_112ee4fc(flag)
flag = csub_3d9f618d(flag)
flag = chsub_f15fc200(flag)
flag = chmul_90f76848(flag)
flag = digsub_bb512531(flag)
flag = chunk_fe7fd1c6(flag)
flag = shuffle_f5a6f753(flag)
flag = add_fc581b51(flag)
flag = chmul_e08d8ea1(flag)
flag = csub_9ccfaef5(flag)
flag = mul_e74b3261(flag)
flag = cmul_c112008e(flag)
flag = chxor_5323ed11(flag)
flag = chunk_cb2fa615(flag)
flag = cxor_dfcb824e(flag)
flag = chxor_79ffa521(flag)
flag = chadd_c427ca04(flag)
flag = cadd_6f6cf5cb(flag)
flag = sub_8eda253a(flag)
flag = shuffle_49c48148(flag)
flag = xor_084e61d3(flag)
flag = chsub_c813b5d2(flag)
flag = shuffle_0736ce82(flag)
flag = chxor_b96f779c(flag)
flag = cadd_a31a177e(flag)
flag = cxor_e86ea0c2(flag)
flag = xor_05c5dcc9(flag)
flag = chsub_49c13ad0(flag)
flag = mul_87965a17(flag)
flag = chmul_b5f1b2d9(flag)
flag = chadd_3efd2ae8(flag)
flag = shuffle_2ce02926(flag)
flag = chunk_c47f2b0e(flag)
flag = csub_2cc5f209(flag)
flag = xor_bb19f697(flag)
flag = chxor_ee89b49e(flag)
flag = cmul_318e5f45(flag)
flag = cadd_761effde(flag)
flag = cadd_d08b740c(flag)
flag = cadd_165a6cb3(flag)
flag = add_3cfe5566(flag)
flag = shuffle_3ef98f81(flag)
flag = chxor_22bbbf9c(flag)
flag = chmul_b20c3846(flag)
flag = digsub_e09ab638(flag)
flag = xor_df4800db(flag)
flag = chsub_9e3a2eb0(flag)
flag = digsub_2f6deeb4(flag)
flag = xor_60dd65f0(flag)
flag = csub_dcf528e5(flag)
flag = add_770b1c6f(flag)
flag = shuffle_719cf56c(flag)
flag = mul_af43f0cd(flag)
flag = chxor_f43465b0(flag)
flag = mul_94dd1b49(flag)
flag = chadd_983dad8d(flag)
flag = chsub_1ad0c5fe(flag)
flag = chunk_e53ff766(flag)
flag = shuffle_41eb3e26(flag)
flag = csub_d4490e14(flag)
flag = cxor_48ff1c3c(flag)
flag = add_c3711383(flag)
flag = chmul_0c42d6fc(flag)
flag = xor_5c21cfc7(flag)
flag = chxor_a614acf2(flag)
flag = mul_fbf76069(flag)
flag = xor_deeded30(flag)
flag = chsub_a2fdcc3b(flag)
flag = add_02374137(flag)
flag = cxor_4e153811(flag)
flag = cmul_c36f1e1c(flag)
flag = csub_fda3f560(flag)
flag = shuffle_8cc50403(flag)
flag = digsub_324078ea(flag)
flag = chxor_da702120(flag)
flag = shuffle_7ccfcf66(flag)
flag = chsub_46fd8bb3(flag)
flag = add_8e1a7afe(flag)
flag = add_6aeef0e9(flag)
flag = cxor_bba6fa0a(flag)
flag = chxor_ea027ec2(flag)
flag = chmul_e406aa1a(flag)
flag = chmul_9455da11(flag)
flag = cxor_7be08bad(flag)
flag = csub_34d4359e(flag)
flag = mul_095b48a3(flag)
flag = chunk_b4139adc(flag)
flag = chxor_2bbe4cc1(flag)
flag = cmul_b305eb99(flag)
flag = chadd_16ea1a60(flag)
flag = cmul_7a2b74fe(flag)
flag = add_5f346d84(flag)
flag = xor_a2c95310(flag)
flag = chunk_f1e74b7b(flag)
flag = cmul_0b1c712d(flag)
flag = shuffle_29b39d8e(flag)
flag = mul_520721f3(flag)
flag = mul_e8a5e4e0(flag)
flag = shuffle_6186b5b1(flag)
flag = add_3e8fa8db(flag)
flag = shuffle_15813d84(flag)
flag = mul_6ed04b93(flag)
flag = cmul_829e8d09(flag)
flag = cmul_5e8f38d5(flag)
flag = chmul_eda95d12(flag)
flag = cadd_428d6ecc(flag)
flag = mul_8502f399(flag)
flag = csub_59817429(flag)
flag = chsub_26373389(flag)
flag = chsub_dea76069(flag)
flag = digsub_899a9f6d(flag)
flag = chadd_ac9d1de7(flag)
flag = chadd_d2d3bddf(flag)
flag = add_0f283710(flag)
flag = csub_b14e28f6(flag)
flag = xor_48d487cb(flag)
flag = chsub_b335ae97(flag)
flag = chmul_32362a1d(flag)
flag = cmul_5f6b0b76(flag)
flag = cadd_cfe7bb7a(flag)
flag = xor_1c0c670c(flag)
flag = chadd_00e2dbca(flag)
flag = chxor_ffb48f69(flag)
flag = cxor_5a1e89dc(flag)
flag = cxor_4cb585c4(flag)
flag = csub_7c363447(flag)
flag = cmul_de3ea36c(flag)
flag = csub_9253b05f(flag)
flag = chxor_b64d0435(flag)
flag = chunk_66d22063(flag)
flag = digsub_6be19c93(flag)
flag = xor_deeded30(flag)
flag = chadd_b9c3b1c6(flag)
flag = chmul_138f562c(flag)
flag = chadd_837f34c3(flag)
flag = cmul_3c18a69a(flag)
flag = cadd_596e2779(flag)
flag = chxor_d3897d6a(flag)
flag = shuffle_0d275e0e(flag)
flag = mul_bb9e8c00(flag)
flag = cmul_ba8b037d(flag)
flag = cxor_e6156798(flag)
flag = chsub_9df05eee(flag)
flag = cadd_91c03cb7(flag)
flag = sub_00c9af82(flag)
flag = sub_ce128c36(flag)
flag = chmul_7eea79aa(flag)
flag = cxor_71e7ff03(flag)
flag = mul_d900d8ed(flag)
flag = cxor_9af689b5(flag)
flag = chsub_f9d9c30e(flag)
flag = sub_bbf06d64(flag)
flag = digsub_f22e07b0(flag)
flag = digsub_5f03912e(flag)
flag = chxor_3e87843f(flag)
flag = digsub_fda06cd9(flag)
flag = sub_abe98fac(flag)
flag = mul_0b75c488(flag)
flag = chadd_dba6c166(flag)
flag = chmul_498a4104(flag)
flag = chsub_a23842be(flag)
flag = cmul_76043ee3(flag)
flag = cxor_f5f56306(flag)
flag = csub_cb5867de(flag)
flag = cxor_7073d927(flag)
flag = shuffle_a6432e15(flag)
flag = cadd_e7cd385e(flag)
flag = digsub_03c94dae(flag)
flag = cadd_0a5ff345(flag)
flag = chunk_1fa032d8(flag)
flag = shuffle_b6779950(flag)
flag = chxor_3972d07b(flag)
flag = chsub_2b33e666(flag)
flag = csub_0c9dc34d(flag)
flag = xor_4b381c82(flag)
flag = csub_7321b0e9(flag)
flag = shuffle_6fcd072c(flag)
flag = csub_302bf054(flag)
flag = chadd_68273988(flag)
flag = xor_0238a60c(flag)
flag = chmul_c042377c(flag)
flag = mul_9e94e89a(flag)
flag = chsub_91d04f68(flag)
flag = sub_baf4594d(flag)
flag = csub_59817429(flag)
flag = shuffle_0d458069(flag)
flag = cmul_6fb2378c(flag)
flag = chsub_29874234(flag)
flag = shuffle_cb627e8c(flag)
flag = xor_53ec0b4a(flag)
flag = chadd_42bbf689(flag)
flag = xor_f98f4d97(flag)
flag = csub_3d47b491(flag)
flag = xor_96b234b4(flag)
flag = chxor_bcf0771e(flag)
flag = cadd_67f3772b(flag)
flag = chadd_3c9e0be9(flag)
flag = chxor_277a4952(flag)
flag = cmul_cd1aad88(flag)
flag = xor_b81a4467(flag)
flag = add_eb403f7b(flag)
flag = cmul_dc2b00da(flag)
flag = cxor_0c6bb32e(flag)
flag = chmul_3d6abe7c(flag)
flag = sub_0b42484c(flag)
flag = chxor_e23f2cfd(flag)
flag = shuffle_0f715c90(flag)
flag = sub_a091f45e(flag)
flag = chsub_62b4c10c(flag)
flag = mul_70c4cf79(flag)
flag = chunk_a008d507(flag)
flag = cadd_1d1894a8(flag)
flag = mul_60fbc31e(flag)
flag = sub_31cd283b(flag)
flag = chsub_29d24d89(flag)
flag = chmul_9b06c74b(flag)
flag = add_f11cd945(flag)
flag = cxor_454d9bad(flag)
flag = sub_7198b6a2(flag)
flag = digsub_6b9010a5(flag)
flag = cxor_6eff9336(flag)
flag = chsub_6acb4ef8(flag)
flag = shuffle_d43c63b3(flag)
flag = add_0a6cff9e(flag)
flag = shuffle_9df52ad2(flag)
flag = add_909f31dc(flag)
flag = chxor_65fb61d8(flag)
flag = digsub_03f54ba3(flag)
flag = add_bc7653a1(flag)
flag = chsub_29d24d89(flag)
flag = chmul_498a4104(flag)
flag = xor_722e91a8(flag)
flag = chmul_315f2063(flag)
flag = chunk_e3f72016(flag)
flag = shuffle_d65597c5(flag)
flag = cadd_81014cf5(flag)
flag = cadd_e9d43d97(flag)
flag = add_eb403f7b(flag)
flag = cmul_e4155cf9(flag)
flag = cadd_5162d960(flag)
flag = chunk_4b50f9e1(flag)
flag = digsub_fcc47cc3(flag)
flag = csub_af6b6944(flag)
flag = cmul_9f9f2324(flag)
flag = chxor_c8d60001(flag)
flag = chmul_0db588dd(flag)
flag = cxor_13669885(flag)
flag = cmul_280315b7(flag)
flag = chxor_97c3e5f8(flag)
flag = cxor_cc615bb3(flag)
flag = csub_4660584b(flag)
flag = cadd_99696e25(flag)
flag = cmul_aa40ede5(flag)
flag = csub_efe13119(flag)
flag = chmul_90f76848(flag)
flag = cmul_b1a79f4a(flag)
flag = chmul_9cb342ae(flag)
flag = cadd_dc2d39b3(flag)
flag = chadd_ddff28b1(flag)
flag = mul_2418a801(flag)
flag = sub_bc852ad6(flag)
flag = mul_60a92fff(flag)
flag = chsub_4c009b94(flag)
flag = xor_c05b216d(flag)
flag = mul_bc232ddb(flag)
flag = chsub_1d756bfc(flag)
flag = chmul_04649cec(flag)
flag = chmul_11d3795c(flag)
flag = chxor_c7b14201(flag)
flag = csub_daf0877b(flag)
flag = mul_c0b36007(flag)
flag = cxor_89bf897f(flag)
flag = cmul_5f59af38(flag)
flag = chadd_620f96a9(flag)
flag = csub_d215325c(flag)
flag = add_bc200f67(flag)
flag = sub_f0758554(flag)
flag = xor_38573e9d(flag)
flag = cadd_d04bb716(flag)
flag = add_bb299925(flag)
flag = mul_bf01fdb9(flag)
flag = cmul_89ce7854(flag)
flag = digsub_441e29b0(flag)
flag = shuffle_63b7a61d(flag)
flag = csub_34b73c2d(flag)
flag = cadd_3882e35e(flag)
flag = shuffle_f4bbf14d(flag)
flag = xor_c425535c(flag)
flag = chxor_62bb4f9e(flag)
flag = sub_a762259f(flag)
flag = add_16b704e9(flag)
flag = shuffle_c7e85def(flag)
flag = sub_31d58010(flag)
flag = chsub_46b53140(flag)
flag = sub_73623d40(flag)
flag = mul_2fea700d(flag)
flag = mul_2cd00355(flag)
flag = shuffle_14e44222(flag)
flag = chadd_069e430a(flag)
flag = csub_c8591293(flag)
flag = chunk_f87a2350(flag)
flag = sub_297255e0(flag)
flag = chunk_0046d260(flag)
flag = mul_69dd5e3a(flag)
flag = chxor_f6c4d9ae(flag)
flag = mul_a1ba17e5(flag)
flag = chmul_b7f6dccf(flag)
flag = shuffle_ac6dd478(flag)
flag = cadd_22f01a9a(flag)
flag = sub_0cb0697d(flag)
flag = chadd_8e1c6d19(flag)
flag = shuffle_721dc700(flag)
flag = mul_af43f0cd(flag)
flag = chunk_22bd5647(flag)
flag = chsub_f9d9c30e(flag)
flag = chunk_9ce2d01b(flag)
flag = chsub_c1275525(flag)
flag = cmul_c4987507(flag)
flag = mul_1a3b698e(flag)
flag = digsub_41290eb4(flag)
flag = cxor_d42f4ceb(flag)
flag = shuffle_a6432e15(flag)
flag = digsub_e60d693c(flag)
flag = xor_2b415907(flag)
flag = cmul_259fe9ec(flag)
flag = cadd_fe8798b7(flag)
flag = chxor_14ca1407(flag)
flag = chxor_b1f5dc0d(flag)
flag = chmul_0bc227c2(flag)
flag = csub_79c7fc2e(flag)
flag = add_67499497(flag)
flag = cxor_d20accc3(flag)
flag = csub_68308d55(flag)
flag = add_867182be(flag)
flag = chadd_6a4e5b24(flag)
flag = sub_a762259f(flag)
flag = sub_bbf06d64(flag)
flag = mul_bb9e8c00(flag)
flag = cmul_3e5a5794(flag)
flag = mul_0fc3ddc1(flag)
flag = shuffle_4ae1874a(flag)
flag = cmul_26f5ab98(flag)
flag = xor_2495a11e(flag)
flag = chxor_4fe33b06(flag)
flag = cxor_ad9ae418(flag)
flag = add_b2a61490(flag)
flag = chsub_5d43cf4f(flag)
flag = xor_99a5aed1(flag)
flag = shuffle_520f2eb6(flag)
flag = cadd_8db97cbc(flag)
flag = chunk_22f90678(flag)
flag = chsub_38be16e5(flag)
flag = cmul_3cb7c090(flag)
flag = csub_68308d55(flag)
flag = chsub_24c471c0(flag)
flag = shuffle_8c84166e(flag)
flag = chunk_8af8feea(flag)
flag = add_393870bc(flag)
flag = xor_36e98afe(flag)
flag = cmul_dd8d739c(flag)
flag = cmul_513a78aa(flag)
flag = cmul_7d0c9f1b(flag)
flag = xor_ed479080(flag)
flag = add_da9b8954(flag)
flag = mul_709d81e2(flag)
flag = chadd_ed8436eb(flag)
flag = digsub_cb6346a1(flag)
flag = xor_2f985cdb(flag)
flag = csub_46c4ad67(flag)
flag = chsub_dbb4ae01(flag)
flag = cxor_ec93c298(flag)
flag = chadd_3fbbddb8(flag)
flag = add_e6b26923(flag)
flag = add_fc842ea7(flag)
flag = chadd_adaa5d2b(flag)
flag = csub_247f37f1(flag)
flag = cadd_130f7b9b(flag)
flag = xor_35ce8bcd(flag)
flag = cmul_02507e59(flag)
flag = shuffle_6d9a62f9(flag)
flag = shuffle_ddc42a39(flag)
flag = chxor_6b41b0f3(flag)
flag = csub_59e78f82(flag)
flag = chsub_fa709b53(flag)
flag = chxor_18fcc0f2(flag)
flag = csub_7ef295f1(flag)
flag = shuffle_17e23897(flag)
flag = chsub_a40de1d7(flag)
flag = cxor_2aa22b89(flag)
flag = chmul_49efe464(flag)
flag = cmul_23a5f304(flag)
flag = chxor_f6c4d9ae(flag)
flag = csub_137af0f7(flag)
flag = add_7aa57e32(flag)
flag = csub_d4490e14(flag)
flag = chadd_932febde(flag)
flag = cmul_77da69c4(flag)
flag = cadd_99696e25(flag)
flag = chsub_46fd8bb3(flag)
flag = xor_d9eda893(flag)
flag = digsub_0fcbc54c(flag)
flag = shuffle_a293a45d(flag)
flag = cmul_57e3d5bf(flag)
flag = chmul_c9980e5a(flag)
flag = cadd_53f37c7e(flag)
flag = csub_b73a0cb6(flag)
flag = mul_a2581ad1(flag)
flag = chmul_3267fabc(flag)
flag = add_7aa57e32(flag)
flag = shuffle_30915728(flag)
flag = chxor_fc74d45b(flag)
flag = chadd_d7cdb5da(flag)
flag = cmul_45d4d761(flag)
flag = chsub_ee1754a3(flag)
flag = chmul_aa4f6daf(flag)
flag = cxor_db034137(flag)
flag = chsub_32f5910d(flag)
flag = xor_d30c564f(flag)
flag = chmul_49e5e1c7(flag)
flag = chunk_66d22063(flag)
flag = xor_abff1870(flag)
flag = add_cfe45120(flag)
flag = cxor_f744fca4(flag)
flag = chadd_4ea6bda9(flag)
flag = chadd_967b4961(flag)
flag = xor_5806c787(flag)
flag = chxor_fb59e14c(flag)
flag = shuffle_43decbdf(flag)
flag = chsub_83dc3951(flag)
flag = shuffle_2a77e1f0(flag)
flag = cmul_f579357e(flag)
flag = cadd_b70fc370(flag)
flag = digsub_bcdd2125(flag)
flag = chsub_15fcbd3c(flag)
flag = cmul_cabb8b44(flag)
flag = csub_25da5f24(flag)
flag = csub_96d5d023(flag)
flag = add_40ed3353(flag)
flag = chxor_9a066ef0(flag)
flag = mul_3dd9a13e(flag)
flag = add_d1d41f14(flag)
flag = chmul_a6bf2367(flag)
flag = chxor_b1f5dc0d(flag)
flag = cadd_94b8e069(flag)
flag = cmul_23a5f304(flag)
flag = cxor_7bed28da(flag)
flag = shuffle_76c2382f(flag)
flag = chxor_947d449e(flag)
flag = chmul_58875bd8(flag)
flag = shuffle_28f1a858(flag)
flag = shuffle_29c93f75(flag)
flag = chsub_258a5c14(flag)
flag = mul_d4fa63d2(flag)
flag = digsub_ec34bd78(flag)
flag = chadd_8afcabff(flag)
flag = chsub_3df0ef3c(flag)
flag = xor_51b2d18c(flag)
flag = shuffle_23d41aeb(flag)
flag = mul_1a3b698e(flag)
flag = chunk_7ee32000(flag)
flag = chsub_93324e19(flag)
flag = xor_278fef34(flag)
flag = cadd_75e1b32f(flag)
flag = digsub_2f2a8750(flag)
flag = sub_65dfc4a9(flag)
flag = csub_bf7e54b2(flag)
flag = shuffle_506b50c8(flag)
flag = chunk_53760c11(flag)
flag = cxor_4cb585c4(flag)
flag = chmul_da4f7a7d(flag)
flag = chmul_04649cec(flag)
flag = chmul_a1f9f8ca(flag)
flag = chadd_fe09deb1(flag)
flag = shuffle_ee42405e(flag)
flag = xor_60dd65f0(flag)
flag = mul_49cd764a(flag)
flag = chmul_3d18df83(flag)
flag = shuffle_f89bee84(flag)
flag = chxor_bbac4066(flag)
flag = cxor_fa9fe64d(flag)
flag = sub_3fa33786(flag)
flag = chunk_f554e6ab(flag)
flag = add_91bb43ca(flag)
flag = chadd_db065984(flag)
flag = cmul_eefe9fa4(flag)
flag = xor_cc33196e(flag)
flag = csub_d480ce5f(flag)
flag = chunk_dd75a83f(flag)
flag = cxor_07785927(flag)
flag = shuffle_2621171b(flag)
flag = chsub_e9070016(flag)
flag = add_16b704e9(flag)
flag = cmul_5410e40d(flag)
flag = csub_31de6d2c(flag)
flag = cmul_9e6c0fb6(flag)
flag = add_158186ec(flag)
flag = chmul_7ce961bc(flag)
flag = xor_eae9977a(flag)
flag = chxor_6b41b0f3(flag)
flag = chadd_896dc902(flag)
flag = csub_359c8002(flag)
flag = cmul_b305eb99(flag)
flag = xor_813cf8a0(flag)
flag = cmul_19d02797(flag)
flag = chadd_f5ab37d9(flag)
flag = chmul_75d42cab(flag)
flag = chxor_1e5bb2ed(flag)
flag = cmul_75c87098(flag)
flag = chunk_406e7c05(flag)
flag = chadd_4b37b268(flag)
flag = chadd_32554a61(flag)
flag = mul_452d9445(flag)
flag = xor_f99e5d04(flag)
flag = sub_2291bf41(flag)
flag = chunk_37604f81(flag)
flag = add_664be5fd(flag)
flag = cadd_56728fa3(flag)
flag = shuffle_41eb3e26(flag)
flag = digsub_c30772e5(flag)
flag = chmul_ab23c18c(flag)
flag = chunk_7efebb77(flag)
flag = chxor_ae76ed5a(flag)
flag = digsub_670300f2(flag)
flag = cxor_f9bee875(flag)
flag = add_b0406f7d(flag)
flag = add_eb6ed9ef(flag)
flag = chsub_1b8086f6(flag)
flag = cxor_ad9ae418(flag)
flag = cxor_da9ff7d9(flag)
flag = shuffle_def3ecab(flag)
flag = mul_8e78cc44(flag)
flag = chxor_3e87843f(flag)
flag = chsub_968aab31(flag)
flag = cadd_eca08b2e(flag)
flag = add_87ac44d1(flag)
flag = add_85e81d17(flag)
flag = cmul_3cb7c090(flag)
flag = chxor_49c8f56a(flag)
flag = chmul_20654021(flag)
flag = add_9349052b(flag)
flag = cmul_a50583d3(flag)
flag = chunk_e3f6d2ec(flag)
flag = add_66a3881d(flag)
flag = xor_64a04adb(flag)
flag = chmul_735407e2(flag)
flag = cadd_6d7e714e(flag)
flag = cmul_c0727784(flag)
flag = csub_cd81496c(flag)
flag = xor_f13936e3(flag)
flag = chmul_326aefee(flag)
flag = cadd_1d1894a8(flag)
flag = sub_3c288b1c(flag)
flag = xor_fc88f2e7(flag)
flag = xor_cd4a30ee(flag)
flag = chxor_f43465b0(flag)
flag = cmul_880f9e67(flag)
flag = digsub_828ecd75(flag)
flag = mul_4de4594c(flag)
flag = chsub_e8aa8b79(flag)
flag = chsub_b4abe193(flag)
flag = xor_339b9a13(flag)
flag = chmul_b5dab014(flag)
flag = chsub_dea76069(flag)
flag = xor_57c90fb5(flag)
flag = add_2071c6f7(flag)
flag = cadd_bf48a745(flag)
flag = chunk_09573d85(flag)
flag = shuffle_7b370edd(flag)
flag = sub_e97e1ac7(flag)
flag = chadd_8fc702a9(flag)
flag = cxor_c146ee2f(flag)
flag = chadd_aff7759b(flag)
flag = cmul_dd8d739c(flag)
flag = chmul_71128504(flag)
flag = chunk_ce966b63(flag)
flag = xor_ac535945(flag)
flag = cadd_d279898b(flag)
flag = cmul_2a677be7(flag)
flag = add_9e4296de(flag)
flag = chadd_acce32b7(flag)
flag = xor_097a8a70(flag)
flag = chadd_8b4d11a3(flag)
flag = mul_33103309(flag)
flag = chsub_93324e19(flag)
flag = cmul_76185aa2(flag)
flag = sub_e769f5cd(flag)
flag = cmul_f3c9bff2(flag)
flag = shuffle_7df2cac5(flag)
flag = csub_6e812142(flag)
flag = cadd_eca08b2e(flag)
flag = shuffle_ec9b15d1(flag)
flag = mul_1f240b2b(flag)
flag = shuffle_f44f0fc5(flag)
flag = chmul_af64f7e0(flag)
flag = chadd_e14e4897(flag)
flag = cmul_b305eb99(flag)
flag = chsub_daf292bd(flag)
flag = add_2071c6f7(flag)
flag = cadd_2bb5025e(flag)
flag = mul_39856c8b(flag)
flag = cadd_64c6e595(flag)
flag = sub_656aa559(flag)
flag = shuffle_204502b1(flag)
flag = xor_131c6ed1(flag)
flag = xor_46eb3b29(flag)
flag = sub_5e831919(flag)
flag = cadd_6b0bc3e3(flag)
flag = digsub_9b074471(flag)
flag = xor_a1a977f9(flag)
flag = mul_b9305b76(flag)
flag = cxor_f4744f0e(flag)
flag = add_6792b1ea(flag)
flag = chadd_83a5c6be(flag)
flag = chmul_743f98a5(flag)
flag = chadd_2732f1ee(flag)
flag = mul_833e4a11(flag)
flag = cadd_603af25d(flag)
flag = add_ed6c03df(flag)
flag = csub_1f106834(flag)
flag = chadd_83134f29(flag)
flag = shuffle_72671ce6(flag)
flag = chmul_9cb342ae(flag)
flag = cadd_ae3d5a54(flag)
flag = chmul_48477e80(flag)
flag = cmul_c0727784(flag)
flag = xor_890e78b1(flag)
flag = shuffle_ddc42a39(flag)
flag = mul_18205495(flag)
flag = chxor_de94bd99(flag)
flag = add_2527f4da(flag)
flag = add_2be5c482(flag)
flag = chsub_c2ee0e2b(flag)
flag = xor_4742cccf(flag)
flag = cadd_d08b740c(flag)
flag = xor_a35575ce(flag)
flag = cmul_7b0890d6(flag)
flag = cadd_03187d75(flag)
flag = csub_61a277c4(flag)
flag = chmul_b8a7f012(flag)
flag = xor_fc88f2e7(flag)
flag = cxor_b9faaea4(flag)
flag = csub_7f2211d8(flag)
flag = chunk_b0d8cc2d(flag)
flag = csub_ee940cd2(flag)
flag = chmul_90381a7d(flag)
flag = cadd_d3ea8638(flag)
flag = cmul_7e424373(flag)
flag = shuffle_a722dfed(flag)
flag = chadd_bf6edb8a(flag)
flag = csub_2b0ae6b8(flag)
flag = mul_74e68352(flag)
flag = chsub_46fd8bb3(flag)
flag = chmul_6192a06c(flag)
flag = chsub_bc163239(flag)
flag = cmul_012b5eb8(flag)
flag = xor_741282be(flag)
flag = chmul_20654021(flag)
flag = add_fb172b98(flag)
flag = chxor_f6c4d9ae(flag)
flag = xor_25ac4148(flag)
flag = shuffle_8ed3abbd(flag)
flag = chsub_b9dc2f68(flag)
flag = cadd_d04bb716(flag)
flag = xor_7661c292(flag)
flag = sub_7aa7238b(flag)
flag = digsub_e671df40(flag)
flag = chunk_0074c4bc(flag)
flag = add_00eb45a8(flag)
flag = digsub_d085a426(flag)
flag = shuffle_65d9ca2c(flag)
flag = cmul_4172328f(flag)
flag = chsub_38be16e5(flag)
flag = cadd_e87be691(flag)
flag = chunk_c72fb6c4(flag)
flag = chsub_70e4436e(flag)
flag = cmul_8ec6e2f9(flag)
flag = cadd_61a362c2(flag)
flag = xor_77c70db2(flag)
flag = csub_564b5e2c(flag)
flag = add_3e1e2c0b(flag)
flag = cadd_c15fc794(flag)
flag = cmul_697c5558(flag)
flag = shuffle_88823dcd(flag)
flag = cmul_b61008be(flag)
flag = digsub_f9d31323(flag)
flag = chxor_4639250f(flag)
flag = add_1a353536(flag)
flag = xor_60dd65f0(flag)
flag = csub_24fb716e(flag)
flag = cadd_6abb159d(flag)
flag = chmul_49ccc560(flag)
flag = chadd_3efd2ae8(flag)
flag = cmul_75c87098(flag)
flag = chunk_c761d499(flag)
flag = chxor_a614acf2(flag)
flag = mul_21355dba(flag)
flag = chsub_dbf9111e(flag)
flag = chxor_ffe3793d(flag)
flag = mul_619c394d(flag)
flag = cadd_51596bc7(flag)
flag = chadd_28036696(flag)
flag = chadd_5171aa72(flag)
flag = add_c93fcbda(flag)
flag = chadd_8ab3b2a8(flag)
flag = sub_9f4055fc(flag)
flag = digsub_6b9010a5(flag)
flag = chxor_a99facbd(flag)
flag = csub_702f94e1(flag)
flag = cmul_adf3adfd(flag)
flag = cadd_8c4577cf(flag)
flag = chsub_a70db66e(flag)
flag = add_1688c841(flag)
flag = digsub_2362ee33(flag)
flag = chadd_f2fd70f1(flag)
flag = chsub_d3796f81(flag)
flag = digsub_c30772e5(flag)
flag = chunk_397a3d62(flag)
flag = mul_224595eb(flag)
flag = xor_9b985733(flag)
flag = chsub_cd79e5f6(flag)
flag = cmul_9f9f2324(flag)
flag = cadd_8a476763(flag)
flag = cxor_a0fe64b3(flag)
flag = cxor_2b349478(flag)
flag = add_9d214583(flag)
flag = chunk_397a3d62(flag)
flag = add_fc842ea7(flag)
flag = chsub_56813bb5(flag)
flag = chmul_d9fd0dcd(flag)
flag = sub_142fa244(flag)
flag = cadd_dd5bf521(flag)
flag = mul_2a724485(flag)
flag = chmul_510bb7ff(flag)
flag = shuffle_2a77ed9b(flag)
flag = cmul_26f5ab98(flag)
flag = digsub_6b9010a5(flag)
flag = digsub_06f2e415(flag)
flag = cadd_c1fbc654(flag)
flag = shuffle_c507521b(flag)
flag = sub_d67326ec(flag)
flag = chmul_d95a813a(flag)
flag = add_a69aa2f4(flag)
flag = cxor_4211ba33(flag)
flag = xor_4b381c82(flag)
flag = sub_b4f35853(flag)
flag = chadd_96a0ee76(flag)
flag = xor_5250859e(flag)
flag = add_e0500d96(flag)
flag = mul_3dd9a13e(flag)
flag = chadd_8231f9c2(flag)
flag = chadd_2732f1ee(flag)
flag = sub_6fb5c242(flag)
flag = cmul_89d225a2(flag)
flag = sub_4efcb7e6(flag)
flag = chmul_df642f23(flag)
flag = chxor_57a0d20a(flag)
flag = chsub_f75e24ea(flag)
flag = add_40ed3353(flag)
flag = digsub_ec34bd78(flag)
flag = csub_d14c716c(flag)
flag = xor_7661c292(flag)
flag = csub_656995cb(flag)
flag = digsub_269bf7d5(flag)
flag = sub_9de672fa(flag)
flag = shuffle_a722dfed(flag)
flag = cxor_94658244(flag)
flag = csub_8cff1d96(flag)
flag = chmul_a6c30448(flag)
flag = cxor_46b69f72(flag)
flag = chsub_da5ea1df(flag)
flag = digsub_7a739dc2(flag)
flag = mul_c50eb88b(flag)
flag = csub_bce4bb70(flag)
flag = xor_3481ed60(flag)
flag = chxor_ad45b413(flag)
flag = cmul_9020ca8c(flag)
flag = mul_c00416be(flag)
flag = chsub_7bc426c7(flag)
flag = add_306b249b(flag)
flag = chmul_aae03452(flag)
flag = csub_0b2b5416(flag)
flag = chunk_e120ffe1(flag)
flag = xor_4c2f2b2e(flag)
flag = chunk_bdaa57c3(flag)
flag = shuffle_3113cb7a(flag)
flag = cxor_e256fb84(flag)
flag = digsub_af2d37bc(flag)
flag = cmul_fa2c1e3a(flag)
flag = cmul_2d4425ba(flag)
flag = add_53a3ae63(flag)
flag = cmul_d22b5acf(flag)
flag = chxor_7bd8fe19(flag)
flag = add_0a6cff9e(flag)
flag = chadd_742f064d(flag)
flag = cmul_69eb6792(flag)
flag = add_ed6c03df(flag)
flag = cadd_0a5ff345(flag)
flag = chsub_da5ea1df(flag)
flag = shuffle_29c0a60f(flag)
flag = add_44200607(flag)
flag = chsub_6ee60616(flag)
flag = cmul_dc6ecbe6(flag)
flag = cmul_cd1aad88(flag)
flag = csub_96f86ad8(flag)
flag = chsub_2792abe7(flag)
flag = csub_4392ba2f(flag)
flag = sub_6ca5da9b(flag)
flag = xor_abff1870(flag)
flag = xor_741282be(flag)
flag = chadd_2f4760f5(flag)
flag = chunk_426d469b(flag)
flag = chxor_59b7fb58(flag)
flag = chsub_99c4b363(flag)
flag = chxor_55e4ace7(flag)
flag = chunk_bb0e25ea(flag)
flag = xor_e2704680(flag)
flag = chxor_c05fc484(flag)
flag = chxor_6d888483(flag)
flag = chadd_43e1206d(flag)
flag = chadd_76b3ac4f(flag)
flag = sub_27d844ff(flag)
flag = digsub_69f7a7ef(flag)
flag = chsub_d8b43803(flag)
flag = cadd_9ae3f2d8(flag)
flag = digsub_ced825e4(flag)
flag = chadd_6a4e5b24(flag)
flag = shuffle_899fbb68(flag)
flag = xor_6cfdbb4a(flag)
flag = csub_8cff1d96(flag)
flag = csub_d616f883(flag)
flag = xor_7c3bd1e8(flag)
flag = add_ed6c03df(flag)
flag = chadd_51cbffb6(flag)
flag = shuffle_35e807af(flag)
flag = chadd_620d941e(flag)
flag = chmul_0e5b89be(flag)
flag = chsub_9b93213c(flag)
flag = cmul_fd921d5b(flag)
flag = chmul_c9980e5a(flag)
flag = digsub_19f61f73(flag)
flag = digsub_b40bee06(flag)
flag = cadd_14ae0fe3(flag)
flag = cxor_765f4bed(flag)
flag = mul_cba48e57(flag)
flag = shuffle_30915728(flag)
flag = xor_4a69189b(flag)
flag = mul_d0313a6c(flag)
flag = chxor_4909f0be(flag)
flag = sub_5730f691(flag)
flag = digsub_46ad768c(flag)
flag = chadd_f5ab37d9(flag)
flag = cxor_e6156798(flag)
flag = xor_3366a9d3(flag)
flag = cxor_19dece1a(flag)
flag = sub_a74b5cf9(flag)
flag = sub_3c288b1c(flag)
flag = chsub_e1699c5c(flag)
flag = add_595625e1(flag)
flag = digsub_bcdd2125(flag)
flag = chxor_da702120(flag)
flag = chmul_9cbb8a7f(flag)
flag = chmul_315f2063(flag)
flag = chxor_3f9af41e(flag)
flag = xor_8297deee(flag)
flag = chxor_f0558dbb(flag)
flag = add_30b3e082(flag)
flag = cadd_4dc54d10(flag)
flag = chmul_e4e712b9(flag)
flag = cmul_2d4425ba(flag)
flag = cadd_fe8798b7(flag)
flag = chsub_2f62951a(flag)
flag = xor_446fe190(flag)
flag = sub_72b00ca4(flag)
flag = cadd_2bb5025e(flag)
flag = chmul_81ec0d4f(flag)
flag = cmul_7ad45fd6(flag)
flag = csub_024ef6f9(flag)
flag = chsub_4d7b9897(flag)
flag = add_6ad8ed33(flag)
flag = mul_70d397f8(flag)
flag = cadd_57a83163(flag)
flag = mul_3dd9a13e(flag)
flag = chxor_9b4a8975(flag)
flag = csub_b5b948c9(flag)
flag = xor_d7c70d50(flag)
flag = csub_fdf338ac(flag)
flag = add_a3d5d1da(flag)
flag = shuffle_f5a6f753(flag)
flag = csub_a15374e1(flag)
flag = shuffle_16a08001(flag)
flag = add_9573eecb(flag)
flag = cxor_f20321f0(flag)
flag = chxor_a2b08b13(flag)
flag = cmul_0b1c712d(flag)
flag = csub_2cc5f209(flag)
flag = xor_9a3a96a8(flag)
flag = sub_51e1902d(flag)
flag = chxor_5323ed11(flag)
flag = sub_9f4055fc(flag)
flag = shuffle_0242ca5c(flag)
flag = digsub_cca1638e(flag)
flag = sub_2e2758dc(flag)
flag = chsub_f9d9c30e(flag)
flag = chsub_ebadaefe(flag)
flag = shuffle_4b183fad(flag)
flag = xor_2cce1391(flag)
flag = xor_24b008b9(flag)
flag = csub_417a5b3f(flag)
flag = mul_452d9445(flag)
flag = chsub_22f9d42d(flag)
flag = sub_12d5d25f(flag)
flag = mul_a3a1940e(flag)
flag = csub_fe63b620(flag)
flag = add_5dfc4b74(flag)
flag = shuffle_3125b36d(flag)
flag = xor_85d496cf(flag)
flag = mul_835fdfd8(flag)
flag = cxor_89b073e0(flag)
flag = chxor_b212e95c(flag)
flag = chsub_1ad0c5fe(flag)
flag = sub_edd0e8fb(flag)
flag = cxor_88eef1ab(flag)
flag = cmul_f59de4d7(flag)
flag = shuffle_a27257a0(flag)
flag = shuffle_236a7376(flag)
flag = cxor_bb8a990f(flag)
flag = cadd_5acbd300(flag)
flag = sub_5b169d21(flag)
flag = chunk_39378691(flag)
flag = shuffle_8ab6bb33(flag)
flag = xor_03d2c898(flag)
flag = cxor_cd79085f(flag)
flag = chsub_5b0f6d80(flag)
flag = chmul_d95ce6fa(flag)
flag = chxor_b8ec7b4f(flag)
flag = mul_74e68352(flag)
flag = csub_74a6e474(flag)
flag = xor_2bdb6650(flag)
flag = csub_702f94e1(flag)
flag = csub_23110697(flag)
flag = add_fee2762f(flag)
flag = xor_47cf200f(flag)
flag = cadd_a495112c(flag)
flag = shuffle_c0cc818c(flag)
flag = chsub_30f73b24(flag)
flag = cadd_f4a3a91b(flag)
flag = chmul_608cd53e(flag)
flag = chxor_a697d1c3(flag)
flag = csub_40fa37b4(flag)
flag = chunk_8a131e32(flag)
flag = chunk_20e19fb4(flag)
flag = chxor_0256cccb(flag)
flag = chunk_13e026f7(flag)
flag = xor_26dc7003(flag)
flag = add_546e77b8(flag)
flag = cxor_fa9fe64d(flag)
flag = add_ab46dc0e(flag)
flag = csub_2cc5f209(flag)
flag = chunk_515df396(flag)
flag = cxor_25ff2742(flag)
flag = add_eb6ed9ef(flag)
flag = xor_e9fd82b3(flag)
flag = chxor_da22b4fb(flag)
flag = chxor_65aad212(flag)
flag = mul_a2581ad1(flag)
flag = shuffle_181172b7(flag)
flag = chsub_3bf8b0c8(flag)
flag = xor_39a60514(flag)
flag = xor_b75a23b1(flag)
flag = chsub_968aab31(flag)
flag = cadd_caab3e28(flag)
flag = mul_2b51c8be(flag)
flag = sub_d625c555(flag)
flag = chxor_55bd1b17(flag)
flag = chadd_eb195385(flag)
flag = chadd_cf38fd97(flag)
flag = shuffle_5ea1f654(flag)
flag = xor_7c90aa84(flag)
flag = cmul_49a44f99(flag)
flag = chunk_0c74cc13(flag)
flag = cadd_0208daec(flag)
flag = xor_4d6d322c(flag)
flag = shuffle_b9aac0df(flag)
flag = shuffle_f4bbf14d(flag)
flag = csub_2c8eacf9(flag)
flag = digsub_6bf0d618(flag)
flag = chunk_4423d984(flag)
flag = cadd_56eef358(flag)
flag = chsub_29874234(flag)
flag = cmul_111bce58(flag)
flag = shuffle_a9affa02(flag)
flag = cadd_6bde1e47(flag)
flag = xor_895658c8(flag)
flag = sub_bc852ad6(flag)
flag = chxor_ce40491b(flag)
flag = digsub_981b52ce(flag)
flag = chadd_4b37b268(flag)
flag = chmul_aae03452(flag)
flag = add_022bab8d(flag)
flag = cadd_2ba6325c(flag)
flag = chunk_a9bb69a3(flag)
flag = chunk_6df9f44d(flag)
flag = shuffle_c71df508(flag)
flag = sub_ec18d730(flag)
flag = chmul_64d93738(flag)
flag = cxor_bb8a990f(flag)
flag = xor_028e2ac0(flag)
flag = digsub_7d236bf8(flag)
flag = chunk_8361daed(flag)
flag = chxor_44d65ee9(flag)
flag = add_4e407894(flag)
flag = chxor_d48b7863(flag)
flag = chmul_27a340a5(flag)
flag = add_7cb7d116(flag)
flag = chmul_326aefee(flag)
flag = digsub_915491ea(flag)
flag = chxor_b1f5dc0d(flag)
flag = digsub_caab5c9d(flag)
flag = cmul_1ebf8c3e(flag)
flag = chmul_6a2ac61f(flag)
flag = cxor_822e6d4f(flag)
flag = csub_23110697(flag)
flag = sub_94808741(flag)
flag = sub_121bf4fc(flag)
flag = add_1eefd08b(flag)
flag = add_3a8493e1(flag)
flag = csub_6612390f(flag)
flag = chxor_8a775b98(flag)
flag = mul_e6b65f6c(flag)
flag = chunk_594d46bc(flag)
flag = mul_e04a2c12(flag)
flag = cadd_4836ae77(flag)
flag = chmul_a6bf2367(flag)
flag = chsub_7ade6cf5(flag)
flag = cadd_fa34d6b4(flag)
flag = xor_a8eff498(flag)
flag = xor_3994c2ad(flag)
flag = cadd_7838f4d9(flag)
flag = cxor_c9c75462(flag)
flag = chadd_55d11883(flag)
flag = xor_26dc7003(flag)
flag = csub_9678c8c9(flag)
flag = shuffle_2cab1c5d(flag)
flag = sub_0ac2ba9f(flag)
flag = cmul_994c1dcb(flag)
flag = sub_6ca5da9b(flag)
flag = sub_9c3c91b4(flag)
flag = chunk_e5683735(flag)
flag = cadd_a5b24fcc(flag)
flag = sub_481904d7(flag)
flag = chxor_5c4c4d77(flag)
flag = chxor_7858401c(flag)
flag = chsub_98a13db8(flag)
flag = chunk_a9bb69a3(flag)
flag = cmul_99a00a24(flag)
flag = chsub_ebadaefe(flag)
flag = cadd_56eef358(flag)
flag = chsub_cd79e5f6(flag)
flag = shuffle_43decbdf(flag)
flag = mul_1c457d63(flag)
flag = sub_f31829a3(flag)
flag = csub_19752fd1(flag)
flag = cmul_60deac9a(flag)
flag = xor_ff7262d6(flag)
flag = csub_4707f65f(flag)
flag = csub_ed2f200a(flag)
flag = chadd_595ed02a(flag)
flag = xor_22f2f1f4(flag)
flag = digsub_c30772e5(flag)
flag = add_20baca93(flag)
flag = chxor_29db699e(flag)
flag = add_4e407894(flag)
flag = cxor_14787d69(flag)
flag = cxor_5ac6b756(flag)
flag = sub_a10ca0c8(flag)
flag = sub_a8ed3df9(flag)
flag = chsub_0063bc32(flag)
flag = cadd_9bed43d0(flag)
flag = sub_0ac2ba9f(flag)
flag = chadd_e14e4897(flag)
flag = xor_0e83be33(flag)
flag = cadd_509c46a1(flag)
flag = chxor_a1104840(flag)
flag = cxor_9064d63f(flag)
flag = chxor_4447550e(flag)
flag = shuffle_77f02835(flag)
flag = xor_4946eb25(flag)
flag = chunk_cd87c4de(flag)
flag = cadd_46c0a285(flag)
flag = xor_49a34b54(flag)
flag = cxor_db034137(flag)
flag = csub_e0440f53(flag)
flag = cadd_1cd51d5c(flag)
flag = chxor_471bdc7e(flag)
flag = chxor_bdaad1f4(flag)
flag = add_f582d81c(flag)
flag = shuffle_09604b13(flag)
flag = chmul_71128504(flag)
flag = add_2527f4da(flag)
flag = xor_fccb27f6(flag)
flag = chsub_0063bc32(flag)
flag = cmul_82b0086b(flag)
flag = xor_f19c0746(flag)
flag = chsub_968aab31(flag)
flag = chadd_81dfe861(flag)
flag = chunk_d88231fa(flag)
flag = cadd_b4ab774d(flag)
flag = xor_1ffb5965(flag)
flag = chsub_71c61f9b(flag)
flag = cxor_aea954dc(flag)
flag = chunk_45c7c0f6(flag)
flag = chadd_967b4961(flag)
flag = chunk_bfd2f50a(flag)
flag = csub_25da5f24(flag)
flag = chunk_cbcd0993(flag)
flag = chsub_74365a3a(flag)
flag = shuffle_602562e7(flag)
flag = chunk_a5854668(flag)
flag = xor_060a0f63(flag)
flag = chadd_36b8739d(flag)
flag = xor_4742cccf(flag)
flag = sub_48430fed(flag)
flag = digsub_b8269215(flag)
flag = digsub_67b6032a(flag)
flag = xor_339b9a13(flag)
flag = xor_ee57e55f(flag)
flag = chsub_4cadc753(flag)
flag = add_c1abafc2(flag)
flag = cmul_6cf9601c(flag)
flag = digsub_19451cfd(flag)
flag = cadd_210c6dc4(flag)
flag = mul_389dee3d(flag)
flag = chadd_84fac9b1(flag)
flag = cxor_eaaa00cc(flag)
flag = chsub_37756695(flag)
flag = cmul_32eb4436(flag)
flag = mul_54b3dab3(flag)
flag = chsub_827fc456(flag)
flag = chadd_1f526c5a(flag)
flag = chunk_ec01f5f0(flag)
flag = mul_2f89e56a(flag)
flag = shuffle_cb627e8c(flag)
flag = cadd_7e9514cb(flag)
flag = chmul_6a2ac61f(flag)
flag = add_c1c20de3(flag)
flag = shuffle_9df52ad2(flag)
flag = chunk_20e9ea05(flag)
flag = chmul_d22494d3(flag)
flag = xor_a36d3d94(flag)
flag = shuffle_9cedec4d(flag)
flag = chsub_49c13ad0(flag)
flag = chxor_da644b5f(flag)
flag = chsub_99c9e6ed(flag)
flag = cxor_e59dc6e0(flag)
flag = digsub_636b7f9c(flag)
flag = chmul_0db588dd(flag)
flag = cmul_29ff7c2b(flag)
flag = chadd_12bc44e9(flag)
flag = chunk_174427d2(flag)
flag = sub_813bc423(flag)
flag = digsub_5c02cf5d(flag)
flag = cxor_18ccd1a8(flag)
flag = chxor_97c3e5f8(flag)
flag = cmul_9f9f2324(flag)
flag = chunk_c9018375(flag)
flag = chmul_a6c30448(flag)
flag = shuffle_2ce02926(flag)
flag = csub_bce4bb70(flag)
flag = digsub_125edb05(flag)
flag = shuffle_3355fbaf(flag)
flag = add_f11cd945(flag)
flag = csub_b73a0cb6(flag)
flag = cmul_5d27452a(flag)
flag = chxor_0449a472(flag)
flag = chadd_b3214236(flag)
flag = chmul_a1decfe1(flag)
flag = add_604f7a16(flag)
flag = xor_93a9262d(flag)
flag = cadd_8b78f764(flag)
flag = chsub_4fe6a0b8(flag)
flag = xor_3366a9d3(flag)
flag = chxor_56abb2e0(flag)
flag = cadd_a377ad5c(flag)
flag = chxor_98102bb9(flag)
flag = add_35671a57(flag)
flag = mul_1dfffbd5(flag)
flag = add_55670ea5(flag)
flag = chsub_714e8ec9(flag)
flag = chxor_eb7e47c1(flag)
flag = digsub_c09c7211(flag)
flag = cmul_66f3a0d2(flag)
flag = chsub_32f5910d(flag)
flag = mul_0e478f31(flag)
flag = cadd_5b4e9aab(flag)
flag = chadd_cc6daaa1(flag)
flag = chxor_5f238dda(flag)
flag = digsub_d22e4d9e(flag)
flag = cadd_9ae3f2d8(flag)
flag = chadd_dba6c166(flag)
flag = sub_cfa999fe(flag)
flag = chmul_659e5d80(flag)
flag = chmul_88eb44fc(flag)
flag = cmul_b2582678(flag)
flag = csub_3ffa2ea8(flag)
flag = xor_18093134(flag)
flag = cxor_f01c9df2(flag)
flag = shuffle_0bc785b3(flag)
flag = chmul_77f9c95f(flag)
flag = chxor_ea027ec2(flag)
flag = cadd_3124bc3c(flag)
flag = xor_0ebbd2b0(flag)
flag = cadd_8b78f764(flag)
flag = sub_ecf0a346(flag)
flag = chmul_f175d1d7(flag)
flag = chxor_daa5c35b(flag)
flag = shuffle_3d5811d2(flag)
flag = csub_74a6e474(flag)
flag = chmul_e62c2028(flag)
flag = csub_d3a63092(flag)
flag = digsub_f56a1358(flag)
flag = shuffle_47929ded(flag)
flag = xor_b1850163(flag)
flag = cmul_4e66e309(flag)
flag = chxor_b080755f(flag)
flag = shuffle_7bf7a2c9(flag)
flag = xor_310c33bd(flag)
flag = cxor_eaaa00cc(flag)
flag = cmul_c9f41697(flag)
flag = sub_53b0de62(flag)
flag = csub_302bf054(flag)
flag = chmul_18bbd248(flag)
flag = cmul_c4987507(flag)
flag = chmul_0ef7cc5e(flag)
flag = csub_63df48f0(flag)
flag = chunk_80f5c942(flag)
flag = chadd_ed0711d8(flag)
flag = shuffle_ca27178d(flag)
flag = chxor_6ae1cc6a(flag)
flag = xor_edf3c9f3(flag)
flag = chsub_c2ad3630(flag)
flag = xor_b0ff6bbd(flag)
flag = xor_bb19f697(flag)
flag = chunk_85747b20(flag)
flag = chsub_91add2c2(flag)
flag = sub_b8c51fbd(flag)
flag = chmul_6b279231(flag)
flag = cxor_ea36911a(flag)
flag = chmul_9517c309(flag)
flag = chunk_9532fc70(flag)
flag = cadd_b138e6e3(flag)
flag = cxor_dc7aac3c(flag)
flag = chsub_30f73b24(flag)
flag = shuffle_b3fe3e10(flag)
flag = sub_c24992e8(flag)
flag = chadd_c2c2b7f7(flag)
flag = chmul_b5dab014(flag)
flag = xor_57c90fb5(flag)
flag = chadd_1989b407(flag)
flag = add_28d6777c(flag)
flag = cxor_ed3b1b28(flag)
flag = sub_960a2209(flag)
flag = xor_ccce8b68(flag)
flag = chxor_6f5bf7ea(flag)
flag = add_fc581b51(flag)
flag = xor_7465fff5(flag)
flag = cxor_41be00fc(flag)
flag = mul_0bbc1674(flag)
flag = chadd_ff6b9cf5(flag)
flag = chxor_daa5c35b(flag)
flag = cadd_16cd7d25(flag)
flag = shuffle_fbcb4ff2(flag)
flag = chxor_cf758070(flag)
flag = cxor_9bda6371(flag)
flag = xor_d9eda893(flag)
flag = cxor_18c1314e(flag)
flag = csub_4a29a9b1(flag)
flag = cxor_0673e3e4(flag)
flag = shuffle_dc2ed635(flag)
flag = xor_af966677(flag)
flag = add_66a3881d(flag)
flag = cadd_8d1c2ebb(flag)
flag = cmul_7b0890d6(flag)
flag = add_fc769e2f(flag)
flag = chmul_4863adb1(flag)
flag = chxor_a87f9d33(flag)
flag = mul_5067d66a(flag)
flag = chxor_0c3b8e79(flag)
flag = cxor_454d9bad(flag)
flag = cmul_622542fe(flag)
flag = cxor_df42d206(flag)
flag = csub_ecd1b6d0(flag)
flag = chmul_18bbd248(flag)
flag = chunk_b9615aa9(flag)
flag = chadd_91feb455(flag)
flag = cmul_21388cd8(flag)
flag = mul_7dc7f4e3(flag)
flag = cmul_0fec80e1(flag)
flag = chunk_e5cbb933(flag)
flag = csub_f765621d(flag)
flag = mul_b5be71ee(flag)
flag = sub_5e069f47(flag)
flag = xor_94f0d244(flag)
flag = digsub_ecf47b8f(flag)
flag = chsub_3af5214b(flag)
flag = digsub_5a1f6d2f(flag)
flag = mul_e8d4d029(flag)
flag = csub_936d88b2(flag)
flag = digsub_67b6032a(flag)
flag = mul_bdbf4994(flag)
flag = add_9573eecb(flag)
flag = digsub_a240d2e8(flag)
flag = chmul_be23499e(flag)
flag = shuffle_d0a6fda1(flag)
flag = chadd_4162bfbe(flag)
flag = cmul_16644eba(flag)
flag = cadd_370c5e9e(flag)
flag = chunk_95566664(flag)
flag = chadd_7c0c3e14(flag)
flag = mul_a1ba17e5(flag)
flag = csub_c123debf(flag)
flag = chxor_a84644b1(flag)
flag = chxor_59b7fb58(flag)
flag = chxor_c05fc484(flag)
flag = shuffle_cb627e8c(flag)
flag = chsub_76cedeac(flag)
flag = cxor_fa552213(flag)
flag = mul_eb559523(flag)
flag = chmul_df642f23(flag)
flag = cadd_a495112c(flag)
flag = shuffle_fbcb4ff2(flag)
flag = cmul_75c87098(flag)
flag = cmul_b6542da7(flag)
flag = csub_c59b429f(flag)
flag = chunk_0074c4bc(flag)
flag = chsub_5d86241d(flag)
flag = chadd_baaab600(flag)
flag = cxor_ea36911a(flag)
flag = mul_bb9e8c00(flag)
flag = add_02374137(flag)
flag = cmul_9f9f2324(flag)
flag = shuffle_8cc50403(flag)
flag = chsub_0642b6ad(flag)
flag = digsub_b6993817(flag)
flag = csub_936d88b2(flag)
flag = chunk_97afc148(flag)
flag = chsub_16d6c248(flag)
flag = shuffle_7c86708c(flag)
flag = chmul_b3677069(flag)
flag = chxor_79daeaf3(flag)
flag = chmul_048c1718(flag)
flag = chsub_f17ba2e2(flag)
flag = cmul_f851d67c(flag)
flag = chunk_c55c643f(flag)
flag = chunk_d09c17de(flag)
flag = chunk_e808502e(flag)
flag = chxor_e36c3430(flag)
flag = sub_4b79348d(flag)
flag = xor_3bff953a(flag)
flag = chxor_c43c6725(flag)
flag = chunk_a9bb69a3(flag)
flag = cadd_4dc54d10(flag)
flag = shuffle_23d41aeb(flag)
flag = cxor_719205d0(flag)
flag = sub_a0d3d89e(flag)
flag = cxor_3ea0418e(flag)
flag = mul_ca0cc32d(flag)
flag = chsub_92108511(flag)
flag = chsub_62a8f1cd(flag)
flag = sub_2c66d2af(flag)
flag = add_67af3ff4(flag)
flag = mul_6858d87e(flag)
flag = mul_c0b36007(flag)
flag = xor_0723c89e(flag)
flag = chadd_b29ed32e(flag)
flag = sub_bbf06d64(flag)
flag = sub_481904d7(flag)
flag = cmul_cabb8b44(flag)
flag = chunk_d09c17de(flag)
flag = chxor_e3309cca(flag)
flag = chadd_fcb73b21(flag)
flag = csub_ecf51562(flag)
flag = sub_8346a4e8(flag)
flag = shuffle_8ab6bb33(flag)
flag = chunk_c2186f8f(flag)
flag = chadd_c32db46a(flag)
flag = shuffle_fda70d35(flag)
flag = xor_75987462(flag)
flag = chmul_b11a8b8c(flag)
flag = chadd_a8439bc3(flag)
flag = chmul_cfee488f(flag)
flag = chmul_50bf6425(flag)
flag = cadd_b51d3eba(flag)
flag = sub_b83b0b5a(flag)
flag = chunk_20e9ea05(flag)
flag = cadd_56728fa3(flag)
flag = chsub_f80492fd(flag)
flag = xor_a36d3d94(flag)
flag = sub_b82d8405(flag)
flag = chmul_608cd53e(flag)
flag = chmul_c9980e5a(flag)
flag = add_99ad02f5(flag)
flag = digsub_7e09e05c(flag)
flag = cadd_09d85417(flag)
flag = chxor_24ff0dd9(flag)
flag = sub_31d58010(flag)
flag = sub_960a2209(flag)
flag = csub_fd81f025(flag)
flag = chsub_cbfe2a72(flag)
flag = chunk_8ad268b9(flag)
flag = chmul_cf7d31c7(flag)
flag = add_34a7ffc5(flag)
flag = csub_59c43ed1(flag)
flag = cmul_ac2fe6b4(flag)
flag = chmul_1bd08914(flag)
flag = shuffle_2a813d89(flag)
flag = chsub_7b8aa8b8(flag)
flag = cmul_b421453f(flag)
flag = shuffle_899fbb68(flag)
flag = shuffle_897b72ea(flag)
flag = cadd_d4d5a797(flag)
flag = chadd_747dfa2f(flag)
flag = sub_122f24d4(flag)
flag = add_c1abafc2(flag)
flag = cmul_dedddbbd(flag)
flag = chxor_24586d25(flag)
flag = shuffle_47929ded(flag)
flag = cadd_0788aaad(flag)
flag = mul_fbf76069(flag)
flag = cadd_75e1b32f(flag)
flag = sub_baf4594d(flag)
flag = chxor_8ee7d3f7(flag)
flag = cadd_e0fbc1fa(flag)
flag = xor_4e43f7ea(flag)
flag = chadd_837f34c3(flag)
flag = chsub_3d2428ad(flag)
flag = cadd_1bbdcd45(flag)
flag = sub_5da6bb53(flag)
flag = cmul_9535a158(flag)
flag = shuffle_9294cfce(flag)
flag = chadd_2a11532c(flag)
flag = chsub_d228accf(flag)
flag = cmul_8ef7a9fc(flag)
flag = chxor_c7f6ad65(flag)
flag = chsub_aa802604(flag)
flag = chxor_18337976(flag)
flag = cxor_5161196f(flag)
flag = digsub_e2a32d2b(flag)
flag = chunk_4961df80(flag)
flag = chadd_c951759a(flag)
flag = chadd_61a15596(flag)
flag = shuffle_16a08001(flag)
flag = cmul_22a48cb5(flag)
flag = sub_2e2758dc(flag)
flag = sub_1866fa1c(flag)
flag = chxor_0256cccb(flag)
flag = chsub_c6725cc1(flag)
flag = mul_77c55019(flag)
flag = chmul_a32f41a3(flag)
flag = add_a45b80f9(flag)
flag = csub_3ffa2ea8(flag)
flag = sub_134957ec(flag)
flag = cmul_931552a6(flag)
flag = chxor_cab624ba(flag)
flag = chadd_f137e21d(flag)
flag = chxor_36059956(flag)
flag = cmul_01d50eab(flag)
flag = add_03dc5f83(flag)
flag = add_0a6cff9e(flag)
flag = shuffle_496b2c86(flag)
flag = chxor_24ff0dd9(flag)
flag = chsub_1d756bfc(flag)
flag = chmul_735407e2(flag)
flag = xor_f13936e3(flag)
flag = chxor_f2f16c61(flag)
flag = add_3fa4a716(flag)
flag = sub_8476e2a1(flag)
flag = cadd_407bbf2e(flag)
flag = mul_df48e442(flag)
flag = chxor_2167eaf6(flag)
flag = shuffle_8abc2b43(flag)
flag = digsub_fc90a80f(flag)
flag = cadd_b70fc370(flag)
flag = mul_7a676b8f(flag)
flag = csub_df5bd69a(flag)
flag = cmul_9ebbf06f(flag)
flag = add_c9854582(flag)
flag = chunk_181817bc(flag)
flag = cadd_b1988d37(flag)
flag = chunk_7050a958(flag)
flag = cadd_63b5febd(flag)
flag = cmul_b9b05446(flag)
flag = chxor_d8c4549f(flag)
flag = digsub_262ebaa4(flag)
flag = mul_70c4cf79(flag)
flag = shuffle_e204c945(flag)
flag = chxor_a87f9d33(flag)
flag = chxor_eae131e0(flag)
flag = add_3d1c6187(flag)
flag = chunk_987d4b79(flag)
flag = cxor_29255d85(flag)
flag = chadd_f137e21d(flag)
flag = chsub_d4cc5505(flag)
flag = chsub_4c5385aa(flag)
flag = mul_520721f3(flag)
flag = cadd_5f3da75c(flag)
flag = cadd_503cc573(flag)
flag = csub_5c981857(flag)
flag = cmul_f65d51e7(flag)
flag = add_f582d81c(flag)
flag = cadd_5acbd300(flag)
flag = cxor_ad95af8e(flag)
flag = cxor_42ec5686(flag)
flag = chxor_4ab8ad7f(flag)
flag = cmul_892d62b0(flag)
flag = chmul_b28ec3c8(flag)
flag = cadd_f59f3dd1(flag)
flag = cadd_626b1801(flag)
flag = cadd_432be002(flag)
flag = chadd_b0d8f554(flag)
flag = xor_c1194f5a(flag)
flag = cxor_48ff1c3c(flag)
flag = cmul_1b746adb(flag)
flag = cxor_5cb8c60b(flag)
flag = sub_31d58010(flag)
flag = cadd_130f7b9b(flag)
flag = xor_cfc75b41(flag)
flag = add_986dd560(flag)
flag = shuffle_a722dfed(flag)
flag = add_1559ce63(flag)
flag = chxor_88e67ab1(flag)
flag = add_f10a2818(flag)
flag = sub_899f4720(flag)
flag = sub_b83b0b5a(flag)
flag = mul_dd59ae79(flag)
flag = chunk_5806f721(flag)
flag = chxor_822180c4(flag)
flag = cmul_111bce58(flag)
flag = sub_c3134c11(flag)
flag = mul_cf7af31a(flag)
flag = chxor_3c678c19(flag)
flag = chadd_151f0f0e(flag)
flag = cmul_3dfa51d9(flag)
flag = cxor_e7839ec0(flag)
flag = xor_7ede4fd2(flag)
flag = cmul_9ebbf06f(flag)
flag = chadd_65a80365(flag)
flag = cxor_ec93c298(flag)
flag = chunk_19abbb44(flag)
flag = chunk_8356e7c8(flag)
flag = cadd_ecff1ada(flag)
flag = chunk_d09c8616(flag)
flag = shuffle_dc438735(flag)
flag = shuffle_328f0268(flag)
flag = shuffle_fbcb4ff2(flag)
flag = chmul_068c4ae9(flag)
flag = chadd_93e431eb(flag)
flag = chxor_02aa625d(flag)
flag = chadd_4d2a9496(flag)
flag = add_9dad90bf(flag)
flag = cmul_e953e2ca(flag)
flag = chxor_faf934e8(flag)
flag = csub_db2c770b(flag)
flag = chmul_f03e312d(flag)
flag = chsub_8fa33f3e(flag)
flag = cmul_b6542da7(flag)
flag = cxor_c0bd96a1(flag)
flag = chunk_367e0942(flag)
flag = chadd_eacac1c3(flag)
flag = chmul_8c7712e0(flag)
flag = cmul_fedaeb35(flag)
flag = xor_79919c11(flag)
flag = cadd_ca2e862f(flag)
flag = sub_f1ab5525(flag)
flag = chmul_cc8af1e6(flag)
flag = chadd_3fbbddb8(flag)
flag = xor_6a599f5a(flag)
flag = sub_734f1f1d(flag)
flag = cmul_be83cfa8(flag)
flag = chxor_dadbfeff(flag)
flag = chunk_28acccb3(flag)
flag = cmul_94ed85b9(flag)
flag = csub_137af0f7(flag)
flag = digsub_c09c7211(flag)
flag = xor_f99e5d04(flag)
flag = cxor_060ce4e2(flag)
flag = shuffle_3ef98f81(flag)
flag = mul_5486cc62(flag)
flag = add_ee203fd4(flag)
flag = xor_6495a383(flag)
flag = chmul_68e4c6ff(flag)
flag = chunk_25c9a817(flag)
flag = cxor_2f7b49f0(flag)
flag = chxor_2b2282b6(flag)
flag = shuffle_d348541e(flag)
flag = csub_f9d99859(flag)
flag = chsub_5d86241d(flag)
flag = csub_a0c64190(flag)
flag = xor_c0655006(flag)
flag = xor_2ac1f33e(flag)
flag = add_2897abfa(flag)
flag = csub_6cc93d0b(flag)
flag = chmul_5add5ae2(flag)
flag = chunk_41b017cd(flag)
flag = xor_ced10726(flag)
flag = cmul_e55c9291(flag)
flag = chsub_8396a9b9(flag)
flag = chunk_bf78a71f(flag)
flag = chadd_ed0711d8(flag)
flag = chsub_b9c56acf(flag)
flag = csub_0f2dcd11(flag)
flag = xor_9e177199(flag)
flag = sub_899f4720(flag)
flag = chmul_79e6dd5d(flag)
flag = add_e051c869(flag)
flag = chsub_c7e9cf5d(flag)
flag = sub_134957ec(flag)
flag = mul_fbf76069(flag)
flag = shuffle_3a65d143(flag)
flag = chmul_b131f273(flag)
flag = cadd_eca08b2e(flag)
flag = chadd_32554a61(flag)
flag = chadd_151f0f0e(flag)
flag = cmul_5d27452a(flag)
flag = mul_e6b65f6c(flag)
flag = csub_dcf528e5(flag)
flag = xor_af966677(flag)
flag = xor_d4b3bf17(flag)
flag = chadd_eb195385(flag)
flag = csub_20a768aa(flag)
flag = chxor_c05fc484(flag)
flag = sub_90d65932(flag)
flag = xor_46b7d1d1(flag)
flag = cxor_24690d71(flag)
flag = mul_589a2ea6(flag)
flag = digsub_e1f5dc03(flag)
flag = add_c1f5edb7(flag)
flag = sub_47698898(flag)
flag = csub_77053211(flag)
flag = add_3a8493e1(flag)
flag = shuffle_29c93f75(flag)
flag = xor_28c1cc46(flag)
flag = cmul_a36f268e(flag)
flag = shuffle_0736ce82(flag)
flag = chadd_db065984(flag)
flag = csub_1951cfda(flag)
flag = add_827d7100(flag)
flag = chmul_f5bde247(flag)
flag = cadd_603af25d(flag)
flag = chmul_221b0f47(flag)
flag = digsub_2b3a8dfd(flag)
flag = sub_de79490f(flag)
flag = sub_178d064e(flag)
flag = chunk_df8009b6(flag)
flag = cmul_00fd6c30(flag)
flag = chunk_41ac0046(flag)
flag = csub_74d531bb(flag)
flag = sub_1a66408e(flag)
flag = chsub_0642b6ad(flag)
flag = add_fc769e2f(flag)
flag = digsub_d22e4d9e(flag)
flag = chxor_36059956(flag)
flag = chxor_fc74d45b(flag)
flag = cadd_56728fa3(flag)
flag = chsub_46b53140(flag)
flag = mul_21355dba(flag)
flag = chxor_b1f5dc0d(flag)
flag = add_6ad8ed33(flag)
flag = chadd_a5fda7f8(flag)
flag = chsub_76cedeac(flag)
flag = cadd_54b12cd0(flag)
flag = digsub_2c3da0c6(flag)
flag = chmul_5fa96fe5(flag)
flag = mul_94dd1b49(flag)
flag = xor_53ca0b45(flag)
flag = mul_df940fbe(flag)
flag = chmul_4e871d0b(flag)
flag = chunk_a8577417(flag)
flag = mul_619c394d(flag)
flag = shuffle_57fe470a(flag)
flag = chsub_4c009b94(flag)
flag = cxor_b2b4971b(flag)
flag = shuffle_0847afe1(flag)
flag = shuffle_b38ea8bc(flag)
flag = xor_27199205(flag)
flag = shuffle_8ed3abbd(flag)
flag = shuffle_41ece7da(flag)
flag = chsub_a0999ab2(flag)
flag = csub_3d9f618d(flag)
flag = chunk_205e30c0(flag)
flag = chsub_0b4adf36(flag)
flag = xor_ba2cb10f(flag)
flag = chadd_df001d38(flag)
flag = cadd_fdc5f9f6(flag)
flag = chsub_bf5cdb36(flag)
flag = mul_49cd764a(flag)
flag = chunk_e120ffe1(flag)
flag = cadd_4836ae77(flag)
flag = cadd_6fe68866(flag)
flag = cadd_ad85576d(flag)
flag = xor_741282be(flag)
flag = cxor_2eec2815(flag)
flag = cadd_99696e25(flag)
flag = chxor_8db15314(flag)
flag = sub_5e615eab(flag)
flag = chmul_d909e81b(flag)
flag = cxor_df97c526(flag)
flag = shuffle_2ad93819(flag)
flag = cmul_c9f41697(flag)
flag = digsub_441e29b0(flag)
flag = chmul_49ccc560(flag)
flag = shuffle_2fffd50a(flag)
flag = cmul_4a4181f0(flag)
flag = chsub_27343013(flag)
flag = sub_36eea33a(flag)
flag = mul_49d2ca13(flag)
flag = cadd_8fd791e9(flag)
flag = chsub_84b4ec96(flag)
flag = cxor_0e701321(flag)
flag = cadd_7db59ff9(flag)
flag = cxor_e9ecb31a(flag)
flag = xor_9ec16d95(flag)
flag = chmul_73d44dfc(flag)
flag = digsub_2f6deeb4(flag)
flag = add_33350535(flag)
flag = xor_a2999e10(flag)
flag = chsub_f7d05960(flag)
flag = chadd_e14e4897(flag)
flag = sub_734f1f1d(flag)
flag = cmul_f289fa35(flag)
flag = chadd_6c281254(flag)
flag = chmul_d95ce6fa(flag)
flag = chmul_584b1b88(flag)
flag = chmul_9455da11(flag)
flag = cadd_df4a88c2(flag)
flag = shuffle_e5071e98(flag)
flag = chunk_27ab9318(flag)
flag = xor_df1ffac5(flag)
flag = chadd_685835f8(flag)
flag = chxor_7d723b4b(flag)
flag = chadd_3efd2ae8(flag)
flag = digsub_189a0416(flag)
flag = sub_716f026e(flag)
flag = chunk_1d45076c(flag)
flag = sub_f0758554(flag)
flag = add_4584979d(flag)
flag = chmul_e513d3af(flag)
flag = chsub_8fa33f3e(flag)
flag = xor_99a5aed1(flag)
flag = digsub_cca1638e(flag)
flag = cxor_2e302e67(flag)
flag = add_7ea1ef19(flag)
flag = shuffle_520f2eb6(flag)
flag = mul_f44aa210(flag)
flag = digsub_88a027ca(flag)
flag = cmul_68c300d6(flag)
flag = xor_78f0da60(flag)
flag = mul_a47d4993(flag)
flag = chadd_d5cb8b82(flag)
flag = cmul_db96fc2e(flag)
flag = chadd_d8ce38a5(flag)
flag = shuffle_0d458069(flag)
flag = xor_c3591520(flag)
flag = digsub_f44f1764(flag)
flag = mul_75e8ddbd(flag)
flag = chunk_ab1c7f5f(flag)
flag = chxor_3a47885a(flag)
flag = cxor_20661e8f(flag)
flag = chsub_207ccdea(flag)
flag = cxor_87ecf0a7(flag)
flag = chmul_3d18df83(flag)
flag = shuffle_e8a5f5ef(flag)
flag = cmul_30089d16(flag)
flag = add_2071c6f7(flag)
flag = chxor_fb59e14c(flag)
flag = chsub_4ebc0819(flag)
flag = cadd_d3782943(flag)
flag = xor_78429cb3(flag)
flag = add_cfe45120(flag)
flag = chsub_15fcbd3c(flag)
flag = shuffle_8e02f517(flag)
flag = xor_8a3ad979(flag)
flag = shuffle_5de0aca9(flag)
flag = chmul_9522f239(flag)
flag = cadd_c170383d(flag)
flag = chxor_699d5577(flag)
flag = chsub_c2ee0e2b(flag)
flag = csub_cec4261b(flag)
flag = chunk_a008d507(flag)
flag = chmul_97ccb142(flag)
flag = chadd_d12574c1(flag)
flag = add_6c75725b(flag)
flag = cxor_0c6bb32e(flag)
flag = add_f2a6c048(flag)
flag = chadd_c23de33f(flag)
flag = add_eee6c971(flag)
flag = cadd_7016b7d0(flag)
flag = cmul_38d68804(flag)
flag = cxor_2e4b26f4(flag)
flag = cadd_e87be691(flag)
flag = chunk_6df9f44d(flag)
flag = chsub_74365a3a(flag)
flag = chxor_616b9569(flag)
flag = xor_76cd9a81(flag)
flag = cadd_d07896bc(flag)
flag = xor_18093134(flag)
flag = shuffle_7dc0e0cb(flag)
flag = add_93fdd277(flag)
flag = chmul_50bf6425(flag)
flag = mul_a2581ad1(flag)
flag = sub_4a2fd9ee(flag)
flag = chunk_a5854668(flag)
flag = chmul_e6b12a10(flag)
flag = digsub_af816cb4(flag)
flag = chmul_05b6d674(flag)
flag = shuffle_7c9553cb(flag)
flag = digsub_2ab90ae8(flag)
flag = cadd_62b6ad0e(flag)
flag = sub_d67326ec(flag)
flag = digsub_6bf0d618(flag)
flag = shuffle_63f494ea(flag)
flag = cadd_3124bc3c(flag)
flag = cxor_11a1bb19(flag)
flag = xor_b75a23b1(flag)
flag = xor_dfe62c40(flag)
flag = mul_0b942967(flag)
flag = cadd_44729e6e(flag)
flag = cmul_75c87098(flag)
flag = digsub_3534e3b8(flag)
flag = sub_bea3fee1(flag)
flag = csub_3564220e(flag)
flag = csub_c50ffebc(flag)
flag = xor_2ec3c23c(flag)
flag = chmul_f8bd0b15(flag)
flag = chadd_5171aa72(flag)
flag = xor_3bff953a(flag)
flag = chxor_a67420fd(flag)
flag = cadd_159797e5(flag)
flag = chsub_4ebc0819(flag)
flag = chunk_515df396(flag)
flag = csub_024ef6f9(flag)
flag = chsub_0642b6ad(flag)
flag = chxor_1272b4b3(flag)
flag = cmul_910def34(flag)
flag = shuffle_a2ef4315(flag)
flag = digsub_081fcfe8(flag)
flag = shuffle_55c1c340(flag)
flag = mul_5918bc39(flag)
flag = xor_ba2cb10f(flag)
flag = cmul_9a7d5570(flag)
flag = mul_cf7af31a(flag)
flag = cadd_caab3e28(flag)
flag = xor_2b6a5232(flag)
flag = chxor_6ef3ef24(flag)
flag = chmul_a0fda47c(flag)
flag = csub_c50ffebc(flag)
flag = sub_c15c0c16(flag)
flag = cxor_719205d0(flag)
flag = xor_1c17469f(flag)
flag = cadd_074e39fc(flag)
flag = csub_9707b66b(flag)
flag = cmul_2eb8bc9e(flag)
flag = chunk_406e7c05(flag)
flag = cxor_7a8c0f91(flag)
flag = chsub_d05da0d8(flag)
flag = chadd_d980e2e3(flag)
flag = xor_7f9cb2c2(flag)
flag = xor_ed4e00db(flag)
flag = cxor_f01c9df2(flag)
flag = chmul_c4c465cb(flag)
flag = sub_6f40f29f(flag)
flag = chunk_426d469b(flag)
flag = mul_709d81e2(flag)
flag = shuffle_9b38f08f(flag)
flag = cadd_40a2d9f1(flag)
flag = csub_b08e7ba7(flag)
flag = cmul_b7f51e10(flag)
flag = xor_ac535945(flag)
flag = chunk_7ee32000(flag)
flag = chunk_878046b8(flag)
flag = cxor_26057d46(flag)
flag = xor_c0bb5777(flag)
flag = digsub_98eb887b(flag)
flag = digsub_5e7cd6f6(flag)
flag = add_1ddc8330(flag)
flag = chmul_522be87f(flag)
flag = chadd_5488a6fe(flag)
flag = chmul_9cbb8a7f(flag)
flag = mul_14ad1525(flag)
flag = cadd_0c2307f0(flag)
flag = chxor_c399373f(flag)
flag = sub_430d0f4c(flag)
flag = cmul_d4928d34(flag)
flag = chsub_d64b63cc(flag)
flag = cadd_469004ba(flag)
flag = csub_d480ce5f(flag)
flag = xor_36e98afe(flag)
flag = shuffle_b63d8098(flag)
flag = cmul_108a5ff2(flag)
flag = chxor_aa6e4431(flag)
flag = mul_947580cb(flag)
flag = cadd_f1e2dc73(flag)
flag = add_20baca93(flag)
flag = mul_835fdfd8(flag)
flag = csub_7ef295f1(flag)
flag = chxor_a120d278(flag)
flag = sub_1a66408e(flag)
flag = cmul_bf506846(flag)
flag = chmul_c3f87a7a(flag)
flag = cadd_d3ea8638(flag)
flag = chadd_61a15596(flag)
flag = mul_00091c11(flag)
flag = sub_d45b504c(flag)
flag = chmul_75d42cab(flag)
flag = digsub_0410b672(flag)
flag = chunk_7ee32000(flag)
flag = mul_78cdcde8(flag)
flag = chadd_620d941e(flag)
flag = mul_c50eb88b(flag)
flag = chadd_069e430a(flag)
flag = chadd_0fbbf4b8(flag)
flag = chxor_bdaad1f4(flag)
flag = chunk_13e026f7(flag)
flag = shuffle_a924ad8b(flag)
flag = chsub_30f73b24(flag)
flag = add_9e15da4e(flag)
flag = chxor_49854e3d(flag)
flag = chunk_a008d507(flag)
flag = chmul_b131f273(flag)
flag = cxor_504085b7(flag)
flag = chunk_41b017cd(flag)
flag = chsub_c1db5393(flag)
flag = xor_7661c292(flag)
flag = csub_6f8ba274(flag)
flag = chadd_7d40b8f2(flag)
flag = chunk_158dd2b2(flag)
flag = mul_1d0b4953(flag)
flag = cxor_df97c526(flag)
flag = xor_1a989c5f(flag)
flag = chxor_1e5bb2ed(flag)
flag = shuffle_0bc785b3(flag)
flag = shuffle_6ed87304(flag)
flag = digsub_69f3e773(flag)
flag = shuffle_a7b0cb57(flag)
flag = add_83aabfde(flag)
flag = shuffle_022284b4(flag)
flag = add_a00a7d48(flag)
flag = add_c8475b4e(flag)
flag = chadd_2f4760f5(flag)
flag = xor_ff7262d6(flag)
flag = chmul_0b2874b7(flag)
flag = cxor_765f4bed(flag)
flag = chmul_27a340a5(flag)
flag = chxor_0595f6c3(flag)
flag = chxor_3c678c19(flag)
flag = digsub_189a0416(flag)
flag = chxor_8db15314(flag)
flag = sub_e97e1ac7(flag)
flag = chxor_27993531(flag)
flag = chxor_e7a8f8ca(flag)
flag = cadd_c2498f1a(flag)
flag = cxor_eb72bf39(flag)
flag = add_67499497(flag)
flag = chxor_68adccd3(flag)
flag = chsub_7af0731b(flag)
flag = chmul_06728846(flag)
flag = cxor_d43914ce(flag)
flag = cxor_0673e3e4(flag)
flag = cmul_5193391a(flag)
flag = add_9009d319(flag)
flag = digsub_3534e3b8(flag)
flag = chxor_00dbbc36(flag)
flag = shuffle_6fcd072c(flag)
flag = chxor_c55e532b(flag)
flag = csub_63df48f0(flag)
flag = add_40ed3353(flag)
flag = shuffle_d69d2c9b(flag)
flag = cmul_a089bf19(flag)
flag = mul_a8c5006e(flag)
flag = mul_7a676b8f(flag)
flag = cadd_029527b8(flag)
flag = cxor_05f70989(flag)
flag = chadd_2fa4c3aa(flag)
flag = chxor_e36c3430(flag)
flag = chunk_85747b20(flag)
flag = chmul_d909e81b(flag)
flag = xor_25ac4148(flag)
flag = chxor_9a066ef0(flag)
flag = chadd_93e431eb(flag)
flag = mul_0b942967(flag)
flag = sub_6fb5c242(flag)
flag = sub_50bd0d23(flag)
flag = cxor_ec93c298(flag)
flag = chunk_41b017cd(flag)
flag = xor_e6bc2bcf(flag)
flag = chunk_3fec31ed(flag)
flag = csub_26fceede(flag)
flag = xor_ab75a784(flag)
flag = csub_5174b08f(flag)
flag = chxor_6ebc3376(flag)
flag = xor_a6213de5(flag)
flag = csub_08317493(flag)
flag = chxor_e3b5c5ae(flag)
flag = add_2a4aac0f(flag)
flag = xor_875a544d(flag)
flag = xor_ac535945(flag)
flag = shuffle_2ad93819(flag)
flag = csub_61350fa4(flag)
flag = cmul_3c96ba6e(flag)
flag = mul_67e87c31(flag)
flag = csub_ad630998(flag)
flag = sub_2d595d46(flag)
flag = chmul_78c19c03(flag)
flag = chmul_510bb7ff(flag)
flag = sub_96b63796(flag)
flag = chadd_91feb455(flag)
flag = chsub_4c5385aa(flag)
flag = chsub_36aaf90a(flag)
flag = csub_f0b67669(flag)
flag = cxor_9bda6371(flag)
flag = chunk_dfb92a41(flag)
flag = digsub_324078ea(flag)
flag = xor_fbcf5aa3(flag)
flag = cadd_56eef358(flag)
flag = chmul_81ec0d4f(flag)
flag = cadd_36d81dd6(flag)
flag = add_c9854582(flag)
flag = chadd_68273988(flag)
flag = chsub_b335ae97(flag)
flag = chsub_8dd5ab11(flag)
flag = chunk_d99ad65b(flag)
flag = mul_386487fa(flag)
flag = cadd_b51d3eba(flag)
flag = cxor_ec93c298(flag)
flag = xor_2ecafb68(flag)
flag = add_278192d9(flag)
flag = xor_f13936e3(flag)
flag = digsub_7d236bf8(flag)
flag = chadd_620f96a9(flag)
flag = digsub_7d14062a(flag)
flag = add_1b3e26ab(flag)
flag = mul_49d2ca13(flag)
flag = chsub_bc163239(flag)
flag = chxor_e1dd333b(flag)
flag = chunk_e53ff766(flag)
flag = chunk_515df396(flag)
flag = chadd_6128a54c(flag)
flag = chsub_3e828f05(flag)
flag = chsub_66269564(flag)
flag = chadd_adaa5d2b(flag)
flag = xor_23517ee7(flag)
flag = cmul_22a48cb5(flag)
flag = chunk_e5683735(flag)
flag = cmul_bc969278(flag)
flag = mul_e020bc90(flag)
flag = cadd_5352b247(flag)
flag = chmul_36d54a3c(flag)
flag = digsub_79a3f207(flag)
flag = digsub_8599b0c1(flag)
flag = sub_541963fb(flag)
flag = chadd_4a09bd0d(flag)
flag = chsub_0b2321c1(flag)
flag = cadd_ed8e4346(flag)
flag = digsub_f7a754a1(flag)
flag = sub_0d8062bd(flag)
flag = chsub_65723dab(flag)
flag = add_a91e1171(flag)
flag = chmul_004133b3(flag)
flag = chxor_c7b14201(flag)
flag = chadd_b29ed32e(flag)
flag = cxor_1adfeb4e(flag)
flag = add_b6cb0782(flag)
flag = cmul_8a7021fa(flag)
flag = cmul_e510f1c4(flag)
flag = chsub_76cedeac(flag)
flag = sub_90d65932(flag)
flag = chsub_b596367b(flag)
flag = csub_1bf63629(flag)
flag = chxor_02aa625d(flag)
flag = cxor_c321d96d(flag)
flag = chmul_90f76848(flag)
flag = mul_b2b433f9(flag)
flag = digsub_4bfe6492(flag)
flag = cadd_54b12cd0(flag)
flag = shuffle_c51a19df(flag)
flag = chsub_d27566eb(flag)
flag = cmul_2d4425ba(flag)
flag = add_0e1d894a(flag)
flag = chsub_0642b6ad(flag)
flag = add_79292e38(flag)
flag = chadd_5171aa72(flag)
flag = xor_39a60514(flag)
flag = cadd_5fc3a121(flag)
flag = xor_9a3a96a8(flag)
flag = chmul_5c3ce310(flag)
flag = digsub_b8269215(flag)
flag = cmul_931552a6(flag)
flag = cxor_b646f68b(flag)
flag = add_0919e3a2(flag)
flag = chxor_b3e205ec(flag)
flag = add_40ed3353(flag)
flag = chmul_b8c4917b(flag)
flag = chunk_adb7a31f(flag)
flag = chsub_3d7d2e18(flag)
flag = cmul_1fd240a5(flag)
flag = chunk_0188117c(flag)
flag = xor_e50d3684(flag)
flag = chxor_3c2c0416(flag)
flag = cadd_6fbe94f5(flag)
flag = chsub_ccea72cb(flag)
flag = cadd_a6332778(flag)
flag = cadd_d6913038(flag)
flag = chxor_ce31e412(flag)
flag = mul_d4fa63d2(flag)
flag = add_f4113996(flag)
flag = chxor_e7a8f8ca(flag)
flag = mul_fc6ac804(flag)
flag = chadd_c58d2df9(flag)
flag = shuffle_b6a2aa6c(flag)
flag = chxor_4f175e3b(flag)
flag = chxor_3a47885a(flag)
flag = chxor_b3e205ec(flag)
flag = chunk_7496a2c0(flag)
flag = chxor_a1104840(flag)
flag = xor_d90ee923(flag)
flag = chxor_31537f25(flag)
flag = chsub_3832a22b(flag)
flag = cxor_c2fd3f28(flag)
flag = mul_89bed2ea(flag)
flag = cmul_ddef00cb(flag)
flag = shuffle_496b2c86(flag)
flag = xor_34863588(flag)
flag = sub_3428aff7(flag)
flag = cxor_f4c61b89(flag)
flag = cxor_695c7de2(flag)
flag = cxor_31be8398(flag)
flag = digsub_dcdf3ce1(flag)
flag = xor_f580ac50(flag)
flag = add_eee6c971(flag)
flag = chunk_ba6b2283(flag)
flag = mul_8e78cc44(flag)
flag = chsub_02246759(flag)
flag = chsub_714e8ec9(flag)
flag = digsub_828ecd75(flag)
flag = cmul_3062560c(flag)
flag = chsub_01e56b12(flag)
flag = cxor_0c6bb32e(flag)
flag = xor_10552f50(flag)
flag = cxor_9c481fde(flag)
flag = shuffle_f89bee84(flag)
flag = cxor_b2b4971b(flag)
flag = chadd_f4c466d3(flag)
flag = csub_3d9f618d(flag)
flag = chxor_d44107b6(flag)
flag = chadd_96a0ee76(flag)
flag = cmul_32eb4436(flag)
flag = csub_737d4c67(flag)
flag = chxor_4fe33b06(flag)
flag = sub_381e766c(flag)
flag = cmul_7a36ad1f(flag)
flag = sub_60d9cd7a(flag)
flag = mul_8cff30c9(flag)
flag = shuffle_ffc10c41(flag)
flag = xor_d30c564f(flag)
flag = xor_a2999e10(flag)
flag = xor_c0655006(flag)
flag = cadd_652099bf(flag)
flag = cadd_a5b24fcc(flag)
flag = chunk_4b50f9e1(flag)
flag = chxor_6ae1cc6a(flag)
flag = chadd_3b98f1b0(flag)
flag = cmul_91c63a57(flag)
flag = cxor_9064d63f(flag)
flag = chadd_7c0c3e14(flag)
flag = chadd_a8439bc3(flag)
flag = add_c8330084(flag)
flag = chsub_cd79e5f6(flag)
flag = xor_ee57e55f(flag)
flag = digsub_db13869f(flag)
flag = cxor_98058884(flag)
flag = digsub_1348ccb0(flag)
flag = cxor_a009b999(flag)
flag = chunk_b40e3bec(flag)
flag = chmul_a32f41a3(flag)
flag = mul_62a37d48(flag)
flag = chmul_af64f7e0(flag)
flag = chunk_f140121b(flag)
flag = xor_2a24945c(flag)
flag = mul_2cd00355(flag)
flag = chunk_f46f605c(flag)
flag = mul_8f7d3564(flag)
flag = cadd_029527b8(flag)
flag = chmul_49d9640f(flag)
flag = cxor_d339f91c(flag)
flag = xor_5b9dbd1c(flag)
flag = chadd_52640d1f(flag)
flag = xor_ac535945(flag)
flag = chsub_aad79c73(flag)
flag = cxor_765f4bed(flag)
flag = xor_084e61d3(flag)
flag = cadd_81014cf5(flag)
flag = xor_984175c8(flag)
flag = cmul_8872db98(flag)
flag = cadd_a79fc94c(flag)
flag = chadd_1feaf785(flag)
flag = cmul_70fa9f12(flag)
flag = chxor_c7f6ad65(flag)
flag = chadd_7c5f1cde(flag)
flag = chmul_c3f87a7a(flag)
flag = add_f4113996(flag)
flag = csub_f8935355(flag)
flag = cmul_dc6ecbe6(flag)
flag = cadd_c1763a61(flag)
flag = xor_c1194f5a(flag)
flag = sub_32cc1a97(flag)
flag = chmul_6a2ac61f(flag)
flag = sub_38bfe22f(flag)
flag = add_1039dc95(flag)
flag = chxor_2bbe4cc1(flag)
flag = chsub_fa709b53(flag)
flag = chsub_1a499bac(flag)
flag = mul_714f7f13(flag)
flag = chsub_9e3a2eb0(flag)
flag = digsub_f2743d63(flag)
flag = shuffle_3113cb7a(flag)
flag = cxor_719205d0(flag)
flag = xor_a42aac9f(flag)
flag = add_6aeef0e9(flag)
flag = cxor_37cf37e1(flag)
flag = cadd_eca08b2e(flag)
flag = chxor_4ab8ad7f(flag)
flag = cxor_9eab5098(flag)
flag = shuffle_88823dcd(flag)
flag = chmul_ab4034bb(flag)
flag = xor_e32cc6e3(flag)
flag = cxor_c4a0e97e(flag)
flag = add_da6dae2b(flag)
flag = csub_4fc27255(flag)
flag = xor_6cabd79d(flag)
flag = chmul_faca1df3(flag)
flag = chxor_2f1310f4(flag)
flag = chsub_79027896(flag)
flag = chadd_983dad8d(flag)
flag = chadd_6d0c80a6(flag)
flag = sub_04d98d74(flag)
flag = digsub_a7419844(flag)
flag = xor_b1dcccdc(flag)
flag = chsub_207ccdea(flag)
flag = add_0b0a39a3(flag)
flag = add_b4b55578(flag)
flag = shuffle_83b67bb5(flag)
flag = chunk_524ad27b(flag)
flag = cadd_b8669446(flag)
flag = shuffle_c5cb30a9(flag)
flag = cxor_81cc1cc2(flag)
flag = xor_4d6d322c(flag)
flag = add_e08d6566(flag)
flag = add_53a3ae63(flag)
flag = add_c0abe07c(flag)
flag = cmul_03ecbb18(flag)
flag = chxor_3dd86e1b(flag)
flag = add_a85e7265(flag)
flag = chadd_43e1206d(flag)
flag = chunk_3c707853(flag)
flag = xor_53ca0b45(flag)
flag = chmul_9fbf4859(flag)
flag = chxor_fad6bade(flag)
flag = shuffle_899fbb68(flag)
flag = shuffle_7b8c9089(flag)
flag = sub_d45b504c(flag)
flag = xor_07333316(flag)
flag = mul_b97eacc4(flag)
flag = add_ca8439ba(flag)
flag = sub_2637de69(flag)
flag = add_d2c1e8bc(flag)
flag = mul_492399d6(flag)
flag = chxor_5c4c4d77(flag)
flag = xor_f19c0746(flag)
flag = cxor_ce58803c(flag)
flag = csub_737d4c67(flag)
flag = mul_2898db69(flag)
flag = chxor_9d86eb3b(flag)
flag = cmul_7fe479fd(flag)
flag = mul_0af7d935(flag)
flag = cxor_5fa90da0(flag)
flag = cmul_adeb1535(flag)
flag = chmul_6834bec9(flag)
flag = chunk_28475841(flag)
flag = digsub_6afbfca8(flag)
flag = cxor_faa42ed7(flag)
flag = cadd_81afebad(flag)
flag = xor_b3655f1c(flag)
flag = sub_813bc423(flag)
flag = chmul_a6bf2367(flag)
flag = xor_92fb1dc0(flag)
flag = chsub_6ab39e5c(flag)
flag = chadd_6b1daeac(flag)
flag = cadd_c66b787a(flag)
flag = mul_62cf6aa4(flag)
flag = chsub_e1ab9cb3(flag)
flag = chxor_a987af1b(flag)
flag = chunk_0074c4bc(flag)
flag = chmul_510bb7ff(flag)
flag = chxor_b080755f(flag)
flag = xor_084e61d3(flag)
flag = mul_62cf6aa4(flag)
flag = cadd_6fbe94f5(flag)
flag = mul_a4e5921f(flag)
flag = shuffle_74725db2(flag)
flag = sub_5e069f47(flag)
flag = add_eee6c971(flag)
flag = cmul_892d62b0(flag)
flag = digsub_e717a1dc(flag)
flag = chsub_7bc426c7(flag)
flag = chunk_64714116(flag)
flag = cmul_9edf8822(flag)
flag = chunk_ba2558cf(flag)
flag = cxor_4dfc7289(flag)
flag = xor_393c82c1(flag)
flag = cxor_871a2d7f(flag)
flag = chunk_dd51ac10(flag)
flag = chsub_32f5910d(flag)
flag = add_f11cd945(flag)
flag = cadd_ea861103(flag)
flag = cxor_da9ff7d9(flag)
flag = chsub_27343013(flag)
flag = chadd_9f220dc2(flag)
flag = chmul_34dab8e4(flag)
flag = xor_e994fa9c(flag)
flag = cmul_2a677be7(flag)
flag = shuffle_a6432e15(flag)
flag = cadd_2ba6325c(flag)
flag = shuffle_29c0a60f(flag)
flag = cxor_3cac8696(flag)
flag = shuffle_d9cf5546(flag)
flag = add_8357f559(flag)
flag = shuffle_cb627e8c(flag)
flag = cmul_3152eceb(flag)
flag = cxor_95c41471(flag)
flag = xor_d0a1bc3c(flag)
flag = sub_f3be4e25(flag)
flag = cxor_71a4351f(flag)
flag = add_23028792(flag)
flag = chmul_d43d0316(flag)
flag = chmul_8c7712e0(flag)
flag = cadd_0a5ff345(flag)
flag = chunk_fe7fd1c6(flag)
flag = cmul_b759583b(flag)
flag = xor_6ee9de87(flag)
flag = cmul_892d62b0(flag)
flag = chunk_754adf93(flag)
flag = digsub_7aec5b80(flag)
flag = chmul_227b1b2a(flag)
flag = mul_51ffc146(flag)
flag = cxor_871a2d7f(flag)
flag = chxor_a987af1b(flag)
flag = cxor_5fa90da0(flag)
flag = mul_a8c5006e(flag)
flag = csub_a5842efc(flag)
flag = cadd_c2498f1a(flag)
flag = shuffle_4e66918e(flag)
flag = cmul_aaa17c90(flag)
flag = xor_eca7972f(flag)
flag = xor_7c90aa84(flag)
flag = shuffle_a6432e15(flag)
flag = chunk_f32c7c2f(flag)
flag = xor_131c6ed1(flag)
flag = sub_c24992e8(flag)
flag = chmul_384134ae(flag)
flag = shuffle_3a65d143(flag)
flag = chunk_d9927f3d(flag)
flag = sub_d625c555(flag)
flag = cadd_d279898b(flag)
flag = cxor_eaaa00cc(flag)
flag = chsub_3e828f05(flag)
flag = chmul_e559b45c(flag)
flag = cadd_56facd4a(flag)
flag = cmul_16d7f1e9(flag)
flag = cadd_91c03cb7(flag)
flag = cmul_45d4d761(flag)
flag = mul_c991ef9e(flag)
flag = chadd_8b4d11a3(flag)
flag = chsub_2792abe7(flag)
flag = add_74fa4c8a(flag)
flag = chadd_5544e38e(flag)
flag = chxor_49e5796a(flag)
flag = chmul_ff76516d(flag)
flag = cxor_fb665168(flag)
flag = cadd_86ca3121(flag)
flag = chxor_4ec23f54(flag)
flag = xor_032ec723(flag)
flag = chmul_d3237ea8(flag)
flag = shuffle_b22f1c56(flag)
flag = chxor_a120d278(flag)
flag = chxor_f0558dbb(flag)
flag = mul_d23185db(flag)
flag = chadd_4a09bd0d(flag)
flag = chxor_041a698a(flag)
flag = chunk_e20352cb(flag)
flag = cxor_c4236734(flag)
flag = add_a45b80f9(flag)
flag = add_8e1a7afe(flag)
flag = add_d7079839(flag)
flag = add_a04dd9fa(flag)
flag = mul_b2698654(flag)
flag = shuffle_3207f061(flag)
flag = chadd_37bb2c71(flag)
flag = sub_c8e4bd2d(flag)
flag = cxor_69cd9f4e(flag)
flag = chunk_1f1becb3(flag)
flag = chsub_aea82172(flag)
flag = sub_2c66d2af(flag)
flag = xor_d4b3bf17(flag)
flag = chmul_7c4163e6(flag)
flag = cxor_207ceb20(flag)
flag = add_f11cd945(flag)
flag = digsub_caab5c9d(flag)
flag = chmul_351f9d39(flag)
flag = chmul_a4bed1f5(flag)
flag = chxor_38c0a7ad(flag)
flag = chsub_d8b43803(flag)
flag = chmul_faca1df3(flag)
flag = chadd_2da7db06(flag)
flag = chunk_bdec9045(flag)
flag = digsub_2945b343(flag)
flag = xor_d90ee923(flag)
flag = chmul_9e62f058(flag)
flag = chxor_24586d25(flag)
flag = sub_b83b0b5a(flag)
flag = chunk_45336ad9(flag)
flag = mul_67e87c31(flag)
flag = digsub_99f3c205(flag)
flag = cmul_da51d310(flag)
flag = cadd_fa34d6b4(flag)
flag = xor_a6cea8c8(flag)
flag = chunk_e949207e(flag)
flag = cxor_b342528a(flag)
flag = mul_54b3dab3(flag)
flag = add_4235831f(flag)
flag = chunk_4b50f9e1(flag)
flag = chsub_b543d1d6(flag)
flag = mul_e020bc90(flag)
flag = chxor_6c38cb27(flag)
flag = cadd_65434b8c(flag)
flag = cxor_a4885bca(flag)
flag = chxor_12caeb3c(flag)
flag = csub_160421ef(flag)
flag = cadd_07c72dba(flag)
flag = csub_d77927e4(flag)
flag = cxor_892833c6(flag)
flag = cadd_bf9e62c2(flag)
flag = chsub_f1540b87(flag)
flag = sub_6baa906d(flag)
flag = add_3e8fa8db(flag)
flag = xor_abff1870(flag)
flag = cxor_303b54c5(flag)
flag = xor_f68eb9b6(flag)
flag = chmul_5fbe910e(flag)
flag = xor_7b6d7222(flag)
flag = shuffle_6d9a62f9(flag)
flag = digsub_f38ffcc2(flag)
flag = cmul_a292d693(flag)
flag = cadd_07c72dba(flag)
flag = chmul_c042377c(flag)
flag = mul_6fc04a8d(flag)
flag = add_cfe45120(flag)
flag = sub_5044b2cf(flag)
flag = sub_b665fdaf(flag)
flag = digsub_3f272635(flag)
flag = csub_c323c891(flag)
flag = cxor_79917601(flag)
flag = cxor_ad95af8e(flag)
flag = sub_5e831919(flag)
flag = chunk_a9500e9e(flag)
flag = add_546e77b8(flag)
flag = chmul_d95ce6fa(flag)
flag = sub_04d98d74(flag)
flag = cadd_1c3f6ab8(flag)
flag = sub_31cd283b(flag)
flag = csub_557e07a6(flag)
flag = add_e9f76a38(flag)
flag = xor_90755689(flag)
flag = csub_1017a6c4(flag)
flag = csub_37af1f58(flag)
flag = csub_98f9a52a(flag)
flag = cadd_fd35b517(flag)
flag = cxor_85556ac5(flag)
flag = chxor_d01563ec(flag)
flag = cadd_bf6aacf5(flag)
flag = chadd_ac9d1de7(flag)
flag = chmul_7eb45a9e(flag)
flag = csub_026b559f(flag)
flag = add_d3cda0e4(flag)
flag = chsub_1cf94121(flag)
flag = sub_b8c51fbd(flag)
flag = chunk_53760c11(flag)
flag = shuffle_d43c63b3(flag)
flag = cxor_255a694d(flag)
flag = cadd_5d182653(flag)
flag = chsub_b60cec96(flag)
flag = shuffle_d43c63b3(flag)
flag = cxor_025cbbe3(flag)
flag = chxor_02aa625d(flag)
flag = chunk_93ca5889(flag)
flag = sub_0cd6568b(flag)
flag = chunk_0b233094(flag)
flag = digsub_b93022b5(flag)
flag = chxor_b96f779c(flag)
flag = chsub_25609124(flag)
flag = shuffle_efb3207c(flag)
flag = mul_18205495(flag)
flag = mul_62cf6aa4(flag)
flag = xor_2bdb6650(flag)
flag = chsub_e1ab9cb3(flag)
flag = digsub_081fcfe8(flag)
flag = cmul_ea21bbf8(flag)
flag = cmul_93bd1510(flag)
flag = chadd_d7cdb5da(flag)
flag = cadd_f435a64a(flag)
flag = add_40ed3353(flag)
flag = digsub_cb6346a1(flag)
flag = cxor_5161196f(flag)
flag = add_9b544b2a(flag)
flag = chsub_fb961764(flag)
flag = chadd_2a7b5687(flag)
flag = cadd_03187d75(flag)
flag = add_454ffaaf(flag)
flag = chxor_4f175e3b(flag)
flag = chadd_adaa5d2b(flag)
flag = chadd_7c0c3e14(flag)
flag = chsub_b448dac1(flag)
flag = sub_edd0e8fb(flag)
flag = sub_96b63796(flag)
flag = sub_656aa559(flag)
flag = chsub_f5c5e1fa(flag)
flag = digsub_63dc4ebb(flag)
flag = chmul_160cacb0(flag)
flag = add_36fb4d7d(flag)
flag = mul_b97eacc4(flag)
flag = sub_97300f52(flag)
flag = shuffle_f4ee3eb0(flag)
flag = xor_a42aac9f(flag)
flag = add_8aaefd6e(flag)
flag = cmul_9edf8822(flag)
flag = cmul_7d43ab73(flag)
flag = cmul_c57ae7de(flag)
flag = cxor_bacb039a(flag)
flag = chxor_e93460f8(flag)
flag = mul_492399d6(flag)
flag = shuffle_6186b5b1(flag)
flag = xor_bb19f697(flag)
flag = cmul_3bee8718(flag)
flag = chxor_eb7e47c1(flag)
flag = cxor_f40371fb(flag)
flag = mul_ed586e66(flag)
flag = cxor_faa42ed7(flag)
flag = chxor_da702120(flag)
flag = cxor_31be8398(flag)
flag = shuffle_a722dfed(flag)
flag = cadd_03187d75(flag)
flag = add_8eb87b67(flag)
flag = cxor_77ffb5fc(flag)
flag = cxor_d43914ce(flag)
flag = cadd_3cbc013d(flag)
flag = chmul_ab9cdb92(flag)
flag = chmul_0c42d6fc(flag)
flag = chxor_d6bf3b04(flag)
flag = digsub_3f272635(flag)
flag = shuffle_3c585e0a(flag)
flag = csub_68308d55(flag)
flag = cmul_135161b4(flag)
flag = xor_dce2a545(flag)
flag = chxor_a87f9d33(flag)
flag = xor_32fe74f6(flag)
flag = sub_00c9af82(flag)
flag = chadd_4a09bd0d(flag)
flag = chsub_c1275525(flag)
flag = sub_a8ed3df9(flag)
flag = sub_ab090f1a(flag)
flag = cadd_81834239(flag)
flag = chmul_47e5352e(flag)
flag = digsub_4428ac60(flag)
flag = cadd_d6913038(flag)
flag = chmul_7df9b320(flag)
flag = chadd_00e2dbca(flag)
flag = chunk_39378691(flag)
flag = chunk_6a5424b4(flag)
flag = cmul_bf27fc42(flag)
flag = csub_08317493(flag)
flag = mul_a0ace443(flag)
flag = cxor_1c819fcf(flag)
flag = chunk_20e19fb4(flag)
flag = chadd_55b65d14(flag)
flag = chadd_983dad8d(flag)
flag = sub_023318b3(flag)
flag = csub_e904b187(flag)
flag = digsub_732f28f7(flag)
flag = chmul_adc58ae6(flag)
flag = cmul_6fb2378c(flag)
flag = shuffle_0d936e4f(flag)
flag = shuffle_fe7bcc78(flag)
flag = chxor_eb7e47c1(flag)
flag = chmul_9522f239(flag)
flag = chxor_8264e501(flag)
flag = chxor_22bbbf9c(flag)
flag = mul_c3e69fa2(flag)
flag = digsub_50bc72d1(flag)
flag = chxor_efcd55a0(flag)
flag = mul_8c56f020(flag)
flag = cxor_c9ef0e8c(flag)
flag = csub_6cc93d0b(flag)
flag = digsub_99f3c205(flag)
flag = cxor_ae138bf7(flag)
flag = chmul_7df9b320(flag)
flag = chmul_50a23c29(flag)
flag = chsub_1ad0c5fe(flag)
flag = digsub_ae82b4af(flag)
flag = xor_abf7f988(flag)
flag = chunk_44d36e8a(flag)
flag = mul_82f61bf9(flag)
flag = digsub_53dac253(flag)
flag = chadd_40293e24(flag)
flag = chxor_fc74d45b(flag)
flag = csub_b08e7ba7(flag)
flag = chsub_e9070016(flag)
flag = chxor_e6a0d155(flag)
flag = cadd_7ed856d4(flag)
flag = digsub_6e4a7a18(flag)
flag = mul_833e4a11(flag)
flag = shuffle_55c1c340(flag)
flag = sub_0216c0df(flag)
flag = cxor_c8ef5dcc(flag)
flag = cadd_6719a051(flag)
flag = cmul_61024c03(flag)
flag = shuffle_81df2959(flag)
flag = sub_0b5acfeb(flag)
flag = add_b9d4cb35(flag)
flag = chsub_6ab39e5c(flag)
flag = chsub_d27566eb(flag)
flag = cadd_e4b46665(flag)
flag = chsub_a85cba2a(flag)
flag = xor_060a0f63(flag)
flag = digsub_fcc47cc3(flag)
flag = chmul_414bc877(flag)
flag = digsub_1feeafe7(flag)
flag = digsub_20c16447(flag)
flag = chunk_2e1e8db3(flag)
flag = xor_6a5cf5a7(flag)
flag = digsub_1348ccb0(flag)
flag = chmul_d3cbaa99(flag)
flag = add_ed6c03df(flag)
flag = chunk_b9615aa9(flag)
flag = csub_9bf22fee(flag)
flag = mul_d9dbdb53(flag)
flag = sub_2f70dd6e(flag)
flag = chunk_c154a4b0(flag)
flag = add_14d5f474(flag)
flag = chunk_6eea8007(flag)
flag = shuffle_5b02919b(flag)
flag = cadd_9ae3f2d8(flag)
flag = chadd_42edb2cc(flag)
flag = cadd_c66b787a(flag)
flag = sub_7aa7238b(flag)
flag = cmul_8d626e12(flag)
flag = chadd_ced5aac5(flag)
flag = chadd_e678a699(flag)
flag = cxor_9064d63f(flag)
flag = xor_b0ff6bbd(flag)
flag = cxor_2eec2815(flag)
flag = sub_2c66d2af(flag)
flag = cxor_7bdcbf55(flag)
flag = chunk_0a45d781(flag)
flag = csub_46c4ad67(flag)
flag = chmul_8f392c35(flag)
flag = digsub_ec12ae2a(flag)
flag = chmul_aae03452(flag)
flag = chsub_8b936fd7(flag)
flag = xor_cc33196e(flag)
flag = chxor_ea027ec2(flag)
flag = digsub_0410b672(flag)
flag = sub_32cc1a97(flag)
flag = add_2af4f21d(flag)
flag = cmul_7bb17901(flag)
flag = cmul_bac2ec72(flag)
flag = cadd_4dc54d10(flag)
flag = chxor_dbb28a03(flag)
flag = chunk_20e9ea05(flag)
flag = sub_48430fed(flag)
flag = mul_386487fa(flag)
flag = chmul_f3f19079(flag)
flag = csub_024ef6f9(flag)
flag = add_8ef46bd6(flag)
flag = cxor_2f7b49f0(flag)
flag = chxor_845d20e4(flag)
flag = digsub_af2d37bc(flag)
flag = chxor_3946db75(flag)
flag = cadd_fe8798b7(flag)
flag = xor_b055d8c5(flag)
flag = xor_df70e045(flag)
flag = cmul_3c18a69a(flag)
flag = chsub_d3796f81(flag)
flag = sub_4277a989(flag)
flag = digsub_febb8b71(flag)
flag = xor_f5bcc389(flag)
flag = chmul_d8f1c0f8(flag)
flag = csub_61a277c4(flag)
flag = chxor_97c3e5f8(flag)
flag = cadd_b1988d37(flag)
flag = sub_658747e3(flag)
flag = chadd_66038ddf(flag)
flag = shuffle_0df0d459(flag)
flag = chsub_21d8fc5d(flag)
flag = chunk_34d2c108(flag)
flag = cadd_49e18892(flag)
flag = cadd_6e163781(flag)
flag = chsub_e20ff930(flag)
flag = csub_642b1701(flag)
flag = sub_2cdb195c(flag)
flag = cxor_ce58803c(flag)
flag = cxor_e9ecb31a(flag)
flag = cmul_5b292fda(flag)
flag = cmul_bc969278(flag)
flag = sub_4b935f92(flag)
flag = cxor_7f33f858(flag)
flag = add_3631a2fd(flag)
flag = chsub_56813bb5(flag)
flag = shuffle_883a1be7(flag)
flag = cxor_29df8c0e(flag)
flag = digsub_06f2e415(flag)
flag = cadd_09d85417(flag)
flag = mul_37e82792(flag)
flag = cxor_b342528a(flag)
flag = csub_bc70c3a8(flag)
flag = mul_d952127d(flag)
flag = chmul_d95ce6fa(flag)
flag = add_66171335(flag)
flag = cadd_d4d5a797(flag)
flag = chsub_57719ac8(flag)
flag = sub_a99136b5(flag)
flag = chadd_0232afc0(flag)
flag = cmul_c52f5be0(flag)
flag = mul_2b51c8be(flag)
flag = sub_88400353(flag)
flag = xor_92fb1dc0(flag)
flag = add_b0406f7d(flag)
flag = cadd_cab4819e(flag)
flag = shuffle_9a11da09(flag)
flag = cadd_370c5e9e(flag)
flag = mul_6a90bbfe(flag)
flag = cmul_93bd1510(flag)
flag = chxor_7c1ad68d(flag)
flag = chxor_26ed8369(flag)
flag = cmul_cabb8b44(flag)
flag = xor_c0421e98(flag)
flag = chxor_56abb2e0(flag)
flag = add_278192d9(flag)
flag = chsub_9ce25212(flag)
flag = cadd_ffecf556(flag)
flag = chxor_4659a736(flag)
flag = cxor_c321d96d(flag)
flag = chadd_61a15596(flag)
flag = chunk_26bea2d1(flag)
flag = mul_a3a1940e(flag)
flag = chunk_c5398c39(flag)
flag = xor_53ec0b4a(flag)
flag = chxor_67aa494b(flag)
flag = add_b9d4cb35(flag)
flag = digsub_b7bd2cb5(flag)
flag = add_2361d033(flag)
flag = cxor_d42f4ceb(flag)
flag = xor_5b9dbd1c(flag)
flag = shuffle_9bfda3d1(flag)
flag = cxor_df42d206(flag)
flag = chsub_004b681b(flag)
flag = digsub_d22e4d9e(flag)
flag = add_784c3bff(flag)
flag = sub_73623d40(flag)
flag = cadd_ae1d750b(flag)
flag = chxor_4ec23f54(flag)
flag = cadd_67f3772b(flag)
flag = cmul_8d626e12(flag)
flag = cmul_2a502598(flag)
flag = shuffle_425fc483(flag)
flag = xor_60dd65f0(flag)
flag = mul_74e68352(flag)
flag = xor_bb4022b1(flag)
flag = sub_00bb1bb8(flag)
flag = mul_e020bc90(flag)
flag = mul_386487fa(flag)
flag = xor_b8937290(flag)
flag = chadd_cc7b7e1e(flag)
flag = chmul_61efa118(flag)
flag = xor_2cce1391(flag)
flag = xor_f1cb1b28(flag)
flag = chadd_b07351e2(flag)
flag = shuffle_0847afe1(flag)
flag = chmul_decbe9f3(flag)
flag = chsub_ad5739bc(flag)
flag = chxor_cb71a848(flag)
flag = chadd_8658906e(flag)
flag = sub_44011266(flag)
flag = cmul_f851d67c(flag)
flag = mul_194ab633(flag)
flag = cxor_454d9bad(flag)
flag = chmul_7df9b320(flag)
flag = mul_0af7d935(flag)
flag = sub_d45b504c(flag)
flag = chmul_2332b1f2(flag)
flag = shuffle_496b2c86(flag)
flag = chxor_7b570606(flag)
flag = cxor_938a50c5(flag)
flag = shuffle_7b370edd(flag)
flag = shuffle_35e807af(flag)
flag = cmul_22a48cb5(flag)
flag = cadd_e69f5bf8(flag)
flag = add_b510c979(flag)
flag = sub_468e1495(flag)
flag = shuffle_0d936e4f(flag)
flag = cmul_3152eceb(flag)
flag = cxor_ea36911a(flag)
flag = digsub_a18b0d55(flag)
flag = mul_2cd00355(flag)
flag = digsub_8fc854f8(flag)
flag = cxor_802236be(flag)
flag = chsub_f80492fd(flag)
flag = shuffle_5ef2dd0d(flag)
flag = add_886697c1(flag)
flag = chsub_1ad0c5fe(flag)
flag = sub_eacce1a2(flag)
flag = chadd_186dd996(flag)
flag = chxor_cab624ba(flag)
flag = mul_b2b433f9(flag)
flag = xor_6cabd79d(flag)
flag = csub_841d8ee8(flag)
flag = chmul_4af7800f(flag)
flag = csub_462e63d8(flag)
flag = add_4a7519db(flag)
flag = chadd_32554a61(flag)
flag = cadd_e3f803ca(flag)
flag = chadd_d9f375ba(flag)
flag = shuffle_9eddde7b(flag)
flag = chunk_db078de2(flag)
flag = chxor_0c3b8e79(flag)
flag = digsub_e1f5dc03(flag)
flag = shuffle_7894ad24(flag)
flag = chadd_61a15596(flag)
flag = xor_16c7c77d(flag)
flag = mul_8028fe56(flag)
flag = xor_4e31efc2(flag)
flag = cxor_303b54c5(flag)
flag = digsub_be47e356(flag)
flag = chadd_8658906e(flag)
flag = cmul_971d0d43(flag)
flag = chunk_3c707853(flag)
flag = chsub_53443fe3(flag)
flag = digsub_79a3f207(flag)
flag = xor_dce2a545(flag)
flag = chunk_0c74cc13(flag)
flag = cadd_bf48a745(flag)
flag = chxor_1c95a906(flag)
flag = chsub_d866d58b(flag)
flag = digsub_b0591b22(flag)
flag = add_6e59afd0(flag)
flag = csub_e904b187(flag)
flag = chunk_530108df(flag)
flag = cmul_c57ae7de(flag)
flag = chmul_75d42cab(flag)
flag = sub_da5b779b(flag)
flag = mul_001d570f(flag)
flag = chmul_c3fa7120(flag)
flag = mul_b74dfccf(flag)
flag = digsub_3d37a56f(flag)
flag = chsub_5d86241d(flag)
flag = chadd_0232afc0(flag)
flag = cadd_b1988d37(flag)
flag = chxor_ce07c0ad(flag)
flag = add_c1abafc2(flag)
flag = xor_51b2d18c(flag)
flag = add_125357c0(flag)
flag = chsub_827fc456(flag)
flag = shuffle_c0cc818c(flag)
flag = sub_085ded8f(flag)
flag = chxor_947d449e(flag)
flag = xor_76cd9a81(flag)
flag = cxor_e256fb84(flag)
flag = mul_4bd300c9(flag)
flag = cmul_d77e3c24(flag)
flag = mul_60a92fff(flag)
flag = cxor_ea36911a(flag)
flag = cmul_d64253b9(flag)
flag = chxor_b3e205ec(flag)
flag = chadd_1fa30d24(flag)
flag = digsub_6899cdac(flag)
flag = chadd_3a6ba43e(flag)
flag = xor_827e6b83(flag)
flag = digsub_bbf1a156(flag)
flag = sub_bc852ad6(flag)
flag = xor_39a60514(flag)
flag = cxor_83571dc3(flag)
flag = chmul_1666c516(flag)
flag = xor_cb183615(flag)
flag = chsub_04fb6e14(flag)
flag = xor_90c0a051(flag)
flag = shuffle_7df2cac5(flag)
flag = cmul_6fb2378c(flag)
flag = chadd_3fbbddb8(flag)
flag = mul_eb201421(flag)
flag = xor_f8437474(flag)
flag = mul_6fc04a8d(flag)
flag = cadd_c751d9e4(flag)
flag = chxor_2b2282b6(flag)
flag = xor_fccb27f6(flag)
flag = chunk_8361daed(flag)
flag = cmul_029f5e8d(flag)
flag = chadd_d7b62183(flag)
flag = xor_92fb1dc0(flag)
flag = chsub_7cdcbbaf(flag)
flag = csub_087d6e8e(flag)
flag = chadd_87bfe060(flag)
flag = add_bc7653a1(flag)
flag = chunk_205e30c0(flag)
flag = digsub_18fc0c9e(flag)
flag = shuffle_3f9d1ce8(flag)
flag = chxor_2167eaf6(flag)
flag = chmul_def74a51(flag)
flag = xor_ab75a784(flag)
flag = cxor_ed3b1b28(flag)
flag = chunk_85747b20(flag)
flag = add_d7079839(flag)
flag = chadd_00e2dbca(flag)
flag = chunk_dbc6d3a2(flag)
flag = add_100ba22e(flag)
flag = chxor_e6a0d155(flag)
flag = shuffle_a27257a0(flag)
flag = cmul_16644eba(flag)
flag = shuffle_3150238f(flag)
flag = cadd_61a362c2(flag)
flag = shuffle_d65597c5(flag)
flag = cadd_7838f4d9(flag)
flag = chunk_d7f6d493(flag)
flag = chadd_974a7c54(flag)
flag = sub_a62e014f(flag)
flag = chadd_81dfe861(flag)
flag = digsub_69f7a7ef(flag)
flag = sub_18770552(flag)
flag = mul_fbf76069(flag)
flag = digsub_bcd14776(flag)
flag = chxor_38c0a7ad(flag)
flag = cadd_ca2e862f(flag)
flag = sub_b28bd4f8(flag)
flag = mul_1b781211(flag)
flag = digsub_15856403(flag)
flag = chadd_9c4be3af(flag)
flag = chadd_99b8ad72(flag)
flag = xor_8a3ad979(flag)
flag = shuffle_f4bbf14d(flag)
flag = chadd_cdd2cb99(flag)
flag = chxor_1150451f(flag)
flag = xor_07333316(flag)
flag = xor_35062400(flag)
flag = cxor_4e153811(flag)
flag = chadd_78099793(flag)
flag = cxor_dfcb824e(flag)
flag = csub_557e07a6(flag)
flag = add_03dc5f83(flag)
flag = cadd_f435a64a(flag)
flag = cmul_dc2b00da(flag)
flag = add_36fb4d7d(flag)
flag = chxor_55e4ace7(flag)
flag = chxor_8ee7d3f7(flag)
flag = cxor_2e4b26f4(flag)
flag = sub_7a049de1(flag)
flag = mul_0cb6e2cc(flag)
flag = xor_381364cd(flag)
flag = cmul_a089bf19(flag)
flag = cmul_ea158364(flag)
flag = shuffle_28f1a858(flag)
flag = chsub_c0922438(flag)
flag = chunk_bdaa57c3(flag)
flag = add_8a75fd19(flag)
flag = chmul_ebd5a20e(flag)
flag = cmul_e577eda6(flag)
flag = cxor_d1b86499(flag)
flag = cxor_aebccd1c(flag)
flag = chunk_77a6c434(flag)
flag = chxor_b041b00c(flag)
flag = xor_fddd23ae(flag)
flag = cxor_677dcdda(flag)
flag = mul_1a70b6a5(flag)
flag = mul_16385c48(flag)
flag = digsub_caab5c9d(flag)
flag = cadd_d4d5a797(flag)
flag = sub_46493b1b(flag)
flag = csub_3564220e(flag)
flag = shuffle_47929ded(flag)
flag = cmul_a36f268e(flag)
flag = csub_702f94e1(flag)
flag = chunk_e120ffe1(flag)
flag = xor_7c3bd1e8(flag)
flag = csub_395783d4(flag)
flag = cmul_01d50eab(flag)
flag = add_9188b7d9(flag)
flag = chxor_4ab8ad7f(flag)
flag = cxor_71a4351f(flag)
flag = chmul_2f893b62(flag)
flag = digsub_99f3c205(flag)
flag = cmul_60deac9a(flag)
flag = chxor_c7b14201(flag)
flag = chxor_cd5d1c4b(flag)
flag = mul_eb201421(flag)
flag = chmul_49e5e1c7(flag)
flag = csub_79c7fc2e(flag)
flag = add_9573eecb(flag)
flag = sub_ba98e537(flag)
flag = digsub_67b6032a(flag)
flag = chsub_5d43cf4f(flag)
flag = shuffle_6df04177(flag)
flag = chunk_e3f6d2ec(flag)
flag = chadd_163fc505(flag)
flag = add_e07c15bd(flag)
flag = csub_160421ef(flag)
flag = xor_381364cd(flag)
flag = chxor_f396db26(flag)
flag = xor_339b9a13(flag)
flag = cmul_2eb68781(flag)
flag = cxor_da3537d5(flag)
flag = cxor_b9faaea4(flag)
flag = cxor_d1f287be(flag)
flag = chadd_e835abf7(flag)
flag = csub_b1b08f24(flag)
flag = chadd_aff7759b(flag)
flag = chmul_882a927d(flag)
flag = cmul_45d4d761(flag)
flag = digsub_19f61f73(flag)
flag = shuffle_7813ad6f(flag)
flag = add_f66fdb75(flag)
flag = chunk_2bbf6ee5(flag)
flag = cxor_4496ba54(flag)
flag = chadd_12bc44e9(flag)
flag = xor_22b22c9a(flag)
flag = chxor_eb7e47c1(flag)
flag = chunk_20e9ea05(flag)
flag = chunk_ba2558cf(flag)
flag = add_4584979d(flag)
flag = mul_df940fbe(flag)
flag = xor_2a24945c(flag)
flag = chunk_aad9a6a9(flag)
flag = cxor_96357748(flag)
flag = csub_bce4bb70(flag)
flag = add_36fb4d7d(flag)
flag = cmul_9bf9f69d(flag)
flag = chxor_49e5796a(flag)
flag = mul_8502f399(flag)
flag = chadd_f2f53a63(flag)
flag = shuffle_c3bda042(flag)
flag = xor_875a544d(flag)
flag = xor_cc5d6b6d(flag)
flag = shuffle_c433a286(flag)
flag = digsub_8326055f(flag)
flag = digsub_1348ccb0(flag)
flag = csub_d278adbd(flag)
flag = add_f66fdb75(flag)
flag = cmul_028527b6(flag)
flag = csub_fdf338ac(flag)
flag = chadd_8f394b29(flag)
flag = chadd_7bc2adef(flag)
flag = xor_4b381c82(flag)
flag = cmul_61024c03(flag)
flag = chxor_845d20e4(flag)
flag = shuffle_7c9553cb(flag)
flag = add_64420416(flag)
flag = cxor_d339f91c(flag)
flag = mul_6ed04b93(flag)
flag = sub_33da435e(flag)
flag = digsub_bcb409f7(flag)
flag = cmul_1f88fc08(flag)
flag = chsub_b9c56acf(flag)
flag = chxor_7b570606(flag)
flag = chxor_442c0a5b(flag)
flag = shuffle_520f2eb6(flag)
flag = csub_1bf63629(flag)
flag = shuffle_ce932b10(flag)
flag = sub_a40cb760(flag)
flag = cmul_b805737d(flag)
flag = shuffle_64a08693(flag)
flag = chunk_88f4a033(flag)
flag = cadd_44729e6e(flag)
flag = cmul_e4190864(flag)
flag = xor_e7da9a66(flag)
flag = cmul_27f36b54(flag)
flag = chadd_0b49bf84(flag)
flag = cmul_66f3a0d2(flag)
flag = cxor_5a1e89dc(flag)
flag = chadd_658a720b(flag)
flag = add_0582a092(flag)
flag = cadd_15b9e74b(flag)
flag = cxor_e4036825(flag)
flag = csub_a55a8f74(flag)
flag = sub_56d810e7(flag)
flag = shuffle_c8f4c133(flag)
flag = chsub_98a13db8(flag)
flag = csub_37af1f58(flag)
flag = chunk_e4be2495(flag)
flag = chadd_2bcca0b5(flag)
flag = csub_d77927e4(flag)
flag = chsub_9fe7030d(flag)
flag = cadd_44729e6e(flag)
flag = sub_3428aff7(flag)
flag = sub_ef127564(flag)
flag = chxor_38c0a7ad(flag)
flag = chadd_5a85e49b(flag)
flag = cmul_f579357e(flag)
flag = xor_b59cd77f(flag)
flag = chunk_d4a3f365(flag)
flag = cmul_d77e3c24(flag)
flag = shuffle_63f494ea(flag)
flag = cadd_8bcff692(flag)
flag = chxor_d6bf3b04(flag)
flag = chadd_595ed02a(flag)
flag = chmul_f5416998(flag)
flag = sub_d6d53ea0(flag)
flag = xor_276ba897(flag)
flag = cadd_8db97cbc(flag)
flag = shuffle_3f9d1ce8(flag)
flag = chunk_27ab9318(flag)
flag = chxor_0a1291f0(flag)
flag = cadd_3124bc3c(flag)
flag = cmul_bc969278(flag)
flag = shuffle_9cedec4d(flag)
flag = chmul_48477e80(flag)
flag = chsub_1b8086f6(flag)
flag = chadd_5488a6fe(flag)
flag = chsub_0e10b13d(flag)
flag = cadd_5352b247(flag)
flag = chxor_49e5796a(flag)
flag = chunk_16728eb8(flag)
flag = chunk_b9615aa9(flag)
flag = chunk_2bbf6ee5(flag)
flag = chunk_6eea8007(flag)
flag = add_1b3e26ab(flag)
flag = cmul_d22b5acf(flag)
flag = chunk_530e625c(flag)
flag = shuffle_efb3207c(flag)
flag = chxor_87ec1ab5(flag)
flag = chunk_8703835d(flag)
flag = cadd_dd5bf521(flag)
flag = csub_dfb6e078(flag)
flag = sub_a244688a(flag)
flag = sub_734f1f1d(flag)
flag = add_c0abe07c(flag)
flag = digsub_bcb409f7(flag)
flag = chsub_5a5cbf95(flag)
flag = sub_d3158d9a(flag)
flag = cxor_eb9b7ae7(flag)
flag = chxor_68adccd3(flag)
flag = cadd_c1763a61(flag)
flag = chmul_f5416998(flag)
flag = csub_79c7fc2e(flag)
flag = chadd_da1b4b19(flag)
flag = chunk_9b5e7e5c(flag)
flag = cmul_bf27fc42(flag)
flag = add_30b3e082(flag)
flag = chmul_b131f273(flag)
flag = cmul_0ee0ce26(flag)
flag = digsub_53dac253(flag)
flag = sub_58eb1409(flag)
flag = mul_4a9471da(flag)
flag = csub_087d6e8e(flag)
flag = sub_72b00ca4(flag)
flag = csub_f4c94d76(flag)
flag = chsub_bb765577(flag)
flag = shuffle_2a87a3a3(flag)
flag = chadd_f260ba56(flag)
flag = mul_4084757c(flag)
flag = sub_1939e4b0(flag)
flag = chadd_e1175475(flag)
flag = chadd_323e5325(flag)
flag = csub_7321b0e9(flag)
flag = shuffle_3f68185e(flag)
flag = shuffle_8e02f517(flag)
flag = cadd_f79f3974(flag)
flag = mul_194ab633(flag)
flag = chsub_ef4867dc(flag)
flag = csub_a15374e1(flag)
flag = cadd_6f6cf5cb(flag)
flag = chmul_998ab1ea(flag)
flag = shuffle_5de0aca9(flag)
flag = chsub_e0feb99d(flag)
flag = chadd_75030af7(flag)
flag = chunk_fd32f837(flag)
flag = chxor_3dd86e1b(flag)
flag = chmul_e9eb8471(flag)
flag = cxor_e86ea0c2(flag)
flag = add_5f5c1e45(flag)
flag = sub_716f026e(flag)
flag = chxor_001e807f(flag)
flag = cmul_a292d693(flag)
flag = digsub_81358f03(flag)
flag = chunk_9ce2d01b(flag)
flag = sub_eed83ea2(flag)
flag = cadd_92da2c6d(flag)
flag = digsub_4034f057(flag)
flag = chxor_599d5e3e(flag)
flag = cadd_f52e7820(flag)
flag = cadd_8d1c2ebb(flag)
flag = xor_028e2ac0(flag)
flag = add_e6d0a399(flag)
flag = chsub_d2557bea(flag)
flag = chxor_829e0b1c(flag)
flag = csub_74d531bb(flag)
flag = sub_51e1902d(flag)
flag = cmul_06a971d4(flag)
flag = digsub_e6768cff(flag)
flag = xor_b3655f1c(flag)
flag = chmul_227b1b2a(flag)
flag = sub_dfeebbc3(flag)
flag = shuffle_691df10d(flag)
flag = chsub_0063bc32(flag)
flag = sub_ecf0a346(flag)
flag = digsub_ced825e4(flag)
flag = shuffle_ee0a30fd(flag)
flag = digsub_0eb180b8(flag)
flag = add_3e1e2c0b(flag)
flag = chmul_edaf1927(flag)
flag = chadd_ee551422(flag)
flag = chsub_a40de1d7(flag)
flag = chsub_65723dab(flag)
flag = sub_149a7d50(flag)
flag = cadd_b0a14b2d(flag)
flag = chadd_10d426ca(flag)
flag = cmul_b57f5cfc(flag)
flag = cxor_8666b092(flag)
flag = shuffle_e666492b(flag)
flag = add_39899af6(flag)
flag = cxor_ae2b4026(flag)
flag = chsub_e87a1297(flag)
flag = chmul_1c0bdb7a(flag)
flag = shuffle_d635239a(flag)
flag = cadd_01e4dea4(flag)
flag = chsub_d2557bea(flag)
flag = xor_46eb3b29(flag)
flag = mul_36bc3f6e(flag)
flag = chunk_26bea2d1(flag)
flag = chmul_f03e312d(flag)
flag = chxor_5323ed11(flag)
flag = sub_ecf0a346(flag)
flag = chxor_43eeedf6(flag)
flag = shuffle_efa32ed0(flag)
flag = cxor_765f4bed(flag)
flag = cadd_fd1d6bfc(flag)
flag = chmul_07a19689(flag)
flag = xor_deeded30(flag)
flag = chsub_e508cd4b(flag)
flag = chunk_3fec31ed(flag)
flag = shuffle_0ca300ee(flag)
flag = add_4db6bc88(flag)
flag = xor_ec9f1bc5(flag)
flag = chmul_8cfb1503(flag)
flag = chmul_f5416998(flag)
flag = csub_98f9a52a(flag)
flag = csub_160421ef(flag)
flag = xor_68464c0d(flag)
flag = xor_deeded30(flag)
flag = mul_001d570f(flag)
flag = cadd_e0fbc1fa(flag)
flag = xor_a2999e10(flag)
flag = chsub_a9bb41f7(flag)
flag = shuffle_dc7ee1c6(flag)
flag = cxor_8396e79a(flag)
flag = chmul_326aefee(flag)
flag = shuffle_ac6dd478(flag)
flag = sub_be3b1a5a(flag)
flag = sub_eeb354ba(flag)
flag = mul_6bdc88d2(flag)
flag = xor_7661c292(flag)
flag = chxor_a87f9d33(flag)
flag = add_b2a61490(flag)
flag = chsub_9ce25212(flag)
flag = add_bd22edc2(flag)
flag = shuffle_0847afe1(flag)
flag = chadd_5488a6fe(flag)
flag = sub_91a9b671(flag)
flag = csub_2df7e131(flag)
flag = xor_4e5c29b0(flag)
flag = cadd_61a362c2(flag)
flag = mul_b2b433f9(flag)
flag = chadd_8789f269(flag)
flag = cmul_cb30aead(flag)
flag = cadd_3cbc013d(flag)
flag = chsub_8a25c41f(flag)
flag = sub_b8c51fbd(flag)
flag = chunk_f87a2350(flag)
flag = chadd_bf6edb8a(flag)
flag = cadd_3882e35e(flag)
flag = sub_ef03b32c(flag)
flag = cxor_9eab5098(flag)
flag = chmul_db134c2c(flag)
flag = cxor_eaaa00cc(flag)
flag = xor_8da999ff(flag)
flag = chsub_d228accf(flag)
flag = chsub_f5c5e1fa(flag)
flag = chsub_20dd3740(flag)
flag = cxor_e6156798(flag)
flag = chunk_e42e1b84(flag)
flag = cadd_99696e25(flag)
flag = csub_c8591293(flag)
flag = cadd_1bbdcd45(flag)
flag = csub_0f2dcd11(flag)
flag = cadd_4836ae77(flag)
flag = mul_dd59ae79(flag)
flag = digsub_dbfc4977(flag)
flag = cxor_9064d63f(flag)
flag = chsub_84e9e2bd(flag)
flag = chunk_4b50f9e1(flag)
flag = xor_131c6ed1(flag)
flag = chsub_2d19348f(flag)
flag = chxor_ad45b413(flag)
flag = xor_61d47dbf(flag)
flag = chunk_1ba6912f(flag)
flag = xor_34c86087(flag)
flag = shuffle_6ed87304(flag)
flag = chxor_56c9e723(flag)
flag = chsub_70e4436e(flag)
flag = chmul_b7f6dccf(flag)
flag = sub_d45b504c(flag)
flag = chxor_7fed6271(flag)
flag = sub_0cd6568b(flag)
flag = csub_bdd64a1d(flag)
flag = mul_7fa6ac59(flag)
flag = shuffle_3bb1ab6d(flag)
flag = chsub_4a4043a6(flag)
flag = mul_8876595f(flag)
flag = csub_0c9dc34d(flag)
flag = sub_4bcab1c3(flag)
flag = sub_716f026e(flag)
flag = cadd_cf6071d3(flag)
flag = add_885196c7(flag)
flag = sub_72e0ad9e(flag)
flag = chsub_8b936fd7(flag)
flag = xor_df910360(flag)
flag = xor_4c95d03b(flag)
flag = xor_3d8de492(flag)
flag = mul_7ec01a05(flag)
flag = add_c40251ff(flag)
flag = chadd_36010571(flag)
flag = chsub_91553a2c(flag)
flag = chsub_714e8ec9(flag)
flag = cmul_148c07dc(flag)
flag = chmul_b923d46c(flag)
flag = digsub_981b52ce(flag)
flag = cmul_75c87098(flag)
flag = chmul_cfee488f(flag)
flag = chadd_cf40e026(flag)
flag = csub_d37a1bf3(flag)
flag = chmul_004133b3(flag)
flag = cxor_ea36911a(flag)
flag = chadd_c58d2df9(flag)
flag = mul_f41b15dd(flag)
flag = csub_7ae589be(flag)
flag = cadd_165a6cb3(flag)
flag = cmul_3e4053fd(flag)
flag = sub_d3158d9a(flag)
flag = chmul_adc58ae6(flag)
flag = digsub_0ca9e7fd(flag)
flag = add_85e81d17(flag)
flag = csub_8278d2c0(flag)
flag = xor_efa5ece1(flag)
flag = shuffle_35e807af(flag)
flag = chunk_4d08c9d5(flag)
flag = cxor_29df8c0e(flag)
flag = xor_e689ffa0(flag)
flag = cmul_a05a6983(flag)
flag = chunk_bd36eb6a(flag)
flag = sub_61538669(flag)
flag = cmul_e03e8b1c(flag)
flag = digsub_b4f2bfbc(flag)
flag = sub_1ddf1ef7(flag)
flag = chmul_e08d8ea1(flag)
flag = shuffle_7813ad6f(flag)
flag = digsub_7942bae6(flag)
flag = chsub_ad5739bc(flag)
flag = csub_7035f8db(flag)
flag = sub_92b6d92c(flag)
flag = digsub_abf0937e(flag)
flag = cadd_8fc03570(flag)
flag = sub_e383e4d5(flag)
flag = cxor_16cc8dc6(flag)
flag = cmul_1b7b7fb7(flag)
flag = cxor_d05587bc(flag)
flag = cadd_fc1ffff9(flag)
flag = sub_72e0ad9e(flag)
flag = mul_0fc3ddc1(flag)
flag = cadd_79d7fa85(flag)
flag = cadd_97b622f1(flag)
flag = csub_b1b08f24(flag)
flag = digsub_7c2a7053(flag)
flag = xor_2f985cdb(flag)
flag = chunk_f46f605c(flag)
flag = csub_f9235964(flag)
flag = chadd_47332c73(flag)
flag = chadd_58981664(flag)
flag = add_664be5fd(flag)
flag = csub_462e63d8(flag)
flag = add_0ed21bd0(flag)
flag = cadd_de624ff2(flag)
flag = cmul_8facd3c6(flag)
flag = chunk_bdec9045(flag)
flag = cmul_89d225a2(flag)
flag = chmul_8f392c35(flag)
flag = chunk_4c3d6535(flag)
flag = xor_a6213de5(flag)
flag = chmul_5f9891b6(flag)
flag = csub_79c7fc2e(flag)
flag = sub_73623d40(flag)
flag = chadd_91feb455(flag)
flag = chmul_d22494d3(flag)
flag = add_770b1c6f(flag)
flag = sub_9f4055fc(flag)
flag = sub_4bcab1c3(flag)
flag = chxor_72127666(flag)
flag = sub_02f68178(flag)
flag = chunk_174427d2(flag)
flag = add_df9616a0(flag)
flag = cxor_bba6fa0a(flag)
flag = chmul_36d54a3c(flag)
flag = chsub_b9b2576f(flag)
flag = digsub_aecf9a86(flag)
flag = chadd_2a11532c(flag)
flag = cmul_9fab9317(flag)
flag = chsub_f80492fd(flag)
flag = cmul_7b0890d6(flag)
flag = cxor_8666b092(flag)
flag = add_87dad6e0(flag)
flag = cmul_423d2433(flag)
flag = xor_fddd23ae(flag)
flag = chadd_6a4e5b24(flag)
flag = cadd_eb1a77e6(flag)
flag = cmul_fd921d5b(flag)
flag = cxor_71a4351f(flag)
flag = chadd_76b3ac4f(flag)
flag = cadd_df4a88c2(flag)
flag = chmul_c3fa7120(flag)
flag = xor_c0655006(flag)
flag = cmul_fa47ed88(flag)
flag = mul_30a2cd61(flag)
flag = shuffle_f4ee3eb0(flag)
flag = cmul_b57f5cfc(flag)
flag = add_c93fcbda(flag)
flag = chmul_68e4c6ff(flag)
flag = chxor_aa8e1df9(flag)
flag = digsub_8df7fbd0(flag)
flag = shuffle_8e02f517(flag)
flag = csub_973b4044(flag)
flag = chxor_da702120(flag)
flag = xor_2f985cdb(flag)
flag = cmul_89d225a2(flag)
flag = cadd_09d85417(flag)
flag = shuffle_3e606129(flag)
flag = cmul_89d225a2(flag)
flag = chsub_b335ae97(flag)
flag = csub_8278d2c0(flag)
flag = chunk_41ac0046(flag)
flag = chsub_ad5739bc(flag)
flag = xor_702b624c(flag)
flag = cadd_e69f5bf8(flag)
flag = chsub_7af0731b(flag)
flag = digsub_189a0416(flag)
flag = cxor_6976fe3d(flag)
flag = cadd_0a20014b(flag)
flag = cxor_2e4b26f4(flag)
flag = shuffle_c433a286(flag)
flag = sub_560b0d88(flag)
flag = chadd_53eb2419(flag)
flag = chmul_5ed084ad(flag)
flag = csub_0ebe7c05(flag)
flag = chsub_4a4043a6(flag)
flag = cadd_2bb6b4bc(flag)
flag = chadd_977a0637(flag)
flag = add_1b3e26ab(flag)
flag = cmul_280315b7(flag)
flag = xor_e17e7409(flag)
flag = cxor_c7240b25(flag)
flag = chunk_37604f81(flag)
flag = cmul_15edb219(flag)
flag = chunk_dbc6d3a2(flag)
flag = sub_b4f35853(flag)
flag = add_eee1f715(flag)
flag = chxor_27993531(flag)
flag = chsub_8590464c(flag)
flag = chadd_e99579ed(flag)
flag = cxor_e1387672(flag)
flag = add_40ed3353(flag)
flag = digsub_dbfc4977(flag)
flag = xor_b3655f1c(flag)
flag = chxor_fb59e14c(flag)
flag = cmul_0bb3391d(flag)
flag = cmul_a3103f38(flag)
flag = chxor_b96f779c(flag)
flag = sub_665d3f8a(flag)
flag = cmul_c53a95ce(flag)
flag = mul_bb9e8c00(flag)
flag = chmul_63977e71(flag)
flag = chxor_7bc1a643(flag)
flag = chxor_1c95a906(flag)
flag = chadd_ced5aac5(flag)
flag = chxor_e5000f9b(flag)
flag = sub_a40cb760(flag)
flag = shuffle_3355fbaf(flag)
flag = cmul_38d68804(flag)
flag = sub_1b55f541(flag)
flag = cxor_182bdecc(flag)
flag = chsub_e0feb99d(flag)
flag = chunk_bd7c4f37(flag)
flag = shuffle_7dc0e0cb(flag)
flag = xor_8dc6fc89(flag)
flag = mul_4b619987(flag)
flag = chxor_c399373f(flag)
flag = chxor_4fe33b06(flag)
flag = chadd_0b49bf84(flag)
flag = shuffle_c3a4eec2(flag)
flag = shuffle_83b67bb5(flag)
flag = cadd_fd35b517(flag)
flag = csub_44ad5428(flag)
flag = chxor_0c3b8e79(flag)
flag = chmul_ecae31b8(flag)
flag = cmul_6f98e718(flag)
flag = sub_31290fb7(flag)
flag = cxor_697bee04(flag)
flag = chadd_5d344985(flag)
flag = add_ab46dc0e(flag)
flag = mul_60a92fff(flag)
flag = chxor_e3b5c5ae(flag)
flag = cmul_4691495a(flag)
flag = chadd_ced5aac5(flag)
flag = sub_a74b5cf9(flag)
flag = digsub_e4e90033(flag)
flag = chunk_2a7d8d80(flag)
flag = chadd_1feaf785(flag)
flag = chadd_323e5325(flag)
flag = cmul_f98bab5d(flag)
flag = cmul_8ec6e2f9(flag)
flag = chsub_e112aa83(flag)
flag = cxor_0afe7e7a(flag)
flag = chadd_81dfe861(flag)
flag = chadd_c9b892b7(flag)
flag = cxor_d20accc3(flag)
flag = shuffle_76c2382f(flag)
flag = shuffle_8ca0e8e2(flag)
flag = add_e44ea43f(flag)
flag = digsub_4bfe6492(flag)
flag = xor_4946eb25(flag)
flag = chunk_2e06be2b(flag)
flag = add_91bb43ca(flag)
flag = cadd_2da455cf(flag)
flag = digsub_81042cb1(flag)
flag = cmul_d22b5acf(flag)
flag = shuffle_0242ca5c(flag)
flag = chunk_ba6b2283(flag)
flag = shuffle_d9cf5546(flag)
flag = chadd_2732f1ee(flag)
flag = cxor_41f67d77(flag)
flag = chxor_83f63c74(flag)
flag = cmul_3e5a5794(flag)
flag = chadd_7620a0b7(flag)
flag = sub_a8ed3df9(flag)
flag = add_837ef20b(flag)
flag = digsub_ac841ac3(flag)
flag = add_726cd7c7(flag)
flag = mul_fbf76069(flag)
flag = cmul_b61008be(flag)
flag = add_e08d6566(flag)
flag = digsub_34bac6be(flag)
flag = csub_30ac2fb9(flag)
flag = xor_96b234b4(flag)
flag = xor_e1acd3bf(flag)
flag = mul_8502f399(flag)
flag = add_f22a99f3(flag)
flag = add_c8330084(flag)
flag = add_c9b23e99(flag)
flag = digsub_93fe4930(flag)
flag = mul_36bc3f6e(flag)
flag = csub_d77927e4(flag)
flag = sub_73623d40(flag)
flag = cadd_2ed55f8d(flag)
flag = chadd_97096590(flag)
flag = mul_c3e69fa2(flag)
flag = chunk_6fa30167(flag)
flag = cxor_86921258(flag)
flag = cxor_74f95525(flag)
flag = chxor_dadbfeff(flag)
flag = digsub_4ed94ee3(flag)
flag = chxor_85f13098(flag)
flag = add_e7bb6b2d(flag)
flag = xor_3b14c897(flag)
flag = xor_2ecafb68(flag)
flag = chunk_524ad27b(flag)
flag = csub_20a768aa(flag)
flag = cxor_1247d512(flag)
flag = sub_0b42484c(flag)
flag = cmul_bac2ec72(flag)
flag = shuffle_efb3207c(flag)
flag = shuffle_87103ee1(flag)
flag = xor_ee57e55f(flag)
flag = chsub_cbfe2a72(flag)
flag = add_bc200f67(flag)
flag = csub_7d205427(flag)
flag = csub_07dcceeb(flag)
flag = cmul_0b0ac64f(flag)
flag = xor_4c95d03b(flag)
flag = shuffle_0d275e0e(flag)
flag = chsub_f9d9c30e(flag)
flag = chsub_53443fe3(flag)
flag = chxor_845d20e4(flag)
flag = chadd_8789f269(flag)
flag = cxor_71e7ff03(flag)
flag = shuffle_8e2c57eb(flag)
flag = chmul_c35fb5e9(flag)
flag = mul_e8d4d029(flag)
flag = chadd_b9888b8b(flag)
flag = chadd_acce32b7(flag)
flag = chadd_2da7db06(flag)
flag = chsub_7ade6cf5(flag)
flag = chsub_e164464b(flag)
flag = chxor_036cfe7a(flag)
flag = mul_d0313a6c(flag)
flag = chsub_87204349(flag)
flag = xor_ab75a784(flag)
flag = chunk_8703835d(flag)
flag = chsub_4364daac(flag)
flag = add_fc842ea7(flag)
flag = cmul_a05a6983(flag)
flag = shuffle_f6aee04d(flag)
flag = cxor_9df954e1(flag)
flag = cmul_1b7b7fb7(flag)
flag = digsub_504110f5(flag)
flag = add_9e15da4e(flag)
flag = cxor_d43914ce(flag)
flag = add_67499497(flag)
flag = chxor_09e2622c(flag)
flag = chunk_af869716(flag)
flag = chxor_616b9569(flag)
flag = xor_214fe10e(flag)
flag = digsub_225591cf(flag)
flag = digsub_288ef9ea(flag)
flag = add_aae6cc04(flag)
flag = chsub_da5ea1df(flag)
flag = chunk_8880753c(flag)
flag = chmul_215a2fee(flag)
flag = chadd_d95f9ffa(flag)
flag = cmul_5f6b0b76(flag)
flag = cmul_76185aa2(flag)
flag = xor_6ee9de87(flag)
flag = mul_1a3b698e(flag)
flag = shuffle_1a2b743e(flag)
flag = cadd_0a20014b(flag)
flag = cxor_87ecf0a7(flag)
flag = chxor_f6c4d9ae(flag)
flag = chxor_edba075a(flag)
flag = digsub_189a0416(flag)
flag = chadd_069e430a(flag)
flag = sub_6ca5da9b(flag)
flag = add_9e4296de(flag)
flag = csub_841d8ee8(flag)
flag = add_d1d41f14(flag)
flag = chsub_f75e24ea(flag)
flag = chmul_c9980e5a(flag)
flag = mul_7fd5912a(flag)
flag = cxor_b8e23c90(flag)
flag = digsub_8e7fd683(flag)
flag = chmul_fc9ca4bd(flag)
flag = xor_60dd65f0(flag)
flag = csub_cd81496c(flag)
flag = xor_deeded30(flag)
flag = shuffle_87103ee1(flag)
flag = digsub_63dc4ebb(flag)
flag = shuffle_f4cba7dd(flag)
flag = digsub_4428ac60(flag)
flag = chmul_b65f3bc2(flag)
flag = chunk_6b10c55c(flag)
flag = sub_eeb354ba(flag)
flag = chmul_659e5d80(flag)
flag = chunk_a5854668(flag)
flag = csub_564b5e2c(flag)
flag = chmul_05b6d674(flag)
flag = shuffle_e204c945(flag)
flag = mul_62cf6aa4(flag)
flag = chsub_71c61f9b(flag)
flag = cxor_2eec2815(flag)
flag = chadd_c951759a(flag)
flag = cxor_e59dc6e0(flag)
flag = cmul_e7965a1e(flag)
flag = chsub_3d2428ad(flag)
flag = xor_b7dd3197(flag)
flag = xor_276ba897(flag)
flag = cadd_ed8e4346(flag)
flag = digsub_7b1651a7(flag)
flag = chadd_2e85df59(flag)
flag = cxor_454d9bad(flag)
flag = chadd_ed8436eb(flag)
flag = csub_973b4044(flag)
flag = chsub_f9d9c30e(flag)
flag = csub_daf0877b(flag)
flag = cmul_606c6cc5(flag)
flag = chxor_65aad212(flag)
flag = digsub_b0591b22(flag)
flag = add_7553d25b(flag)
flag = sub_e1d8193c(flag)
flag = cxor_6976fe3d(flag)
flag = cxor_69cd9f4e(flag)
flag = cxor_c2fd3f28(flag)
flag = chsub_cbfe2a72(flag)
flag = chadd_a7330cb4(flag)
flag = chunk_d9ce60f8(flag)
flag = chsub_4e9faeee(flag)
flag = shuffle_35e807af(flag)
flag = digsub_211a2fee(flag)
flag = cxor_3db736ba(flag)
flag = chsub_70fd4908(flag)
flag = cadd_e69f5bf8(flag)
flag = chadd_ec0fef0e(flag)
flag = cxor_cc7ef037(flag)
flag = chmul_b8a7f012(flag)
flag = add_108fd3c6(flag)
flag = digsub_b8659438(flag)
flag = sub_b5dac8cd(flag)
flag = chunk_8af8feea(flag)
flag = cxor_8d584727(flag)
flag = chsub_bb765577(flag)
flag = chunk_f899efdf(flag)
flag = cmul_789804bf(flag)
flag = add_0ed21bd0(flag)
flag = chunk_bf78a71f(flag)
flag = chadd_d7b62183(flag)
flag = chunk_987d4b79(flag)
flag = chadd_2b71c3ea(flag)
flag = chunk_6df9f44d(flag)
flag = shuffle_c0cc818c(flag)
flag = mul_8876595f(flag)
flag = digsub_4dd34aef(flag)
flag = chunk_f037e109(flag)
flag = sub_91a9b671(flag)
flag = cxor_eaaa00cc(flag)
flag = shuffle_41eb3e26(flag)
flag = sub_aa1109df(flag)
flag = chmul_6d29d2c8(flag)
flag = chsub_b335ae97(flag)
flag = chmul_90f76848(flag)
flag = chunk_da01c0e7(flag)
flag = sub_f0758554(flag)
flag = shuffle_0bc785b3(flag)
flag = chunk_65bd8d47(flag)
flag = sub_c3134c11(flag)
flag = chmul_048c1718(flag)
flag = shuffle_e4527971(flag)
flag = add_34a7ffc5(flag)
flag = xor_028e2ac0(flag)
flag = chadd_2732f1ee(flag)
flag = xor_840940ad(flag)
flag = csub_ecd1b6d0(flag)
flag = sub_be3b1a5a(flag)
flag = cxor_1330b89b(flag)
flag = cadd_dc2d39b3(flag)
flag = digsub_2362ee33(flag)
flag = mul_d23185db(flag)
flag = xor_c6061863(flag)
flag = chunk_44d36e8a(flag)
flag = digsub_1f6e32d7(flag)
flag = cadd_a495112c(flag)
flag = digsub_1feeafe7(flag)
flag = shuffle_719cf56c(flag)
flag = sub_eacce1a2(flag)
flag = cmul_c0727784(flag)
flag = chxor_822180c4(flag)
flag = cxor_e5a9ee6a(flag)
flag = mul_9e94e89a(flag)
flag = cadd_ea861103(flag)
flag = add_26bde20c(flag)
flag = cmul_135161b4(flag)
flag = cadd_0788aaad(flag)
flag = csub_34d4359e(flag)
flag = chsub_e164464b(flag)
flag = chadd_e835abf7(flag)
flag = chsub_ee1754a3(flag)
flag = cxor_6938f43d(flag)
flag = chmul_33c1cd0d(flag)
flag = shuffle_ddc42a39(flag)
flag = cadd_d44bbdbd(flag)
flag = cadd_6b0bc3e3(flag)
flag = chxor_3f9af41e(flag)
flag = chunk_f46f605c(flag)
flag = chsub_b596367b(flag)
flag = chsub_a2001711(flag)
flag = cxor_89bf897f(flag)
flag = chunk_e5683735(flag)
flag = mul_c983432b(flag)
flag = chunk_f5aa64b7(flag)
flag = cxor_b8e23c90(flag)
flag = chsub_ebadaefe(flag)
flag = chunk_95566664(flag)
flag = cadd_603af25d(flag)
flag = cmul_0ee39eec(flag)
flag = cadd_a495112c(flag)
flag = xor_ed479080(flag)
flag = cxor_b9faaea4(flag)
flag = xor_30504fc8(flag)
flag = chunk_20e9ea05(flag)
flag = csub_359c8002(flag)
flag = mul_abf95b28(flag)
flag = chsub_b3a9e994(flag)
flag = mul_1f240b2b(flag)
flag = chmul_d5ba6298(flag)
flag = digsub_fbcfe8c3(flag)
flag = chsub_dd5b964f(flag)
flag = chadd_04672342(flag)
flag = shuffle_ad9553b4(flag)
flag = cxor_e86ea0c2(flag)
flag = chmul_38133c10(flag)
flag = xor_e689ffa0(flag)
flag = chxor_db678917(flag)
flag = sub_38bfe22f(flag)
flag = chunk_ac3a4598(flag)
flag = add_8357f559(flag)
flag = cxor_22b4a127(flag)
flag = cxor_4cfe1de0(flag)
flag = chsub_e20ff930(flag)
flag = chadd_6a1bd216(flag)
flag = mul_f345af6b(flag)
flag = sub_658747e3(flag)
flag = csub_392cef70(flag)
flag = add_9a1634ef(flag)
flag = cmul_e953e2ca(flag)
flag = sub_b82d8405(flag)
flag = chsub_92f27399(flag)
flag = cmul_0fec80e1(flag)
flag = chadd_79e35c1e(flag)
flag = chsub_7ade6cf5(flag)
flag = csub_7e745ec0(flag)
flag = cxor_e86ea0c2(flag)
flag = cmul_99a00a24(flag)
flag = chadd_404cff4b(flag)
flag = csub_9033c843(flag)
flag = chmul_18ecaa08(flag)
flag = digsub_dcdf3ce1(flag)
flag = cxor_2e4b26f4(flag)
flag = csub_965ea16b(flag)
flag = chunk_20e9ea05(flag)
flag = chxor_dbe47d55(flag)
flag = chsub_c78a57d0(flag)
flag = chunk_180b51ff(flag)
flag = chadd_f137e21d(flag)
flag = chsub_195ef194(flag)
flag = mul_62495a4a(flag)
flag = chadd_028f229e(flag)
flag = shuffle_6df04177(flag)
flag = chsub_d866d58b(flag)
flag = sub_ef03b32c(flag)
flag = shuffle_34dde52b(flag)
flag = csub_fbcb846c(flag)
flag = xor_4b381c82(flag)
flag = cxor_7a8c0f91(flag)
flag = chmul_92c7a281(flag)
flag = add_827d7100(flag)
flag = chunk_b62eda1a(flag)
flag = chunk_7efebb77(flag)
flag = xor_9d5176ea(flag)
flag = shuffle_57fe470a(flag)
flag = mul_eb201421(flag)
flag = chadd_0305d89a(flag)
flag = shuffle_f861c12e(flag)
flag = cadd_3c6d2025(flag)
flag = chsub_f15fc200(flag)
flag = shuffle_49d97f75(flag)
flag = add_91bb43ca(flag)
flag = chadd_12bc44e9(flag)
flag = chadd_acce32b7(flag)
flag = chunk_f1e74b7b(flag)
flag = csub_9707b66b(flag)
flag = chmul_d62489f9(flag)
flag = shuffle_ec9b15d1(flag)
flag = chxor_1649570d(flag)
flag = chxor_59178ab0(flag)
flag = digsub_ee34dc69(flag)
flag = chsub_38be16e5(flag)
flag = cxor_bacb039a(flag)
flag = cxor_eaaa00cc(flag)
flag = chsub_42d80cc4(flag)
flag = sub_f1819d8e(flag)
flag = digsub_0afb900b(flag)
flag = digsub_39cc5a0e(flag)
flag = cxor_ef4e4e70(flag)
flag = add_c3181859(flag)
flag = chxor_2f1310f4(flag)
flag = chxor_3b22e51a(flag)
flag = sub_baf4594d(flag)
flag = digsub_f74d6e2c(flag)
flag = chxor_42438acb(flag)
flag = chsub_04fb6e14(flag)
flag = csub_d24d889b(flag)
flag = add_c0abe07c(flag)
flag = chadd_868635c7(flag)
flag = shuffle_496b2c86(flag)
flag = xor_bf47bb3a(flag)
flag = cadd_f5745b35(flag)
flag = add_53fcaa0e(flag)
flag = cxor_ec93c298(flag)
flag = cxor_2e4b26f4(flag)
flag = cxor_73c5cfae(flag)
flag = cxor_e59dc6e0(flag)
flag = sub_88400353(flag)
flag = chmul_73d44dfc(flag)
flag = add_b2a61490(flag)
flag = chadd_c8951761(flag)
flag = sub_ca91f11f(flag)
flag = cxor_8ff25e39(flag)
flag = chmul_645c1d15(flag)
flag = chxor_9d86eb3b(flag)
flag = digsub_a7419844(flag)
flag = digsub_be40e0aa(flag)
flag = cxor_c6e16ecc(flag)
flag = cmul_7dfade82(flag)
flag = cmul_18dd5479(flag)
flag = digsub_0eb180b8(flag)
flag = csub_d79026ba(flag)
flag = chxor_1649570d(flag)
flag = chmul_f8bbf12f(flag)
flag = chadd_5a85e49b(flag)
flag = cadd_ffecf556(flag)
flag = chsub_32f5910d(flag)
flag = cxor_9a4356f0(flag)
flag = cmul_994c1dcb(flag)
flag = chsub_2d19348f(flag)
flag = cmul_a3103f38(flag)
flag = cxor_41764223(flag)
flag = chxor_8264e501(flag)
flag = chsub_b9dc2f68(flag)
flag = digsub_15140dd6(flag)
flag = chxor_18fcc0f2(flag)
flag = xor_fbcf5aa3(flag)
flag = cmul_26f5ab98(flag)
flag = chsub_8b936fd7(flag)
flag = chmul_49d9640f(flag)
flag = add_b2a61490(flag)
flag = chunk_0f48dab8(flag)
flag = cadd_598cbf7e(flag)
flag = sub_2e2758dc(flag)
flag = mul_1d0b4953(flag)
flag = shuffle_b20aa4f9(flag)
flag = cxor_40c47f57(flag)
flag = add_ed9a96c7(flag)
flag = cmul_fa2c1e3a(flag)
flag = cadd_8fc03570(flag)
flag = add_e7bb6b2d(flag)
flag = csub_31de2ba3(flag)
flag = sub_a9414276(flag)
flag = mul_9d4040eb(flag)
flag = cadd_c66b787a(flag)
flag = chsub_cd79e5f6(flag)
flag = xor_9bd4e1fb(flag)
flag = cmul_a51dd714(flag)
flag = mul_2f89e56a(flag)
flag = cadd_1af81cdc(flag)
flag = cmul_880f9e67(flag)
flag = cmul_fa2c1e3a(flag)
flag = chmul_7df9b320(flag)
flag = cxor_b4a5b937(flag)
flag = chunk_cb2fa615(flag)
flag = xor_c0bb5777(flag)
flag = cadd_429f802a(flag)
flag = add_278192d9(flag)
flag = csub_89d6db66(flag)
flag = csub_8278d2c0(flag)
flag = cadd_76aab783(flag)
flag = chunk_3fec31ed(flag)
flag = chxor_6fca7a91(flag)
flag = add_9009d319(flag)
flag = chsub_52e6291c(flag)
flag = mul_1e5ed056(flag)
flag = chsub_d8e7f937(flag)
flag = chxor_97c61f30(flag)
flag = cmul_b358c3b3(flag)
flag = digsub_6bf0d618(flag)
flag = shuffle_ee25c5d7(flag)
flag = cmul_70fa9f12(flag)
flag = chsub_a13b0c4e(flag)
flag = shuffle_dc438735(flag)
flag = add_b94ae645(flag)
flag = digsub_d085a426(flag)
flag = sub_f3be4e25(flag)
flag = shuffle_54e93000(flag)
flag = chadd_52f847ab(flag)
flag = chmul_33c1cd0d(flag)
flag = add_a391835b(flag)
flag = cmul_a00c082c(flag)
flag = shuffle_ca27178d(flag)
flag = csub_5174b08f(flag)
flag = cxor_bac498f9(flag)
flag = csub_6f8ba274(flag)
flag = digsub_c686d6d7(flag)
flag = cxor_39585eb3(flag)
flag = chxor_f0c78fe9(flag)
flag = add_b0406f7d(flag)
flag = chunk_e5aaf751(flag)
flag = mul_ed586e66(flag)
flag = mul_0bbc1674(flag)
flag = chsub_3af5214b(flag)
flag = csub_f291b39b(flag)
flag = add_66a3881d(flag)
flag = chsub_7af0731b(flag)
flag = xor_f80064d0(flag)
flag = chadd_6a4e5b24(flag)
flag = xor_64af3af1(flag)
flag = cadd_e9d43d97(flag)
flag = cadd_79e79007(flag)
flag = csub_8a4930e2(flag)
flag = digsub_f56a1358(flag)
flag = shuffle_328f0268(flag)
flag = chsub_66269564(flag)
flag = xor_e1acd3bf(flag)
flag = chxor_b9b02bcc(flag)
flag = csub_4660584b(flag)
flag = cmul_db792b73(flag)
flag = chmul_cfee488f(flag)
flag = cxor_79917601(flag)
flag = cadd_d62d0fdd(flag)
flag = cxor_29df8c0e(flag)
flag = cmul_0c91bf4c(flag)
flag = cmul_d77e3c24(flag)
flag = chmul_e7f67d19(flag)
flag = chsub_aad79c73(flag)
flag = cadd_22e59670(flag)
flag = chmul_f8409008(flag)
flag = cxor_7d6f0b67(flag)
flag = chxor_6db45a16(flag)
flag = chxor_a8789254(flag)
flag = cadd_5fc3a121(flag)
flag = add_de55f4f2(flag)
flag = chsub_98a13db8(flag)
flag = chunk_44d36e8a(flag)
flag = add_35671a57(flag)
flag = cmul_00fd6c30(flag)
flag = xor_a8652323(flag)
flag = shuffle_fe7bcc78(flag)
flag = shuffle_b63d8098(flag)
flag = chadd_595ed02a(flag)
flag = sub_1b35acd4(flag)
flag = shuffle_b63d8098(flag)
flag = mul_29392dc2(flag)
flag = chxor_5c4c4d77(flag)
flag = digsub_f74d6e2c(flag)
flag = sub_8eda253a(flag)
flag = csub_20a768aa(flag)
flag = mul_1c457d63(flag)
flag = chunk_adb7a31f(flag)
flag = mul_eec9b30e(flag)
flag = xor_c0655006(flag)
flag = xor_7465fff5(flag)
flag = shuffle_922a7e0d(flag)
flag = mul_8502f399(flag)
flag = shuffle_7c9553cb(flag)
flag = cadd_b1988d37(flag)
flag = cxor_871a2d7f(flag)
flag = cxor_11a1bb19(flag)
flag = chxor_14ca1407(flag)
flag = mul_3feda191(flag)
flag = mul_c4baebe4(flag)
flag = sub_a10ca0c8(flag)
flag = digsub_4c6a11c2(flag)
flag = mul_d0313a6c(flag)
flag = chmul_90381a7d(flag)
flag = chunk_44d36e8a(flag)
flag = xor_3f0bcfae(flag)
flag = chunk_5f5b8349(flag)
flag = chmul_2332b1f2(flag)
flag = chxor_beaa6fd7(flag)
flag = chadd_97096590(flag)
flag = mul_e6b65f6c(flag)
flag = chxor_f5fbcae0(flag)
flag = digsub_4dd34aef(flag)
flag = mul_df48e442(flag)
flag = sub_02f68178(flag)
flag = cxor_6953d2a7(flag)
flag = cadd_81a69b3f(flag)
flag = xor_37922856(flag)
flag = xor_7bdefd5e(flag)
flag = cxor_0c6bb32e(flag)
flag = cmul_dc6ecbe6(flag)
flag = mul_150845b8(flag)
flag = chxor_34a2c770(flag)
flag = cadd_0208daec(flag)
flag = digsub_93fe4930(flag)
flag = chunk_1d45076c(flag)
flag = chmul_9cbb8a7f(flag)
flag = shuffle_0d275e0e(flag)
flag = mul_d9dbdb53(flag)
flag = chadd_55d11883(flag)
flag = cadd_2b51aac8(flag)
flag = mul_e8d4d029(flag)
flag = add_a1fe299c(flag)
flag = chxor_eaba9d0d(flag)
flag = sub_be3b1a5a(flag)
flag = xor_d9eda893(flag)
flag = chunk_ab174f4a(flag)
flag = sub_4e6d826d(flag)
flag = chxor_d7d9bf32(flag)
flag = xor_c0655006(flag)
flag = cadd_c2e41a30(flag)
flag = cxor_eb9b7ae7(flag)
flag = chadd_3d456bc0(flag)
flag = chxor_a120d278(flag)
flag = digsub_c4e4d709(flag)
flag = chsub_8590464c(flag)
flag = shuffle_5ea1f654(flag)
flag = cxor_d05587bc(flag)
flag = add_67af3ff4(flag)
flag = chsub_2792abe7(flag)
flag = chxor_eaba9d0d(flag)
flag = chunk_db078de2(flag)
flag = cadd_3a7e4ac5(flag)
flag = chunk_b0b7f3b2(flag)
flag = digsub_6bf0d618(flag)
flag = sub_658747e3(flag)
flag = cmul_f851d67c(flag)
flag = chsub_d07297d3(flag)
flag = chmul_18bbd248(flag)
flag = shuffle_4e8ad324(flag)
flag = chsub_cd79e5f6(flag)
flag = xor_48d487cb(flag)
flag = cxor_dfcb824e(flag)
flag = csub_1967fa7b(flag)
flag = chsub_c6725cc1(flag)
flag = cadd_5cb4a9bb(flag)
flag = chmul_23bd481d(flag)
flag = chadd_a5fda7f8(flag)
flag = chxor_02aa625d(flag)
flag = chmul_9e62f058(flag)
flag = shuffle_0d458069(flag)
flag = chunk_5e4879e0(flag)
flag = xor_ced10726(flag)
flag = csub_479c2380(flag)
flag = chxor_79daeaf3(flag)
flag = chadd_8ab3b2a8(flag)
flag = chxor_a99facbd(flag)
flag = csub_b56c06db(flag)
flag = csub_d4490e14(flag)
flag = chunk_2bbf6ee5(flag)
flag = add_31efa65a(flag)
flag = cmul_87dca596(flag)
flag = csub_841d8ee8(flag)
flag = cmul_eefe9fa4(flag)
flag = cadd_fd35b517(flag)
flag = xor_ba2cb10f(flag)
flag = chsub_7ade6cf5(flag)
flag = cxor_28d8fe91(flag)
flag = chsub_e0a5b7b9(flag)
flag = chunk_64714116(flag)
flag = shuffle_8c84166e(flag)
flag = shuffle_de4afce0(flag)
flag = add_36fb4d7d(flag)
flag = shuffle_6ed87304(flag)
flag = cxor_6cae2cb6(flag)
flag = csub_4fc27255(flag)
flag = add_20baca93(flag)
flag = csub_43b0ae55(flag)
flag = cadd_991ec901(flag)
flag = mul_2c8e35d6(flag)
flag = cadd_40a2d9f1(flag)
flag = shuffle_cb627e8c(flag)
flag = mul_8155b14e(flag)
flag = digsub_c09c7211(flag)
flag = cmul_3152eceb(flag)
flag = digsub_93fe4930(flag)
flag = mul_d62641f4(flag)
flag = digsub_5f03912e(flag)
flag = xor_d0a1bc3c(flag)
flag = cadd_d04bb716(flag)
flag = chxor_ea027ec2(flag)
flag = digsub_1feeafe7(flag)
flag = mul_b74dfccf(flag)
flag = chmul_48477e80(flag)
flag = xor_af966677(flag)
flag = mul_54b3dab3(flag)
flag = csub_026b559f(flag)
flag = cadd_c2498f1a(flag)
flag = shuffle_d65597c5(flag)
flag = cxor_bb8eddbd(flag)
flag = chmul_a156d55d(flag)
flag = chsub_808e087e(flag)
flag = digsub_ddee790f(flag)
flag = sub_658747e3(flag)
flag = cmul_e4155cf9(flag)
flag = chxor_0256cccb(flag)
flag = mul_04000fe6(flag)
flag = csub_359c8002(flag)
flag = sub_40d48993(flag)
flag = xor_31c0451b(flag)
flag = chunk_7692aef1(flag)
flag = cmul_94ed85b9(flag)
flag = sub_ba98e537(flag)
flag = add_eee1f715(flag)
flag = chsub_66269564(flag)
flag = chmul_61efa118(flag)
flag = xor_da634428(flag)
flag = cmul_70fa9f12(flag)
flag = cadd_2da455cf(flag)
flag = chmul_695202ac(flag)
flag = cxor_765f4bed(flag)
flag = chmul_d6a4e65e(flag)
flag = chunk_cea296ca(flag)
flag = add_48a6be62(flag)
flag = xor_26dc7003(flag)
flag = chsub_4dc669f9(flag)
flag = chsub_26373389(flag)
flag = cadd_b4ab774d(flag)
flag = digsub_50bc72d1(flag)
flag = xor_581836de(flag)
flag = digsub_ff462c4a(flag)
flag = digsub_61dd20a0(flag)
flag = mul_4b619987(flag)
flag = digsub_6dd6217e(flag)
flag = chxor_e7a8f8ca(flag)
flag = sub_40f8346a(flag)
flag = shuffle_a6432e15(flag)
flag = mul_a337ba89(flag)
flag = mul_c4baebe4(flag)
flag = chxor_187da4ac(flag)
flag = xor_b8479b53(flag)
flag = chunk_cd87c4de(flag)
flag = csub_8c5dcc87(flag)
flag = cmul_a0ab0dc2(flag)
flag = chsub_e0a5b7b9(flag)
flag = csub_f4c94d76(flag)
flag = cxor_060ce4e2(flag)
flag = chsub_c48765e6(flag)
flag = sub_51002c26(flag)
flag = chunk_a9c428c6(flag)
flag = digsub_20744944(flag)
flag = chmul_f8790cde(flag)
flag = cxor_86de55f2(flag)
flag = xor_7b6d7222(flag)
flag = shuffle_d635239a(flag)
flag = chsub_dff9f4eb(flag)
flag = add_2527f4da(flag)
flag = xor_5c4520e3(flag)
flag = shuffle_c71df508(flag)
flag = chunk_91f40280(flag)
flag = shuffle_0d936e4f(flag)
flag = chxor_a99facbd(flag)
flag = chmul_6c610e81(flag)
flag = add_c8330084(flag)
flag = sub_f1ab5525(flag)
flag = cxor_9bda6371(flag)
flag = cmul_10dcbe35(flag)
flag = mul_a3a1940e(flag)
flag = mul_3af98615(flag)
flag = xor_36e98afe(flag)
flag = shuffle_719cf56c(flag)
flag = mul_6bdc88d2(flag)
flag = cadd_527ebfe5(flag)
flag = xor_2b415907(flag)
flag = digsub_262ebaa4(flag)
flag = mul_49cd764a(flag)
flag = mul_2f89e56a(flag)
flag = xor_840940ad(flag)
flag = csub_8322948c(flag)
flag = digsub_5c02cf5d(flag)
flag = xor_827e6b83(flag)
flag = add_c90f428d(flag)
flag = csub_973b4044(flag)
flag = chsub_b596367b(flag)
flag = chmul_06d41645(flag)
flag = chunk_66d22063(flag)
flag = cadd_91c03cb7(flag)
flag = chmul_b537d51c(flag)
flag = cxor_7948ea7c(flag)
flag = chsub_da5ea1df(flag)
flag = shuffle_03c855c6(flag)
flag = add_c3181859(flag)
flag = sub_73623d40(flag)
flag = chadd_742f064d(flag)
flag = add_3fa4a716(flag)
flag = chunk_3fec31ed(flag)
flag = sub_f21c7d69(flag)
flag = cxor_21574829(flag)
flag = xor_cc5d6b6d(flag)
flag = chxor_eb7e47c1(flag)
flag = cxor_ef4e4e70(flag)
flag = add_c8330084(flag)
flag = cxor_f14bf0f9(flag)
flag = shuffle_40f99305(flag)
flag = digsub_6be19c93(flag)
flag = add_79292e38(flag)
flag = cmul_0b0ac64f(flag)
flag = cxor_ebeaa56d(flag)
flag = chxor_31c39495(flag)
flag = xor_5250859e(flag)
flag = chadd_74c2ec36(flag)
flag = cxor_695c7de2(flag)
flag = cmul_65983a34(flag)
flag = chsub_dbf9111e(flag)
flag = chadd_8b4d11a3(flag)
flag = chmul_d909e81b(flag)
flag = shuffle_2cab1c5d(flag)
flag = digsub_ee67309b(flag)
flag = cmul_23a5f304(flag)
flag = xor_b4ec6205(flag)
flag = chunk_a8577417(flag)
flag = cadd_3cbc013d(flag)
flag = chadd_c32db46a(flag)
flag = cmul_3062560c(flag)
flag = chunk_8af8feea(flag)
flag = mul_36a4bfa0(flag)
flag = chsub_29874234(flag)
flag = cmul_f7e015fa(flag)
flag = cadd_caab3e28(flag)
flag = add_2071c6f7(flag)
flag = chunk_1fa032d8(flag)
flag = add_0cf48ce3(flag)
flag = cadd_e0fbc1fa(flag)
flag = shuffle_35e807af(flag)
flag = add_bc200f67(flag)
flag = chsub_c813b5d2(flag)
flag = add_0cf48ce3(flag)
flag = chunk_3fec31ed(flag)
flag = digsub_b6137e92(flag)
flag = chadd_c28b3253(flag)
flag = cmul_65dc26f9(flag)
flag = cadd_8fd791e9(flag)
flag = chunk_174427d2(flag)
flag = chunk_69dd3db9(flag)
flag = cadd_0788aaad(flag)
flag = chadd_87bfe060(flag)
flag = chmul_37dc6c90(flag)
flag = chxor_3569bd0b(flag)
flag = chxor_65adc1af(flag)
flag = chunk_dd51ac10(flag)
flag = cxor_aaa07a69(flag)
flag = sub_fa8a3be1(flag)
flag = chmul_48477e80(flag)
flag = cmul_91c63a57(flag)
flag = xor_26dc7003(flag)
flag = chmul_843e27ef(flag)
flag = sub_1a66408e(flag)
flag = chunk_80f5c942(flag)
flag = shuffle_1a2b743e(flag)
flag = chmul_cc8af1e6(flag)
flag = cmul_92323fe7(flag)
flag = cmul_16d7f1e9(flag)
flag = chxor_c14e4305(flag)
flag = csub_ec729961(flag)
flag = cmul_7ca572e2(flag)
flag = chsub_8a25c41f(flag)
flag = chsub_1ee9c5e9(flag)
flag = cadd_19b7645a(flag)
flag = mul_bdbf4994(flag)
flag = chmul_14ccb396(flag)
flag = cadd_2ed55f8d(flag)
flag = chsub_c1275525(flag)
flag = add_664be5fd(flag)
flag = chsub_a40de1d7(flag)
flag = digsub_ee67309b(flag)
flag = chmul_c25d1cd0(flag)
flag = cadd_e4e4c9c0(flag)
flag = chsub_f7d05960(flag)
flag = csub_8cff1d96(flag)
flag = cmul_c4987507(flag)
flag = add_81776826(flag)
flag = chxor_4427bf9d(flag)
flag = chxor_f6dc12d6(flag)
flag = digsub_1b9caedc(flag)
flag = add_1c8d08f1(flag)
flag = csub_cd81496c(flag)
flag = cxor_32a07079(flag)
flag = mul_2c8e35d6(flag)
flag = chmul_32362a1d(flag)
flag = cxor_c57039b1(flag)
flag = mul_a2581ad1(flag)
flag = chxor_25d74c81(flag)
flag = cxor_fa9fe64d(flag)
flag = digsub_0eb180b8(flag)
flag = sub_1ddf1ef7(flag)
flag = chmul_207c7813(flag)
flag = cadd_b07f15df(flag)
flag = csub_ad5db692(flag)
flag = chadd_dba6c166(flag)
flag = chsub_bae85472(flag)
flag = cmul_cabb8b44(flag)
flag = chsub_93ac52f5(flag)
flag = chxor_f2f16c61(flag)
flag = shuffle_9bfda3d1(flag)
flag = chsub_b3a9e994(flag)
flag = cadd_0208daec(flag)
flag = chsub_8b936fd7(flag)
flag = digsub_fc90a80f(flag)
flag = xor_2ac1f33e(flag)
flag = chadd_4b0b608a(flag)
flag = chadd_3940932e(flag)
flag = mul_34d9a702(flag)
flag = chsub_d27566eb(flag)
flag = cxor_9064d63f(flag)
flag = cadd_441443f1(flag)
flag = cmul_c288fd59(flag)
flag = cxor_a1a8de03(flag)
flag = chunk_d9ce60f8(flag)
flag = chadd_cc6daaa1(flag)
flag = chadd_b0d8f554(flag)
flag = cxor_48ff1c3c(flag)
flag = chmul_ab9cdb92(flag)
flag = chunk_88f4a033(flag)
flag = cmul_3c18a69a(flag)
flag = chxor_6fca7a91(flag)
flag = digsub_5e8b7a8a(flag)
flag = chsub_3bf8b0c8(flag)
flag = add_19eaf3b7(flag)
flag = cadd_03a33025(flag)
flag = mul_70770109(flag)
flag = mul_33103309(flag)
flag = shuffle_eb45c1f4(flag)
flag = mul_c0b36007(flag)
flag = chxor_c43c6725(flag)
flag = digsub_fda06cd9(flag)
flag = chunk_d88231fa(flag)
flag = xor_4e43f7ea(flag)
flag = chunk_4423d984(flag)
flag = add_e7bb6b2d(flag)
flag = cxor_ffad6101(flag)
flag = cmul_697c5558(flag)
flag = digsub_ed6a3b94(flag)
flag = chmul_f8bbf12f(flag)
flag = cadd_f5745b35(flag)
flag = digsub_18fc0c9e(flag)
flag = chsub_8396a9b9(flag)
flag = chmul_3d18df83(flag)
flag = csub_1017a6c4(flag)
flag = chsub_74365a3a(flag)
flag = cadd_3cbc013d(flag)
flag = xor_30504fc8(flag)
flag = cxor_e86ea0c2(flag)
flag = cxor_c4236734(flag)
flag = mul_a3a1940e(flag)
flag = shuffle_16d074d1(flag)
flag = cadd_577d5f70(flag)
flag = chunk_20e9ea05(flag)
flag = add_b4b55578(flag)
flag = chxor_c14e4305(flag)
flag = mul_3a6b9086(flag)
flag = shuffle_63b7a61d(flag)
flag = cmul_21388cd8(flag)
flag = xor_698d0c07(flag)
flag = chxor_72c80534(flag)
flag = digsub_574e8941(flag)
flag = mul_e74b3261(flag)
flag = cadd_99696e25(flag)
flag = chadd_88d19b3c(flag)
flag = chmul_b8a7f012(flag)
flag = add_ef37b006(flag)
flag = digsub_db13869f(flag)
flag = cmul_75c87098(flag)
flag = shuffle_922a7e0d(flag)
flag = digsub_bd11b809(flag)
flag = add_9591eabf(flag)
flag = cmul_67fd8ca7(flag)
flag = chunk_406e7c05(flag)
flag = chxor_e6a0d155(flag)
flag = chmul_65689d19(flag)
flag = add_ee203fd4(flag)
flag = xor_698d0c07(flag)
flag = cadd_130f7b9b(flag)
flag = xor_61d47dbf(flag)
flag = chunk_44d36e8a(flag)
flag = add_1eefd08b(flag)
flag = digsub_e1f5dc03(flag)
flag = csub_59e78f82(flag)
flag = chxor_db85cf59(flag)
flag = cxor_bac498f9(flag)
flag = chadd_51cfbbb7(flag)
flag = digsub_f2fb52b7(flag)
flag = cmul_3152eceb(flag)
flag = xor_0ebbd2b0(flag)
flag = cxor_7645272c(flag)
flag = sub_64547020(flag)
flag = chsub_68af0dd5(flag)
flag = chmul_c2508e0f(flag)
flag = chadd_6c281254(flag)
flag = mul_f41b15dd(flag)
flag = xor_9fab62d4(flag)
flag = csub_5a6c81e3(flag)
flag = chsub_b9955d1a(flag)
flag = xor_22aa0e90(flag)
flag = mul_3af98615(flag)
flag = chsub_aea82172(flag)
flag = add_547096c9(flag)
flag = chmul_330af750(flag)
flag = chunk_ab1c7f5f(flag)
flag = chunk_0074c4bc(flag)
flag = chsub_808e087e(flag)
flag = chsub_244387c4(flag)
flag = digsub_bbf1a156(flag)
flag = cxor_11a1bb19(flag)
flag = chmul_b537d51c(flag)
flag = chmul_16176275(flag)
flag = sub_7ca185a5(flag)
flag = digsub_0c60c240(flag)
flag = add_1ddc8330(flag)
flag = chmul_11d3795c(flag)
flag = sub_fa8a3be1(flag)
flag = chsub_4e9faeee(flag)
flag = digsub_eb8aeb23(flag)
flag = chsub_a13b0c4e(flag)
flag = chsub_4c009b94(flag)
flag = shuffle_d0a6fda1(flag)
flag = chsub_83dc3951(flag)
flag = cadd_8fc03570(flag)
flag = csub_9560b32f(flag)
flag = digsub_eb8aeb23(flag)
flag = cadd_b1988d37(flag)
flag = cadd_4836ae77(flag)
flag = xor_4b381c82(flag)
flag = chmul_c25d1cd0(flag)
flag = sub_b676ab61(flag)
flag = chsub_4364daac(flag)
flag = cmul_8d226a5e(flag)
flag = cadd_652099bf(flag)
flag = chunk_f46f605c(flag)
flag = csub_f291b39b(flag)
flag = xor_abf7f988(flag)
flag = chsub_d94b1450(flag)
flag = digsub_e09ab638(flag)
flag = shuffle_7c9553cb(flag)
flag = shuffle_41cfb8d7(flag)
flag = shuffle_2ad93819(flag)
flag = csub_ea9d41b8(flag)
flag = cmul_3dfa51d9(flag)
flag = cadd_ed8e4346(flag)
flag = mul_7ec01a05(flag)
flag = cxor_81cc1cc2(flag)
flag = shuffle_f44f0fc5(flag)
flag = chsub_c0922438(flag)
flag = chunk_530e625c(flag)
flag = chxor_bbf3589a(flag)
flag = cmul_5f59af38(flag)
flag = chmul_da4f7a7d(flag)
flag = chunk_426d469b(flag)
flag = csub_c3302d5b(flag)
flag = chsub_fd459d3e(flag)
flag = xor_e6bc2bcf(flag)
flag = chunk_e808502e(flag)
flag = add_f4113996(flag)
flag = chxor_3dd86e1b(flag)
flag = chsub_a12104be(flag)
flag = chmul_f48a5878(flag)
flag = shuffle_0a4f92ab(flag)
flag = chunk_c72fb6c4(flag)
flag = csub_1bf63629(flag)
flag = mul_e020bc90(flag)
flag = shuffle_68d954ec(flag)
flag = digsub_a5f0e042(flag)
flag = digsub_211a2fee(flag)
flag = csub_302bf054(flag)
flag = xor_78429cb3(flag)
flag = cxor_b8e23c90(flag)
flag = digsub_caab5c9d(flag)
flag = sub_a2adabad(flag)
flag = chadd_28036696(flag)
flag = digsub_154d7267(flag)
flag = chsub_68af0dd5(flag)
flag = cadd_074e39fc(flag)
flag = csub_9253b05f(flag)
flag = add_c1f5edb7(flag)
flag = cxor_0af289cf(flag)
flag = cxor_85556ac5(flag)
flag = cxor_4f2ad7d2(flag)
flag = cadd_88038a55(flag)
flag = add_7553d25b(flag)
flag = chmul_cf7d31c7(flag)
flag = cxor_b4a5b937(flag)
flag = chmul_e2b38bce(flag)
flag = cmul_5ef49e31(flag)
flag = sub_8c476a01(flag)
flag = chunk_f1e74b7b(flag)
flag = chunk_e0f4eb85(flag)
flag = mul_bce42f5e(flag)
flag = sub_023318b3(flag)
flag = cmul_8c0028d4(flag)
flag = cxor_4cb585c4(flag)
flag = chunk_515df396(flag)
flag = sub_8476e2a1(flag)
flag = chxor_730db16c(flag)
flag = digsub_99f3c205(flag)
flag = chmul_443266b3(flag)
flag = cadd_fdec7760(flag)
flag = add_3d1c6187(flag)
flag = cmul_ac2fe6b4(flag)
flag = csub_23f2ff18(flag)
flag = add_f66fdb75(flag)
flag = xor_a8652323(flag)
flag = mul_d23185db(flag)
flag = xor_4e5c29b0(flag)
flag = cadd_3150b11b(flag)
flag = cmul_0b6d9f9a(flag)
flag = shuffle_45b62e3f(flag)
flag = chunk_59cbae4c(flag)
flag = chadd_3a6ba43e(flag)
flag = mul_c983432b(flag)
flag = chadd_3aa9c371(flag)
flag = shuffle_de4afce0(flag)
flag = chsub_9fe7030d(flag)
flag = mul_c0b36007(flag)
flag = cmul_06256c90(flag)
flag = mul_619c394d(flag)
flag = shuffle_2d9fffb5(flag)
flag = chmul_6d29d2c8(flag)
flag = digsub_4dd34aef(flag)
flag = chxor_187da4ac(flag)
flag = cadd_9bed43d0(flag)
flag = sub_04d98d74(flag)
flag = cmul_db96fc2e(flag)
flag = sub_8eda253a(flag)
flag = chunk_f75e2f55(flag)
flag = chsub_b335ae97(flag)
flag = digsub_5513d3dd(flag)
flag = digsub_19f61f73(flag)
flag = cmul_1df126ed(flag)
flag = digsub_e6768cff(flag)
flag = digsub_e09ab638(flag)
flag = xor_50156ac2(flag)
flag = cmul_c288fd59(flag)
flag = csub_702f94e1(flag)
flag = digsub_69f3e773(flag)
flag = shuffle_c433a286(flag)
flag = shuffle_30915728(flag)
flag = digsub_febb8b71(flag)
flag = chunk_cbcd0993(flag)
flag = add_204a88d5(flag)
flag = shuffle_6c9a670f(flag)
flag = digsub_a56c83c8(flag)
flag = mul_37e82792(flag)
flag = chsub_339c9633(flag)
flag = sub_149a7d50(flag)
flag = cadd_b4ab774d(flag)
flag = cxor_c9bff23d(flag)
flag = shuffle_425fc483(flag)
flag = cadd_b8669446(flag)
flag = mul_6a51d006(flag)
flag = sub_adc67d90(flag)
flag = digsub_f8bfc612(flag)
flag = chmul_5c3ce310(flag)
flag = chmul_d909e81b(flag)
flag = xor_32fe74f6(flag)
flag = add_4db6bc88(flag)
flag = digsub_67b6032a(flag)
flag = chadd_fc03260a(flag)
flag = add_30966eb1(flag)
flag = chxor_2bbe4cc1(flag)
flag = chsub_d2de1fcc(flag)
flag = chunk_7d26cddb(flag)
flag = cadd_007b2c57(flag)
flag = csub_ea9d41b8(flag)
flag = add_48f0c9fc(flag)
flag = add_331118ba(flag)
flag = chmul_207c7813(flag)
flag = add_42869331(flag)
flag = chunk_181817bc(flag)
flag = chmul_ab23c18c(flag)
flag = chadd_3e7164c9(flag)
flag = csub_3d9f618d(flag)
flag = cadd_8c4577cf(flag)
flag = cmul_d4928d34(flag)
flag = sub_a40cb760(flag)
flag = sub_5810de75(flag)
flag = chunk_28acccb3(flag)
flag = chmul_37bb44ad(flag)
flag = chadd_e99579ed(flag)
flag = csub_4707f65f(flag)
flag = chxor_b080755f(flag)
flag = add_8aaefd6e(flag)
flag = digsub_f8ed932c(flag)
flag = add_1ddc8330(flag)
flag = chunk_ddef464d(flag)
flag = digsub_1f6e32d7(flag)
flag = xor_032ec723(flag)
flag = cadd_86ca3121(flag)
flag = chxor_24586d25(flag)
flag = cmul_615b3bac(flag)
flag = mul_9e94e89a(flag)
flag = chmul_e0c73179(flag)
flag = digsub_0e01916d(flag)
flag = mul_389dee3d(flag)
flag = shuffle_cef04b1b(flag)
flag = digsub_f642c787(flag)
flag = chadd_c427ca04(flag)
flag = digsub_aecf9a86(flag)
flag = digsub_574e8941(flag)
flag = cmul_16644eba(flag)
flag = chmul_7eea79aa(flag)
flag = csub_d480ce5f(flag)
flag = chmul_edaf1927(flag)
flag = add_4d5b7dd8(flag)
flag = cmul_b759583b(flag)
flag = sub_83e670dd(flag)
flag = chmul_826efe63(flag)
flag = xor_b2f63512(flag)
flag = cmul_f98bab5d(flag)
flag = xor_b741c18e(flag)
flag = digsub_99f3c205(flag)
flag = chunk_53760c11(flag)
flag = shuffle_41b9328e(flag)
flag = add_a391835b(flag)
flag = xor_bb19f697(flag)
flag = xor_da634428(flag)
flag = shuffle_63b7a61d(flag)
flag = chmul_9522f239(flag)
flag = cadd_fdec7760(flag)
flag = cadd_1cd51d5c(flag)
flag = chsub_52e6291c(flag)
flag = add_db36360f(flag)
flag = shuffle_b118d2cc(flag)
flag = csub_8322948c(flag)
flag = chmul_ef7fa6ac(flag)
flag = chadd_c427ca04(flag)
flag = cxor_7a8c0f91(flag)
flag = cadd_99696e25(flag)
flag = shuffle_93a215e5(flag)
flag = chunk_0e1a47db(flag)
flag = cadd_3deee9ba(flag)
flag = shuffle_b9aac0df(flag)
flag = cmul_77da69c4(flag)
flag = chmul_20654021(flag)
flag = add_fc842ea7(flag)
flag = add_39899af6(flag)
flag = sub_ecf0a346(flag)
flag = cadd_f83b216d(flag)
flag = chxor_6b786c2e(flag)
flag = chsub_a85cba2a(flag)
flag = digsub_b6137e92(flag)
flag = add_79292e38(flag)
flag = cadd_92239d35(flag)
flag = cmul_45c479ca(flag)
flag = chunk_aac2455e(flag)
flag = csub_b5b948c9(flag)
flag = chsub_27dae3ae(flag)
flag = chunk_f5342e5d(flag)
flag = cxor_33678a18(flag)
flag = cxor_89bf897f(flag)
flag = xor_131c6ed1(flag)
flag = mul_5500afcf(flag)
flag = cxor_14787d69(flag)
flag = cadd_6abb159d(flag)
flag = chadd_1f526c5a(flag)
flag = chunk_2a9e106f(flag)
flag = chmul_9cb9b54c(flag)
flag = chunk_be89d48a(flag)
flag = xor_0723c89e(flag)
flag = chadd_fe09deb1(flag)
flag = xor_4d6d322c(flag)
flag = chadd_61a15596(flag)
flag = digsub_54057ff2(flag)
flag = sub_b676ab61(flag)
flag = shuffle_3150238f(flag)
flag = chadd_27f19124(flag)
flag = chadd_f78e9fb5(flag)
flag = chxor_6ae1cc6a(flag)
flag = cxor_c9c75462(flag)
flag = csub_6f8ba274(flag)
flag = cxor_dc7aac3c(flag)
flag = xor_5b72ca68(flag)
flag = cxor_5ac6b756(flag)
flag = csub_2448d6e4(flag)
flag = chunk_cb1a7d77(flag)
flag = cadd_432be002(flag)
flag = sub_716f026e(flag)
flag = chadd_e3c33841(flag)
flag = chsub_01f682a9(flag)
flag = cxor_892833c6(flag)
flag = xor_f41b0fa6(flag)
flag = chunk_44d36e8a(flag)
flag = mul_75e8ddbd(flag)
flag = sub_468e1495(flag)
flag = chxor_3c2c0416(flag)
flag = add_c1c20de3(flag)
flag = chunk_bdedc29f(flag)
flag = chunk_6b870e2e(flag)
flag = digsub_cb6346a1(flag)
flag = csub_8c5dcc87(flag)
flag = chmul_ee75a8f1(flag)
flag = chsub_6ab39e5c(flag)
flag = chunk_7d26cddb(flag)
flag = chmul_d3237ea8(flag)
flag = cxor_3829c9db(flag)
flag = shuffle_41ece7da(flag)
flag = chsub_25609124(flag)
flag = csub_4e221287(flag)
flag = chmul_b8a4da05(flag)
flag = cxor_9a959665(flag)
flag = mul_75e8ddbd(flag)
flag = chadd_55d11883(flag)
flag = cadd_56facd4a(flag)
flag = chxor_822180c4(flag)
flag = cmul_b5dc4245(flag)
flag = chsub_5a5cbf95(flag)
flag = cxor_42ec5686(flag)
flag = chxor_18fcc0f2(flag)
flag = sub_da5b779b(flag)
flag = chmul_efbeeb2f(flag)
flag = xor_c0421e98(flag)
flag = add_502ea941(flag)
flag = cxor_b8e23c90(flag)
flag = chmul_4af7800f(flag)
flag = chunk_31cdb624(flag)
flag = cmul_ea158364(flag)
flag = cxor_b7550d4d(flag)
flag = chunk_e157469e(flag)
flag = chxor_dbb28a03(flag)
flag = add_784c3bff(flag)
flag = cxor_d05587bc(flag)
flag = digsub_189a0416(flag)
flag = chsub_ebadaefe(flag)
flag = chsub_004b681b(flag)
flag = add_81776826(flag)
flag = add_a85e7265(flag)
flag = mul_8c6fc3ce(flag)
flag = sub_51975f8d(flag)
flag = chxor_90da6de6(flag)
flag = chxor_8a775b98(flag)
flag = xor_d90ee923(flag)
flag = chadd_63faefcf(flag)
flag = digsub_1f6e32d7(flag)
flag = cmul_9ebbf06f(flag)
flag = sub_aabddf03(flag)
flag = csub_642b1701(flag)
flag = chsub_9df05eee(flag)
flag = cmul_9e6c0fb6(flag)
flag = shuffle_c507521b(flag)
flag = chunk_27ab9318(flag)
flag = cxor_f9bee875(flag)
flag = add_00eb45a8(flag)
flag = chxor_699d5577(flag)
flag = xor_b7dd3197(flag)
flag = chxor_b10769e4(flag)
flag = cadd_f4a3a91b(flag)
flag = cmul_ec6817f2(flag)
flag = cadd_df4a88c2(flag)
flag = digsub_7b1651a7(flag)
flag = cmul_89ce7854(flag)
flag = add_8aaefd6e(flag)
flag = chxor_e276b565(flag)
flag = cmul_25c2274e(flag)
flag = add_53fcaa0e(flag)
flag = cxor_70fa2d45(flag)
flag = chmul_18bbd248(flag)
flag = chadd_b9888b8b(flag)
flag = mul_709d81e2(flag)
flag = shuffle_f4cba7dd(flag)
flag = cxor_f20321f0(flag)
flag = xor_ff7262d6(flag)
flag = shuffle_ec9b15d1(flag)
flag = chadd_896dc902(flag)
flag = sub_1d06041f(flag)
flag = cadd_b39a5b0b(flag)
flag = chadd_6e3ce5fe(flag)
flag = csub_35e65bc6(flag)
flag = chadd_04ef3ad8(flag)
flag = xor_4208a184(flag)
flag = mul_b97eacc4(flag)
flag = cxor_71a4351f(flag)
flag = chmul_d5ba6298(flag)
flag = xor_1eba93e4(flag)
flag = cmul_f3c9bff2(flag)
flag = chunk_8ad268b9(flag)
flag = cmul_76043ee3(flag)
flag = chadd_84fac9b1(flag)
flag = chsub_ad24fefb(flag)
flag = cadd_2bb5025e(flag)
flag = shuffle_2ad93819(flag)
flag = chmul_75d42cab(flag)
flag = cadd_6bde1e47(flag)
flag = add_604f7a16(flag)
flag = xor_ad34030d(flag)
flag = csub_f4c94d76(flag)
flag = chunk_6df9f44d(flag)
flag = chunk_cf8a51ed(flag)
flag = cadd_f74d4f6d(flag)
flag = cxor_207ceb20(flag)
flag = shuffle_3c585e0a(flag)
flag = digsub_bb8430e7(flag)
flag = chxor_1272b4b3(flag)
flag = chxor_ae930f19(flag)
flag = chxor_02646472(flag)
flag = cxor_74f95525(flag)
flag = sub_599ea520(flag)
flag = add_7af2fe07(flag)
flag = cxor_ad95af8e(flag)
flag = xor_3994c2ad(flag)
flag = csub_754c0169(flag)
flag = chsub_2b33e666(flag)
flag = digsub_cb6346a1(flag)
flag = sub_e1d8193c(flag)
flag = sub_51e1902d(flag)
flag = cxor_5161196f(flag)
flag = chadd_714abd5f(flag)
flag = chxor_36059956(flag)
flag = digsub_800f76fb(flag)
flag = xor_77c70db2(flag)
flag = chadd_c8951761(flag)
flag = cmul_b5356752(flag)
flag = cxor_d2b698ff(flag)
flag = cxor_b9faaea4(flag)
flag = xor_d0a1bc3c(flag)
flag = shuffle_0242ca5c(flag)
flag = cadd_f435a64a(flag)
flag = digsub_574e8941(flag)
flag = chsub_dbd1ec78(flag)
flag = xor_2ec3c23c(flag)
flag = mul_714f7f13(flag)
flag = sub_1ddf1ef7(flag)
flag = cmul_be878186(flag)
flag = xor_77377fa6(flag)
flag = cxor_83571dc3(flag)
flag = chmul_05b3201a(flag)
flag = chmul_f175d1d7(flag)
flag = cmul_94531f44(flag)
flag = shuffle_81df2959(flag)
flag = chsub_3bf8b0c8(flag)
flag = chxor_5323ed11(flag)
flag = mul_9ff113f3(flag)
flag = sub_adc67d90(flag)
flag = sub_5044b2cf(flag)
flag = cadd_3a2cd387(flag)
flag = chsub_cd79e5f6(flag)
flag = add_3cfe5566(flag)
flag = chmul_068c4ae9(flag)
flag = add_8aaefd6e(flag)
flag = sub_eed83ea2(flag)
flag = sub_4277a989(flag)
flag = cmul_f83e4df7(flag)
flag = cmul_26f5ab98(flag)
flag = cadd_8bcff692(flag)
flag = mul_0a969cbc(flag)
flag = add_a00a7d48(flag)
flag = digsub_af816cb4(flag)
flag = chxor_69637723(flag)
flag = chxor_4ec23f54(flag)
flag = mul_f80a89cf(flag)
flag = csub_ecd1b6d0(flag)
flag = chunk_8ad268b9(flag)
flag = add_bb11d3eb(flag)
flag = cadd_8a476763(flag)
flag = sub_3c434ee5(flag)
flag = chxor_665eed2c(flag)
flag = csub_b10244d8(flag)
flag = xor_813cf8a0(flag)
flag = cadd_b51d3eba(flag)
flag = chmul_b820c945(flag)
flag = chxor_f274337d(flag)
flag = shuffle_a17bb4ee(flag)
flag = chunk_e808502e(flag)
flag = cmul_fb7cc4ca(flag)
flag = chxor_616b9569(flag)
flag = sub_d3158d9a(flag)
flag = xor_5c21cfc7(flag)
flag = chxor_12caeb3c(flag)
flag = chunk_a998eeb4(flag)
flag = cmul_8a7021fa(flag)
flag = chunk_ce966b63(flag)
flag = cxor_bac498f9(flag)
flag = chsub_8b38a202(flag)
flag = digsub_15856403(flag)
flag = cxor_d20accc3(flag)
flag = chsub_de16135d(flag)
flag = csub_3564220e(flag)
flag = csub_0f54d33d(flag)
flag = shuffle_d348541e(flag)
flag = digsub_19f61f73(flag)
flag = chunk_07e06228(flag)
flag = mul_7dc7f4e3(flag)
flag = chmul_50a23c29(flag)
flag = shuffle_74725db2(flag)
flag = csub_2448d6e4(flag)
flag = chxor_829e0b1c(flag)
flag = xor_0b406c7d(flag)
flag = shuffle_987eaf21(flag)
flag = cadd_d222898d(flag)
flag = sub_1d06041f(flag)
flag = add_14d5f474(flag)
flag = add_4d5b7dd8(flag)
flag = cmul_994c1dcb(flag)
flag = sub_da5b779b(flag)
flag = cxor_96357748(flag)
flag = chxor_e024e3e0(flag)
flag = chunk_9f8fce5d(flag)
flag = cxor_05f70989(flag)
flag = xor_4e31efc2(flag)
flag = shuffle_e14d57f5(flag)
flag = sub_a96a1483(flag)
flag = mul_001d570f(flag)
flag = chmul_bd4ac691(flag)
flag = chsub_56813bb5(flag)
flag = sub_f3be4e25(flag)
flag = digsub_15856403(flag)
flag = chxor_68adccd3(flag)
flag = csub_31de6d2c(flag)
flag = shuffle_0df0d459(flag)
flag = csub_30ac2fb9(flag)
flag = shuffle_6136bc5b(flag)
flag = chmul_6f2b8735(flag)
flag = xor_2495a11e(flag)
flag = csub_359c8002(flag)
flag = cadd_bf38d005(flag)
flag = xor_032ec723(flag)
flag = chadd_ab12cde5(flag)
flag = shuffle_a2ef4315(flag)
flag = chxor_d6bf3b04(flag)
flag = shuffle_8cc50403(flag)
flag = sub_b83b0b5a(flag)
flag = csub_4392ba2f(flag)
flag = chxor_00dbbc36(flag)
flag = add_278192d9(flag)
flag = add_30b3e082(flag)
flag = cxor_b2b4971b(flag)
flag = cadd_62b6ad0e(flag)
flag = csub_5bd78a36(flag)
flag = xor_ac6e82c0(flag)
flag = shuffle_dc92e6b1(flag)
flag = digsub_61dd20a0(flag)
flag = shuffle_e6522329(flag)
flag = cmul_7a2b74fe(flag)
flag = chxor_a6995b41(flag)
flag = digsub_8e44fdbd(flag)
flag = sub_32cc1a97(flag)
flag = cadd_2ba6325c(flag)
flag = chunk_5806f721(flag)
flag = chadd_d54dcfab(flag)
flag = mul_228941c9(flag)
flag = cadd_bf48a745(flag)
flag = sub_023318b3(flag)
flag = chsub_29d24d89(flag)
flag = xor_385da77c(flag)
flag = chxor_041a698a(flag)
flag = add_64420416(flag)
flag = cadd_775bd2a3(flag)
flag = cadd_df4a88c2(flag)
flag = cmul_d22b5acf(flag)
flag = xor_2495a11e(flag)
flag = chadd_5488a6fe(flag)
flag = chsub_ad24fefb(flag)
flag = csub_2bce138a(flag)
flag = digsub_dbfc4977(flag)
flag = mul_18205495(flag)
flag = digsub_7d236bf8(flag)
flag = cmul_bc969278(flag)
flag = xor_76cd9a81(flag)
flag = shuffle_9a408c44(flag)
flag = sub_6b51b490(flag)
flag = sub_da5b779b(flag)
flag = sub_d625c555(flag)
flag = chunk_1d45076c(flag)
flag = chsub_7af0731b(flag)
flag = shuffle_3150238f(flag)
flag = add_9d214583(flag)
flag = cmul_8a7021fa(flag)
flag = chmul_e6742997(flag)
flag = add_e26173d3(flag)
flag = xor_214fe10e(flag)
flag = digsub_915491ea(flag)
flag = csub_db2c770b(flag)
flag = chadd_969cf400(flag)
flag = chxor_c43c6725(flag)
flag = add_03dc5f83(flag)
flag = sub_3cb32b59(flag)
flag = mul_0b75c488(flag)
flag = chmul_9cb342ae(flag)
flag = chadd_258b2420(flag)
flag = chxor_dbe47d55(flag)
flag = chsub_3e828f05(flag)
flag = chsub_9f73bc9e(flag)
flag = chunk_0f650cd2(flag)
flag = add_393870bc(flag)
flag = chadd_5544e38e(flag)
flag = cmul_423d2433(flag)
flag = xor_fa921805(flag)
flag = cmul_c112008e(flag)
flag = shuffle_c7e85def(flag)
flag = cmul_5e8f38d5(flag)
flag = xor_698d0c07(flag)
flag = chmul_ebd5a20e(flag)
flag = digsub_be47e356(flag)
flag = chsub_27dae3ae(flag)
flag = chxor_8264e501(flag)
flag = chxor_1649570d(flag)
flag = add_51b5d61d(flag)
flag = cadd_d222898d(flag)
flag = chmul_d5ba6298(flag)
flag = digsub_e1f5dc03(flag)
flag = mul_fc9252b1(flag)
flag = add_0cecddf7(flag)
flag = chxor_85ae54d2(flag)
flag = cmul_f7e015fa(flag)
flag = add_0572be2d(flag)
flag = xor_3bb0008c(flag)
flag = sub_d07a778e(flag)
flag = xor_3edbcd7c(flag)
flag = xor_fccb27f6(flag)
flag = chmul_6f2b8735(flag)
flag = digsub_e4832eb3(flag)
flag = chmul_b8a4da05(flag)
flag = cmul_738aef71(flag)
flag = add_393870bc(flag)
flag = csub_a60ad993(flag)
flag = chsub_5a5cbf95(flag)
flag = chadd_c23de33f(flag)
flag = csub_eb8a37eb(flag)
flag = chunk_dadea384(flag)
flag = chunk_97573788(flag)
flag = xor_a8652323(flag)
flag = sub_47cbdf28(flag)
flag = chmul_746a3788(flag)
flag = shuffle_41ece7da(flag)
flag = chsub_b090cf63(flag)
flag = chunk_a8579f80(flag)
flag = cadd_79d7fa85(flag)
flag = cxor_1c819fcf(flag)
flag = add_595625e1(flag)
flag = cmul_9ea3f862(flag)
flag = chunk_97573788(flag)
flag = sub_11293e74(flag)
flag = cadd_56728fa3(flag)
flag = chmul_0bc227c2(flag)
flag = chmul_1c0bdb7a(flag)
flag = cmul_3dfa51d9(flag)
flag = shuffle_b22f1c56(flag)
flag = xor_16c7c77d(flag)
flag = digsub_b4a68c58(flag)
flag = mul_993204a9(flag)
flag = digsub_d70c6f19(flag)
flag = digsub_afa62336(flag)
flag = cadd_f61d1530(flag)
flag = chsub_62a8f1cd(flag)
flag = digsub_94dd3136(flag)
flag = cxor_0e49988d(flag)
flag = mul_5067d66a(flag)
flag = shuffle_49c48148(flag)
flag = xor_890e78b1(flag)
flag = mul_c991ef9e(flag)
flag = cxor_df42e878(flag)
flag = cxor_42ec5686(flag)
flag = chsub_3121e9c6(flag)
flag = chxor_cc8c61bf(flag)
flag = mul_001d570f(flag)
flag = digsub_cd07c1c5(flag)
flag = digsub_5a1f6d2f(flag)
flag = cxor_938a50c5(flag)
flag = cmul_db003c24(flag)
flag = sub_b8c51fbd(flag)
flag = shuffle_4e8ad324(flag)
flag = cxor_e3dd1135(flag)
flag = add_06c4c375(flag)
flag = add_827d7100(flag)
flag = chxor_b8ec7b4f(flag)
flag = cadd_261a4a1d(flag)
flag = chunk_0f650cd2(flag)
flag = shuffle_28f1a858(flag)
flag = shuffle_b20aa4f9(flag)
flag = cadd_a6482f91(flag)
flag = sub_1719880f(flag)
flag = cadd_9ae3f2d8(flag)
flag = chunk_6df9f44d(flag)
flag = add_6e59afd0(flag)
flag = add_0cecddf7(flag)
flag = chxor_5cda58cc(flag)
flag = digsub_19f61f73(flag)
flag = cmul_15edb219(flag)
flag = chunk_95566664(flag)
flag = digsub_81358f03(flag)
flag = shuffle_922a7e0d(flag)
flag = cmul_2a502598(flag)
flag = chxor_eae131e0(flag)
flag = chxor_b09e96f6(flag)
flag = digsub_6b9010a5(flag)
flag = sub_7bf8c980(flag)
flag = add_ebcc13ce(flag)
flag = chxor_30705179(flag)
flag = shuffle_32641923(flag)
flag = add_e9f76a38(flag)
flag = mul_87965a17(flag)
flag = cmul_18dd5479(flag)
flag = csub_cf019266(flag)
flag = add_c93fcbda(flag)
flag = chunk_bf78a71f(flag)
flag = sub_91d3d73f(flag)
flag = shuffle_d348541e(flag)
flag = chsub_339c9633(flag)
flag = add_ed6c03df(flag)
flag = chadd_1a40fd7d(flag)
flag = mul_50110bad(flag)
flag = xor_ddf28b31(flag)
flag = cxor_94658244(flag)
flag = chadd_c28b3253(flag)
flag = chmul_c4924d51(flag)
flag = chmul_414bc877(flag)
flag = cmul_630424de(flag)
flag = sub_4efcb7e6(flag)
flag = mul_6d210a06(flag)
flag = chunk_1e635fb5(flag)
flag = chadd_ddff28b1(flag)
flag = add_6d8a2110(flag)
flag = cadd_65434b8c(flag)
flag = add_bdedbeea(flag)
flag = chunk_e006d845(flag)
flag = cxor_42ec5686(flag)
flag = sub_0ac2ba9f(flag)
flag = chxor_fc74f7f2(flag)
flag = chadd_771a5f93(flag)
flag = chsub_87204349(flag)
flag = mul_75e8ddbd(flag)
flag = xor_77377fa6(flag)
flag = chunk_e42e1b84(flag)
flag = chxor_cd5d1c4b(flag)
flag = csub_4895fb4d(flag)
flag = chadd_8ab3b2a8(flag)
flag = csub_61a277c4(flag)
flag = cadd_b38e11c1(flag)
flag = add_a85e7265(flag)
flag = mul_d63192f4(flag)
flag = csub_2c8eacf9(flag)
flag = digsub_81a9c939(flag)
flag = cadd_cab4819e(flag)
flag = cxor_29255d85(flag)
flag = mul_33103309(flag)
flag = csub_c128716f(flag)
flag = cadd_7838f4d9(flag)
flag = chadd_55b65d14(flag)
flag = chunk_f5342e5d(flag)
flag = mul_7fd5912a(flag)
flag = chunk_a431061a(flag)
flag = cmul_108a5ff2(flag)
flag = chxor_013d1031(flag)
flag = xor_ff7262d6(flag)
flag = chsub_4b31a145(flag)
flag = shuffle_c8f4c133(flag)
flag = chmul_c9980e5a(flag)
flag = cadd_b07f15df(flag)
flag = chadd_d7b62183(flag)
flag = chadd_d8ce38a5(flag)
flag = chsub_30f73b24(flag)
flag = chunk_8361daed(flag)
flag = xor_1a989c5f(flag)
flag = xor_9e9f7a8b(flag)
flag = add_837ef20b(flag)
flag = cadd_e86a7e16(flag)
flag = mul_16385c48(flag)
flag = chsub_8809f725(flag)
flag = mul_8cff30c9(flag)
flag = chunk_24c352a1(flag)
flag = chmul_0c946b47(flag)
flag = chsub_8fa33f3e(flag)
flag = cadd_91c03cb7(flag)
flag = chunk_a763fb97(flag)
flag = cadd_c170383d(flag)
flag = chadd_51cfbbb7(flag)
flag = cadd_3150b11b(flag)
flag = mul_6bdc88d2(flag)
flag = cxor_e1387672(flag)
flag = chadd_3b98f1b0(flag)
flag = chadd_28036696(flag)
flag = chunk_af869716(flag)
flag = cmul_2a502598(flag)
flag = shuffle_c71df508(flag)
flag = cadd_b39a5b0b(flag)
flag = xor_8ae01235(flag)
flag = digsub_172d24b0(flag)
flag = cxor_c0bd96a1(flag)
flag = chsub_52e6291c(flag)
flag = chunk_adb7a31f(flag)
flag = digsub_99f3c205(flag)
flag = digsub_e4832eb3(flag)
flag = xor_4e5c29b0(flag)
flag = cadd_65434b8c(flag)
flag = xor_4a69189b(flag)
flag = digsub_2a51613f(flag)
flag = sub_6bf5673d(flag)
flag = chmul_b3677069(flag)
flag = sub_7d90f9de(flag)
flag = chxor_616b9569(flag)
flag = chxor_14ca1407(flag)
flag = chmul_e513d3af(flag)
flag = chadd_6156d6db(flag)
flag = chadd_f2fd70f1(flag)
flag = digsub_f8ed932c(flag)
flag = cmul_57e3d5bf(flag)
flag = chsub_bae85472(flag)
flag = chsub_2792abe7(flag)
flag = chxor_ac024fc8(flag)
flag = chunk_adb7a31f(flag)
flag = cadd_ed8e4346(flag)
flag = xor_9fab62d4(flag)
flag = chadd_d9f375ba(flag)
flag = chunk_ab174f4a(flag)
flag = xor_82a4d513(flag)
flag = digsub_74f80d9b(flag)
flag = add_0f654473(flag)
flag = cadd_d957f629(flag)
flag = cmul_ac2fe6b4(flag)
flag = sub_88400353(flag)
flag = digsub_6afbfca8(flag)
flag = sub_e8045aa7(flag)
flag = digsub_e9fbb5e0(flag)
flag = shuffle_81df2959(flag)
flag = chxor_49e5796a(flag)
flag = cmul_77da69c4(flag)
flag = chadd_b97315dd(flag)
flag = xor_68464c0d(flag)
flag = digsub_8e7fd683(flag)
flag = chxor_a120d278(flag)
flag = csub_512edb93(flag)
flag = cxor_871a2d7f(flag)
flag = xor_fc88f2e7(flag)
flag = chadd_cf40e026(flag)
flag = chmul_c9980e5a(flag)
flag = shuffle_82fd1e74(flag)
flag = cxor_ef4e4e70(flag)
flag = sub_29f5a027(flag)
flag = sub_abe98fac(flag)
flag = chadd_226738ed(flag)
flag = chunk_e5683735(flag)
flag = add_565903f4(flag)
flag = cxor_5fa90da0(flag)
flag = csub_89d6db66(flag)
flag = xor_2a24945c(flag)
flag = chunk_e3f6d2ec(flag)
flag = chsub_79027896(flag)
flag = add_769c8b28(flag)
flag = chsub_f7d05960(flag)
flag = mul_6bdc88d2(flag)
flag = cmul_1c2bf9c2(flag)
flag = chmul_414bc877(flag)
flag = csub_180399b3(flag)
flag = digsub_a56c83c8(flag)
flag = chmul_d4a185e3(flag)
flag = cmul_f59de4d7(flag)
flag = cxor_ad95af8e(flag)
flag = chmul_0e5b89be(flag)
flag = csub_1ae697ba(flag)
flag = chsub_3bf8b0c8(flag)
flag = chunk_cb2fa615(flag)
flag = cmul_b6dff247(flag)
flag = add_d1d41f14(flag)
flag = cmul_bf27fc42(flag)
flag = shuffle_57fe470a(flag)
flag = mul_1926f102(flag)
flag = sub_1d06041f(flag)
flag = cxor_2e302e67(flag)
flag = chadd_abc266d5(flag)
flag = chsub_91553a2c(flag)
flag = chunk_8476d997(flag)
flag = cxor_e3ac0f88(flag)
flag = chunk_9532fc70(flag)
flag = chadd_9c4be3af(flag)
flag = cadd_991ec901(flag)
flag = chmul_9cb9b54c(flag)
flag = chsub_b335ae97(flag)
flag = csub_7ae589be(flag)
flag = sub_541963fb(flag)
flag = add_e3a56377(flag)
flag = chmul_d3cbaa99(flag)
flag = chadd_404cff4b(flag)
flag = chmul_eda95d12(flag)
flag = chmul_50a23c29(flag)
flag = chsub_9e3a2eb0(flag)
flag = mul_137ad3d1(flag)
flag = shuffle_0a4f92ab(flag)
flag = cxor_f01c9df2(flag)
flag = xor_f80064d0(flag)
flag = csub_9a19bbcf(flag)
flag = chsub_93324e19(flag)
flag = chxor_37bb6be2(flag)
flag = chmul_215a2fee(flag)
flag = cadd_159797e5(flag)
flag = cadd_44729e6e(flag)
flag = shuffle_fda70d35(flag)
flag = digsub_d70c6f19(flag)
flag = chmul_330af750(flag)
flag = cmul_ca478228(flag)
flag = chxor_599d5e3e(flag)
flag = shuffle_5b02919b(flag)
flag = cxor_dfcb824e(flag)
flag = mul_6ed04b93(flag)
flag = add_9009d319(flag)
flag = shuffle_ee0a30fd(flag)
flag = cxor_3ea0418e(flag)
flag = shuffle_8ed3abbd(flag)
flag = cxor_da56bd65(flag)
flag = shuffle_f380512c(flag)
flag = chxor_00dbbc36(flag)
flag = csub_ecd1b6d0(flag)
flag = sub_9c3c91b4(flag)
flag = add_ab46dc0e(flag)
flag = sub_2ec060e9(flag)
flag = add_6c75725b(flag)
flag = chmul_7cc3c4ab(flag)
flag = sub_fe1bac9b(flag)
flag = chxor_97c61f30(flag)
flag = shuffle_d635239a(flag)
flag = chsub_ba0df272(flag)
flag = chmul_e559b45c(flag)
flag = csub_5174b08f(flag)
flag = chsub_dbf9111e(flag)
flag = digsub_f9d31323(flag)
flag = chmul_06728846(flag)
flag = chmul_22d64a0f(flag)
flag = chadd_f2f53a63(flag)
flag = chsub_b705b02f(flag)
flag = chunk_530e625c(flag)
flag = sub_91d3d73f(flag)
flag = chmul_b3677069(flag)
flag = chxor_3bea6df8(flag)
flag = chmul_58875bd8(flag)
flag = chsub_4d0982ce(flag)
flag = chadd_e99579ed(flag)
flag = chmul_e0c73179(flag)
flag = xor_895658c8(flag)
flag = add_c1c20de3(flag)
flag = sub_3428aff7(flag)
flag = cmul_65983a34(flag)
flag = chsub_70e4436e(flag)
flag = mul_5486cc62(flag)
flag = add_4584979d(flag)
flag = sub_26a484b7(flag)
flag = csub_ed2f200a(flag)
flag = cxor_f9bee875(flag)
flag = cmul_d64253b9(flag)
flag = shuffle_efa32ed0(flag)
flag = csub_180399b3(flag)
flag = chadd_8231f9c2(flag)
flag = chunk_0a45d781(flag)
flag = chunk_d99ad65b(flag)
flag = cmul_63f9fdde(flag)
flag = chunk_85747b20(flag)
flag = xor_10794d34(flag)
flag = digsub_ddee790f(flag)
flag = cmul_02507e59(flag)
flag = shuffle_eeea5e4e(flag)
flag = sub_4b79348d(flag)
flag = chsub_ebadaefe(flag)
flag = csub_40fa37b4(flag)
flag = digsub_19f61f73(flag)
flag = cxor_c0bd96a1(flag)
flag = chsub_2d6c78f3(flag)
flag = cmul_86b4d215(flag)
flag = chmul_c2508e0f(flag)
flag = mul_49d2ca13(flag)
flag = csub_74a6e474(flag)
flag = mul_33103309(flag)
flag = cxor_ae2b4026(flag)
flag = mul_9e94e89a(flag)
flag = cmul_86b4d215(flag)
flag = chsub_fa709b53(flag)
flag = shuffle_fda70d35(flag)
flag = digsub_bcdd2125(flag)
flag = add_1f81f37b(flag)
flag = cmul_b01d887b(flag)
flag = xor_b5a69ced(flag)
flag = chsub_29874234(flag)
flag = cmul_c408d74b(flag)
flag = shuffle_899fbb68(flag)
flag = add_b1383cfb(flag)
flag = cxor_28d8fe91(flag)
flag = sub_44409df4(flag)
flag = chsub_f09042f0(flag)
flag = chunk_ba2558cf(flag)
flag = xor_fddd23ae(flag)
flag = cadd_3876a03b(flag)
flag = cmul_1b7b7fb7(flag)
flag = shuffle_0f715c90(flag)
flag = chunk_8880753c(flag)
flag = cxor_bac498f9(flag)
flag = cadd_188bf301(flag)
flag = cxor_ef4e4e70(flag)
flag = mul_589a2ea6(flag)
flag = chsub_d3796f81(flag)
flag = chxor_7c1ad68d(flag)
flag = cadd_0788aaad(flag)
flag = cxor_4e53f8be(flag)
flag = chmul_735407e2(flag)
flag = cadd_ce6a8f1f(flag)
flag = digsub_2945b343(flag)
flag = csub_edb15e4c(flag)
flag = xor_00e48dde(flag)
flag = chunk_dbc6d3a2(flag)
flag = digsub_e6768cff(flag)
flag = shuffle_2d9fffb5(flag)
flag = chadd_96a0ee76(flag)
flag = cadd_f9211e40(flag)
flag = shuffle_eeea5e4e(flag)
flag = add_51b5d61d(flag)
flag = cadd_b38e11c1(flag)
flag = csub_026b559f(flag)
flag = cmul_8705a015(flag)
flag = chxor_bbf3589a(flag)
flag = chmul_7cc3c4ab(flag)
flag = cadd_cab4819e(flag)
flag = chmul_1f5faa54(flag)
flag = shuffle_efa32ed0(flag)
flag = csub_8c5dcc87(flag)
flag = xor_a35575ce(flag)
flag = chadd_df001d38(flag)
flag = shuffle_d43c63b3(flag)
flag = cadd_dd57ed89(flag)
flag = chadd_8e15ee9b(flag)
flag = shuffle_76309fe2(flag)
flag = shuffle_022284b4(flag)
flag = cmul_dc2b00da(flag)
flag = csub_462e63d8(flag)
flag = cxor_69705ab6(flag)
flag = chunk_a8577417(flag)
flag = csub_8c481c30(flag)
flag = cxor_a56196fd(flag)
flag = xor_26dc7003(flag)
flag = chsub_e508cd4b(flag)
flag = chunk_1ba6912f(flag)
flag = sub_64547020(flag)
flag = cmul_1db73e1b(flag)
flag = cxor_7d6f0b67(flag)
flag = chadd_3940932e(flag)
flag = cmul_ea158364(flag)
flag = chxor_c05fc484(flag)
flag = cmul_3df83c6a(flag)
flag = digsub_1755eb85(flag)
flag = sub_ec18d730(flag)
flag = cmul_3bee8718(flag)
flag = chxor_c14e4305(flag)
flag = add_36fb4d7d(flag)
flag = chxor_56abb2e0(flag)
flag = chmul_7c4163e6(flag)
flag = add_331118ba(flag)
flag = chxor_daa5c35b(flag)
flag = mul_b3866976(flag)
flag = sub_8b45b630(flag)
flag = sub_609bbd1a(flag)
flag = add_16b704e9(flag)
flag = digsub_15140dd6(flag)
flag = cxor_e7839ec0(flag)
flag = xor_3583ad2a(flag)
flag = csub_ec729961(flag)
flag = chxor_43eeedf6(flag)
flag = chxor_a120d278(flag)
flag = chmul_eb007432(flag)
flag = digsub_1feeafe7(flag)
flag = mul_f7bcc313(flag)
flag = cxor_f0f82070(flag)
flag = sub_4b79348d(flag)
flag = sub_4e6d826d(flag)
flag = xor_ac535945(flag)
flag = shuffle_3b482bb3(flag)
flag = cmul_b61008be(flag)
flag = xor_6aa3c7e7(flag)
flag = cxor_c4236734(flag)
flag = add_df9616a0(flag)
flag = chxor_036cfe7a(flag)
flag = chmul_cfee488f(flag)
flag = add_333323b1(flag)
flag = cadd_66bcc5a2(flag)
flag = cxor_30674cf4(flag)
flag = sub_665d3f8a(flag)
flag = cmul_d77e3c24(flag)
flag = xor_78f0da60(flag)
flag = cmul_dc2b00da(flag)
flag = cmul_ba8b037d(flag)
flag = chadd_4b0b608a(flag)
flag = chunk_c8598499(flag)
flag = chadd_186dd996(flag)
flag = shuffle_efa32ed0(flag)
flag = chmul_14ccb396(flag)
flag = chadd_83a5c6be(flag)
flag = chunk_3fec31ed(flag)
flag = sub_8c5d52aa(flag)
flag = xor_6cc1a542(flag)
flag = shuffle_6fcd072c(flag)
flag = cmul_aa6e389f(flag)
flag = xor_7bdefd5e(flag)
flag = chadd_983dad8d(flag)
flag = chunk_406fc18b(flag)
flag = digsub_93474c70(flag)
flag = sub_6baa906d(flag)
flag = csub_f291b39b(flag)
flag = shuffle_efb3207c(flag)
flag = digsub_262ebaa4(flag)
flag = cmul_aa40ede5(flag)
flag = add_b071c8e9(flag)
flag = csub_512edb93(flag)
flag = digsub_0d0244fc(flag)
flag = xor_2bdb6650(flag)
flag = chmul_d95ce6fa(flag)
flag = xor_f2a99984(flag)
flag = mul_4a9471da(flag)
flag = csub_3d47b491(flag)
flag = chmul_16176275(flag)
flag = sub_5e831919(flag)
flag = csub_b5b948c9(flag)
flag = cadd_6ae07a4d(flag)
flag = mul_714f7f13(flag)
flag = chsub_9df05eee(flag)
flag = chadd_3a6ba43e(flag)
flag = chsub_97dfddf9(flag)
flag = cadd_b83d6dfa(flag)
flag = chadd_e3c33841(flag)
flag = add_7ea1ef19(flag)
flag = chxor_18fcc0f2(flag)
flag = mul_947580cb(flag)
flag = chunk_24c352a1(flag)
flag = mul_384fbf08(flag)
flag = chadd_83a5c6be(flag)
flag = chadd_7d40b8f2(flag)
flag = chadd_3efd2ae8(flag)
flag = chadd_226738ed(flag)
flag = cadd_22f01a9a(flag)
flag = cxor_dfcb824e(flag)
flag = chadd_fa13451e(flag)
flag = sub_adc67d90(flag)
flag = xor_23517ee7(flag)
flag = chunk_3c707853(flag)
flag = digsub_065e725d(flag)
flag = cxor_9af689b5(flag)
flag = chsub_d8e7f937(flag)
flag = chadd_43e1206d(flag)
flag = cadd_a5b24fcc(flag)
flag = add_a5b30fdf(flag)
flag = chsub_99c9e6ed(flag)
flag = cmul_5ef49e31(flag)
flag = sub_7a049de1(flag)
flag = cxor_4cfe1de0(flag)
flag = sub_58eb1409(flag)
flag = chxor_97c61f30(flag)
flag = cmul_4691495a(flag)
flag = csub_4a29a9b1(flag)
flag = xor_f80d29fb(flag)
flag = shuffle_b9aac0df(flag)
flag = mul_68b3556d(flag)
flag = chmul_32362a1d(flag)
flag = cadd_b1988d37(flag)
flag = chunk_42bc522c(flag)
flag = digsub_9dcf4316(flag)
flag = cadd_12c3036e(flag)
flag = add_31efa65a(flag)
flag = digsub_94dd3136(flag)
flag = add_a391835b(flag)
flag = chadd_53eb2419(flag)
flag = chxor_49e5796a(flag)
flag = add_decb86a7(flag)
flag = digsub_5c02cf5d(flag)
flag = chadd_c427ca04(flag)
flag = cadd_ea861103(flag)
flag = cmul_3aff1e18(flag)
flag = chunk_53760c11(flag)
flag = mul_16385c48(flag)
flag = chunk_ba2558cf(flag)
flag = cxor_9bda6371(flag)
flag = digsub_8e44fdbd(flag)
flag = chsub_27343013(flag)
flag = cmul_cd1aad88(flag)
flag = csub_7d205427(flag)
flag = xor_4644c8d4(flag)
flag = sub_53b0de62(flag)
flag = cmul_45d4d761(flag)
flag = add_7cb7d116(flag)
flag = shuffle_7b8c9089(flag)
flag = add_30966eb1(flag)
flag = cmul_cf6813e9(flag)
flag = mul_389dee3d(flag)
flag = chadd_2f4760f5(flag)
flag = digsub_be40e0aa(flag)
flag = chmul_65689d19(flag)
flag = shuffle_def3ecab(flag)
flag = cmul_303b4073(flag)
flag = digsub_c4e4d709(flag)
flag = digsub_1d28a867(flag)
flag = cxor_ff935c5e(flag)
flag = mul_86c064b1(flag)
flag = sub_0216c0df(flag)
flag = shuffle_9d73add2(flag)
flag = xor_19983c03(flag)
flag = sub_6b51b490(flag)
flag = chxor_e93460f8(flag)
flag = xor_0723c89e(flag)
flag = xor_03c6a015(flag)
flag = xor_efa5ece1(flag)
flag = chxor_0449a472(flag)
flag = digsub_1f6e32d7(flag)
flag = chxor_9426335a(flag)
flag = chmul_db0dca9a(flag)
flag = cadd_09c2f719(flag)
flag = xor_b4ec6205(flag)
flag = chmul_bc251ec0(flag)
flag = add_1e3629e5(flag)
flag = add_11c4ac68(flag)
flag = digsub_bcdd2125(flag)
flag = cadd_81a69b3f(flag)
flag = chmul_b3677069(flag)
flag = cadd_d07896bc(flag)
flag = cmul_adf3adfd(flag)
flag = mul_b74dfccf(flag)
flag = cadd_428d6ecc(flag)
flag = shuffle_3ef98f81(flag)
flag = chmul_d62489f9(flag)
flag = xor_702b624c(flag)
flag = shuffle_5f949cd5(flag)
flag = sub_c3134c11(flag)
flag = chxor_d94a9bdc(flag)
flag = cmul_38d68804(flag)
flag = sub_a2adabad(flag)
flag = sub_ec18d730(flag)
flag = xor_13c063a7(flag)
flag = sub_3c288b1c(flag)
flag = add_867182be(flag)
flag = chsub_ee1754a3(flag)
flag = chunk_69dd3db9(flag)
flag = csub_81ef0c4c(flag)
flag = cmul_38769a31(flag)
flag = add_dcb94ddc(flag)
flag = xor_9d8c4a8c(flag)
flag = csub_a5842efc(flag)
flag = add_da6dae2b(flag)
flag = sub_47698898(flag)
flag = shuffle_fda70d35(flag)
flag = cmul_2eb8bc9e(flag)
flag = chxor_3c678c19(flag)
flag = chadd_fc03260a(flag)
flag = xor_5c21cfc7(flag)
flag = cadd_76aab783(flag)
flag = cmul_e577eda6(flag)
flag = chmul_0bc227c2(flag)
flag = csub_220202ad(flag)
flag = shuffle_719cf56c(flag)
flag = chmul_26940e3b(flag)
flag = cxor_5e014b04(flag)
flag = digsub_24f7cbd7(flag)
flag = chmul_ff76516d(flag)
flag = chmul_5add5ae2(flag)
flag = chunk_0b804480(flag)
flag = mul_16385c48(flag)
flag = sub_5525246a(flag)
flag = mul_fc6ac804(flag)
flag = chxor_87ec1ab5(flag)
flag = chadd_151f0f0e(flag)
flag = chxor_e024e3e0(flag)
flag = cmul_82b0086b(flag)
flag = shuffle_40f99305(flag)
flag = chunk_3c707853(flag)
flag = shuffle_f4ee3eb0(flag)
flag = chxor_49e5796a(flag)
flag = mul_fbf76069(flag)
flag = chadd_028f229e(flag)
flag = add_16b704e9(flag)
flag = csub_7f9b642d(flag)
flag = chmul_7cbf2205(flag)
flag = shuffle_4b183fad(flag)
flag = sub_61538669(flag)
flag = digsub_b8659438(flag)
flag = chxor_c8d60001(flag)
flag = chmul_5c39207d(flag)
flag = shuffle_a6432e15(flag)
flag = chmul_57848b7a(flag)
flag = chunk_66d22063(flag)
flag = cadd_774989e3(flag)
flag = chxor_b1f5dc0d(flag)
flag = cxor_9a341cfa(flag)
flag = add_bc7653a1(flag)
flag = digsub_038640b7(flag)
flag = add_48f0c9fc(flag)
flag = mul_bf01fdb9(flag)
flag = mul_137ad3d1(flag)
flag = cxor_9eab5098(flag)
flag = chadd_93e431eb(flag)
flag = chmul_7c4163e6(flag)
flag = shuffle_64a08693(flag)
flag = cxor_c6e16ecc(flag)
flag = add_bc7653a1(flag)
flag = chsub_b591ca37(flag)
flag = cxor_060ce4e2(flag)
flag = chmul_584b1b88(flag)
flag = add_e08d6566(flag)
flag = add_fb172b98(flag)
flag = cmul_adf3adfd(flag)
flag = cadd_b8669446(flag)
flag = mul_a0ace443(flag)
flag = csub_965ea16b(flag)
flag = xor_840940ad(flag)
flag = csub_fc0bc142(flag)
flag = xor_3b3fc8a0(flag)
flag = chadd_cc7b7e1e(flag)
flag = add_28d6777c(flag)
flag = cadd_1aff9833(flag)
flag = csub_1f106834(flag)
flag = mul_37e82792(flag)
flag = chmul_f462de4c(flag)
flag = cxor_207ceb20(flag)
flag = chsub_167fa647(flag)
flag = chmul_326aefee(flag)
flag = shuffle_5cd09bb7(flag)
flag = cxor_060a98db(flag)
flag = cmul_dc6ecbe6(flag)
flag = chadd_bbfef485(flag)
flag = cxor_48ff1c3c(flag)
flag = cmul_4e66e309(flag)
flag = chsub_c5b0dbf8(flag)
flag = csub_9678c8c9(flag)
flag = chxor_ca9732e1(flag)
flag = chmul_9455da11(flag)
flag = chunk_225b51ad(flag)
flag = chsub_37756695(flag)
flag = csub_69098245(flag)
flag = chunk_b78988b6(flag)
flag = mul_ed586e66(flag)
flag = digsub_1b9caedc(flag)
flag = chmul_57848b7a(flag)
flag = chsub_4ebc0819(flag)
flag = chadd_ee551422(flag)
flag = chunk_518ff916(flag)
flag = chunk_d88231fa(flag)
flag = xor_4208a184(flag)
flag = sub_65030a05(flag)
flag = sub_d625c555(flag)
flag = shuffle_d70b85e8(flag)
flag = digsub_6899cdac(flag)
flag = cmul_76043ee3(flag)
flag = mul_3a6b9086(flag)
flag = digsub_46ad768c(flag)
flag = shuffle_63f494ea(flag)
flag = chxor_85f13098(flag)
flag = chunk_518ff916(flag)
flag = cadd_509c46a1(flag)
flag = sub_297255e0(flag)
flag = cadd_1bbdcd45(flag)
flag = mul_0cb6e2cc(flag)
flag = sub_b83b0b5a(flag)
flag = digsub_ac841ac3(flag)
flag = cxor_4e53f8be(flag)
flag = chmul_160cacb0(flag)
flag = cadd_a31d859b(flag)
flag = csub_965ea16b(flag)
flag = chsub_f850c36b(flag)
flag = xor_b8937290(flag)
flag = digsub_61dd20a0(flag)
flag = cadd_991ec901(flag)
flag = mul_0b942967(flag)
flag = digsub_907a9a8a(flag)
flag = cmul_22a48cb5(flag)
flag = xor_bbeda458(flag)
flag = cmul_1ebf8c3e(flag)
flag = chadd_2f4760f5(flag)
flag = shuffle_3d5811d2(flag)
flag = cxor_31be8398(flag)
flag = chunk_6f47d8f4(flag)
flag = xor_94f0d244(flag)
flag = add_b0406f7d(flag)
flag = chmul_826efe63(flag)
flag = chadd_4d98bf27(flag)
flag = xor_1c0c670c(flag)
flag = csub_f765621d(flag)
flag = chsub_082be74e(flag)
flag = sub_08dcb465(flag)
flag = shuffle_2ad93819(flag)
flag = cadd_36d81dd6(flag)
flag = digsub_f74d6e2c(flag)
flag = sub_4e6d826d(flag)
flag = cadd_f4a3a91b(flag)
flag = chunk_a8577417(flag)
flag = cmul_ea9160c7(flag)
flag = csub_35e65bc6(flag)
flag = cxor_9a4356f0(flag)
flag = chxor_947d449e(flag)
flag = shuffle_9d73add2(flag)
flag = chunk_19abbb44(flag)
flag = sub_8346a4e8(flag)
flag = add_c9854582(flag)
flag = csub_8cff1d96(flag)
flag = csub_efe13119(flag)
flag = chunk_29281be2(flag)
flag = chunk_e808502e(flag)
flag = chadd_c23de33f(flag)
flag = mul_8502f399(flag)
flag = cadd_5df8c3da(flag)
flag = add_9d214583(flag)
flag = cmul_5f59af38(flag)
flag = csub_b5b948c9(flag)
flag = mul_54b3dab3(flag)
flag = chmul_18bbd248(flag)
flag = chunk_bdaa57c3(flag)
flag = shuffle_5ad024ad(flag)
flag = shuffle_88823dcd(flag)
flag = shuffle_49d97f75(flag)
flag = chmul_bc8c721f(flag)
flag = digsub_3ff40549(flag)
flag = chadd_36148017(flag)
flag = chxor_bcf0771e(flag)
flag = chadd_404cff4b(flag)
flag = cmul_c4987507(flag)
flag = chxor_cf758070(flag)
flag = shuffle_dc92e6b1(flag)
flag = xor_e32cc6e3(flag)
flag = chmul_0e5b89be(flag)
flag = cmul_8d626e12(flag)
flag = shuffle_9b38f08f(flag)
flag = chmul_c2508e0f(flag)
flag = chxor_7fed6271(flag)
flag = add_7ea1ef19(flag)
flag = mul_82f61bf9(flag)
flag = mul_452d9445(flag)
flag = cadd_a39df2bc(flag)
flag = chxor_00408453(flag)
flag = xor_b75a23b1(flag)
flag = mul_49cd764a(flag)
flag = add_7aa57e32(flag)
flag = shuffle_55c1c340(flag)
flag = sub_c126f74d(flag)
flag = shuffle_4e8ad324(flag)
flag = digsub_8df7fbd0(flag)
flag = cmul_1b7b7fb7(flag)
flag = mul_2f89e56a(flag)
flag = sub_77f3b344(flag)
flag = chmul_e406aa1a(flag)
flag = cxor_65e0c2b5(flag)
flag = cadd_8c4577cf(flag)
flag = xor_860fd005(flag)
flag = cmul_be83cfa8(flag)
flag = chmul_398837e8(flag)
flag = chxor_72c80534(flag)
flag = chadd_f2f53a63(flag)
flag = csub_088507c1(flag)
flag = sub_f1819d8e(flag)
flag = shuffle_3cf7a793(flag)
flag = cmul_546b7971(flag)
flag = cadd_80971c79(flag)
flag = add_7ea1ef19(flag)
flag = xor_4c2f2b2e(flag)
flag = cadd_bf38d005(flag)
flag = cmul_9f9f2324(flag)
flag = sub_5e831919(flag)
flag = cadd_0fb9e0bd(flag)
flag = cxor_f87a3a8a(flag)
flag = mul_70d397f8(flag)
flag = csub_9033c843(flag)
flag = cadd_03a33025(flag)
flag = chadd_977a0637(flag)
flag = chmul_b5dab014(flag)
flag = chmul_5fbe910e(flag)
flag = sub_2a18cec8(flag)
flag = xor_a6cea8c8(flag)
flag = digsub_efd7a1ee(flag)
flag = sub_51e1902d(flag)
flag = cadd_5352b247(flag)
flag = chsub_da5ea1df(flag)
flag = xor_19d4481b(flag)
flag = sub_90d65932(flag)
flag = cmul_0b6d9f9a(flag)
flag = chsub_b543d1d6(flag)
flag = chsub_18094e03(flag)
flag = xor_cb183615(flag)
flag = cmul_38d68804(flag)
flag = cadd_648dbdbd(flag)
flag = cadd_bf48a745(flag)
flag = csub_ea9d41b8(flag)
flag = sub_e1d8193c(flag)
flag = cxor_aaa07a69(flag)
flag = digsub_bcd14776(flag)
flag = chunk_9b2dc824(flag)
flag = sub_7ca185a5(flag)
flag = shuffle_8ab6bb33(flag)
flag = chxor_cc5079e5(flag)
flag = mul_bb31d66d(flag)
flag = cmul_7e84fb88(flag)
flag = shuffle_dd75cb23(flag)
flag = cmul_1f88fc08(flag)
flag = add_6056a4c7(flag)
flag = chsub_62b4c10c(flag)
flag = cmul_70fa9f12(flag)
flag = cadd_eab5dc9b(flag)
flag = cmul_d22b5acf(flag)
flag = cxor_b342528a(flag)
flag = chmul_aa4f6daf(flag)
flag = xor_fddd23ae(flag)
flag = xor_22aa0e90(flag)
flag = cadd_ad85576d(flag)
flag = chmul_a156d55d(flag)
flag = mul_fcc77ce6(flag)
flag = cxor_97867026(flag)
flag = mul_75e8ddbd(flag)
flag = cmul_89ce7854(flag)
flag = chsub_c10f331f(flag)
flag = digsub_9dcf4316(flag)
flag = chunk_9f8fce5d(flag)
flag = cadd_12c3036e(flag)
flag = chunk_5fa20e0f(flag)
flag = chunk_25c9a817(flag)
flag = chmul_96b3e78c(flag)
flag = add_c871a926(flag)
flag = chxor_e23f2cfd(flag)
flag = xor_96b234b4(flag)
flag = chadd_7bc2adef(flag)
flag = chxor_ffe3793d(flag)
flag = cmul_7ad45fd6(flag)
flag = cmul_7ca572e2(flag)
flag = shuffle_e666492b(flag)
flag = add_6c75725b(flag)
flag = chunk_22f90678(flag)
flag = cmul_8705a015(flag)
flag = sub_734f1f1d(flag)
flag = chadd_f2fd70f1(flag)
flag = cmul_9020ca8c(flag)
flag = xor_41405d72(flag)
flag = add_c2f77d7b(flag)
flag = chmul_a1f9f8ca(flag)
flag = chsub_92f27399(flag)
flag = csub_6e812142(flag)
flag = chxor_c14e4305(flag)
flag = chsub_d8b43803(flag)
flag = digsub_d085a426(flag)
flag = csub_ea9d41b8(flag)
flag = digsub_19451cfd(flag)
flag = chadd_3016fa48(flag)
flag = chunk_0e1a47db(flag)
flag = chsub_c1db5393(flag)
flag = chmul_708c05e7(flag)
flag = shuffle_d348541e(flag)
flag = digsub_7cd65058(flag)
flag = chadd_c2522c75(flag)
flag = chsub_e30c03a4(flag)
flag = chmul_f03e312d(flag)
flag = cxor_3addab66(flag)
flag = cadd_de624ff2(flag)
flag = cadd_a6482f91(flag)
flag = chadd_2eddab35(flag)
flag = shuffle_0d526f11(flag)
flag = add_c3181859(flag)
flag = chxor_87ec1ab5(flag)
flag = chsub_b60cec96(flag)
flag = xor_8dc6fc89(flag)
flag = digsub_b6993817(flag)
flag = add_664be5fd(flag)
flag = shuffle_63b7a61d(flag)
flag = chsub_75cdd33b(flag)
flag = csub_30ac2fb9(flag)
flag = chunk_0f650cd2(flag)
flag = digsub_f7a754a1(flag)
flag = add_1dc9ccaa(flag)
flag = chmul_d9fd0dcd(flag)
flag = chmul_160cacb0(flag)
flag = chsub_f57de7cd(flag)
flag = sub_9514a3ce(flag)
flag = chxor_7bd8fe19(flag)
flag = xor_0cecea66(flag)
flag = chadd_ec0fef0e(flag)
flag = chmul_06d41645(flag)
flag = xor_7465fff5(flag)
flag = chmul_5af32334(flag)
flag = chsub_c1db5393(flag)
flag = cmul_4f99fe69(flag)
flag = xor_5a1c8280(flag)
flag = cmul_bf506846(flag)
flag = cmul_8ce7a691(flag)
flag = chunk_a9bb69a3(flag)
flag = chadd_10d426ca(flag)
flag = cadd_d0ad75bc(flag)
flag = xor_2ec3c23c(flag)
flag = mul_8155b14e(flag)
flag = digsub_ef3c36c5(flag)
flag = shuffle_2fffd50a(flag)
flag = chmul_1bf400c7(flag)
flag = chsub_c10f331f(flag)
flag = cmul_19d02797(flag)
flag = xor_68464c0d(flag)
flag = chsub_c78a57d0(flag)
flag = sub_44409df4(flag)
flag = digsub_7d236bf8(flag)
flag = csub_1082bb6a(flag)
flag = mul_ce14d872(flag)
flag = cxor_e86ea0c2(flag)
flag = cxor_f4744f0e(flag)
flag = chadd_0ef59fd4(flag)
flag = add_784c3bff(flag)
flag = chunk_5e4cee28(flag)
flag = cadd_2dcf1992(flag)
flag = digsub_4c6a11c2(flag)
flag = chxor_f5fbcae0(flag)
flag = cadd_5352b247(flag)
flag = chunk_cd87c4de(flag)
flag = chmul_7cc3c4ab(flag)
flag = xor_10552f50(flag)
flag = chmul_ab9cdb92(flag)
flag = add_204a88d5(flag)
flag = xor_381364cd(flag)
flag = chunk_6df9f44d(flag)
flag = shuffle_63f494ea(flag)
flag = chunk_dadea384(flag)
flag = chmul_68e4c6ff(flag)
flag = digsub_1209d475(flag)
flag = xor_df1ffac5(flag)
flag = chsub_a2fdcc3b(flag)
flag = cmul_38769a31(flag)
flag = csub_4e221287(flag)
flag = chmul_d43d0316(flag)
flag = csub_d6e694b3(flag)
flag = mul_9ed02e6c(flag)
flag = shuffle_d69d2c9b(flag)
flag = chadd_1475aaba(flag)
flag = cmul_65983a34(flag)
flag = cadd_7016b7d0(flag)
flag = chmul_ecae31b8(flag)
flag = cmul_13e6bde9(flag)
flag = chsub_4d0660a5(flag)
flag = chmul_8ef21d96(flag)
flag = digsub_e60d693c(flag)
flag = chadd_6a1bd216(flag)
flag = chxor_f6c4d9ae(flag)
flag = digsub_5a1f6d2f(flag)
flag = shuffle_3ef98f81(flag)
flag = cxor_31cd7c00(flag)
flag = chxor_da644b5f(flag)
flag = cadd_0a5ff345(flag)
flag = chmul_f3f19079(flag)
flag = chunk_0a45d781(flag)
flag = xor_1a989c5f(flag)
flag = shuffle_0bc785b3(flag)
flag = shuffle_c5e07151(flag)
flag = chsub_1b8086f6(flag)
flag = chadd_323e5325(flag)
flag = chsub_4c5385aa(flag)
flag = cadd_6d7e714e(flag)
flag = digsub_c71698e9(flag)
flag = chunk_6f47d8f4(flag)
flag = chsub_b9c56acf(flag)
flag = chxor_56c9e723(flag)
flag = mul_652ee2e0(flag)
flag = chunk_1fa032d8(flag)
flag = csub_1bf63629(flag)
flag = xor_0ade2d1f(flag)
flag = cadd_603af25d(flag)
flag = chunk_9b5e7e5c(flag)
flag = add_7ea1ef19(flag)
flag = cadd_f4a3a91b(flag)
flag = csub_bdd64a1d(flag)
flag = chmul_e62c2028(flag)
flag = cmul_19d02797(flag)
flag = digsub_288ef9ea(flag)
flag = cxor_52a04787(flag)
flag = cmul_45c479ca(flag)
flag = digsub_d70c6f19(flag)
flag = cadd_02aec3ae(flag)
flag = cxor_2e302e67(flag)
flag = chxor_2e7e40ef(flag)
flag = chxor_4909f0be(flag)
flag = add_6e59afd0(flag)
flag = cmul_2971f624(flag)
flag = cxor_060ce4e2(flag)
flag = chunk_28475841(flag)
flag = digsub_f0bd3d90(flag)
flag = cmul_0c68dd02(flag)
flag = digsub_b8269215(flag)
flag = cadd_b38e11c1(flag)
flag = csub_7d205427(flag)
flag = add_f4113996(flag)
flag = cadd_f79f3974(flag)
flag = shuffle_7b8c9089(flag)
flag = xor_68464c0d(flag)
flag = xor_2ecafb68(flag)
flag = shuffle_ffc10c41(flag)
flag = chxor_b041b00c(flag)
flag = sub_8c476a01(flag)
flag = cxor_ae138bf7(flag)
flag = chsub_b942a4e6(flag)
flag = chxor_0f3c245c(flag)
flag = chadd_fc7a65ec(flag)
flag = csub_89d6db66(flag)
flag = sub_00bb1bb8(flag)
flag = shuffle_de9df0cf(flag)
flag = cadd_d279898b(flag)
flag = mul_228941c9(flag)
flag = chsub_9df05eee(flag)
flag = sub_4b79348d(flag)
flag = csub_fd81f025(flag)
flag = chsub_64d91494(flag)
flag = xor_bbeda458(flag)
flag = chadd_ebbb5dc5(flag)
flag = chxor_bcf0771e(flag)
flag = sub_0b5acfeb(flag)
flag = sub_91a9b671(flag)
flag = cadd_4f92ed7a(flag)
flag = sub_1866fa1c(flag)
flag = digsub_fcc47cc3(flag)
flag = chadd_baaab600(flag)
flag = cmul_85b39864(flag)
flag = cadd_e7cd385e(flag)
flag = xor_097a8a70(flag)
flag = cadd_d07896bc(flag)
flag = sub_a62e014f(flag)
flag = cmul_db792b73(flag)
flag = chunk_c828ed7d(flag)
flag = csub_40fa37b4(flag)
flag = shuffle_29b39d8e(flag)
flag = chsub_83dc3951(flag)
flag = add_48a6be62(flag)
flag = chunk_ab174f4a(flag)
flag = cxor_7f32a16a(flag)
flag = shuffle_e14d57f5(flag)
flag = chunk_9d77353c(flag)
flag = chadd_404cff4b(flag)
flag = xor_1c0c670c(flag)
flag = cmul_b57f5cfc(flag)
flag = chxor_9eee4faf(flag)
flag = sub_d45b504c(flag)
flag = sub_5a358ec6(flag)
flag = mul_f41b15dd(flag)
flag = sub_d67326ec(flag)
flag = add_882b6a0b(flag)
flag = chsub_4c009b94(flag)
flag = xor_b4ec6205(flag)
flag = chsub_79027896(flag)
flag = csub_2448d6e4(flag)
flag = chadd_f137e21d(flag)
flag = mul_1b990e40(flag)
flag = shuffle_16a08001(flag)
flag = mul_833e4a11(flag)
flag = csub_74a6e474(flag)
flag = cmul_dd8d739c(flag)
flag = cadd_188bf301(flag)
flag = mul_51ffc146(flag)
flag = chsub_3d7d2e18(flag)
flag = mul_9ed02e6c(flag)
flag = chadd_2699a0a4(flag)
flag = cxor_ed3b1b28(flag)
flag = chmul_fa12100c(flag)
flag = csub_efe13119(flag)
flag = chmul_ab54c89e(flag)
flag = chunk_4d08c9d5(flag)
flag = chmul_47e5352e(flag)
flag = cmul_cd2eddf4(flag)
flag = chunk_4423d984(flag)
flag = mul_29392dc2(flag)
flag = shuffle_28099eb5(flag)
flag = chunk_987d4b79(flag)
flag = chunk_ec01f5f0(flag)
flag = chsub_cbfe2a72(flag)
flag = chmul_ab23c18c(flag)
flag = chmul_5dac5c0c(flag)
flag = add_87dad6e0(flag)
flag = cmul_1c2bf9c2(flag)
flag = cxor_c9ef0e8c(flag)
flag = chxor_187da4ac(flag)
flag = chxor_6371b750(flag)
flag = chxor_cc8c61bf(flag)
flag = chxor_c05fc484(flag)
flag = chadd_eacac1c3(flag)
flag = add_e07c15bd(flag)
flag = xor_27199205(flag)
flag = shuffle_7ccfcf66(flag)
flag = shuffle_e4527971(flag)
flag = add_6e59afd0(flag)
flag = shuffle_4e8ad324(flag)
flag = cmul_94531f44(flag)
flag = mul_a2581ad1(flag)
flag = digsub_0c60c240(flag)
flag = chsub_20dd3740(flag)
flag = chsub_0642b6ad(flag)
flag = chmul_7ce961bc(flag)
flag = chxor_dbe47d55(flag)
flag = shuffle_2de78ecc(flag)
flag = chsub_d228accf(flag)
flag = cadd_a6482f91(flag)
flag = mul_f5f13d24(flag)
flag = digsub_c686d6d7(flag)
flag = cadd_9406ad37(flag)
flag = chmul_3d6abe7c(flag)
flag = mul_e020bc90(flag)
flag = csub_512edb93(flag)
flag = csub_3d9f618d(flag)
flag = shuffle_41ece7da(flag)
flag = cxor_26057d46(flag)
flag = chadd_76b3ac4f(flag)
flag = digsub_34bac6be(flag)
flag = xor_f98f4d97(flag)
flag = chsub_c5b0dbf8(flag)
flag = add_44200607(flag)
flag = csub_ad5db692(flag)
flag = chsub_71c61f9b(flag)
flag = sub_0cb0697d(flag)
flag = cadd_51596bc7(flag)
flag = sub_e0ca897d(flag)
flag = chsub_258a5c14(flag)
flag = chxor_7bd8fe19(flag)
flag = chadd_43e1206d(flag)
flag = chxor_587ae605(flag)
flag = chsub_fb961764(flag)
flag = cmul_bb576c8f(flag)
flag = add_9b544b2a(flag)
flag = xor_19d4481b(flag)
flag = chunk_c5398c39(flag)
flag = chadd_1475aaba(flag)
flag = mul_92b1b71e(flag)
flag = cmul_f98bab5d(flag)
flag = cxor_86921258(flag)
flag = chunk_97e5e867(flag)
flag = shuffle_d9cf5546(flag)
flag = xor_03c6a015(flag)
flag = sub_f95a3649(flag)
flag = mul_a54dfca0(flag)
flag = chadd_5d64f99d(flag)
flag = cxor_8549d8eb(flag)
flag = cxor_86921258(flag)
flag = xor_a35575ce(flag)
flag = chsub_8396a9b9(flag)
flag = digsub_5e8b7a8a(flag)
flag = mul_987e03f2(flag)
flag = cxor_7bed28da(flag)
flag = digsub_981b52ce(flag)
flag = cmul_789804bf(flag)
flag = chsub_d866d58b(flag)
flag = chmul_7cfdd3dc(flag)
flag = chxor_b1f5dc0d(flag)
flag = cxor_71fd1f39(flag)
flag = mul_5c575cdb(flag)
flag = sub_7f903ea3(flag)
flag = chmul_20654021(flag)
flag = chunk_db078de2(flag)
flag = shuffle_2a87a3a3(flag)
flag = digsub_81358f03(flag)
flag = chunk_aeecc76a(flag)
flag = csub_c3302d5b(flag)
flag = cmul_cabb8b44(flag)
flag = cmul_a00c082c(flag)
flag = mul_54bc5eb1(flag)
flag = shuffle_36c9353b(flag)
flag = chadd_967b4961(flag)
flag = csub_22d4400c(flag)
flag = chadd_226738ed(flag)
flag = digsub_f8bfc612(flag)
flag = cxor_2aa22b89(flag)
flag = chunk_b3c680b6(flag)
flag = chmul_38133c10(flag)
flag = chunk_c828ed7d(flag)
flag = add_5f5c1e45(flag)
flag = shuffle_14e44222(flag)
flag = digsub_a5f0e042(flag)
flag = cxor_18c1314e(flag)
flag = sub_7d90f9de(flag)
flag = chunk_31411086(flag)
flag = csub_89d6db66(flag)
flag = xor_96b234b4(flag)
flag = digsub_e1f5dc03(flag)
flag = sub_8476e2a1(flag)
flag = chmul_f5416998(flag)
flag = sub_361737a7(flag)
flag = chmul_2f893b62(flag)
flag = sub_e1d8193c(flag)
flag = chadd_a331e2c1(flag)
flag = shuffle_0ca300ee(flag)
flag = chxor_a67420fd(flag)
flag = sub_fe1bac9b(flag)
flag = sub_a148160b(flag)
flag = mul_84ac318e(flag)
flag = digsub_c71ff0e5(flag)
flag = add_9e4296de(flag)
flag = csub_ed2f200a(flag)
flag = sub_0c6430ff(flag)
flag = chmul_0e5b89be(flag)
flag = add_e3a56377(flag)
flag = xor_e2704680(flag)
flag = chsub_74cf05a6(flag)
flag = chadd_620d941e(flag)
flag = chmul_eda95d12(flag)
flag = cmul_a50583d3(flag)
flag = chunk_f32c7c2f(flag)
flag = add_74483928(flag)
flag = chadd_8fc702a9(flag)
flag = cmul_829e8d09(flag)
flag = chunk_59cbae4c(flag)
flag = chunk_6eea8007(flag)
flag = mul_a43ce0da(flag)
flag = shuffle_16d074d1(flag)
flag = chmul_49e5e1c7(flag)
flag = digsub_2b3a8dfd(flag)
flag = digsub_fcc47cc3(flag)
flag = shuffle_5ea1f654(flag)
flag = xor_4e5c29b0(flag)
flag = chsub_29874234(flag)
flag = xor_9fab62d4(flag)
flag = chxor_49c8f56a(flag)
flag = cxor_98058884(flag)
flag = chsub_1c4c548c(flag)
flag = xor_ba1d287c(flag)
flag = digsub_0410b672(flag)
flag = cadd_c0d41733(flag)
flag = shuffle_78cd475f(flag)
flag = cmul_e55c9291(flag)
flag = add_ef37b006(flag)
flag = chxor_00408453(flag)
flag = cmul_cf6813e9(flag)
flag = chmul_49efe464(flag)
flag = chadd_f137e21d(flag)
flag = chadd_87bfe060(flag)
flag = xor_8833c00c(flag)
flag = chsub_e0a5b7b9(flag)
flag = chsub_15fcbd3c(flag)
flag = chmul_f3f19079(flag)
flag = xor_ccce8b68(flag)
flag = chsub_8fa33f3e(flag)
flag = xor_5af6d272(flag)
flag = chadd_163fc505(flag)
flag = csub_7ae589be(flag)
flag = cxor_e86ea0c2(flag)
flag = xor_6495a383(flag)
flag = add_4db6bc88(flag)
flag = cadd_6bde1e47(flag)
flag = cmul_ba8b037d(flag)
flag = chsub_dbb4ae01(flag)
flag = sub_023318b3(flag)
flag = sub_7d90f9de(flag)
flag = add_b0ac8236(flag)
flag = chadd_db3363a7(flag)
flag = chsub_f97f894e(flag)
flag = cmul_02507e59(flag)
flag = chadd_60898084(flag)
flag = shuffle_16a08001(flag)
flag = cmul_c36f1e1c(flag)
flag = csub_9bf22fee(flag)
flag = add_7b7466c0(flag)
flag = chxor_ffe97ebb(flag)
flag = xor_ced10726(flag)
flag = shuffle_d635239a(flag)
flag = chmul_37406cbe(flag)
flag = chsub_082be74e(flag)
flag = csub_5e8b3577(flag)
flag = cadd_509c46a1(flag)
flag = chadd_d7b62183(flag)
flag = cmul_23a5f304(flag)
flag = chxor_72c80534(flag)
flag = cxor_3b62f0a0(flag)
flag = cmul_10dcbe35(flag)
flag = sub_541963fb(flag)
flag = sub_47698898(flag)
flag = digsub_269bf7d5(flag)
flag = xor_0f3a6446(flag)
flag = csub_395783d4(flag)
flag = chsub_6ee60616(flag)
flag = chsub_b60cec96(flag)
flag = mul_62cf6aa4(flag)
flag = chsub_0063bc32(flag)
flag = csub_ad5db692(flag)
flag = add_ab46dc0e(flag)
flag = chadd_747dfa2f(flag)
flag = chunk_f32c7c2f(flag)
flag = xor_13c063a7(flag)
flag = csub_26fceede(flag)
flag = sub_7bf8c980(flag)
flag = shuffle_a3c6e740(flag)
flag = mul_8c6fc3ce(flag)
flag = shuffle_43decbdf(flag)
flag = chunk_59cbae4c(flag)
flag = xor_76cd9a81(flag)
flag = shuffle_14e44222(flag)
flag = shuffle_78cd475f(flag)
flag = chsub_66a6c561(flag)
flag = xor_046c82f6(flag)
flag = chunk_a431061a(flag)
flag = chxor_8db15314(flag)
flag = mul_cab49d47(flag)
flag = chadd_b97315dd(flag)
flag = digsub_038640b7(flag)
flag = cadd_21257952(flag)
flag = cadd_80971c79(flag)
flag = sub_8d4465ea(flag)
flag = chxor_55925b33(flag)
flag = chxor_a87f9d33(flag)
flag = csub_cb2cec49(flag)
flag = shuffle_15813d84(flag)
flag = mul_389dee3d(flag)
flag = cxor_29255d85(flag)
flag = cadd_b8669446(flag)
flag = chmul_695202ac(flag)
flag = chmul_78c19c03(flag)
flag = chsub_f9d9c30e(flag)
flag = sub_d67a4b16(flag)
flag = chunk_42bc522c(flag)
flag = mul_e6b65f6c(flag)
flag = add_e08d6566(flag)
flag = mul_bce42f5e(flag)
flag = cxor_4cb585c4(flag)
flag = add_6e9d979e(flag)
flag = digsub_abf0937e(flag)
flag = mul_eec9b30e(flag)
flag = chunk_88bc39ba(flag)
flag = chxor_f0c78fe9(flag)
flag = csub_3c2b1960(flag)
flag = chmul_be23499e(flag)
flag = xor_34c86087(flag)
flag = cmul_859e8b2d(flag)
flag = add_88ef453e(flag)
flag = chsub_93324e19(flag)
flag = digsub_e0de2a5d(flag)
flag = cxor_fe5870fc(flag)
flag = csub_1951cfda(flag)
flag = mul_452d9445(flag)
flag = cmul_49a44f99(flag)
flag = shuffle_fda70d35(flag)
flag = cmul_fedaeb35(flag)
flag = cadd_b83f18e9(flag)
flag = xor_ac6e82c0(flag)
flag = digsub_5c02cf5d(flag)
flag = cmul_6c27ae5b(flag)
flag = cxor_e4036825(flag)
flag = shuffle_a09d75d9(flag)
flag = chadd_967b4961(flag)
flag = cadd_51ae129c(flag)
flag = chunk_181817bc(flag)
flag = chsub_ebadaefe(flag)
flag = add_6ad8ed33(flag)
flag = cadd_a6482f91(flag)
flag = chadd_10d426ca(flag)
flag = csub_b56c06db(flag)
flag = shuffle_f3858d75(flag)
flag = sub_edd0e8fb(flag)
flag = shuffle_ad9553b4(flag)
flag = cxor_e5a9ee6a(flag)
flag = shuffle_b20aa4f9(flag)
flag = chxor_fb59e14c(flag)
flag = sub_3fa33786(flag)
flag = csub_c128716f(flag)
flag = digsub_1d4087e8(flag)
flag = digsub_93474c70(flag)
flag = cadd_75e1b32f(flag)
flag = cmul_2badfc5b(flag)
flag = cadd_fb2c7b99(flag)
flag = chmul_3d9011bc(flag)
flag = cxor_6476b200(flag)
flag = chsub_ad5739bc(flag)
flag = chsub_04fb6e14(flag)
flag = xor_b81a4467(flag)
flag = xor_10552f50(flag)
flag = chmul_7ce961bc(flag)
flag = sub_4efcb7e6(flag)
flag = cadd_16cd7d25(flag)
flag = shuffle_7df2cac5(flag)
flag = cmul_b805737d(flag)
flag = add_53a3ae63(flag)
flag = cxor_37cf37e1(flag)
flag = cmul_cd2eddf4(flag)
flag = chunk_d9927f3d(flag)
flag = cxor_26057d46(flag)
flag = chadd_0badfcf5(flag)
flag = chmul_e4e712b9(flag)
flag = cadd_788a340a(flag)
flag = csub_b97c1316(flag)
flag = chsub_76b2d7aa(flag)
flag = cmul_0bf33bed(flag)
flag = chunk_b4139adc(flag)
flag = chmul_885659c9(flag)
flag = cadd_bf48a745(flag)
flag = sub_12d5d25f(flag)
flag = mul_f80a89cf(flag)
flag = digsub_fcc47cc3(flag)
flag = csub_fe63b620(flag)
flag = sub_47698898(flag)
flag = chadd_3aa9c371(flag)
flag = cadd_774989e3(flag)
flag = chxor_23198c86(flag)
flag = csub_cf019266(flag)
flag = chmul_16176275(flag)
flag = sub_65030a05(flag)
flag = add_f4113996(flag)
flag = chadd_47332c73(flag)
flag = chunk_77a6c434(flag)
flag = shuffle_c3bda042(flag)
flag = digsub_a740a80e(flag)
flag = chsub_c1db5393(flag)
flag = chmul_de111dfb(flag)
flag = shuffle_41ece7da(flag)
flag = chsub_a23842be(flag)
flag = chmul_12872986(flag)
flag = shuffle_3150238f(flag)
flag = sub_a96a1483(flag)
flag = cmul_38769a31(flag)
flag = cmul_e9c3d090(flag)
flag = cmul_10dcbe35(flag)
flag = chmul_47e5352e(flag)
flag = cadd_80971c79(flag)
flag = shuffle_a924ad8b(flag)
flag = chunk_6b35af69(flag)
flag = csub_8a4930e2(flag)
flag = cmul_c9f8e5a1(flag)
flag = sub_a0d3d89e(flag)
flag = sub_a30eb08d(flag)
flag = cxor_697bee04(flag)
flag = cadd_8db3f2f3(flag)
flag = sub_085ded8f(flag)
flag = cmul_d4928d34(flag)
flag = cmul_0c68dd02(flag)
flag = mul_6906b8ec(flag)
flag = cxor_0afe7e7a(flag)
flag = xor_70e5e457(flag)
flag = cadd_629049ed(flag)
flag = mul_cf7af31a(flag)
flag = add_e08d6566(flag)
flag = cxor_ef4e4e70(flag)
flag = add_9009d319(flag)
flag = cadd_d44bbdbd(flag)
flag = digsub_bb8430e7(flag)
flag = chadd_2a11532c(flag)
flag = shuffle_64f815bd(flag)
flag = cadd_eb1a77e6(flag)
flag = digsub_cca1638e(flag)
flag = shuffle_8ab6bb33(flag)
flag = chxor_2b2282b6(flag)
flag = chsub_f57de7cd(flag)
flag = chadd_d95f9ffa(flag)
flag = chsub_be5f9d3f(flag)
flag = chmul_6c610e81(flag)
flag = add_c871a926(flag)
flag = add_6aeef0e9(flag)
flag = shuffle_7b60ebb6(flag)
flag = cxor_d2e5bfdf(flag)
flag = shuffle_de4afce0(flag)
flag = cmul_111bce58(flag)
flag = cmul_da51d310(flag)
flag = cadd_e4e4c9c0(flag)
flag = chsub_6ab39e5c(flag)
flag = chxor_55e4ace7(flag)
flag = digsub_f2fb52b7(flag)
flag = shuffle_16d074d1(flag)
flag = cmul_66170953(flag)
flag = add_b2a61490(flag)
flag = chmul_584b1b88(flag)
flag = chunk_180b51ff(flag)
flag = chadd_f137e21d(flag)
flag = digsub_1d28a867(flag)
flag = chxor_ce31e412(flag)
flag = add_14d5f474(flag)
flag = sub_d67326ec(flag)
flag = chsub_07a262a0(flag)
flag = cxor_1adfeb4e(flag)
flag = mul_d23185db(flag)
flag = digsub_ea672c6d(flag)
flag = xor_a36d3d94(flag)
flag = csub_160421ef(flag)
flag = csub_c8591293(flag)
flag = shuffle_f44f0fc5(flag)
flag = chunk_41ac0046(flag)
flag = chsub_79027896(flag)
flag = chunk_0934570f(flag)
flag = chsub_66a6c561(flag)
flag = shuffle_721dc700(flag)
flag = chxor_a84644b1(flag)
flag = digsub_b8659438(flag)
flag = chmul_18ecaa08(flag)
flag = sub_71bf262c(flag)
flag = cxor_18c1314e(flag)
flag = mul_947580cb(flag)
flag = xor_99a5aed1(flag)
flag = chxor_ce40491b(flag)
flag = cxor_4e153811(flag)
flag = sub_1ddf1ef7(flag)
flag = chsub_62b4c10c(flag)
flag = cxor_a1a8de03(flag)
flag = cxor_c8ef5dcc(flag)
flag = mul_e74b3261(flag)
flag = shuffle_a02cdb24(flag)
flag = sub_023318b3(flag)
flag = xor_df910360(flag)
flag = csub_fdb702b6(flag)
flag = shuffle_ffc10c41(flag)
flag = cxor_bbd7e7fe(flag)
flag = add_271749c1(flag)
flag = chunk_13e026f7(flag)
flag = chmul_d22494d3(flag)
flag = cadd_640c9c4d(flag)
flag = chmul_18bbd248(flag)
flag = cadd_0083dd15(flag)
flag = sub_4bcab1c3(flag)
flag = shuffle_050ae2c2(flag)
flag = xor_26dc7003(flag)
flag = cmul_d487af89(flag)
flag = chxor_cf80cd00(flag)
flag = cadd_92239d35(flag)
flag = mul_6fc04a8d(flag)
flag = digsub_4034f057(flag)
flag = chadd_6b07665a(flag)
flag = cadd_6fe68866(flag)
flag = add_2cc0eef9(flag)
flag = chadd_8231f9c2(flag)
flag = cadd_c15fc794(flag)
flag = mul_7ec01a05(flag)
flag = cadd_fb85a094(flag)
flag = xor_e17e7409(flag)
flag = mul_50110bad(flag)
flag = digsub_03f54ba3(flag)
flag = cxor_3b62f0a0(flag)
flag = xor_860fd005(flag)
flag = add_ef37b006(flag)
flag = chxor_be8a1cce(flag)
flag = cadd_ea861103(flag)
flag = xor_a1e6019f(flag)
flag = chunk_0b233094(flag)
flag = add_8a75fd19(flag)
flag = cxor_504085b7(flag)
flag = chadd_b29ed32e(flag)
flag = digsub_6bf0d618(flag)
flag = digsub_ba2f366a(flag)
flag = csub_4a29a9b1(flag)
flag = cxor_61ffae1c(flag)
flag = chunk_ab1c7f5f(flag)
flag = chxor_c7f6ad65(flag)
flag = chxor_56abb2e0(flag)
flag = sub_cfa999fe(flag)
flag = shuffle_e5071e98(flag)
flag = add_bb299925(flag)
flag = chunk_25c9a817(flag)
flag = csub_1951cfda(flag)
flag = chmul_6c610e81(flag)
flag = chunk_bb0e25ea(flag)
flag = xor_d30c564f(flag)
flag = chunk_6a5424b4(flag)
flag = cadd_a495112c(flag)
flag = shuffle_d65597c5(flag)
flag = add_1e3629e5(flag)
flag = sub_c62f3219(flag)
flag = chsub_a40de1d7(flag)
flag = shuffle_b22f1c56(flag)
flag = cxor_faa42ed7(flag)
flag = cxor_07785927(flag)
flag = sub_8476e2a1(flag)
flag = xor_d90ee923(flag)
flag = cadd_3a2cd387(flag)
flag = cxor_a1b43d44(flag)
flag = chunk_d9ce60f8(flag)
flag = digsub_8224944b(flag)
flag = cxor_41be00fc(flag)
flag = chunk_0188117c(flag)
flag = chsub_c7e9cf5d(flag)
flag = chadd_3b98f1b0(flag)
flag = chadd_db3363a7(flag)
flag = mul_150845b8(flag)
flag = chunk_e0f4eb85(flag)
flag = xor_d5273bd6(flag)
flag = add_a1fe299c(flag)
flag = shuffle_e8a5f5ef(flag)
flag = chsub_93ac52f5(flag)
flag = shuffle_b14477ff(flag)
flag = chxor_9fa88068(flag)
flag = chxor_a8789254(flag)
flag = chmul_33c1cd0d(flag)
flag = xor_f87e36e2(flag)
flag = chmul_ef7fa6ac(flag)
flag = chadd_d9f375ba(flag)
flag = chxor_23198c86(flag)
flag = chadd_6156d6db(flag)
flag = chsub_93ac52f5(flag)
flag = digsub_39cc5a0e(flag)
flag = chunk_f554e6ab(flag)
flag = chmul_6192a06c(flag)
flag = xor_2ecafb68(flag)
flag = shuffle_86331a49(flag)
flag = chsub_91553a2c(flag)
flag = chadd_f45b5a3e(flag)
flag = cadd_509c46a1(flag)
flag = cmul_18b5fc94(flag)
flag = csub_841d8ee8(flag)
flag = chxor_0c3b8e79(flag)
flag = cxor_94658244(flag)
flag = chadd_c427ca04(flag)
flag = add_9a1634ef(flag)
flag = chmul_da4f7a7d(flag)
flag = sub_f1819d8e(flag)
flag = chxor_23198c86(flag)
flag = shuffle_0d458069(flag)
flag = sub_7a049de1(flag)
flag = cmul_be83cfa8(flag)
flag = chxor_56c9e723(flag)
flag = xor_60d3ac80(flag)
flag = chunk_43ad380e(flag)
flag = csub_8477e013(flag)
flag = cadd_bf9e62c2(flag)
flag = shuffle_3d5811d2(flag)
flag = digsub_907a9a8a(flag)
flag = chadd_ac9d1de7(flag)
flag = cmul_3aff1e18(flag)
flag = cadd_a31a177e(flag)
flag = mul_92b1b71e(flag)
flag = shuffle_6a444585(flag)
flag = digsub_d131ea62(flag)
flag = mul_833e4a11(flag)
flag = chmul_47e5352e(flag)
flag = shuffle_2a77e1f0(flag)
flag = sub_f3871ca4(flag)
flag = digsub_88a027ca(flag)
flag = cadd_598cbf7e(flag)
flag = csub_4707f65f(flag)
flag = chsub_e87a1297(flag)
flag = add_9670343c(flag)
flag = cxor_9af689b5(flag)
flag = chxor_85ae54d2(flag)
flag = chsub_3df0ef3c(flag)
flag = add_8db2a643(flag)
flag = chxor_de94bd99(flag)
flag = chunk_9970853d(flag)
flag = csub_61a277c4(flag)
flag = chsub_d64b63cc(flag)
flag = cmul_892d62b0(flag)
flag = chmul_def74a51(flag)
flag = shuffle_d635239a(flag)
flag = chmul_fc9ca4bd(flag)
flag = cxor_6cae2cb6(flag)
flag = add_769c8b28(flag)
flag = shuffle_14e44222(flag)
flag = cmul_4b4ceaf4(flag)
flag = cxor_faa42ed7(flag)
flag = chxor_f6dc12d6(flag)
flag = xor_35062400(flag)
flag = xor_2495a11e(flag)
flag = chunk_90824d65(flag)
flag = digsub_e2dd946e(flag)
flag = cadd_6d7e714e(flag)
flag = chunk_62dd4e42(flag)
flag = chmul_885659c9(flag)
flag = chxor_23fb4dc2(flag)
flag = xor_1ffb5965(flag)
flag = cxor_d42f4ceb(flag)
flag = cxor_30674cf4(flag)
flag = shuffle_3ef98f81(flag)
flag = add_53fcaa0e(flag)
flag = chmul_b3677069(flag)
flag = add_3631a2fd(flag)
flag = chsub_c1aff5fd(flag)
flag = shuffle_16a08001(flag)
flag = chxor_85f3bf12(flag)
flag = chxor_500947df(flag)
flag = csub_6f8ba274(flag)
flag = shuffle_4e8ad324(flag)
flag = cxor_1c819fcf(flag)
flag = mul_16385c48(flag)
flag = csub_d37a1bf3(flag)
flag = cmul_adf3adfd(flag)
flag = chunk_41ac0046(flag)
flag = shuffle_a9affa02(flag)
flag = chmul_7cc3c4ab(flag)
flag = chadd_5fc42fbd(flag)
flag = cadd_d9e8611e(flag)
flag = xor_5707171e(flag)
flag = shuffle_47929ded(flag)
flag = chxor_9bc8ede2(flag)
flag = cxor_41be00fc(flag)
flag = chmul_b20c3846(flag)
flag = chxor_4639250f(flag)
flag = shuffle_8ed3abbd(flag)
flag = chmul_7df9b320(flag)
flag = mul_897a634a(flag)
flag = chadd_3aa9c371(flag)
flag = csub_e5b6d56f(flag)
flag = chunk_e2c320ee(flag)
flag = xor_19d4481b(flag)
flag = cxor_fa552213(flag)
flag = csub_ecf51562(flag)
flag = shuffle_7eddc63c(flag)
flag = digsub_b40bee06(flag)
flag = cmul_513a78aa(flag)
flag = chsub_93abfc5d(flag)
flag = chmul_ab23c18c(flag)
flag = add_eb403f7b(flag)
flag = csub_eea95b8f(flag)
flag = cmul_16644eba(flag)
flag = cmul_9ea3f862(flag)
flag = chunk_ba9920ce(flag)
flag = chmul_2e39a1a5(flag)
flag = xor_e35626c5(flag)
flag = digsub_f2e8b007(flag)
flag = chunk_36ffef9b(flag)
flag = cmul_b9b05446(flag)
flag = xor_385da77c(flag)
flag = chxor_e4593d98(flag)
flag = chmul_7cfdd3dc(flag)
flag = sub_837cb5a5(flag)
flag = add_8e1a7afe(flag)
flag = chxor_29db699e(flag)
flag = cadd_b4ab774d(flag)
flag = cadd_86ca3121(flag)
flag = xor_e6bc2bcf(flag)
flag = chunk_7496a2c0(flag)
flag = chunk_1fa032d8(flag)
flag = xor_5fc3579e(flag)
flag = chunk_0934570f(flag)
flag = cxor_40a00f38(flag)
flag = xor_bb4022b1(flag)
flag = chmul_0bc227c2(flag)
flag = add_a04dd9fa(flag)
flag = chxor_9f1b55f6(flag)
flag = chsub_3121e9c6(flag)
flag = chmul_d62489f9(flag)
flag = mul_0af7d935(flag)
flag = cxor_a9c59f97(flag)
flag = chsub_ee48bdeb(flag)
flag = cxor_fa9fe64d(flag)
flag = sub_dd4a6aab(flag)
flag = chsub_04fb6e14(flag)
flag = add_3d1c6187(flag)
flag = cxor_dc7aac3c(flag)
flag = chsub_91553a2c(flag)
flag = chadd_c33c08d6(flag)
flag = digsub_a821dc7d(flag)
flag = cmul_1871b99c(flag)
flag = chmul_9fbf4859(flag)
flag = cadd_5b4e9aab(flag)
flag = cxor_f0f82070(flag)
flag = chadd_dba6c166(flag)
flag = shuffle_5c9d432d(flag)
flag = xor_385da77c(flag)
flag = digsub_981b52ce(flag)
flag = xor_9b985733(flag)
flag = cmul_3e4053fd(flag)
flag = chxor_187da4ac(flag)
flag = mul_714f7f13(flag)
flag = xor_c7130619(flag)
flag = cadd_e9f8600c(flag)
flag = cmul_f98bab5d(flag)
flag = mul_1f240b2b(flag)
flag = add_546e77b8(flag)
flag = chunk_cd87c4de(flag)
flag = cmul_c53a95ce(flag)
flag = digsub_c30772e5(flag)
flag = shuffle_18bb44b8(flag)
flag = chadd_a5fda7f8(flag)
flag = shuffle_899fbb68(flag)
flag = csub_20678af6(flag)
flag = xor_875a544d(flag)
flag = digsub_1f1582a8(flag)
flag = chsub_c2ee0e2b(flag)
flag = cxor_8549d8eb(flag)
flag = shuffle_866b2261(flag)
flag = xor_3d2b41ae(flag)
flag = shuffle_285ae96d(flag)
flag = chadd_47332c73(flag)
flag = shuffle_0d275e0e(flag)
flag = chmul_048c1718(flag)
flag = chmul_04e4a837(flag)
flag = chsub_84e9e2bd(flag)
flag = cxor_892833c6(flag)
flag = csub_07dcceeb(flag)
flag = add_a45b80f9(flag)
flag = csub_fe2f121a(flag)
flag = digsub_fda06cd9(flag)
flag = cadd_14ae0fe3(flag)
flag = digsub_e0de2a5d(flag)
flag = sub_4bcab1c3(flag)
flag = xor_90c0a051(flag)
flag = cmul_63effb36(flag)
flag = mul_2e2bca7d(flag)
flag = chxor_3972d07b(flag)
flag = csub_b0a1c121(flag)
flag = chunk_5a70d9ef(flag)
flag = chxor_9fa88068(flag)
flag = chadd_32554a61(flag)
flag = xor_7661c292(flag)
flag = chunk_f5aa64b7(flag)
flag = cxor_d1b86499(flag)
flag = sub_fe1bac9b(flag)
flag = cadd_648dbdbd(flag)
flag = cmul_9bf9f69d(flag)
flag = chunk_1045daa0(flag)
flag = csub_a2102746(flag)
flag = cmul_012b5eb8(flag)
flag = sub_b676ab61(flag)
flag = chmul_22d64a0f(flag)
flag = chadd_acce32b7(flag)
flag = digsub_03c94dae(flag)
flag = add_758d2268(flag)
flag = xor_8ae01235(flag)
flag = xor_ba2cb10f(flag)
flag = cxor_c146ee2f(flag)
flag = chmul_fb4d75c9(flag)
flag = cadd_d6acbbb6(flag)
flag = chadd_6128a54c(flag)
flag = csub_7f2211d8(flag)
flag = cadd_1af81cdc(flag)
flag = chmul_aa4f6daf(flag)
flag = cmul_63b57c2a(flag)
flag = xor_e8c8896d(flag)
flag = sub_a3d54f98(flag)
flag = chsub_f17ba2e2(flag)
flag = add_c1abafc2(flag)
flag = xor_35062400(flag)
flag = chsub_b942a4e6(flag)
flag = chmul_f5bde247(flag)
flag = cxor_b93aeb3d(flag)
flag = add_fc769e2f(flag)
flag = shuffle_236a7376(flag)
flag = sub_381e766c(flag)
flag = chsub_a70db66e(flag)
flag = digsub_ba2f366a(flag)
flag = chmul_645c1d15(flag)
flag = chxor_2b2282b6(flag)
flag = cmul_45c479ca(flag)
flag = cmul_ace3a215(flag)
flag = chxor_4909f0be(flag)
flag = chadd_2a11532c(flag)
flag = cadd_a495112c(flag)
flag = shuffle_b6a2aa6c(flag)
flag = cmul_38769a31(flag)
flag = cxor_5ac6b756(flag)
flag = cadd_441443f1(flag)
flag = shuffle_9076b7e7(flag)
flag = add_2361d033(flag)
flag = csub_392cef70(flag)
flag = chmul_04e4a837(flag)
flag = chmul_05b3201a(flag)
flag = chxor_b9b02bcc(flag)
flag = cxor_fa552213(flag)
flag = shuffle_39351a8a(flag)
flag = cxor_39585eb3(flag)
flag = mul_897a634a(flag)
flag = cmul_5410e40d(flag)
flag = add_886697c1(flag)
flag = chsub_c0922438(flag)
flag = xor_813cf8a0(flag)
flag = digsub_899a9f6d(flag)
flag = cadd_79e79007(flag)
flag = chxor_aa6e4431(flag)
flag = shuffle_b118d2cc(flag)
flag = shuffle_d65597c5(flag)
flag = mul_01b0a78c(flag)
flag = add_c1abafc2(flag)
flag = xor_fd001add(flag)
flag = cmul_7d0c9f1b(flag)
flag = cadd_6abb159d(flag)
flag = cmul_adeb1535(flag)
flag = chmul_7ce961bc(flag)
flag = chadd_c427ca04(flag)
flag = cadd_5fc3a121(flag)
flag = chsub_74365a3a(flag)
flag = chmul_d1afe9b0(flag)
flag = cadd_f4a3a91b(flag)
flag = chadd_896dc902(flag)
flag = chsub_99c4b363(flag)
flag = chadd_2bcca0b5(flag)
flag = mul_a337ba89(flag)
flag = shuffle_a293a45d(flag)
flag = chadd_bbfef485(flag)
flag = csub_b14e28f6(flag)
flag = sub_665d3f8a(flag)
flag = mul_f2813d64(flag)
flag = cmul_5e8f38d5(flag)
flag = shuffle_b1134b2a(flag)
flag = xor_2a24945c(flag)
flag = xor_c0543d9e(flag)
flag = csub_fd81f025(flag)
flag = digsub_125edb05(flag)
flag = digsub_189a0416(flag)
flag = chsub_9fe7030d(flag)
flag = chmul_004133b3(flag)
flag = chxor_d94a9bdc(flag)
flag = cadd_bc61cc65(flag)
flag = chunk_e5cbb933(flag)
flag = chmul_ba6b991f(flag)
flag = chadd_4d98bf27(flag)
flag = cadd_c66b787a(flag)
flag = add_30966eb1(flag)
flag = cadd_ae3d5a54(flag)
flag = chsub_f09042f0(flag)
flag = chunk_01d5b245(flag)
flag = chadd_ee551422(flag)
flag = sub_1719880f(flag)
flag = chadd_65bf6072(flag)
flag = chxor_d7d9bf32(flag)
flag = digsub_a740a80e(flag)
flag = chunk_406fc18b(flag)
flag = sub_92b6d92c(flag)
flag = shuffle_204502b1(flag)
flag = cadd_15b9e74b(flag)
flag = cadd_fd35b517(flag)
flag = digsub_6afbfca8(flag)
flag = chmul_c25d1cd0(flag)
flag = chunk_8703835d(flag)
flag = csub_b1b08f24(flag)
flag = add_769c8b28(flag)
flag = shuffle_7df2cac5(flag)
flag = xor_0723c89e(flag)
flag = xor_14cbf59f(flag)
flag = shuffle_55c1c340(flag)
flag = chxor_8550301d(flag)
flag = cxor_802236be(flag)
flag = cmul_16ddfa97(flag)
flag = cadd_0228ee52(flag)
flag = cmul_7d0c9f1b(flag)
flag = cmul_7fe479fd(flag)
flag = csub_e5b6d56f(flag)
flag = chadd_eacac1c3(flag)
flag = chadd_87bfe060(flag)
flag = chadd_1989b407(flag)
flag = sub_1ddf1ef7(flag)
flag = chunk_0f48dab8(flag)
flag = chadd_a4967b6b(flag)
flag = cxor_6c5cd5c7(flag)
flag = chunk_69dd3db9(flag)
flag = chxor_56abb2e0(flag)
flag = add_35671a57(flag)
flag = chadd_868635c7(flag)
flag = chsub_4c009b94(flag)
flag = cxor_79917601(flag)
flag = digsub_54057ff2(flag)
flag = cmul_e7c72b68(flag)
flag = cxor_bac2ca1f(flag)
flag = xor_0e75b77c(flag)
flag = chsub_bc163239(flag)
flag = sub_40d48993(flag)
flag = chadd_1989b407(flag)
flag = chsub_d866d58b(flag)
flag = cadd_94b8e069(flag)
flag = chunk_e006d845(flag)
flag = csub_ad630998(flag)
flag = chsub_92f27399(flag)
flag = xor_5c62e4ce(flag)
flag = chxor_4ec23f54(flag)
flag = digsub_915491ea(flag)
flag = chmul_f5416998(flag)
flag = cxor_26057d46(flag)
flag = shuffle_78cd475f(flag)
flag = csub_2df7e131(flag)
flag = shuffle_68d954ec(flag)
flag = chsub_c1275525(flag)
flag = add_4d5b7dd8(flag)
flag = add_66a3881d(flag)
flag = chmul_7cfdd3dc(flag)
flag = add_8ef46bd6(flag)
flag = sub_0c6430ff(flag)
flag = chadd_2a11532c(flag)
flag = digsub_03c94dae(flag)
flag = chsub_f1540b87(flag)
flag = digsub_b8659438(flag)
flag = chmul_aa4f6daf(flag)
flag = chmul_c4924d51(flag)
flag = shuffle_de9df0cf(flag)
flag = cadd_f5745b35(flag)
flag = cxor_c7240b25(flag)
flag = chmul_f175d1d7(flag)
flag = shuffle_9294cfce(flag)
flag = chunk_e3f6d2ec(flag)
flag = chadd_c427ca04(flag)
flag = cxor_974a0f64(flag)
flag = chunk_b195e92b(flag)
flag = add_b6dbb476(flag)
flag = xor_6c2819c2(flag)
flag = sub_f1ab5525(flag)
flag = digsub_15856403(flag)
flag = cxor_61ffae1c(flag)
flag = add_9349052b(flag)
flag = mul_e2b49085(flag)
flag = chxor_af8f84bc(flag)
flag = mul_fcc77ce6(flag)
flag = xor_4849bd77(flag)
flag = chadd_658a720b(flag)
flag = cmul_06256c90(flag)
flag = add_c871a926(flag)
flag = cmul_5b292fda(flag)
flag = csub_392cef70(flag)
flag = chadd_c32db46a(flag)
flag = chadd_b07351e2(flag)
flag = shuffle_a17bb4ee(flag)
flag = chxor_b8ec7b4f(flag)
flag = shuffle_8c8dc376(flag)
flag = sub_3cb32b59(flag)
flag = mul_a1ba17e5(flag)
flag = add_03dc5f83(flag)
flag = cxor_9af689b5(flag)
flag = mul_c00416be(flag)
flag = chadd_fc7a65ec(flag)
flag = cxor_48ff1c3c(flag)
flag = chadd_76b3ac4f(flag)
flag = mul_c3e69fa2(flag)
flag = chxor_dda862c4(flag)
flag = chsub_6ee60616(flag)
flag = mul_c4479db6(flag)
flag = mul_e6b65f6c(flag)
flag = shuffle_0bc785b3(flag)
flag = chmul_7cfdd3dc(flag)
flag = chxor_67aa494b(flag)
flag = cxor_44afb555(flag)
flag = chsub_cd79e5f6(flag)
flag = chmul_65689d19(flag)
flag = chxor_500947df(flag)
flag = chadd_b3214236(flag)
flag = chunk_75264af5(flag)
flag = chxor_72127666(flag)
flag = cxor_b8b43d96(flag)
flag = chadd_51cfbbb7(flag)
flag = cadd_b39fc11d(flag)
flag = cmul_d487af89(flag)
flag = digsub_4428ac60(flag)
flag = digsub_172d24b0(flag)
flag = sub_f3be4e25(flag)
flag = chunk_a8579f80(flag)
flag = mul_b62c8153(flag)
flag = xor_77377fa6(flag)
flag = cmul_a51dd714(flag)
flag = shuffle_3d5811d2(flag)
flag = chadd_0badfcf5(flag)
flag = mul_5067d66a(flag)
flag = chxor_65aad212(flag)
flag = shuffle_13171fff(flag)
flag = chmul_351f9d39(flag)
flag = digsub_7d45ef3f(flag)
flag = chsub_e0feb99d(flag)
flag = chxor_ae76ed5a(flag)
flag = cmul_0ee0ce26(flag)
flag = cmul_db003c24(flag)
flag = cxor_41be00fc(flag)
flag = shuffle_a27257a0(flag)
flag = chadd_52f847ab(flag)
flag = xor_a36d3d94(flag)
flag = chmul_8e52ad65(flag)
flag = sub_ca91f11f(flag)
flag = cxor_060ce4e2(flag)
flag = sub_b5dac8cd(flag)
flag = cadd_c751d9e4(flag)
flag = csub_ec729961(flag)
flag = cadd_838fe20a(flag)
flag = add_1559ce63(flag)
flag = xor_cb183615(flag)
flag = cadd_ca2e862f(flag)
flag = shuffle_86331a49(flag)
flag = chmul_9e62f058(flag)
flag = cadd_2d211677(flag)
flag = chadd_5816fd7f(flag)
flag = chxor_da22b4fb(flag)
flag = chunk_6eea8007(flag)
flag = mul_224595eb(flag)
flag = digsub_800f76fb(flag)
flag = sub_0a7dad65(flag)
flag = cmul_ea158364(flag)
flag = digsub_eccd1606(flag)
flag = sub_5044b2cf(flag)
flag = cmul_99a00a24(flag)
flag = add_14d5f474(flag)
flag = cxor_bbd7e7fe(flag)
flag = sub_90d65932(flag)
flag = add_0b0a39a3(flag)
flag = shuffle_a8092414(flag)
flag = digsub_a821dc7d(flag)
flag = csub_d4490e14(flag)
flag = chunk_ab1c7f5f(flag)
flag = chmul_5f9891b6(flag)
flag = chxor_556134a0(flag)
flag = chmul_75d42cab(flag)
flag = csub_9b1af639(flag)
flag = shuffle_922a7e0d(flag)
flag = cxor_892833c6(flag)
flag = digsub_f22e07b0(flag)
flag = sub_481904d7(flag)
flag = xor_fc88f2e7(flag)
flag = chsub_d07297d3(flag)
flag = mul_2fea700d(flag)
flag = sub_4d3e2340(flag)
flag = chmul_bfab997d(flag)
flag = cmul_c408d74b(flag)
flag = shuffle_88823dcd(flag)
flag = xor_46b7d1d1(flag)
flag = chxor_cc8c61bf(flag)
flag = sub_6ca5da9b(flag)
flag = digsub_5e7cd6f6(flag)
flag = cadd_4003b254(flag)
flag = chxor_27993531(flag)
flag = chxor_4ab8ad7f(flag)
flag = digsub_d5cf3761(flag)
flag = chsub_b80a9f15(flag)
flag = cmul_85b39864(flag)
flag = cadd_f435a64a(flag)
flag = chsub_20dd3740(flag)
flag = cxor_d2e5bfdf(flag)
flag = chunk_c1b1042d(flag)
flag = cxor_9c481fde(flag)
flag = cxor_f929f224(flag)
flag = shuffle_0a4f92ab(flag)
flag = mul_34d9a702(flag)
flag = digsub_0fcbc54c(flag)
flag = shuffle_dd75cb23(flag)
flag = cmul_f0413f14(flag)
flag = cxor_28d8fe91(flag)
flag = sub_61538669(flag)
flag = xor_3edbcd7c(flag)
flag = digsub_4034f057(flag)
flag = xor_4849bd77(flag)
flag = chsub_3d7d2e18(flag)
flag = chxor_ca9732e1(flag)
flag = cxor_b8e23c90(flag)
flag = chunk_d4a3f365(flag)
flag = mul_8710992d(flag)
flag = csub_19752fd1(flag)
flag = shuffle_dc2ed635(flag)
flag = xor_05c5dcc9(flag)
flag = chmul_bfab997d(flag)
flag = chmul_2e39a1a5(flag)
flag = mul_d62641f4(flag)
flag = xor_cc33196e(flag)
flag = sub_f95a3649(flag)
flag = cmul_3aff1e18(flag)
flag = shuffle_b14477ff(flag)
flag = add_aae6cc04(flag)
flag = add_60fa40cf(flag)
flag = sub_c7fb8e5e(flag)
flag = digsub_9dafa980(flag)
flag = csub_a0c513d9(flag)
flag = cmul_0b0ac64f(flag)
flag = digsub_eccd1606(flag)
flag = chadd_fe09deb1(flag)
flag = cmul_5b292fda(flag)
flag = cxor_41764223(flag)
flag = add_769c8b28(flag)
flag = digsub_03c94dae(flag)
flag = csub_cb66374f(flag)
flag = chxor_f2f16c61(flag)
flag = csub_e0440f53(flag)
flag = cadd_6d7e714e(flag)
flag = add_3d1c6187(flag)
flag = chadd_2bcca0b5(flag)
flag = digsub_e9fbb5e0(flag)
flag = add_e08d6566(flag)
flag = cxor_b93aeb3d(flag)
flag = cxor_4d3c5896(flag)
flag = xor_5b72ca68(flag)
flag = shuffle_2a813d89(flag)
flag = chunk_b195e92b(flag)
flag = add_12e64206(flag)
flag = digsub_575bce65(flag)
flag = xor_f41b0fa6(flag)
flag = csub_fd81f025(flag)
flag = csub_e69770c4(flag)
flag = xor_5c62e4ce(flag)
flag = cmul_68c300d6(flag)
flag = digsub_46d7afa7(flag)
flag = sub_edd0e8fb(flag)
flag = cadd_07c72dba(flag)
flag = sub_ac9927d6(flag)
flag = chadd_55b65d14(flag)
flag = csub_f0b67669(flag)
flag = cmul_7b0890d6(flag)
flag = xor_890e78b1(flag)
flag = chsub_fa709b53(flag)
flag = chsub_d8b43803(flag)
flag = csub_ef420147(flag)
flag = cmul_3c96ba6e(flag)
flag = chxor_02646472(flag)
flag = cadd_7db59ff9(flag)
flag = xor_b81a4467(flag)
flag = chunk_c72fb6c4(flag)
flag = cadd_c15fc794(flag)
flag = digsub_bcb409f7(flag)
flag = xor_2495a11e(flag)
flag = cmul_31b88b90(flag)
flag = chxor_27993531(flag)
flag = mul_3dd9a13e(flag)
flag = chmul_8e421910(flag)
flag = chsub_66269564(flag)
flag = mul_9d0c3682(flag)
flag = chadd_3d456bc0(flag)
flag = chunk_6b870e2e(flag)
flag = chsub_02fa3ce0(flag)
flag = mul_01b0a78c(flag)
flag = mul_095b48a3(flag)
flag = chmul_b8a7f012(flag)
flag = chsub_dbd1ec78(flag)
flag = chsub_fa709b53(flag)
flag = cadd_0079a56b(flag)
flag = chsub_76771162(flag)
flag = digsub_154d7267(flag)
flag = chmul_443266b3(flag)
flag = add_fc581b51(flag)
flag = cadd_7936e180(flag)
flag = cxor_d43914ce(flag)
flag = add_99ad02f5(flag)
flag = xor_b055d8c5(flag)
flag = chxor_cf80cd00(flag)
flag = add_b2a61490(flag)
flag = chadd_f73b3974(flag)
flag = cadd_2da455cf(flag)
flag = xor_07333316(flag)
flag = cxor_ffad6101(flag)
flag = cadd_3882e35e(flag)
flag = xor_cdbf869f(flag)
flag = chxor_3bea6df8(flag)
flag = cxor_f40371fb(flag)
flag = chadd_36130bc9(flag)
flag = cmul_c0727784(flag)
flag = mul_a0ace443(flag)
flag = cmul_5e8f38d5(flag)
flag = chsub_4d0660a5(flag)
flag = chadd_6e3ce5fe(flag)
flag = cxor_bba6fa0a(flag)
flag = mul_f345af6b(flag)
flag = chxor_56c9e723(flag)
flag = mul_833e4a11(flag)
flag = csub_98f9a52a(flag)
flag = shuffle_cadeb447(flag)
flag = mul_15292c86(flag)
flag = chmul_398837e8(flag)
flag = chsub_0063bc32(flag)
flag = csub_0c9dc34d(flag)
flag = csub_20a6b2c3(flag)
flag = cadd_07c72dba(flag)
flag = chsub_be9e6b3a(flag)
flag = xor_a36d3d94(flag)
flag = mul_21b7a6b1(flag)
flag = chadd_c8951761(flag)
flag = chxor_dbe47d55(flag)
flag = chmul_bd71c400(flag)
flag = chsub_5f944988(flag)
flag = mul_89548da9(flag)
flag = chxor_02aa625d(flag)
flag = csub_841d8ee8(flag)
flag = cxor_eb72bf39(flag)
flag = xor_b0ff6bbd(flag)
flag = chsub_c1aff5fd(flag)
flag = add_36fb4d7d(flag)
flag = add_bdedbeea(flag)
flag = csub_f8935355(flag)
flag = cxor_98058884(flag)
flag = xor_25ac4148(flag)
flag = chunk_97e5e867(flag)
flag = shuffle_aabdc81c(flag)
flag = chmul_c67e0f7b(flag)
flag = chadd_6662b275(flag)
flag = sub_1ddf1ef7(flag)
flag = shuffle_5b02919b(flag)
flag = cadd_94b8e069(flag)
flag = csub_d215325c(flag)
flag = cadd_b70fc370(flag)
flag = xor_41405d72(flag)
flag = chadd_3e7164c9(flag)
flag = cxor_aaa07a69(flag)
flag = chsub_7ade6cf5(flag)
flag = cxor_c4236734(flag)
flag = chadd_bbfef485(flag)
flag = chadd_e678a699(flag)
flag = chxor_f84733a4(flag)
flag = shuffle_1a2b743e(flag)
flag = cmul_c9f41697(flag)
flag = cxor_96357748(flag)
flag = cmul_f6c4c9dc(flag)
flag = shuffle_602562e7(flag)
flag = digsub_d9a13c5e(flag)
flag = xor_9d5176ea(flag)
flag = csub_024ef6f9(flag)
flag = chxor_3946db75(flag)
flag = chmul_2d88dd5b(flag)
flag = chunk_dd75a83f(flag)
flag = cadd_2ed55f8d(flag)
flag = chadd_028f229e(flag)
flag = sub_2e2758dc(flag)
flag = cmul_393b0cfb(flag)
flag = cxor_1e0efad7(flag)
flag = chmul_4af7800f(flag)
flag = chadd_5544e38e(flag)
flag = digsub_19a384d0(flag)
flag = chunk_6b870e2e(flag)
flag = mul_658a4b4b(flag)
flag = cxor_ad95af8e(flag)
flag = cxor_d05587bc(flag)
flag = cmul_ba8b037d(flag)
flag = add_726cd7c7(flag)
flag = chmul_4245aa0c(flag)
flag = chsub_ad5739bc(flag)
flag = sub_00c9af82(flag)
flag = add_1039dc95(flag)
flag = chsub_68af0dd5(flag)
flag = shuffle_8abc2b43(flag)
flag = shuffle_40277085(flag)
flag = mul_87965a17(flag)
flag = add_06c4c375(flag)
flag = digsub_5a1f6d2f(flag)
flag = cmul_01d50eab(flag)
flag = chunk_e5aaf751(flag)
flag = chunk_f037e109(flag)
flag = chxor_9bc8ede2(flag)
flag = chsub_aad79c73(flag)
flag = add_726cd7c7(flag)
flag = csub_08317493(flag)
flag = cmul_028527b6(flag)
flag = sub_83e670dd(flag)
flag = shuffle_68d954ec(flag)
flag = cmul_a0ab0dc2(flag)
flag = cxor_4496ba54(flag)
flag = add_6aeef0e9(flag)
flag = cxor_ccd49eb2(flag)
flag = csub_1017a6c4(flag)
flag = chmul_44c9b2ed(flag)
flag = cadd_93ce9459(flag)
flag = cxor_5ac6b756(flag)
flag = chxor_6712129e(flag)
flag = chunk_82b4fb76(flag)
flag = chunk_3c707853(flag)
flag = cmul_4172328f(flag)
flag = xor_b601f000(flag)
flag = chxor_38c0a7ad(flag)
flag = cmul_49a44f99(flag)
flag = add_da6dae2b(flag)
flag = xor_4b381c82(flag)
flag = cadd_c2498f1a(flag)
flag = chxor_67aa494b(flag)
flag = add_91bb43ca(flag)
flag = chmul_97ccb142(flag)
flag = chsub_99c9e6ed(flag)
flag = chsub_411c54c2(flag)
flag = cxor_f929f224(flag)
flag = chxor_a99facbd(flag)
flag = csub_19752fd1(flag)
flag = chmul_49d9640f(flag)
flag = chunk_f75e2f55(flag)
flag = chunk_edf055e9(flag)
flag = digsub_ecf47b8f(flag)
flag = cmul_da51d310(flag)
flag = chunk_5a70d9ef(flag)
flag = digsub_e9fbb5e0(flag)
flag = chsub_f15fc200(flag)
flag = chmul_2e39a1a5(flag)
flag = chsub_4d7b9897(flag)
flag = mul_2f486d74(flag)
flag = xor_3bb0008c(flag)
flag = sub_1b9f18a3(flag)
flag = chxor_26ed8369(flag)
flag = chmul_2e39a1a5(flag)
flag = shuffle_98accf0f(flag)
flag = csub_486467f4(flag)
flag = chmul_035bd60a(flag)
flag = mul_86c064b1(flag)
flag = chadd_967b4961(flag)
flag = digsub_8326055f(flag)
flag = mul_b19c9677(flag)
flag = xor_29589c28(flag)
flag = digsub_78ba6bc8(flag)
flag = xor_0ade2d1f(flag)
flag = chmul_d22494d3(flag)
flag = chsub_18094e03(flag)
flag = mul_eb201421(flag)
flag = chxor_bdaad1f4(flag)
flag = xor_28c1cc46(flag)
flag = csub_7ef295f1(flag)
flag = chadd_88ba6a81(flag)
flag = csub_96f86ad8(flag)
flag = mul_fcc77ce6(flag)
flag = sub_11293e74(flag)
flag = cadd_f4a3a91b(flag)
flag = add_c1f5edb7(flag)
flag = chsub_b543d1d6(flag)
flag = chmul_ba6b991f(flag)
flag = chxor_ae76ed5a(flag)
flag = cmul_82b0086b(flag)
flag = chxor_036cfe7a(flag)
flag = chmul_645c1d15(flag)
flag = chunk_85747b20(flag)
flag = shuffle_2621171b(flag)
flag = chmul_8ef21d96(flag)
flag = shuffle_823fa35f(flag)
flag = xor_f5bcc389(flag)
flag = digsub_f38ffcc2(flag)
flag = add_8db2a643(flag)
flag = shuffle_58938b75(flag)
flag = sub_53dd4b93(flag)
flag = add_42869331(flag)
flag = chxor_845d20e4(flag)
flag = add_b9d4cb35(flag)
flag = cmul_d77e3c24(flag)
flag = shuffle_c5e07151(flag)
flag = cmul_d7a4e37f(flag)
flag = sub_c15c0c16(flag)
flag = sub_f21c7d69(flag)
flag = shuffle_6d9a62f9(flag)
flag = mul_e80fd803(flag)
flag = add_30b3e082(flag)
flag = digsub_6afbfca8(flag)
flag = sub_f29558b8(flag)
flag = cmul_2eb8bc9e(flag)
flag = chxor_e3309cca(flag)
flag = xor_1c0c670c(flag)
flag = digsub_be5397e9(flag)
flag = xor_f68eb9b6(flag)
flag = chsub_ee1754a3(flag)
flag = sub_657f5f3f(flag)
flag = xor_5b9dbd1c(flag)
flag = chadd_6b07665a(flag)
flag = chsub_827fc456(flag)
flag = chadd_36148017(flag)
flag = chsub_a2001711(flag)
flag = chxor_f2f16c61(flag)
flag = cadd_c1763a61(flag)
flag = mul_e04a2c12(flag)
flag = chxor_599d5e3e(flag)
flag = mul_389dee3d(flag)
flag = chmul_faead8d0(flag)
flag = add_4a7519db(flag)
flag = chxor_9426335a(flag)
flag = chxor_3f9af41e(flag)
flag = xor_860fd005(flag)
flag = cmul_8bc2cf3b(flag)
flag = chunk_3a4345ab(flag)
flag = cadd_2c027db7(flag)
flag = chunk_bd36eb6a(flag)
flag = sub_7f903ea3(flag)
flag = xor_35062400(flag)
flag = add_c9854582(flag)
flag = chadd_e3c33841(flag)
flag = chsub_d8e7f937(flag)
flag = chadd_42edb2cc(flag)
flag = mul_40c0f816(flag)
flag = chadd_620f96a9(flag)
flag = chadd_d6631ab3(flag)
flag = cadd_9bed43d0(flag)
flag = chadd_42bbf689(flag)
flag = cxor_26057d46(flag)
flag = cadd_79e79007(flag)
flag = cmul_8f4e7b08(flag)
flag = shuffle_8a10d0b7(flag)
flag = digsub_2362ee33(flag)
flag = chadd_6a4e5b24(flag)
flag = digsub_82f27ce9(flag)
flag = csub_642b1701(flag)
flag = shuffle_81777ea5(flag)
flag = digsub_caab5c9d(flag)
flag = chadd_747dfa2f(flag)
flag = chadd_16ea1a60(flag)
flag = cadd_e69f5bf8(flag)
flag = add_718a4547(flag)
flag = add_0919e3a2(flag)
flag = cadd_ae1d750b(flag)
flag = chunk_206c8668(flag)
flag = chunk_f25c6152(flag)
flag = chsub_e93fd882(flag)
flag = shuffle_5ea1f654(flag)
flag = csub_d24d889b(flag)
flag = cxor_b93aeb3d(flag)
flag = chmul_6192a06c(flag)
flag = cxor_e4036825(flag)
flag = mul_2a724485(flag)
flag = add_da6dae2b(flag)
flag = csub_d278adbd(flag)
flag = chadd_c2522c75(flag)
flag = csub_8cff1d96(flag)
flag = shuffle_883a1be7(flag)
flag = csub_cb5867de(flag)
flag = add_b6dbb476(flag)
flag = digsub_1d28a867(flag)
flag = cadd_629049ed(flag)
flag = cadd_2bb5025e(flag)
flag = chadd_6e3ce5fe(flag)
flag = mul_4b619987(flag)
flag = chxor_3946db75(flag)
flag = chxor_fb59e14c(flag)
flag = chmul_615c46c1(flag)
flag = sub_8d4465ea(flag)
flag = digsub_7cd65058(flag)
flag = cmul_a292d693(flag)
flag = cxor_95401b5f(flag)
flag = shuffle_5cd09bb7(flag)
flag = chxor_b9b02bcc(flag)
flag = cxor_9bda6371(flag)
flag = cxor_d339f91c(flag)
flag = chmul_5af32334(flag)
flag = chxor_4427bf9d(flag)
flag = mul_bb9e8c00(flag)
flag = chxor_85f3bf12(flag)
flag = add_0cf48ce3(flag)
flag = sub_a8ed3df9(flag)
flag = sub_e9895f44(flag)
flag = cxor_3cac8696(flag)
flag = chunk_34d2c108(flag)
flag = chadd_fc03260a(flag)
flag = cxor_c9ef0e8c(flag)
flag = cmul_b1a79f4a(flag)
flag = add_aae6cc04(flag)
flag = sub_29f5a027(flag)
flag = chunk_e7835142(flag)
flag = chsub_5d86241d(flag)
flag = chxor_cf758070(flag)
flag = csub_98f9a52a(flag)
flag = chmul_5fbe910e(flag)
flag = shuffle_a9affa02(flag)
flag = chadd_ed0711d8(flag)
flag = xor_6a599f5a(flag)
flag = xor_741282be(flag)
flag = digsub_288ef9ea(flag)
flag = add_2af4f21d(flag)
flag = shuffle_8a10d0b7(flag)
flag = add_a2c38523(flag)
flag = shuffle_bbb676d2(flag)
flag = xor_37922856(flag)
flag = cmul_fe6ecce9(flag)
flag = chmul_f8409008(flag)
flag = chxor_da81821a(flag)
flag = cxor_1290e20b(flag)
flag = cadd_b3a97789(flag)
flag = cmul_b759583b(flag)
flag = xor_5af6d272(flag)
flag = mul_5067d66a(flag)
flag = digsub_ba829062(flag)
flag = xor_9e9f7a8b(flag)
flag = cadd_e856ecc9(flag)
flag = chxor_4427bf9d(flag)
flag = chsub_84e9e2bd(flag)
flag = add_a04dd9fa(flag)
flag = csub_4a29a9b1(flag)
flag = sub_a091f45e(flag)
flag = add_35671a57(flag)
flag = mul_f2813d64(flag)
flag = shuffle_2946b8f8(flag)
flag = chxor_556134a0(flag)
flag = chxor_dbd34bdf(flag)
flag = sub_ba98e537(flag)
flag = cmul_ec6817f2(flag)
flag = xor_4e43f7ea(flag)
flag = mul_54b3dab3(flag)
flag = chsub_4ebc0819(flag)
flag = cmul_f289fa35(flag)
flag = chadd_ced5aac5(flag)
flag = chxor_38018a02(flag)
flag = shuffle_14e44222(flag)
flag = sub_656aa559(flag)
flag = chunk_28475841(flag)
flag = chsub_e164464b(flag)
flag = cxor_3b62f0a0(flag)
flag = add_74fa4c8a(flag)
flag = chadd_bbfef485(flag)
flag = chxor_733c74e9(flag)
flag = mul_993204a9(flag)
flag = shuffle_3a497842(flag)
flag = sub_26a484b7(flag)
flag = sub_dfb02634(flag)
flag = cadd_02aec3ae(flag)
flag = chadd_f2fd70f1(flag)
flag = cxor_94df939a(flag)
flag = cadd_d6913038(flag)
flag = chmul_5c3ce310(flag)
flag = chxor_2978c8d9(flag)
flag = xor_df70e045(flag)
flag = mul_619c394d(flag)
flag = shuffle_40277085(flag)
flag = mul_f5f13d24(flag)
flag = add_a5b30fdf(flag)
flag = digsub_c30772e5(flag)
flag = sub_0d8062bd(flag)
flag = xor_a175d05f(flag)
flag = mul_947580cb(flag)
flag = shuffle_ca27178d(flag)
flag = sub_29f5a027(flag)
flag = cxor_2e5f8990(flag)
flag = cmul_f851d67c(flag)
flag = chadd_0fbbf4b8(flag)
flag = cxor_ad95af8e(flag)
flag = cadd_66bcc5a2(flag)
flag = chmul_cc8af1e6(flag)
flag = add_f582d81c(flag)
flag = chmul_207c7813(flag)
flag = digsub_b6c1346d(flag)
flag = cxor_8fe94932(flag)
flag = chxor_84d7073f(flag)
flag = chadd_d54dcfab(flag)
flag = add_1b3e26ab(flag)
flag = chsub_b796fd36(flag)
flag = chadd_4a09bd0d(flag)
flag = csub_5a6c81e3(flag)
flag = mul_bb9e8c00(flag)
flag = csub_2df7e131(flag)
flag = cadd_1f30773b(flag)
flag = chunk_bdec9045(flag)
flag = xor_ac535945(flag)
flag = csub_9b1af639(flag)
flag = chadd_a8439bc3(flag)
flag = cmul_1db73e1b(flag)
flag = csub_079e185c(flag)
flag = xor_2b415907(flag)
flag = chunk_df8009b6(flag)
flag = chxor_88e67ab1(flag)
flag = chmul_38133c10(flag)
flag = add_c1abafc2(flag)
flag = cadd_6f6cf5cb(flag)
flag = csub_1ae697ba(flag)
flag = cmul_00fd6c30(flag)
flag = xor_acef1014(flag)
flag = chxor_6b41b0f3(flag)
flag = chsub_77fcdd6e(flag)
flag = cmul_8c0028d4(flag)
flag = add_e7bb6b2d(flag)
flag = cmul_0ee0ce26(flag)
flag = chmul_d5be6ef1(flag)
flag = cxor_3addab66(flag)
flag = chsub_e1ab9cb3(flag)
flag = shuffle_c0cc818c(flag)
flag = cxor_f929f224(flag)
flag = cxor_9df954e1(flag)
flag = chsub_0e10b13d(flag)
flag = add_67af3ff4(flag)
flag = chunk_d3ecfe82(flag)
flag = cxor_c9c75462(flag)
flag = cmul_89ce7854(flag)
flag = csub_f0b67669(flag)
flag = shuffle_0d458069(flag)
flag = shuffle_3f68185e(flag)
flag = digsub_93fe4930(flag)
flag = shuffle_b0e9c01f(flag)
flag = chxor_947d449e(flag)
flag = chmul_33c1cd0d(flag)
flag = chunk_f32c7c2f(flag)
flag = chmul_90381a7d(flag)
flag = chsub_3a9fd4f5(flag)
flag = xor_abf7f988(flag)
flag = shuffle_fe7bcc78(flag)
flag = chmul_615c46c1(flag)
flag = chadd_e3c33841(flag)
flag = sub_0cd6568b(flag)
flag = chmul_3d18df83(flag)
flag = xor_60dd65f0(flag)
flag = add_b1383cfb(flag)
flag = xor_07333316(flag)
flag = chadd_7c5f1cde(flag)
flag = digsub_15140dd6(flag)
flag = mul_e80fd803(flag)
flag = chmul_451b1e6b(flag)
flag = cxor_f40371fb(flag)
flag = csub_c8591293(flag)
flag = cmul_ca71521f(flag)
flag = cxor_f20321f0(flag)
flag = cmul_148c07dc(flag)
flag = digsub_0eb180b8(flag)
flag = add_8a75fd19(flag)
flag = chadd_5544e38e(flag)
flag = shuffle_15813d84(flag)
flag = shuffle_ffe4fef7(flag)
flag = mul_15292c86(flag)
flag = chunk_d09c17de(flag)
flag = chmul_6f2b8735(flag)
flag = sub_2dfefd1b(flag)
flag = cxor_075c21e0(flag)
flag = cxor_d2b698ff(flag)
flag = chsub_c3fb1168(flag)
flag = shuffle_76c2382f(flag)
flag = chxor_6d888483(flag)
flag = xor_3b807d61(flag)
flag = cxor_9a341cfa(flag)
flag = cxor_719205d0(flag)
flag = cadd_21257952(flag)
flag = cxor_9c481fde(flag)
flag = sub_6b51b490(flag)
flag = chxor_353fb03b(flag)
flag = cadd_e86a7e16(flag)
flag = digsub_dcdf3ce1(flag)
flag = chxor_65fb61d8(flag)
flag = cmul_2eb68781(flag)
flag = add_91bf6c2c(flag)
flag = cxor_fb665168(flag)
flag = csub_088507c1(flag)
flag = cxor_25ff2742(flag)
flag = chsub_4ebc0819(flag)
flag = shuffle_b69552ce(flag)
flag = cxor_4b979532(flag)
flag = cxor_5cb8c60b(flag)
flag = chxor_0f3c245c(flag)
flag = xor_9e9f7a8b(flag)
flag = xor_f7706b03(flag)
flag = sub_60d9cd7a(flag)
flag = cadd_22e59670(flag)
flag = xor_e994fa9c(flag)
flag = sub_a10ca0c8(flag)
flag = cadd_95ea1de0(flag)
flag = add_02374137(flag)
flag = chsub_b9b2576f(flag)
flag = cadd_94b8e069(flag)
flag = chadd_39c0e18e(flag)
flag = digsub_081fcfe8(flag)
flag = cxor_f0f82070(flag)
flag = cadd_09d85417(flag)
flag = chxor_6ebc3376(flag)
flag = digsub_800f76fb(flag)
flag = shuffle_a3c6e740(flag)
flag = cxor_3829c9db(flag)
flag = chsub_f97f894e(flag)
flag = digsub_038640b7(flag)
flag = chunk_40051429(flag)
flag = digsub_3835b3e1(flag)
flag = chadd_47332c73(flag)
flag = chunk_1d45076c(flag)
flag = digsub_1f1582a8(flag)
flag = chxor_1649570d(flag)
flag = chxor_1272b4b3(flag)
flag = cadd_ea9ca040(flag)
flag = cmul_40bb0e2b(flag)
flag = add_7aa57e32(flag)
flag = chxor_0595f6c3(flag)
flag = shuffle_8ca0e8e2(flag)
flag = cmul_db96fc2e(flag)
flag = chmul_90f76848(flag)
flag = add_7553d25b(flag)
flag = csub_7ae589be(flag)
flag = xor_90c0a051(flag)
flag = chsub_9e3a2eb0(flag)
flag = cmul_9513451d(flag)
flag = cxor_4cb585c4(flag)
flag = chunk_e7835142(flag)
flag = chxor_b8ec7b4f(flag)
flag = cxor_1330b89b(flag)
flag = shuffle_b16c2957(flag)
flag = chmul_ebd5a20e(flag)
flag = chsub_4c1e3f38(flag)
flag = sub_c24992e8(flag)
flag = digsub_abf0937e(flag)
flag = chadd_e5b699cb(flag)
flag = chunk_ddef464d(flag)
flag = digsub_dbfc4977(flag)
flag = sub_3c434ee5(flag)
flag = cadd_6d7e714e(flag)
flag = chadd_a7330cb4(flag)
flag = xor_dfe62c40(flag)
flag = cmul_4efbd341(flag)
flag = chxor_385bc3a3(flag)
flag = mul_9ed02e6c(flag)
flag = chsub_b543d1d6(flag)
flag = cxor_42ec5686(flag)
flag = cadd_eb1a77e6(flag)
flag = cadd_5352b247(flag)
flag = cadd_8b78f764(flag)
flag = chadd_c2c2b7f7(flag)
flag = chadd_74c2ec36(flag)
flag = csub_2bce138a(flag)
flag = chadd_6b07665a(flag)
flag = digsub_3ff40549(flag)
flag = chxor_98102bb9(flag)
flag = digsub_4c404e0f(flag)
flag = cmul_0fec80e1(flag)
flag = chsub_84e9e2bd(flag)
flag = csub_d24d889b(flag)
flag = chadd_b9888b8b(flag)
flag = csub_f6d8e64f(flag)
flag = xor_d5273bd6(flag)
flag = chadd_8b4d11a3(flag)
flag = chmul_14ccb396(flag)
flag = shuffle_3125b36d(flag)
flag = shuffle_a09d75d9(flag)
flag = chmul_faead8d0(flag)
flag = cmul_26f5ab98(flag)
flag = cxor_9bda6371(flag)
flag = chsub_30f73b24(flag)
flag = mul_e04a2c12(flag)
flag = add_88ef453e(flag)
flag = add_bc200f67(flag)
flag = cxor_31e27f48(flag)
flag = chunk_b78988b6(flag)
flag = chunk_e949207e(flag)
flag = chunk_12fc1604(flag)
flag = xor_e437e0ae(flag)
flag = chunk_0b804480(flag)
flag = chxor_0f3c245c(flag)
flag = chsub_dfabe48a(flag)
flag = cxor_0afe7e7a(flag)
flag = chunk_09573d85(flag)
flag = chxor_c8d60001(flag)
flag = chsub_357029f0(flag)
flag = chunk_25c9a817(flag)
flag = chsub_5d43cf4f(flag)
flag = xor_e9fd82b3(flag)
flag = sub_f1320d35(flag)
flag = cxor_30674cf4(flag)
flag = cadd_991ec901(flag)
flag = chmul_b5dab014(flag)
flag = shuffle_2ce02926(flag)
flag = chxor_b82fad32(flag)
flag = digsub_0e01916d(flag)
flag = sub_5d7857eb(flag)
flag = chxor_ce130299(flag)
flag = cmul_7a36ad1f(flag)
flag = chmul_b11a8b8c(flag)
flag = xor_0ec01206(flag)
flag = chsub_b543d1d6(flag)
flag = csub_7d205427(flag)
flag = chadd_c23de33f(flag)
flag = xor_11dd9cd2(flag)
flag = mul_959ccef4(flag)
flag = digsub_225591cf(flag)
flag = sub_361737a7(flag)
flag = digsub_4428ac60(flag)
flag = chsub_8809f725(flag)
flag = mul_e020bc90(flag)
flag = chmul_2332b1f2(flag)
flag = chunk_530108df(flag)
flag = sub_a5b2a08c(flag)
flag = cxor_7bed28da(flag)
flag = chsub_91553a2c(flag)
flag = add_c908a5f4(flag)
flag = chunk_4c3d6535(flag)
flag = digsub_f74d6e2c(flag)
flag = csub_efe13119(flag)
flag = mul_ebff36e1(flag)
flag = sub_a62e014f(flag)
flag = xor_99a5aed1(flag)
flag = digsub_ac841ac3(flag)
flag = sub_7a049de1(flag)
flag = cadd_007b2c57(flag)
flag = mul_87965a17(flag)
flag = chsub_7bc426c7(flag)
flag = shuffle_f380512c(flag)
flag = digsub_ff462c4a(flag)
flag = cadd_ea9ca040(flag)
flag = chsub_a23842be(flag)
flag = sub_71ca3f1b(flag)
flag = cxor_11a1bb19(flag)
flag = chxor_7fed6271(flag)
flag = csub_ecf51562(flag)
flag = sub_2e2758dc(flag)
flag = chxor_599d5e3e(flag)
flag = chsub_9a699614(flag)
flag = xor_7c3bd1e8(flag)
flag = xor_4e43f7ea(flag)
flag = cxor_8e45b4c4(flag)
flag = chadd_b0d8f554(flag)
flag = chmul_22d64a0f(flag)
flag = chadd_714abd5f(flag)
flag = chadd_fc03260a(flag)
flag = digsub_7d236bf8(flag)
flag = cxor_89bf897f(flag)
flag = xor_f7706b03(flag)
flag = mul_e6b65f6c(flag)
flag = cxor_fe5870fc(flag)
flag = chsub_8b38a202(flag)
flag = add_42869331(flag)
flag = chsub_2b33e666(flag)
flag = add_4db6bc88(flag)
flag = chxor_ffe3793d(flag)
flag = chsub_32f5910d(flag)
flag = xor_f8437474(flag)
flag = cmul_622542fe(flag)
flag = digsub_9ab35f2e(flag)
flag = digsub_081fcfe8(flag)
flag = chsub_a0999ab2(flag)
flag = cxor_a1a8de03(flag)
flag = sub_1a66408e(flag)
flag = chmul_c4196221(flag)
flag = mul_f345af6b(flag)
flag = cmul_971d0d43(flag)
flag = cadd_97daaa50(flag)
flag = mul_a2581ad1(flag)
flag = mul_86c064b1(flag)
flag = mul_1c457d63(flag)
flag = chadd_df001d38(flag)
flag = cxor_c9bff23d(flag)
flag = mul_ce14d872(flag)
flag = shuffle_899fbb68(flag)
flag = shuffle_b6779950(flag)
flag = cadd_1aff9833(flag)
flag = sub_53b0de62(flag)
flag = add_b510c979(flag)
flag = digsub_2a3c141d(flag)
flag = chmul_cfee488f(flag)
flag = sub_97300f52(flag)
flag = csub_b14e28f6(flag)
flag = sub_f29558b8(flag)
flag = chmul_63977e71(flag)
flag = xor_7ede4fd2(flag)
flag = xor_b3655f1c(flag)
flag = add_546e77b8(flag)
flag = cadd_f4a3a91b(flag)
flag = chmul_138f562c(flag)
flag = add_758d2268(flag)
flag = digsub_0d0244fc(flag)
flag = xor_3b14c897(flag)
flag = chmul_5fbe910e(flag)
flag = chunk_aed3b0f6(flag)
flag = add_dcb94ddc(flag)
flag = sub_04d98d74(flag)
flag = shuffle_72671ce6(flag)
flag = cadd_f1e2dc73(flag)
flag = add_da9b8954(flag)
flag = cmul_16d7f1e9(flag)
flag = digsub_9ab35f2e(flag)
flag = chadd_620d941e(flag)
flag = cmul_63effb36(flag)
flag = add_c908a5f4(flag)
flag = cxor_182bdecc(flag)
flag = chxor_62bb4f9e(flag)
flag = chmul_a6c30448(flag)
flag = chunk_73de87d2(flag)
flag = digsub_0afb900b(flag)
flag = chmul_99d03179(flag)
flag = chadd_ac9d1de7(flag)
flag = cadd_b39a5b0b(flag)
flag = mul_3af98615(flag)
flag = cadd_62b6ad0e(flag)
flag = add_f26d8b4c(flag)
flag = digsub_225591cf(flag)
flag = add_454ffaaf(flag)
flag = chxor_dda862c4(flag)
flag = chadd_4b37b268(flag)
flag = add_770b1c6f(flag)
flag = cmul_a84df24b(flag)
flag = chunk_56a0ded7(flag)
flag = add_e4570f19(flag)
flag = cxor_c6e16ecc(flag)
flag = xor_2d9c7e1d(flag)
flag = chunk_e3f6d2ec(flag)
flag = chxor_6b786c2e(flag)
flag = chmul_dac3ab2b(flag)
flag = cadd_d6acbbb6(flag)
flag = chadd_24def8ad(flag)
flag = mul_6906b8ec(flag)
flag = chsub_66a6c561(flag)
flag = add_f10a2818(flag)
flag = chunk_bb0e25ea(flag)
flag = chmul_a156d55d(flag)
flag = chsub_244387c4(flag)
flag = cxor_a009b999(flag)
flag = chxor_56abb2e0(flag)
flag = mul_eb559523(flag)
flag = cmul_0ee0ce26(flag)
flag = cadd_d6913038(flag)
flag = xor_68464c0d(flag)
flag = mul_947580cb(flag)
flag = chmul_6c610e81(flag)
flag = cxor_98fe5771(flag)
flag = digsub_d085a426(flag)
flag = cxor_fb665168(flag)
flag = shuffle_2cab1c5d(flag)
flag = chadd_70e1dac6(flag)
flag = cxor_18c1314e(flag)
flag = chsub_fded2730(flag)
flag = cmul_49a44f99(flag)
flag = csub_07dcceeb(flag)
flag = sub_6f40f29f(flag)
flag = cadd_d6913038(flag)
flag = chmul_8e52ad65(flag)
flag = chxor_79daeaf3(flag)
flag = chadd_39c0e18e(flag)
flag = mul_d0313a6c(flag)
flag = chxor_bca7bb47(flag)
flag = shuffle_dc7ee1c6(flag)
flag = chadd_c427ca04(flag)
flag = chmul_7fdbddec(flag)
flag = sub_f1ab5525(flag)
flag = chunk_5f5b8349(flag)
flag = digsub_f2743d63(flag)
flag = chadd_d8ce38a5(flag)
flag = chsub_dbf9111e(flag)
flag = chadd_5171aa72(flag)
flag = chxor_6ebc3376(flag)
flag = chunk_79cef8cd(flag)
flag = csub_d77927e4(flag)
flag = add_3631a2fd(flag)
flag = xor_b8479b53(flag)
flag = cmul_16ddfa97(flag)
flag = xor_6495a383(flag)
flag = chmul_eda95d12(flag)
flag = chadd_3efd2ae8(flag)
flag = add_30966eb1(flag)
flag = add_eac32141(flag)
flag = chsub_bf5cdb36(flag)
flag = chsub_37756695(flag)
flag = cmul_3aff1e18(flag)
flag = shuffle_3f9d1ce8(flag)
flag = mul_34d9a702(flag)
flag = chsub_04fb6e14(flag)
flag = chxor_385bc3a3(flag)
flag = sub_edd0e8fb(flag)
flag = chxor_b041b00c(flag)
flag = xor_890e78b1(flag)
flag = chadd_27f19124(flag)
flag = xor_29589c28(flag)
flag = chsub_f15fc200(flag)
flag = chmul_1f5faa54(flag)
flag = mul_50110bad(flag)
flag = cxor_2aa22b89(flag)
flag = chadd_1375b126(flag)
flag = chmul_27f0b944(flag)
flag = csub_c123debf(flag)
flag = sub_12d5d25f(flag)
flag = chunk_7ee32000(flag)
flag = xor_0ebbd2b0(flag)
flag = chunk_e3f6d2ec(flag)
flag = mul_b74dfccf(flag)
flag = cmul_ad3ab72b(flag)
flag = chadd_d8ce38a5(flag)
flag = digsub_9b074471(flag)
flag = chadd_3aa9c371(flag)
flag = digsub_9adbb647(flag)
flag = chmul_b5dab014(flag)
flag = csub_c5965200(flag)
flag = cadd_94b8e069(flag)
flag = xor_a35575ce(flag)
flag = cxor_95c41471(flag)
flag = chadd_74c2ec36(flag)
flag = chunk_c8598499(flag)
flag = cxor_e7839ec0(flag)
flag = cadd_d629e9a0(flag)
flag = xor_8dc6fc89(flag)
flag = digsub_1f1582a8(flag)
flag = xor_8a3ad979(flag)
flag = xor_cc33196e(flag)
flag = cmul_3e5a5794(flag)
flag = chunk_9758765f(flag)
flag = digsub_ab800369(flag)
flag = csub_7e745ec0(flag)
flag = sub_51002c26(flag)
flag = cxor_ea36911a(flag)
flag = xor_a6213de5(flag)
flag = cmul_dedddbbd(flag)
flag = chxor_b041b00c(flag)
flag = xor_b741c18e(flag)
flag = chxor_37bb6be2(flag)
flag = add_b7f3fb09(flag)
flag = chmul_659e5d80(flag)
flag = chunk_9758765f(flag)
flag = cmul_910def34(flag)
flag = cmul_dc6ecbe6(flag)
flag = shuffle_f4bbf14d(flag)
flag = xor_071e51df(flag)
flag = chxor_cc620f44(flag)
flag = chsub_e1699c5c(flag)
flag = chxor_f8174daf(flag)
flag = shuffle_c5e07151(flag)
flag = cadd_6a1ee984(flag)
flag = cmul_16ddfa97(flag)
flag = csub_30ac2fb9(flag)
flag = cmul_da51d310(flag)
flag = xor_c0421e98(flag)
flag = add_5f346d84(flag)
flag = chadd_e835abf7(flag)
flag = cxor_207ceb20(flag)
flag = csub_d480ce5f(flag)
flag = cadd_626b1801(flag)
flag = xor_edf3c9f3(flag)
flag = mul_18205495(flag)
flag = xor_24b008b9(flag)
flag = add_1e3629e5(flag)
flag = cadd_3a7e4ac5(flag)
flag = mul_2b51c8be(flag)
flag = chadd_39c0e18e(flag)
flag = xor_b0ff6bbd(flag)
flag = shuffle_f3858d75(flag)
flag = chsub_27fbe141(flag)
flag = chadd_d7b62183(flag)
flag = mul_897a634a(flag)
flag = chmul_5f9891b6(flag)
flag = cmul_5f2f8cea(flag)
flag = mul_7a676b8f(flag)
flag = shuffle_0b97d7ce(flag)
flag = shuffle_63b7a61d(flag)
flag = chsub_4d7b9897(flag)
flag = chxor_3972d07b(flag)
flag = sub_df1c5e46(flag)
flag = cadd_01e4dea4(flag)
flag = cadd_709ceb61(flag)
flag = chmul_615c46c1(flag)
flag = chxor_ddc3a6b5(flag)
flag = sub_71bf262c(flag)
flag = digsub_bcdd2125(flag)
flag = chadd_714abd5f(flag)
flag = csub_2448d6e4(flag)
flag = cxor_22b4a127(flag)
flag = cmul_7d0c9f1b(flag)
flag = add_de55f4f2(flag)
flag = sub_c3134c11(flag)
flag = chsub_4a4043a6(flag)
flag = cmul_e55c9291(flag)
flag = shuffle_7894ad24(flag)
flag = chadd_c23de33f(flag)
flag = chxor_f0c78fe9(flag)
flag = cmul_ea158364(flag)
flag = chunk_4b50f9e1(flag)
flag = chxor_d3897d6a(flag)
flag = cadd_14ae0fe3(flag)
flag = digsub_703bfb0c(flag)
flag = digsub_c71698e9(flag)
flag = chunk_ce966b63(flag)
flag = cadd_5afd7d69(flag)
flag = chmul_6834bec9(flag)
flag = chunk_c828ed7d(flag)
flag = chadd_3aa9c371(flag)
flag = chadd_028f229e(flag)
flag = cmul_ee26b387(flag)
flag = xor_d0a1bc3c(flag)
flag = cmul_697c5558(flag)
flag = chadd_96a0ee76(flag)
flag = add_9591eabf(flag)
flag = add_c908a5f4(flag)
flag = mul_c991ef9e(flag)
flag = cxor_182bdecc(flag)
flag = cadd_d957f629(flag)
flag = chsub_dbd1ec78(flag)
flag = xor_abff1870(flag)
flag = chsub_e8aa8b79(flag)
flag = cmul_8189d30e(flag)
flag = xor_38573e9d(flag)
flag = chmul_9517c309(flag)
flag = cxor_bac498f9(flag)
flag = cadd_5afd7d69(flag)
flag = cxor_0afe7e7a(flag)
flag = shuffle_dc438735(flag)
flag = chxor_61629011(flag)
flag = mul_6858d87e(flag)
flag = cadd_6a1ee984(flag)
flag = shuffle_285ae96d(flag)
flag = sub_df1c5e46(flag)
flag = shuffle_883a1be7(flag)
flag = csub_eb8a37eb(flag)
flag = chsub_f3a1330b(flag)
flag = cadd_761effde(flag)
flag = chunk_594d46bc(flag)
flag = cmul_03ecbb18(flag)
flag = cmul_2eb68781(flag)
flag = csub_973b4044(flag)
flag = chsub_c813b5d2(flag)
flag = csub_5eadc310(flag)
flag = chxor_cd1b98ab(flag)
flag = xor_741282be(flag)
flag = cadd_d629e9a0(flag)
flag = digsub_8a9512c3(flag)
flag = digsub_76cf6e97(flag)
flag = cxor_0673e3e4(flag)
flag = chadd_5488a6fe(flag)
flag = cxor_22b4a127(flag)
flag = chmul_adc58ae6(flag)
flag = mul_4084757c(flag)
flag = xor_1c0c670c(flag)
flag = xor_0cecea66(flag)
flag = chsub_84e9e2bd(flag)
flag = chsub_36aaf90a(flag)
flag = cxor_c0bd96a1(flag)
flag = xor_5a1c8280(flag)
flag = chsub_3121e9c6(flag)
flag = shuffle_6d9a62f9(flag)
flag = sub_44409df4(flag)
flag = xor_77c70db2(flag)
flag = xor_214fe10e(flag)
flag = digsub_febb8b71(flag)
flag = chmul_5fbe910e(flag)
flag = cxor_3829c9db(flag)
flag = shuffle_f4cba7dd(flag)
flag = sub_9de672fa(flag)
flag = chmul_ae2a8843(flag)
flag = digsub_f2fb52b7(flag)
flag = chxor_56c9e723(flag)
flag = chmul_a6bf2367(flag)
flag = digsub_20744944(flag)
flag = mul_e0667d8e(flag)
flag = chxor_0595f6c3(flag)
flag = chadd_bd0ec963(flag)
flag = chmul_f8409008(flag)
flag = mul_01b0a78c(flag)
flag = add_986dd560(flag)
flag = xor_35062400(flag)
flag = chmul_8f392c35(flag)
flag = xor_0e83be33(flag)
flag = sub_4efcb7e6(flag)
flag = chadd_d54dcfab(flag)
flag = mul_bce42f5e(flag)
flag = chxor_e5000f9b(flag)
flag = chsub_4d0660a5(flag)
flag = cxor_c9c75462(flag)
flag = chxor_49e5796a(flag)
flag = chadd_3fbbddb8(flag)
flag = add_aae6cc04(flag)
flag = sub_a9414276(flag)
flag = add_b9d4cb35(flag)
flag = chxor_fa8c5c5f(flag)
flag = chadd_84fac9b1(flag)
flag = shuffle_0df0d459(flag)
flag = chxor_d17e07b3(flag)
flag = xor_a8eff498(flag)
flag = add_7553d25b(flag)
flag = chunk_16728eb8(flag)
flag = csub_ec729961(flag)
flag = shuffle_7b60ebb6(flag)
flag = chadd_36b8739d(flag)
flag = chsub_0b2321c1(flag)
flag = cadd_652099bf(flag)
flag = cadd_b4ab774d(flag)
flag = sub_2291bf41(flag)
flag = cadd_bf9e62c2(flag)
flag = xor_47cf200f(flag)
flag = mul_84ac318e(flag)
flag = cmul_70fa9f12(flag)
flag = chxor_2b2282b6(flag)
flag = chsub_c10f331f(flag)
flag = chmul_d62489f9(flag)
flag = sub_6ca5da9b(flag)
flag = add_db36360f(flag)
flag = chsub_7b8aa8b8(flag)
flag = shuffle_86e11db2(flag)
flag = add_11c4ac68(flag)
flag = digsub_1755eb85(flag)
flag = chsub_9fe7030d(flag)
flag = xor_4e31efc2(flag)
flag = sub_c15c0c16(flag)
flag = sub_6a9bc171(flag)
flag = chmul_d43d1a9f(flag)
flag = chsub_4b31a145(flag)
flag = shuffle_520f2eb6(flag)
flag = chsub_968aab31(flag)
flag = digsub_c71ff0e5(flag)
flag = mul_d4e4b51b(flag)
flag = chxor_7bc1a643(flag)
flag = chmul_004133b3(flag)
flag = chunk_459d40d3(flag)
flag = xor_46b7d1d1(flag)
flag = csub_d278adbd(flag)
flag = chadd_0305d89a(flag)
flag = cadd_a2760089(flag)
flag = cxor_4b979532(flag)
flag = cxor_df42d206(flag)
flag = mul_d900d8ed(flag)
flag = cmul_7ad45fd6(flag)
flag = cxor_4e153811(flag)
flag = chxor_87ec1ab5(flag)
flag = chxor_c8d60001(flag)
flag = chxor_ce07c0ad(flag)
flag = chxor_0449a472(flag)
flag = sub_a244688a(flag)
flag = chsub_74d9532d(flag)
flag = chmul_bfab997d(flag)
flag = sub_32cc1a97(flag)
flag = chsub_a3a9e242(flag)
flag = cxor_13669885(flag)
flag = digsub_1b9caedc(flag)
flag = chsub_aea82172(flag)
flag = mul_993204a9(flag)
flag = chadd_3016fa48(flag)
flag = chunk_524ad27b(flag)
flag = chadd_983dad8d(flag)
flag = csub_841d8ee8(flag)
flag = shuffle_83b67bb5(flag)
flag = cmul_ca02e498(flag)
flag = shuffle_ee25c5d7(flag)
flag = add_14d5f474(flag)
flag = mul_4ca5f016(flag)
flag = cxor_0c6bb32e(flag)
flag = cmul_6fb2378c(flag)
flag = digsub_6d16b628(flag)
flag = cxor_6953d2a7(flag)
flag = cmul_10dcbe35(flag)
flag = chsub_8dd5ab11(flag)
flag = chxor_24586d25(flag)
flag = csub_96d5d023(flag)
flag = sub_58eb1409(flag)
flag = shuffle_fda70d35(flag)
flag = shuffle_87103ee1(flag)
flag = cxor_bacb039a(flag)
flag = chadd_ddff28b1(flag)
flag = chunk_6b870e2e(flag)
flag = chxor_eb7e47c1(flag)
flag = csub_69098245(flag)
flag = cxor_7f32a16a(flag)
flag = chsub_0b2321c1(flag)
flag = cadd_40a2d9f1(flag)
flag = chxor_41c79131(flag)
flag = cmul_e577eda6(flag)
flag = chsub_49c13ad0(flag)
flag = cmul_8189d30e(flag)
flag = cxor_18ccd1a8(flag)
flag = xor_0ec01206(flag)
flag = shuffle_0736ce82(flag)
flag = cadd_fdc5f9f6(flag)
flag = chunk_90824d65(flag)
flag = shuffle_9076b7e7(flag)
flag = add_0cf48ce3(flag)
flag = cadd_75e1b32f(flag)
flag = digsub_c09c7211(flag)
flag = shuffle_a2ef4315(flag)
flag = chmul_2f893b62(flag)
flag = add_d7079839(flag)
flag = cmul_decdbb6d(flag)
flag = chsub_3679cdb7(flag)
flag = sub_bbf06d64(flag)
flag = cadd_e3f803ca(flag)
flag = csub_96f86ad8(flag)
flag = add_a69aa2f4(flag)
flag = cxor_025cbbe3(flag)
flag = chmul_18ecaa08(flag)
flag = digsub_f2fb52b7(flag)
flag = cmul_ed0fd163(flag)
flag = sub_753032fe(flag)
flag = digsub_2f6deeb4(flag)
flag = chadd_b29ed32e(flag)
flag = cmul_fd9e1024(flag)
flag = cxor_bac2ca1f(flag)
flag = chxor_442c0a5b(flag)
flag = digsub_732f28f7(flag)
flag = csub_959f7557(flag)
flag = shuffle_7b8c9089(flag)
flag = chunk_95566664(flag)
flag = digsub_5e8b7a8a(flag)
flag = cadd_6abb159d(flag)
flag = cxor_2f7b49f0(flag)
flag = sub_f5f7ee7a(flag)
flag = mul_66f10f71(flag)
flag = chmul_05b6d674(flag)
flag = cmul_aaa17c90(flag)
flag = csub_d3a63092(flag)
flag = chadd_da1b4b19(flag)
flag = digsub_6899cdac(flag)
flag = chadd_e92d3462(flag)
flag = chmul_b65f3bc2(flag)
flag = xor_e7da9a66(flag)
flag = xor_48d487cb(flag)
flag = digsub_aecf9a86(flag)
flag = chadd_36130bc9(flag)
flag = digsub_5c02cf5d(flag)
flag = chunk_90824d65(flag)
flag = cmul_ddd178e6(flag)
flag = chsub_4c5385aa(flag)
flag = cxor_fa552213(flag)
flag = xor_f88ae7f1(flag)
flag = cmul_30089d16(flag)
flag = xor_60dd65f0(flag)
flag = chadd_14d93540(flag)
flag = csub_c323c891(flag)
flag = chmul_dac3ab2b(flag)
flag = csub_81ef0c4c(flag)
flag = cxor_31be8398(flag)
flag = chsub_4c1e3f38(flag)
flag = sub_88400353(flag)
flag = csub_d97e3189(flag)
flag = chsub_421c0466(flag)
flag = chadd_3d5f0a2c(flag)
flag = cxor_2e4819bf(flag)
flag = cadd_49e18892(flag)
flag = cadd_64c6e595(flag)
flag = chmul_138f562c(flag)
flag = chxor_7bc1a643(flag)
flag = cmul_57e3d5bf(flag)
flag = digsub_225591cf(flag)
flag = chunk_b1f55538(flag)
flag = cxor_1290e20b(flag)
flag = cmul_9020ca8c(flag)
flag = chadd_d980e2e3(flag)
flag = xor_60dd65f0(flag)
flag = cxor_d43914ce(flag)
flag = xor_90c0a051(flag)
flag = mul_1f240b2b(flag)
flag = sub_e1d8193c(flag)
flag = digsub_065e725d(flag)
flag = chsub_76771162(flag)
flag = chmul_d5be6ef1(flag)
flag = cadd_0079a56b(flag)
flag = add_0a6cff9e(flag)
flag = csub_0b003b96(flag)
flag = add_88ef453e(flag)
flag = chmul_7df9b320(flag)
flag = cxor_b2b4971b(flag)
flag = chunk_c154a4b0(flag)
flag = csub_237fd55f(flag)
flag = chxor_ea20e7b5(flag)
flag = chadd_93c92f11(flag)
flag = chadd_1f526c5a(flag)
flag = sub_b676ab61(flag)
flag = shuffle_866b2261(flag)
flag = xor_51b2d18c(flag)
flag = sub_8b45b630(flag)
flag = add_5f0798fd(flag)
flag = csub_7035f8db(flag)
flag = mul_e04c3fbe(flag)
flag = chsub_59843fee(flag)
flag = csub_bce4bb70(flag)
flag = shuffle_68d954ec(flag)
flag = shuffle_ff476bf3(flag)
flag = cadd_15b9e74b(flag)
flag = cadd_3cbc013d(flag)
flag = cxor_df97c526(flag)
flag = sub_73c53d9f(flag)
flag = cadd_36d81dd6(flag)
flag = chunk_6f47d8f4(flag)
flag = chxor_00408453(flag)
flag = chadd_1a40fd7d(flag)
flag = digsub_ac841ac3(flag)
flag = add_5f346d84(flag)
flag = cmul_1b7b7fb7(flag)
flag = cxor_567d1d52(flag)
flag = chsub_6649ba27(flag)
flag = sub_65030a05(flag)
flag = cxor_0b39c3e8(flag)
flag = chsub_f75e24ea(flag)
flag = chsub_aea82172(flag)
flag = sub_83e670dd(flag)
flag = chadd_d95f9ffa(flag)
flag = add_71df7f95(flag)
flag = cxor_61ffae1c(flag)
flag = cxor_d1f287be(flag)
flag = cmul_7ca572e2(flag)
flag = chunk_0b233094(flag)
flag = xor_f1cb1b28(flag)
flag = csub_9a19bbcf(flag)
flag = xor_32fe74f6(flag)
flag = add_f66fdb75(flag)
flag = cxor_e5a9ee6a(flag)
flag = chadd_595ed02a(flag)
flag = mul_6ed04b93(flag)
flag = shuffle_76c2382f(flag)
flag = cadd_5acbd300(flag)
flag = digsub_46ad768c(flag)
flag = chadd_595ed02a(flag)
flag = chadd_0305d89a(flag)
flag = chsub_93ac52f5(flag)
flag = cxor_7be08bad(flag)
flag = add_e7bf4d1a(flag)
flag = cadd_3deee9ba(flag)
flag = chmul_d8f1c0f8(flag)
flag = mul_af43f0cd(flag)
flag = chxor_b212e95c(flag)
flag = chxor_27993531(flag)
flag = chmul_207c7813(flag)
flag = sub_b82d8405(flag)
flag = xor_e8c8896d(flag)
flag = chunk_f5342e5d(flag)
flag = chmul_22d64a0f(flag)
flag = cxor_53008000(flag)
flag = mul_5c575cdb(flag)
flag = shuffle_55c1c340(flag)
flag = chxor_59178ab0(flag)
flag = cmul_da51d310(flag)
flag = xor_24b008b9(flag)
flag = chsub_84e2be83(flag)
flag = chsub_7e45d909(flag)
flag = cadd_1bbdcd45(flag)
flag = cadd_503cc573(flag)
flag = csub_3d47b491(flag)
flag = chxor_36059956(flag)
flag = chmul_58875bd8(flag)
flag = cxor_207ceb20(flag)
flag = chsub_91553a2c(flag)
flag = chxor_b69b0e36(flag)
flag = chmul_384134ae(flag)
flag = digsub_6d16b628(flag)
flag = cadd_e69f5bf8(flag)
flag = cadd_469004ba(flag)
flag = sub_50bd0d23(flag)
flag = xor_c1cdd552(flag)
flag = chmul_49ccc560(flag)
flag = digsub_e1f5dc03(flag)
flag = xor_1eba93e4(flag)
flag = shuffle_abafc5c1(flag)
flag = csub_fbcb846c(flag)
flag = xor_14cbf59f(flag)
flag = mul_41bd61f2(flag)
flag = shuffle_63b7a61d(flag)
flag = cmul_cd1aad88(flag)
flag = chadd_52640d1f(flag)
flag = xor_3d551e50(flag)
flag = chunk_dd51ac10(flag)
flag = cmul_148c07dc(flag)
flag = shuffle_5ea1f654(flag)
flag = chadd_1feaf785(flag)
flag = xor_071e51df(flag)
flag = cadd_f59f3dd1(flag)
flag = cxor_98fe5771(flag)
flag = xor_ff7262d6(flag)
flag = shuffle_f554897b(flag)
flag = cadd_7016b7d0(flag)
flag = chmul_65689d19(flag)
flag = chmul_37dc6c90(flag)
flag = chsub_f1540b87(flag)
flag = chadd_00e2dbca(flag)
flag = sub_d67326ec(flag)
flag = chmul_dd1920ab(flag)
flag = add_9d214583(flag)
flag = cadd_5d182653(flag)
flag = csub_557e07a6(flag)
flag = xor_9bd4e1fb(flag)
flag = digsub_24f7cbd7(flag)
flag = shuffle_a2ef4315(flag)
flag = chxor_b09e96f6(flag)
flag = chxor_e276b565(flag)
flag = shuffle_e666492b(flag)
flag = cadd_eca08b2e(flag)
flag = cmul_ea158364(flag)
flag = csub_8d8cd37f(flag)
flag = shuffle_e6522329(flag)
flag = cxor_a0fe64b3(flag)
flag = sub_abe98fac(flag)
flag = csub_b0a1c121(flag)
flag = chxor_6fdbabf9(flag)
flag = mul_bc486461(flag)
flag = chsub_f15fc200(flag)
flag = chunk_d697c787(flag)
flag = mul_b62c8153(flag)
flag = csub_479c2380(flag)
flag = cxor_c7240b25(flag)
flag = chsub_9fe7030d(flag)
flag = digsub_20c16447(flag)
flag = shuffle_8e02f517(flag)
flag = chunk_1fa032d8(flag)
flag = chsub_968aab31(flag)
flag = xor_ccce8b68(flag)
flag = chsub_5f8a214c(flag)
flag = xor_f13936e3(flag)
flag = cxor_aaa07a69(flag)
flag = digsub_6b9010a5(flag)
flag = digsub_81042cb1(flag)
flag = csub_564b5e2c(flag)
flag = csub_26fceede(flag)
flag = chxor_b9af6481(flag)
flag = add_271749c1(flag)
flag = chmul_735407e2(flag)
flag = sub_51002c26(flag)
flag = add_0582a092(flag)
flag = chunk_a9c428c6(flag)
flag = cmul_c408d74b(flag)
flag = add_decb86a7(flag)
flag = chunk_3f96f374(flag)
flag = mul_4de4594c(flag)
flag = chxor_0256cccb(flag)
flag = chsub_87204349(flag)
flag = chmul_c042377c(flag)
flag = chadd_1ed1777e(flag)
flag = xor_cdbf869f(flag)
flag = cadd_074e39fc(flag)
flag = xor_c7130619(flag)
flag = shuffle_425fc483(flag)
flag = sub_121bf4fc(flag)
flag = cmul_c57ae7de(flag)
flag = chmul_20b6f48e(flag)
flag = cmul_d77e3c24(flag)
flag = add_8eb87b67(flag)
flag = chadd_a5fda7f8(flag)
flag = add_3e1e2c0b(flag)
flag = cmul_615b3bac(flag)
flag = add_f4bd902e(flag)
flag = xor_b75a23b1(flag)
flag = chsub_a85cba2a(flag)
flag = chxor_e1dd333b(flag)
flag = cmul_e510f1c4(flag)
flag = chsub_25609124(flag)
flag = mul_b5be71ee(flag)
flag = add_108fd3c6(flag)
flag = digsub_6be19c93(flag)
flag = chsub_02246759(flag)
flag = shuffle_cadeb447(flag)
flag = chadd_da1b4b19(flag)
flag = chunk_4423d984(flag)
flag = add_64420416(flag)
flag = chmul_37dc6c90(flag)
flag = mul_0cb6e2cc(flag)
flag = cxor_4b979532(flag)
flag = digsub_53dac253(flag)
flag = cxor_8fe94932(flag)
flag = digsub_e4e90033(flag)
flag = csub_b1b08f24(flag)
flag = cmul_00fd6c30(flag)
flag = chmul_e4e712b9(flag)
flag = chadd_2da7db06(flag)
flag = chxor_8d5feb9a(flag)
flag = chmul_deae7468(flag)
flag = xor_7661c292(flag)
flag = add_139a0cf3(flag)
flag = mul_8502f399(flag)
flag = add_158186ec(flag)
flag = chxor_69637723(flag)
flag = chmul_a1decfe1(flag)
flag = add_e26173d3(flag)
flag = xor_a36d3d94(flag)
flag = add_35671a57(flag)
flag = chmul_3d9011bc(flag)
flag = shuffle_76c2382f(flag)
flag = xor_1eba93e4(flag)
flag = digsub_ef3c36c5(flag)
flag = cmul_b57f5cfc(flag)
flag = cadd_029527b8(flag)
flag = cadd_e856ecc9(flag)
flag = sub_47cbdf28(flag)
flag = mul_df48e442(flag)
flag = add_fc769e2f(flag)
flag = chsub_68113691(flag)
flag = sub_71bf262c(flag)
flag = digsub_262ebaa4(flag)
flag = csub_3564220e(flag)
flag = chxor_30be5eb3(flag)
flag = chsub_c6725cc1(flag)
flag = chxor_4ec23f54(flag)
flag = mul_67e87c31(flag)
flag = sub_92f79353(flag)
flag = sub_b676ab61(flag)
flag = cadd_6abb159d(flag)
flag = xor_64af3af1(flag)
flag = add_1269779e(flag)
flag = sub_a40cb760(flag)
flag = cxor_bba6fa0a(flag)
flag = cmul_c0727784(flag)
flag = mul_7fa6ac59(flag)
flag = xor_9b985733(flag)
flag = cxor_f20321f0(flag)
flag = csub_4e221287(flag)
flag = chsub_b60cec96(flag)
flag = xor_f98f4d97(flag)
flag = xor_1c0c670c(flag)
flag = cxor_f30be4dd(flag)
flag = chxor_4447550e(flag)
flag = chsub_134ff6dd(flag)
flag = sub_56d810e7(flag)
flag = chmul_64d93738(flag)
flag = chmul_c2508e0f(flag)
flag = add_c908a5f4(flag)
flag = cxor_fa552213(flag)
flag = chxor_8db15314(flag)
flag = xor_edf3c9f3(flag)
flag = csub_8a92b818(flag)
flag = xor_abff1870(flag)
flag = chxor_3569bd0b(flag)
flag = xor_b75a23b1(flag)
flag = mul_4bd300c9(flag)
flag = chsub_2b33e666(flag)
flag = chxor_7b570606(flag)
flag = xor_23517ee7(flag)
flag = shuffle_691df10d(flag)
flag = chmul_ab54c89e(flag)
flag = chadd_88f9bb2d(flag)
flag = csub_dcf528e5(flag)
flag = chsub_15fcbd3c(flag)
flag = csub_2645ed31(flag)
flag = chxor_6ae1cc6a(flag)
flag = chxor_730db16c(flag)
flag = mul_af43f0cd(flag)
flag = chunk_518ff916(flag)
flag = chmul_cfee488f(flag)
flag = chadd_bbfef485(flag)
flag = chxor_f274337d(flag)
flag = cmul_6ae52f53(flag)
flag = mul_959ccef4(flag)
flag = chsub_e6873048(flag)
flag = chxor_e2e70239(flag)
flag = mul_70770109(flag)
flag = digsub_8599b0c1(flag)
flag = chunk_3256d188(flag)
flag = cxor_3b62f0a0(flag)
flag = chxor_25d74c81(flag)
flag = chadd_1f526c5a(flag)
flag = xor_b3655f1c(flag)
flag = chunk_649c4eba(flag)
flag = mul_8710992d(flag)
flag = chunk_0c74cc13(flag)
flag = cxor_bbd7e7fe(flag)
flag = add_8db2a643(flag)
flag = chadd_ac9d1de7(flag)
flag = chsub_b543d1d6(flag)
flag = chadd_5544e38e(flag)
flag = cxor_e4036825(flag)
flag = shuffle_f554897b(flag)
flag = add_e4570f19(flag)
flag = chadd_3aa9c371(flag)
flag = csub_cb2cec49(flag)
flag = chadd_3a7cbca3(flag)
flag = mul_835fdfd8(flag)
flag = chsub_4fe6a0b8(flag)
flag = chmul_608cd53e(flag)
flag = chadd_b3214236(flag)
flag = cmul_13cd66b9(flag)
flag = chadd_a6e32549(flag)
flag = csub_2df7e131(flag)
flag = chadd_896dc902(flag)
flag = cmul_92323fe7(flag)
flag = shuffle_fbcb4ff2(flag)
flag = chadd_fed374e0(flag)
flag = cmul_0fec80e1(flag)
flag = csub_841d8ee8(flag)
flag = mul_a0ace443(flag)
flag = chmul_18bbd248(flag)
flag = cxor_c146ee2f(flag)
flag = add_2be5c482(flag)
flag = cadd_63b5febd(flag)
flag = digsub_a740a80e(flag)
flag = digsub_2f2a8750(flag)
flag = add_b9d4cb35(flag)
flag = cxor_53008000(flag)
flag = xor_b8937290(flag)
flag = shuffle_dd75cb23(flag)
flag = xor_25ac4148(flag)
flag = chadd_742f064d(flag)
flag = cxor_8ff25e39(flag)
flag = chsub_62a8f1cd(flag)
flag = chadd_61a15596(flag)
flag = chsub_a40de1d7(flag)
flag = sub_7e5f5612(flag)
flag = cadd_22e59670(flag)
flag = add_ed6c03df(flag)
flag = chxor_8264e501(flag)
flag = shuffle_5f949cd5(flag)
flag = add_837ef20b(flag)
flag = digsub_703bfb0c(flag)
flag = chxor_2f1310f4(flag)
flag = sub_5e831919(flag)
flag = chxor_f5fbcae0(flag)
flag = cmul_7630284a(flag)
flag = chunk_b26605b9(flag)
flag = chxor_49854e3d(flag)
flag = chxor_de94bd99(flag)
flag = csub_024ef6f9(flag)
flag = add_c8475b4e(flag)
flag = chadd_ddff28b1(flag)
flag = digsub_54057ff2(flag)
flag = sub_0cb0697d(flag)
flag = digsub_2a51613f(flag)
flag = cadd_3124bc3c(flag)
flag = chsub_827fc456(flag)
flag = cxor_ccd49eb2(flag)
flag = chunk_d09c8616(flag)
flag = digsub_7d14062a(flag)
flag = digsub_7e09e05c(flag)
flag = chxor_e1dd333b(flag)
flag = shuffle_3a497842(flag)
flag = cadd_97daaa50(flag)
flag = chunk_e006d845(flag)
flag = cmul_8ec6e2f9(flag)
flag = cmul_db003c24(flag)
flag = chmul_7eea79aa(flag)
flag = csub_d46575ec(flag)
flag = mul_150845b8(flag)
flag = chadd_3b98f1b0(flag)
flag = add_b510c979(flag)
flag = cxor_07785927(flag)
flag = digsub_ec12ae2a(flag)
flag = chadd_620f96a9(flag)
flag = sub_e6d0323d(flag)
flag = csub_af6b6944(flag)
flag = digsub_94dd3136(flag)
flag = chunk_28475841(flag)
flag = chxor_b4cd4919(flag)
flag = chxor_de63f975(flag)
flag = xor_f41b0fa6(flag)
flag = sub_08dcb465(flag)
flag = xor_f7706b03(flag)
flag = add_db36360f(flag)
flag = chmul_8e52ad65(flag)
flag = xor_f80064d0(flag)
flag = mul_8e78cc44(flag)
flag = cmul_e55c9291(flag)
flag = xor_ddf28b31(flag)
flag = chmul_18bbd248(flag)
flag = cmul_3c18a69a(flag)
flag = chxor_18fcc0f2(flag)
flag = digsub_d085a426(flag)
flag = chunk_40051429(flag)
flag = digsub_4bfe6492(flag)
flag = cxor_1f2b9c26(flag)
flag = add_f2a6c048(flag)
flag = sub_430d0f4c(flag)
flag = cmul_0b6d9f9a(flag)
flag = sub_142fa244(flag)
flag = chxor_87ec1ab5(flag)
flag = chmul_47a26e6f(flag)
flag = chxor_d50259ba(flag)
flag = csub_23110697(flag)
flag = chxor_f8174daf(flag)
flag = cmul_5f59af38(flag)
flag = mul_33103309(flag)
flag = chunk_1fa032d8(flag)
flag = cadd_4658d16e(flag)
flag = csub_564b5e2c(flag)
flag = csub_59e78f82(flag)
flag = chmul_ab54c89e(flag)
flag = chxor_6e6160e1(flag)
flag = cadd_64142db2(flag)
flag = chadd_1989b407(flag)
flag = chsub_c2ee0e2b(flag)
flag = add_ed6c03df(flag)
flag = cadd_d44bbdbd(flag)
flag = cadd_2dd09d3d(flag)
flag = digsub_6899cdac(flag)
flag = sub_3c434ee5(flag)
flag = mul_33103309(flag)
flag = sub_f1ab5525(flag)
flag = chunk_cd87c4de(flag)
flag = chsub_62ab19db(flag)
flag = chadd_837f34c3(flag)
flag = chxor_59178ab0(flag)
flag = digsub_c71698e9(flag)
flag = chunk_206c8668(flag)
flag = cadd_3c6d2025(flag)
flag = add_58fa684a(flag)
flag = cxor_b70fe991(flag)
flag = digsub_ab800369(flag)
flag = cxor_ffad6101(flag)
flag = cadd_d6acbbb6(flag)
flag = digsub_7942bae6(flag)
flag = chsub_7b8aa8b8(flag)
flag = chsub_01f682a9(flag)
flag = digsub_d5cf3761(flag)
flag = chunk_01c25ee4(flag)
flag = csub_1ca516a7(flag)
flag = add_1ddc8330(flag)
flag = chadd_04672342(flag)
flag = cadd_2a11e194(flag)
flag = chunk_8ad268b9(flag)
flag = cadd_81a69b3f(flag)
flag = chsub_e01faa71(flag)
flag = cxor_53f93269(flag)
flag = cxor_86de55f2(flag)
flag = xor_3c5d07f5(flag)
flag = chxor_57e0c9f1(flag)
flag = digsub_b6c1346d(flag)
flag = add_c1c20de3(flag)
flag = xor_48d487cb(flag)
flag = chsub_00adad20(flag)
flag = chunk_4a721cb6(flag)
flag = chsub_e508cd4b(flag)
flag = sub_5525246a(flag)
flag = xor_76cd9a81(flag)
flag = sub_e6d0323d(flag)
flag = digsub_6bf0d618(flag)
flag = digsub_98eb887b(flag)
flag = chsub_339c9633(flag)
flag = csub_5eadc310(flag)
flag = chxor_beaa6fd7(flag)
flag = chsub_207ccdea(flag)
flag = shuffle_ee25c5d7(flag)
flag = cxor_22b4a127(flag)
flag = add_e4570f19(flag)
flag = chxor_a67420fd(flag)
flag = cmul_bac2ec72(flag)
flag = sub_023318b3(flag)
flag = chsub_5b0f6d80(flag)
flag = xor_ed479080(flag)
flag = digsub_211a2fee(flag)
flag = chsub_91add2c2(flag)
flag = chmul_7c4163e6(flag)
flag = chmul_160cacb0(flag)
flag = chxor_e4593d98(flag)
flag = chsub_4c1e3f38(flag)
flag = cxor_11a1bb19(flag)
flag = add_71df7f95(flag)
flag = chsub_56440f95(flag)
flag = cadd_51ae129c(flag)
flag = chadd_1a40fd7d(flag)
flag = digsub_53dac253(flag)
flag = chunk_397a3d62(flag)
flag = cmul_c57ae7de(flag)
flag = xor_fc88f2e7(flag)
flag = sub_665d3f8a(flag)
flag = chunk_c8598499(flag)
flag = cmul_697c5558(flag)
flag = shuffle_7bf7a2c9(flag)
flag = xor_4946eb25(flag)
flag = cmul_9535a158(flag)
flag = chxor_013d1031(flag)
flag = cmul_2badfc5b(flag)
flag = chadd_91feb455(flag)
flag = sub_00c9af82(flag)
flag = shuffle_5cd09bb7(flag)
flag = xor_64a04adb(flag)
flag = xor_cc5d6b6d(flag)
flag = chsub_74d9532d(flag)
flag = chunk_a9bb69a3(flag)
flag = shuffle_4b183fad(flag)
flag = cxor_b93aeb3d(flag)
flag = cmul_01ec6381(flag)
flag = chxor_61629011(flag)
flag = xor_8ae01235(flag)
flag = chmul_77349f1c(flag)
flag = add_eee6c971(flag)
flag = add_6aac990e(flag)
flag = chxor_59b7fb58(flag)
flag = cxor_1e0efad7(flag)
flag = xor_fddd23ae(flag)
flag = chmul_885659c9(flag)
flag = chxor_3b22e51a(flag)
flag = chmul_998ab1ea(flag)
flag = chxor_ce130299(flag)
flag = chunk_8476d997(flag)
flag = cxor_da9ff7d9(flag)
flag = mul_e2b49085(flag)
flag = shuffle_5f949cd5(flag)
flag = chunk_c828ed7d(flag)
flag = xor_b8479b53(flag)
flag = chunk_36ffef9b(flag)
flag = csub_b25f1796(flag)
flag = xor_22b22c9a(flag)
flag = csub_fc0bc142(flag)
flag = add_1c8d08f1(flag)
flag = xor_77377fa6(flag)
flag = digsub_db13869f(flag)
flag = chxor_57e0c9f1(flag)
flag = xor_ab901228(flag)
flag = chsub_bb765577(flag)
flag = chsub_71c61f9b(flag)
flag = mul_2a724485(flag)
flag = chsub_4fe6a0b8(flag)
flag = csub_5e8b3577(flag)
flag = xor_36e98afe(flag)
flag = add_377e663e(flag)
flag = shuffle_721dc700(flag)
flag = chsub_f850c36b(flag)
flag = mul_5c575cdb(flag)
flag = chxor_6ae1cc6a(flag)
flag = cadd_2bb6b4bc(flag)
flag = chunk_39378691(flag)
flag = add_58fa684a(flag)
flag = sub_023318b3(flag)
flag = digsub_ee67309b(flag)
flag = xor_5c4520e3(flag)
flag = chxor_af8f84bc(flag)
flag = digsub_af816cb4(flag)
flag = xor_d5273bd6(flag)
flag = chmul_7cbf2205(flag)
flag = shuffle_050ae2c2(flag)
flag = mul_1f240b2b(flag)
flag = chxor_da702120(flag)
flag = cmul_029f5e8d(flag)
flag = csub_4707f65f(flag)
flag = sub_1d06041f(flag)
flag = chadd_36b8739d(flag)
flag = chadd_4b37b268(flag)
flag = cmul_0d8033d0(flag)
flag = cmul_91c63a57(flag)
flag = chmul_794b5292(flag)
flag = cxor_112ee4fc(flag)
flag = digsub_7d14062a(flag)
flag = sub_51e1902d(flag)
flag = add_36fb4d7d(flag)
flag = chmul_b9bc1a28(flag)
flag = chadd_f2fd70f1(flag)
flag = add_c40251ff(flag)
flag = digsub_288ef9ea(flag)
flag = chadd_2699a0a4(flag)
flag = digsub_ee67309b(flag)
flag = add_2b6347c9(flag)
flag = mul_6858d87e(flag)
flag = chxor_a1104840(flag)
flag = digsub_be5397e9(flag)
flag = sub_31290fb7(flag)
flag = mul_9dbf3796(flag)
flag = csub_b0a1c121(flag)
flag = digsub_4c404e0f(flag)
flag = shuffle_1a7b4aba(flag)
flag = sub_609bbd1a(flag)
flag = chxor_28f8a717(flag)
flag = digsub_94dd3136(flag)
flag = chadd_8e1c6d19(flag)
flag = shuffle_c3a4eec2(flag)
flag = sub_560b0d88(flag)
flag = cadd_bf9e62c2(flag)
flag = add_eac32141(flag)
flag = cadd_7cbc750f(flag)
flag = cxor_31e27f48(flag)
flag = chsub_e0ab5693(flag)
flag = add_1039dc95(flag)
flag = add_aa98b4ae(flag)
flag = cxor_7be08bad(flag)
flag = shuffle_b69552ce(flag)
flag = cmul_4efbd341(flag)
flag = cxor_bbd7e7fe(flag)
flag = chsub_df08aee7(flag)
flag = digsub_732f28f7(flag)
flag = chxor_bbf3589a(flag)
flag = chadd_658a720b(flag)
flag = xor_e9151d45(flag)
flag = chxor_829e0b1c(flag)
flag = cxor_7d13d92f(flag)
flag = add_3e1e2c0b(flag)
flag = chunk_2e1e8db3(flag)
flag = chunk_97573788(flag)
flag = shuffle_f6aee04d(flag)
flag = chunk_ce966b63(flag)
flag = digsub_c71ff0e5(flag)
flag = cmul_0c91bf4c(flag)
flag = chsub_3f26a959(flag)
flag = sub_0cb0697d(flag)
flag = mul_d23185db(flag)
flag = chadd_b9888b8b(flag)
flag = chsub_d2de1fcc(flag)
flag = digsub_1f6e32d7(flag)
flag = chadd_0badfcf5(flag)
flag = cmul_7e424373(flag)
flag = chmul_faead8d0(flag)
flag = digsub_9adbb647(flag)
flag = mul_8710992d(flag)
flag = digsub_b40bee06(flag)
flag = chadd_1989b407(flag)
flag = mul_f80a89cf(flag)
flag = chsub_3af5214b(flag)
flag = chunk_85747b20(flag)
flag = chxor_d8c4549f(flag)
flag = xor_a175d05f(flag)
flag = csub_fdf338ac(flag)
flag = chxor_88e67ab1(flag)
flag = csub_20a984f0(flag)
flag = cmul_eae26d7e(flag)
flag = cadd_8fd791e9(flag)
flag = add_204a88d5(flag)
flag = cmul_d7a4e37f(flag)
flag = digsub_f2e8b007(flag)
flag = csub_ad5db692(flag)
flag = sub_11293e74(flag)
flag = chxor_385bc3a3(flag)
flag = digsub_081fcfe8(flag)
flag = csub_7f9b642d(flag)
flag = chsub_4c5385aa(flag)
flag = shuffle_d348541e(flag)
flag = chsub_792c2235(flag)
flag = cadd_c66b787a(flag)
flag = chsub_b335ae97(flag)
flag = sub_1939e4b0(flag)
flag = chsub_b090cf63(flag)
flag = csub_3d9f618d(flag)
flag = cmul_0b1c712d(flag)
flag = cadd_9406ad37(flag)
flag = xor_f5bcc389(flag)
flag = csub_024ef6f9(flag)
flag = cmul_fedaeb35(flag)
flag = chsub_714e8ec9(flag)
flag = chmul_7cfdd3dc(flag)
flag = shuffle_4756c622(flag)
flag = mul_ebff36e1(flag)
flag = digsub_e2130014(flag)
flag = chsub_46b53140(flag)
flag = csub_ad630998(flag)
flag = chunk_edf055e9(flag)
flag = shuffle_496b2c86(flag)
flag = mul_f41b15dd(flag)
flag = digsub_081fcfe8(flag)
flag = cadd_d3782943(flag)
flag = chunk_225b51ad(flag)
flag = chxor_3bea6df8(flag)
flag = cmul_45c479ca(flag)
flag = sub_e1d8193c(flag)
flag = shuffle_7ccfcf66(flag)
flag = chxor_59b7fb58(flag)
flag = sub_1b55f541(flag)
flag = cxor_13669885(flag)
flag = chunk_e4be2495(flag)
flag = chmul_fc1bd11c(flag)
flag = sub_2f70dd6e(flag)
flag = chunk_f140121b(flag)
flag = chunk_cb2fa615(flag)
flag = cxor_f4c61b89(flag)
flag = chsub_97dfddf9(flag)
flag = csub_bdd64a1d(flag)
flag = xor_ac535945(flag)
flag = chadd_83134f29(flag)
flag = chxor_ea20e7b5(flag)
flag = shuffle_181172b7(flag)
flag = chmul_1666c516(flag)
flag = chmul_5c39207d(flag)
flag = add_c3181859(flag)
flag = shuffle_0ca300ee(flag)
flag = chmul_068c4ae9(flag)
flag = csub_d77927e4(flag)
flag = sub_1939e4b0(flag)
flag = cmul_b2582678(flag)
flag = xor_b055d8c5(flag)
flag = cxor_2e4b26f4(flag)
flag = chxor_e36c3430(flag)
flag = sub_8fe1102c(flag)
flag = add_2be5c482(flag)
flag = mul_8028fe56(flag)
flag = cxor_454d9bad(flag)
flag = digsub_3316ff72(flag)
flag = chunk_91f40280(flag)
flag = sub_b83b0b5a(flag)
flag = chxor_fad6bade(flag)
flag = mul_d9dbdb53(flag)
flag = chmul_645c1d15(flag)
flag = cmul_e577eda6(flag)
flag = digsub_2684203b(flag)
flag = chxor_6ef3ef24(flag)
flag = add_9009d319(flag)
flag = cadd_51ae129c(flag)
flag = sub_7198b6a2(flag)
flag = add_1688c841(flag)
flag = chsub_8a25c41f(flag)
flag = chxor_efcd55a0(flag)
flag = cadd_7bfaa07b(flag)
flag = chsub_01f682a9(flag)
flag = sub_ce128c36(flag)
flag = cmul_893e1b56(flag)
flag = mul_3d2d3c98(flag)
flag = chxor_97c61f30(flag)
flag = mul_2f486d74(flag)
flag = chunk_b1f55538(flag)
flag = xor_fa921805(flag)
flag = chsub_62b4c10c(flag)
flag = digsub_f74d6e2c(flag)
flag = chxor_e3309cca(flag)
flag = mul_e8a5e4e0(flag)
flag = cadd_838fe20a(flag)
flag = chxor_ea027ec2(flag)
flag = chmul_18ecaa08(flag)
flag = chxor_e93460f8(flag)
flag = xor_c0f387ba(flag)
flag = chunk_73de87d2(flag)
flag = cxor_b2b4971b(flag)
flag = cadd_86ca3121(flag)
flag = digsub_ec12ae2a(flag)
flag = xor_19d4481b(flag)
flag = mul_959ccef4(flag)
flag = cmul_a0ab0dc2(flag)
flag = chxor_665eed2c(flag)
flag = chmul_0b2874b7(flag)
flag = chmul_e6742997(flag)
flag = sub_2e2758dc(flag)
flag = add_a3d5d1da(flag)
flag = digsub_1d28a867(flag)
flag = add_502ea941(flag)
flag = cxor_c4a0e97e(flag)
flag = chxor_6c38cb27(flag)
flag = chmul_d1afe9b0(flag)
flag = chmul_1bf400c7(flag)
flag = cmul_7d43ab73(flag)
flag = cxor_3b62f0a0(flag)
flag = chadd_5d344985(flag)
flag = mul_bdbf4994(flag)
flag = chxor_85ae54d2(flag)
flag = add_2551e3c7(flag)
flag = shuffle_e204c945(flag)
flag = cxor_bacb039a(flag)
flag = cmul_13e6bde9(flag)
flag = chsub_f27f3438(flag)
flag = chmul_5b21f3a5(flag)
flag = cmul_7a2b74fe(flag)
flag = cxor_9eab5098(flag)
flag = cadd_e4e4c9c0(flag)
flag = sub_51e1902d(flag)
flag = cxor_4d3c5896(flag)
flag = digsub_dcdf3ce1(flag)
flag = mul_75e8ddbd(flag)
flag = shuffle_34dde52b(flag)
flag = chunk_8ad268b9(flag)
flag = chadd_4162bfbe(flag)
flag = chunk_adb7a31f(flag)
flag = digsub_a5f0e042(flag)
flag = cadd_a39df2bc(flag)
flag = chxor_8264e501(flag)
flag = sub_e9895f44(flag)
flag = chxor_d94a9bdc(flag)
flag = csub_cea15a0b(flag)
flag = cxor_2b349478(flag)
flag = add_03dc5f83(flag)
flag = chsub_b9955d1a(flag)
flag = sub_51002c26(flag)
flag = cxor_61ffae1c(flag)
flag = chxor_d48b7863(flag)
flag = xor_5c4520e3(flag)
flag = shuffle_28820acc(flag)
flag = cadd_fe8798b7(flag)
flag = chadd_cf38fd97(flag)
flag = digsub_f316d9e1(flag)
flag = mul_31e8499c(flag)
flag = chunk_d3ecfe82(flag)
flag = digsub_8e44fdbd(flag)
flag = digsub_636b7f9c(flag)
flag = cmul_a50583d3(flag)
flag = digsub_864e27e4(flag)
flag = sub_61538669(flag)
flag = cadd_603af25d(flag)
flag = chsub_c813b5d2(flag)
flag = digsub_1b9caedc(flag)
flag = chsub_b942a4e6(flag)
flag = chxor_4ec23f54(flag)
flag = chsub_5f8a214c(flag)
flag = chxor_500947df(flag)
flag = sub_de79490f(flag)
flag = sub_2cdb195c(flag)
flag = shuffle_3a65d143(flag)
flag = chxor_7fed6271(flag)
flag = cxor_1330b89b(flag)
flag = chxor_0d7983da(flag)
flag = add_30966eb1(flag)
flag = chmul_5af32334(flag)
flag = chmul_26940e3b(flag)
flag = xor_23d58644(flag)
flag = mul_d63192f4(flag)
flag = chadd_f560a4d3(flag)
flag = shuffle_f44f0fc5(flag)
flag = cxor_8666b092(flag)
flag = add_26bde20c(flag)
flag = shuffle_e75b3905(flag)
flag = chadd_f137e21d(flag)
flag = shuffle_2621171b(flag)
flag = add_0582a092(flag)
flag = chunk_205e30c0(flag)
flag = mul_9d0c3682(flag)
flag = cadd_3cbc013d(flag)
flag = cmul_9e6c0fb6(flag)
flag = shuffle_a3c6e740(flag)
flag = mul_21355dba(flag)
flag = cadd_ea9ca040(flag)
flag = chmul_7e4acef8(flag)
flag = chadd_323e5325(flag)
flag = chxor_ce40491b(flag)
flag = chmul_b923d46c(flag)
flag = add_d2ad8931(flag)
flag = mul_bb31d66d(flag)
flag = chmul_6f2b8735(flag)
flag = chmul_f462de4c(flag)
flag = shuffle_49c48148(flag)
flag = cxor_bb8eddbd(flag)
flag = cadd_99696e25(flag)
flag = chadd_09e456ed(flag)
flag = add_ec1d658a(flag)
flag = chxor_72c80534(flag)
flag = chunk_a5854668(flag)
flag = chunk_ba9920ce(flag)
flag = cxor_6c5cd5c7(flag)
flag = chadd_e92d3462(flag)
flag = xor_2b415907(flag)
flag = chadd_7fc84678(flag)
flag = cxor_93784217(flag)
flag = chadd_83a5c6be(flag)
flag = sub_5d7857eb(flag)
flag = shuffle_1ff845ef(flag)
flag = cxor_03f5597b(flag)
flag = xor_4946eb25(flag)
flag = mul_7fa6ac59(flag)
flag = chxor_1e5bb2ed(flag)
flag = chmul_9517c309(flag)
flag = chmul_f8bbf12f(flag)
flag = mul_68b3556d(flag)
flag = mul_2a5a432a(flag)
flag = mul_bc486461(flag)
flag = add_4734c18c(flag)
flag = shuffle_10c94be6(flag)
flag = chadd_b0d8f554(flag)
flag = cmul_9ea3f862(flag)
flag = shuffle_e874a3fc(flag)
flag = csub_26fceede(flag)
flag = chxor_55bd1b17(flag)
flag = chsub_195ef194(flag)
flag = cmul_3c96ba6e(flag)
flag = chsub_ca548f97(flag)
flag = mul_94dd1b49(flag)
flag = shuffle_abafc5c1(flag)
flag = shuffle_32641923(flag)
flag = chsub_c6668097(flag)
flag = chxor_85ae54d2(flag)
flag = mul_6a63acf6(flag)
flag = cxor_bfb33206(flag)
flag = cxor_bba6fa0a(flag)
flag = cadd_5df8c3da(flag)
flag = add_9009d319(flag)
flag = chmul_c4c465cb(flag)
flag = cxor_4cb585c4(flag)
flag = chunk_c5398c39(flag)
flag = cadd_640c9c4d(flag)
flag = shuffle_b20aa4f9(flag)
flag = add_6aac990e(flag)
flag = digsub_f0bd3d90(flag)
flag = cmul_c4987507(flag)
flag = chadd_7a20c681(flag)
flag = mul_7a676b8f(flag)
flag = chxor_595823d4(flag)
flag = cadd_9bed43d0(flag)
flag = chmul_0e5b89be(flag)
flag = cadd_ae1d750b(flag)
flag = shuffle_a2ef4315(flag)
flag = cmul_4a4181f0(flag)
flag = cxor_da3537d5(flag)
flag = sub_ce128c36(flag)
flag = cmul_8ce7a691(flag)
flag = digsub_1348ccb0(flag)
flag = csub_b73a0cb6(flag)
flag = chunk_faeac0c7(flag)
flag = chxor_2978c8d9(flag)
flag = chmul_326aefee(flag)
flag = chmul_510bb7ff(flag)
flag = sub_c62f3219(flag)
flag = mul_043ce6a6(flag)
flag = cxor_9a341cfa(flag)
flag = digsub_8e44fdbd(flag)
flag = chsub_dfabe48a(flag)
flag = mul_658a4b4b(flag)
flag = xor_90c0a051(flag)
flag = mul_2f486d74(flag)
flag = cadd_64c6e595(flag)
flag = csub_9560b32f(flag)
flag = sub_6a868517(flag)
flag = chmul_8d98c6d1(flag)
flag = mul_1f240b2b(flag)
flag = cadd_93ce9459(flag)
flag = csub_ed2f200a(flag)
flag = cadd_86ca3121(flag)
flag = add_b4b55578(flag)
flag = chunk_352f49d6(flag)
flag = chsub_244387c4(flag)
flag = sub_6ca5da9b(flag)
flag = chunk_6b870e2e(flag)
flag = chxor_a2b08b13(flag)
flag = chadd_fc7a65ec(flag)
flag = cmul_86b4d215(flag)
flag = cxor_5ac6b756(flag)
flag = chxor_733c74e9(flag)
flag = xor_fccb27f6(flag)
flag = sub_53dd4b93(flag)
flag = xor_0723c89e(flag)
flag = xor_35062400(flag)
flag = chunk_91f40280(flag)
flag = mul_9536d3d7(flag)
flag = csub_b0a1c121(flag)
flag = sub_7bf8c980(flag)
flag = shuffle_2c2121d2(flag)
flag = xor_3d551e50(flag)
flag = shuffle_fbcb4ff2(flag)
flag = chxor_cb71a848(flag)
flag = cmul_e953e2ca(flag)
flag = chxor_f6c4d9ae(flag)
flag = sub_6a9bc171(flag)
flag = xor_bb19f697(flag)
flag = chmul_79e6dd5d(flag)
flag = cadd_f435a64a(flag)
flag = cxor_26057d46(flag)
flag = mul_6a63acf6(flag)
flag = add_2551e3c7(flag)
flag = chmul_a0fda47c(flag)
flag = shuffle_883a1be7(flag)
flag = shuffle_57fe470a(flag)
flag = digsub_d5cf3761(flag)
flag = shuffle_b6a2aa6c(flag)
flag = xor_5b9dbd1c(flag)
flag = cadd_a5b24fcc(flag)
flag = sub_785b373a(flag)
flag = chunk_16728eb8(flag)
flag = add_4584979d(flag)
flag = chunk_56a0ded7(flag)
flag = csub_959f7557(flag)
flag = chadd_52f847ab(flag)
flag = cadd_f288775d(flag)
flag = mul_70d397f8(flag)
flag = chmul_f48a5878(flag)
flag = cmul_3062560c(flag)
flag = shuffle_b69552ce(flag)
flag = chmul_8cfb1503(flag)
flag = shuffle_92fb44d4(flag)
flag = cmul_9f53e257(flag)
flag = csub_7d205427(flag)
flag = cmul_3cb7c090(flag)
flag = chsub_3af5214b(flag)
flag = shuffle_54e93000(flag)
flag = chxor_556134a0(flag)
flag = sub_178d064e(flag)
flag = chxor_de5cf1af(flag)
flag = chadd_63faefcf(flag)
flag = chmul_0db588dd(flag)
flag = chunk_77a6c434(flag)
flag = mul_d0313a6c(flag)
flag = chmul_384134ae(flag)
flag = digsub_2a496578(flag)
flag = xor_bb19f697(flag)
flag = add_f66fdb75(flag)
flag = sub_83e670dd(flag)
flag = shuffle_6186b5b1(flag)
flag = shuffle_d70b85e8(flag)
flag = xor_984175c8(flag)
flag = chsub_dfabe48a(flag)
flag = chsub_24c471c0(flag)
flag = shuffle_9d73add2(flag)
flag = xor_c1cdd552(flag)
flag = chadd_3c9e0be9(flag)
flag = cadd_81a69b3f(flag)
flag = digsub_6ab37400(flag)
flag = mul_74e68352(flag)
flag = digsub_8e44fdbd(flag)
flag = cmul_22a48cb5(flag)
flag = chmul_0bc227c2(flag)
flag = chsub_18437de0(flag)
flag = chxor_83f63c74(flag)
flag = cadd_5afd7d69(flag)
flag = csub_087d6e8e(flag)
flag = csub_2448d6e4(flag)
flag = add_ebcc13ce(flag)
flag = chxor_d44107b6(flag)
flag = xor_cb183615(flag)
flag = chmul_cfee488f(flag)
flag = chsub_da5ea1df(flag)
flag = cmul_b421453f(flag)
flag = cmul_21388cd8(flag)
flag = cadd_d1616fc6(flag)
flag = chxor_69637723(flag)
flag = cadd_d3782943(flag)
flag = add_4db6bc88(flag)
flag = chsub_906855b4(flag)
flag = cxor_9e4b96f2(flag)
flag = shuffle_ce932b10(flag)
flag = csub_46c4ad67(flag)
flag = add_2897abfa(flag)
flag = chxor_3a47885a(flag)
flag = chsub_f7d05960(flag)
flag = sub_7a049de1(flag)
flag = chxor_de63f975(flag)
flag = cmul_b61008be(flag)
flag = chadd_2fa4c3aa(flag)
flag = shuffle_f4cba7dd(flag)
flag = chxor_6db45a16(flag)
flag = mul_619c394d(flag)
flag = digsub_0ea92eac(flag)
flag = cxor_fe5870fc(flag)
flag = add_c3181859(flag)
flag = digsub_1755eb85(flag)
flag = xor_26dc7003(flag)
flag = sub_f29558b8(flag)
flag = digsub_ac841ac3(flag)
flag = add_6d8a2110(flag)
flag = cxor_f0f82070(flag)
flag = csub_ec729961(flag)
flag = cmul_65dc26f9(flag)
flag = xor_f19c0746(flag)
flag = chxor_4a6282f5(flag)
flag = chxor_d94a9bdc(flag)
flag = add_d7079839(flag)
flag = chsub_8a044489(flag)
flag = digsub_dbfc4977(flag)
flag = sub_d6d53ea0(flag)
flag = shuffle_0a4f92ab(flag)
flag = xor_f98f4d97(flag)
flag = chmul_9522f239(flag)
flag = xor_a2c95310(flag)
flag = chsub_9fe7030d(flag)
flag = chxor_62bb4f9e(flag)
flag = sub_5a358ec6(flag)
flag = chmul_d43d0316(flag)
flag = cxor_26057d46(flag)
flag = cmul_38769a31(flag)
flag = cxor_8549d8eb(flag)
flag = chunk_397a3d62(flag)
flag = chsub_1c4c548c(flag)
flag = csub_5a6c81e3(flag)
flag = cmul_94ed85b9(flag)
flag = mul_b19c9677(flag)
flag = chxor_b1f5dc0d(flag)
flag = digsub_cca1638e(flag)
flag = xor_f7706b03(flag)
flag = add_454ffaaf(flag)
flag = cadd_f9211e40(flag)
flag = chadd_d7cdb5da(flag)
flag = mul_bdb89cce(flag)
flag = chmul_b820c945(flag)
flag = digsub_82f27ce9(flag)
flag = digsub_ba2f366a(flag)
flag = cxor_f4744f0e(flag)
flag = shuffle_4289061c(flag)
flag = chmul_b923d46c(flag)
flag = csub_462e63d8(flag)
flag = chunk_b6e52a0f(flag)
flag = xor_ff7262d6(flag)
flag = chsub_32f5910d(flag)
flag = chadd_5171aa72(flag)
flag = chadd_93c92f11(flag)
flag = cmul_f6c4c9dc(flag)
flag = chsub_15fcbd3c(flag)
flag = xor_6a5cf5a7(flag)
flag = chxor_34a2c770(flag)
flag = xor_a8652323(flag)
flag = chxor_c7f6ad65(flag)
flag = chadd_1f526c5a(flag)
flag = cadd_407bbf2e(flag)
flag = cadd_fd35b517(flag)
flag = shuffle_69db3f4f(flag)
flag = chmul_8ef21d96(flag)
flag = shuffle_dc438735(flag)
flag = cmul_eae26d7e(flag)
flag = cadd_7936e180(flag)
flag = sub_653c19b3(flag)
flag = xor_85d496cf(flag)
flag = chxor_9f1b55f6(flag)
flag = chadd_af05dbbf(flag)
flag = chunk_69dd3db9(flag)
flag = xor_6ee9de87(flag)
flag = chunk_e53ff766(flag)
flag = xor_51b2d18c(flag)
flag = add_c871a926(flag)
flag = sub_d3dc3330(flag)
flag = cmul_87dca596(flag)
flag = sub_e1d8193c(flag)
flag = shuffle_efa32ed0(flag)
flag = chunk_db078de2(flag)
flag = xor_3b807d61(flag)
flag = cxor_ce58803c(flag)
flag = chadd_1475aaba(flag)
flag = chadd_da891bd7(flag)
flag = xor_9d8c4a8c(flag)
flag = add_bb299925(flag)
flag = cxor_b646f68b(flag)
flag = chadd_3a6ba43e(flag)
flag = mul_fc6ac804(flag)
flag = cmul_06a971d4(flag)
flag = chmul_f8bbf12f(flag)
flag = sub_c15c0c16(flag)
flag = xor_38573e9d(flag)
flag = cmul_06609b53(flag)
flag = xor_0ec01206(flag)
flag = cadd_cab4819e(flag)
flag = chmul_e08d8ea1(flag)
flag = add_e6d0a399(flag)
flag = cadd_2da455cf(flag)
flag = shuffle_5ef2dd0d(flag)
flag = chmul_645c1d15(flag)
flag = add_decb86a7(flag)
flag = chxor_1c95a906(flag)
flag = chadd_a7330cb4(flag)
flag = chxor_a99facbd(flag)
flag = chunk_515df396(flag)
flag = mul_b5be71ee(flag)
flag = cmul_e510f1c4(flag)
flag = digsub_3d37a56f(flag)
flag = cadd_652099bf(flag)
flag = sub_adc67d90(flag)
flag = chmul_99d03179(flag)
flag = chxor_f6c4d9ae(flag)
flag = chmul_9e62f058(flag)
flag = chadd_32554a61(flag)
flag = chxor_e11d30ee(flag)
flag = chunk_a008d507(flag)
flag = mul_04000fe6(flag)
flag = add_ed6c03df(flag)
flag = chxor_5f238dda(flag)
flag = cmul_ddef00cb(flag)
flag = add_7af2fe07(flag)
flag = cxor_39585eb3(flag)
flag = xor_39a60514(flag)
flag = digsub_e6768cff(flag)
flag = cmul_66170953(flag)
flag = chadd_65b8d0ef(flag)
flag = mul_4b619987(flag)
flag = digsub_bcb409f7(flag)
flag = chsub_8a25c41f(flag)
flag = sub_dbea1d09(flag)
flag = cmul_0d8033d0(flag)
flag = add_e0500d96(flag)
flag = xor_df70e045(flag)
flag = digsub_1f6e32d7(flag)
flag = shuffle_181172b7(flag)
flag = chxor_65fb61d8(flag)
flag = csub_e69770c4(flag)
flag = shuffle_c5e07151(flag)
flag = csub_160421ef(flag)
flag = shuffle_328f0268(flag)
flag = cadd_6fe68866(flag)
flag = xor_b75a23b1(flag)
flag = mul_bc486461(flag)
flag = digsub_bd11b809(flag)
flag = shuffle_358e16be(flag)
flag = chadd_8d7aa344(flag)
flag = chunk_d99ad65b(flag)
flag = cmul_622542fe(flag)
flag = cmul_65dc26f9(flag)
flag = chmul_18bbd248(flag)
flag = cxor_0e701321(flag)
flag = chunk_b26605b9(flag)
flag = cmul_148c07dc(flag)
flag = sub_83e670dd(flag)
flag = mul_095b48a3(flag)
flag = chxor_616b9569(flag)
flag = cxor_ccd49eb2(flag)
flag = chadd_b13cc8ae(flag)
flag = xor_2495a11e(flag)
flag = xor_4e43f7ea(flag)
flag = csub_db2c770b(flag)
flag = chadd_61a15596(flag)
flag = cxor_41f67d77(flag)
flag = chxor_e1dd333b(flag)
flag = chsub_5b0f6d80(flag)
flag = xor_ccce8b68(flag)
flag = chmul_9d6b502f(flag)
flag = cmul_3e4053fd(flag)
flag = xor_8833c00c(flag)
flag = shuffle_6a444585(flag)
flag = cxor_454d9bad(flag)
flag = chsub_b596367b(flag)
flag = chsub_906855b4(flag)
flag = cadd_14ae0fe3(flag)
flag = cmul_9a7d5570(flag)
flag = chmul_a32f41a3(flag)
flag = digsub_d9a13c5e(flag)
flag = cxor_6c5cd5c7(flag)
flag = add_e0500d96(flag)
flag = digsub_ac841ac3(flag)
flag = cmul_69eb6792(flag)
flag = cadd_ba362142(flag)
flag = cmul_70fa9f12(flag)
flag = cmul_4efbd341(flag)
flag = chunk_f25c6152(flag)
flag = sub_a40cb760(flag)
flag = digsub_e1f5dc03(flag)
flag = digsub_78ba6bc8(flag)
flag = sub_6411cb05(flag)
flag = chmul_826efe63(flag)
flag = mul_a54dfca0(flag)
flag = mul_f7bcc313(flag)
flag = sub_29f5a027(flag)
flag = csub_30ac2fb9(flag)
flag = digsub_b6137e92(flag)
flag = chunk_8a131e32(flag)
flag = mul_e8d4d029(flag)
flag = cmul_94ed85b9(flag)
flag = add_565903f4(flag)
flag = cmul_ec6817f2(flag)
flag = chmul_bc251ec0(flag)
flag = cmul_b01d887b(flag)
flag = shuffle_82faa11e(flag)
flag = cmul_b6dff247(flag)
flag = cmul_d82edfb1(flag)
flag = add_2527f4da(flag)
flag = cxor_dfcb824e(flag)
flag = cadd_f1510001(flag)
flag = cmul_6ae52f53(flag)
flag = chunk_d4a3f365(flag)
flag = chadd_88d19b3c(flag)
flag = digsub_8e44fdbd(flag)
flag = cxor_296a856b(flag)
flag = cxor_7f32a16a(flag)
flag = sub_df2b698e(flag)
flag = xor_d9eda893(flag)
flag = digsub_2362ee33(flag)
flag = cxor_9d8f4ca2(flag)
flag = xor_2b415907(flag)
flag = cxor_97867026(flag)
flag = cxor_112ee4fc(flag)
flag = cadd_f79f3974(flag)
flag = chsub_b335ae97(flag)
flag = chsub_74cf05a6(flag)
flag = cmul_0b6d9f9a(flag)
flag = chsub_33711b4f(flag)
flag = chxor_ae930f19(flag)
flag = shuffle_602562e7(flag)
flag = cmul_fe6ecce9(flag)
flag = xor_2ac1f33e(flag)
flag = csub_6f8ba274(flag)
flag = csub_c50ffebc(flag)
flag = csub_fe63b620(flag)
flag = shuffle_ec9b15d1(flag)
flag = cxor_fa9fe64d(flag)
flag = cxor_060a98db(flag)
flag = xor_7f9cb2c2(flag)
flag = chxor_68adccd3(flag)
flag = xor_f8437474(flag)
flag = mul_1f240b2b(flag)
flag = shuffle_0bc785b3(flag)
flag = cxor_0d19b008(flag)
flag = digsub_03f54ba3(flag)
flag = chunk_174427d2(flag)
flag = chunk_158dd2b2(flag)
flag = add_85e81d17(flag)
flag = chsub_4dc669f9(flag)
flag = cmul_76043ee3(flag)
flag = cadd_0083dd15(flag)
flag = shuffle_6fcd072c(flag)
flag = sub_9f4055fc(flag)
flag = chsub_a16ed93a(flag)
flag = chmul_ebd5a20e(flag)
flag = cadd_64142db2(flag)
flag = chxor_b080755f(flag)
flag = add_ef37b006(flag)
flag = csub_8c5dcc87(flag)
flag = chadd_88ba6a81(flag)
flag = chunk_4bf6bdc4(flag)
flag = cxor_71a4351f(flag)
flag = chadd_1a40fd7d(flag)
flag = xor_a6e7fa68(flag)
flag = cmul_e953e2ca(flag)
flag = digsub_0410b672(flag)
flag = chunk_206c8668(flag)
flag = mul_5067d66a(flag)
flag = cmul_9535a158(flag)
flag = cadd_3deee9ba(flag)
flag = shuffle_4e8ad324(flag)
flag = cmul_1ebf8c3e(flag)
flag = mul_5d959d10(flag)
flag = xor_6cabd79d(flag)
flag = sub_58947fb5(flag)
flag = chsub_a9bb41f7(flag)
flag = chmul_b65f3bc2(flag)
flag = chxor_c8d60001(flag)
flag = csub_d278adbd(flag)
flag = chxor_b9af6481(flag)
flag = shuffle_e8a5f5ef(flag)
flag = cxor_8fe94932(flag)
flag = digsub_038640b7(flag)
flag = xor_64a04adb(flag)
flag = shuffle_6a444585(flag)
flag = cadd_503cc573(flag)
flag = digsub_c71ff0e5(flag)
flag = xor_27199205(flag)
flag = chadd_3e7b3151(flag)
flag = chunk_b6e52a0f(flag)
flag = digsub_7c2a7053(flag)
flag = add_393870bc(flag)
flag = digsub_ab800369(flag)
flag = shuffle_d70b85e8(flag)
flag = cxor_31e27f48(flag)
flag = xor_a8652323(flag)
flag = chadd_b97315dd(flag)
flag = cmul_7ad45fd6(flag)
flag = shuffle_cb627e8c(flag)
flag = chadd_63faefcf(flag)
flag = csub_c50ffebc(flag)
flag = shuffle_e14d57f5(flag)
flag = xor_1a989c5f(flag)
flag = chxor_ffb48f69(flag)
flag = chunk_957ebc7b(flag)
flag = chmul_ec64c95f(flag)
flag = chmul_7cc3c4ab(flag)
flag = digsub_98eb887b(flag)
flag = cmul_1871b99c(flag)
flag = chxor_855b33d8(flag)
flag = cxor_bfb33206(flag)
flag = sub_a091f45e(flag)
flag = chmul_2f893b62(flag)
flag = shuffle_2d9fffb5(flag)
flag = cmul_ca478228(flag)
flag = csub_b73a0cb6(flag)
flag = cxor_cd79085f(flag)
flag = shuffle_b1134b2a(flag)
flag = mul_4ca5f016(flag)
flag = chxor_947d449e(flag)
flag = xor_4d9534eb(flag)
flag = shuffle_897b72ea(flag)
flag = chunk_12fc1604(flag)
flag = chadd_00e2dbca(flag)
flag = sub_96b63796(flag)
flag = csub_98af337d(flag)
flag = xor_10794d34(flag)
flag = chadd_8789f269(flag)
flag = chunk_205e30c0(flag)
flag = chadd_9e80333c(flag)
flag = cmul_606c6cc5(flag)
flag = chunk_d3ecfe82(flag)
flag = cadd_66bcc5a2(flag)
flag = cadd_8db97cbc(flag)
flag = cmul_a36f268e(flag)
flag = add_a5b30fdf(flag)
flag = shuffle_b3fe3e10(flag)
flag = sub_785b373a(flag)
flag = xor_032ec723(flag)
flag = mul_bc232ddb(flag)
flag = shuffle_1a7b4aba(flag)
flag = csub_fdb702b6(flag)
flag = sub_05bc34d7(flag)
flag = xor_d9eda893(flag)
flag = chunk_41ac0046(flag)
flag = cxor_2e4819bf(flag)
flag = chxor_b080755f(flag)
flag = csub_1ae697ba(flag)
flag = cxor_18c1314e(flag)
flag = xor_310c33bd(flag)
flag = chxor_02646472(flag)
flag = xor_ad34030d(flag)
flag = chunk_8356e7c8(flag)
flag = add_1dc9ccaa(flag)
flag = chxor_be8a1cce(flag)
flag = csub_702f94e1(flag)
flag = chxor_da22b4fb(flag)
flag = chxor_a244aa4c(flag)
flag = digsub_7d14062a(flag)
flag = cmul_1871b99c(flag)
flag = chmul_ebd5a20e(flag)
flag = chmul_0c946b47(flag)
flag = xor_0e83be33(flag)
flag = xor_4bd4b2d3(flag)
flag = add_7aa57e32(flag)
flag = mul_62a37d48(flag)
flag = chxor_36059956(flag)
flag = chunk_07e06228(flag)
flag = digsub_6b9010a5(flag)
flag = shuffle_8e02f517(flag)
flag = chxor_31b5069b(flag)
flag = xor_ec9f1bc5(flag)
flag = sub_e383e4d5(flag)
flag = chadd_93e431eb(flag)
flag = sub_e383e4d5(flag)
flag = shuffle_a05741bb(flag)
flag = cxor_da9ff7d9(flag)
flag = add_4db6bc88(flag)
flag = xor_f80064d0(flag)
flag = chxor_599d5e3e(flag)
flag = chsub_1b8086f6(flag)
flag = shuffle_c5e07151(flag)
flag = chmul_e7f67d19(flag)
flag = cadd_0c2307f0(flag)
flag = xor_b8937290(flag)
flag = mul_a43ce0da(flag)
flag = add_4584979d(flag)
flag = chadd_7c0c3e14(flag)
flag = chunk_2e1e8db3(flag)
flag = xor_3b14c897(flag)
flag = chunk_5e4879e0(flag)
flag = xor_eca7972f(flag)
flag = cxor_87ecf0a7(flag)
flag = cxor_20661e8f(flag)
flag = chxor_b1f5dc0d(flag)
flag = chsub_dea76069(flag)
flag = shuffle_dec87fe1(flag)
flag = chadd_f137e21d(flag)
flag = digsub_9dcf4316(flag)
flag = xor_bf47bb3a(flag)
flag = chsub_b591ca37(flag)
flag = sub_0a7dad65(flag)
flag = cxor_76178cb8(flag)
flag = chxor_0256cccb(flag)
flag = xor_4742cccf(flag)
flag = sub_cfa999fe(flag)
flag = csub_cea15a0b(flag)
flag = add_454ffaaf(flag)
flag = chunk_b1f55538(flag)
flag = add_8ef46bd6(flag)
flag = cxor_8396e79a(flag)
flag = chadd_e92d3462(flag)
flag = sub_48430fed(flag)
flag = digsub_8df7fbd0(flag)
flag = xor_308c8fd5(flag)
flag = sub_837cb5a5(flag)
flag = cxor_40c47f57(flag)
flag = cxor_d1f287be(flag)
flag = chxor_31b5069b(flag)
flag = shuffle_328f0268(flag)
flag = chxor_d48b7863(flag)
flag = csub_c8591293(flag)
flag = chsub_c1db5393(flag)
flag = cmul_adf3adfd(flag)
flag = mul_0e478f31(flag)
flag = shuffle_d70b85e8(flag)
flag = chsub_b942a4e6(flag)
flag = chmul_e6b12a10(flag)
flag = digsub_79a3f207(flag)
flag = csub_59c43ed1(flag)
flag = cmul_26f5ab98(flag)
flag = cxor_8549d8eb(flag)
flag = chunk_c5398c39(flag)
flag = csub_7ae589be(flag)
flag = chsub_e8aa8b79(flag)
flag = xor_581836de(flag)
flag = cadd_56eef358(flag)
flag = cadd_7ed856d4(flag)
flag = add_0f283710(flag)
flag = chunk_367e0942(flag)
flag = csub_bdd64a1d(flag)
flag = cmul_1b7b7fb7(flag)
flag = add_c3181859(flag)
flag = mul_bce42f5e(flag)
flag = shuffle_49c48148(flag)
flag = mul_e74b3261(flag)
flag = cadd_c2498f1a(flag)
flag = sub_7a049de1(flag)
flag = csub_8d8cd37f(flag)
flag = chadd_31ab6514(flag)
flag = chsub_e0a5b7b9(flag)
flag = cadd_8db3f2f3(flag)
flag = shuffle_8a10d0b7(flag)
flag = shuffle_4e8ad324(flag)
flag = cxor_f0f82070(flag)
flag = xor_ddf28b31(flag)
flag = shuffle_74813596(flag)
flag = chxor_7af39ede(flag)
flag = shuffle_f554897b(flag)
flag = add_aa98b4ae(flag)
flag = sub_9f4055fc(flag)
flag = cmul_ba8b037d(flag)
flag = xor_41405d72(flag)
flag = chsub_2d6c78f3(flag)
flag = chadd_d6631ab3(flag)
flag = cmul_f59de4d7(flag)
flag = chmul_4d8aa24b(flag)
flag = xor_03c6a015(flag)
flag = add_81776826(flag)
flag = sub_6ca5da9b(flag)
flag = cadd_92b9fd37(flag)
flag = cmul_aa6e389f(flag)
flag = cxor_51d9f2ee(flag)
flag = chsub_7e45d909(flag)
flag = cmul_cb30aead(flag)
flag = xor_ee57e55f(flag)
flag = digsub_03c94dae(flag)
flag = shuffle_506b50c8(flag)
flag = cadd_ea8c28f4(flag)
flag = digsub_6b9010a5(flag)
flag = cadd_b39a5b0b(flag)
flag = cxor_e59dc6e0(flag)
flag = digsub_2945b343(flag)
flag = shuffle_63b7a61d(flag)
flag = csub_edb15e4c(flag)
flag = cxor_69cd9f4e(flag)
flag = cadd_a6332778(flag)
flag = digsub_7aec5b80(flag)
flag = chmul_99695284(flag)
flag = add_4d5b7dd8(flag)
flag = cadd_e86a7e16(flag)
flag = xor_b601f000(flag)
flag = digsub_154d7267(flag)
flag = add_69d61a24(flag)
flag = cxor_9064d63f(flag)
flag = add_ed2b53a6(flag)
flag = cmul_a05a6983(flag)
flag = mul_3a6b9086(flag)
flag = xor_b0ff6bbd(flag)
flag = sub_b5dac8cd(flag)
flag = sub_1b55f541(flag)
flag = sub_c126f74d(flag)
flag = mul_9e94e89a(flag)
flag = shuffle_86331a49(flag)
flag = chsub_863e4a9e(flag)
flag = chsub_e508cd4b(flag)
flag = chsub_4fe6a0b8(flag)
flag = xor_8ae01235(flag)
flag = chsub_244387c4(flag)
flag = cadd_5d182653(flag)
flag = chmul_d5ba6298(flag)
flag = chunk_45c7c0f6(flag)
flag = cmul_ae473405(flag)
flag = cxor_f4744f0e(flag)
flag = cxor_31e27f48(flag)
flag = sub_e383e4d5(flag)
flag = chxor_b4cd4919(flag)
flag = shuffle_f44f0fc5(flag)
flag = chadd_65a80365(flag)
flag = cmul_280315b7(flag)
flag = cadd_07c72dba(flag)
flag = add_91bb43ca(flag)
flag = cxor_41be00fc(flag)
flag = digsub_dddb1e6b(flag)
flag = chmul_bd4ac691(flag)
flag = chmul_743f98a5(flag)
flag = xor_addb072f(flag)
flag = chmul_608cd53e(flag)
flag = cxor_1e0efad7(flag)
flag = chsub_b705b02f(flag)
flag = digsub_ff462c4a(flag)
flag = chxor_14ca1407(flag)
flag = xor_cc33196e(flag)
flag = mul_a0ace443(flag)
flag = add_6792b1ea(flag)
flag = chmul_d5ba6298(flag)
flag = cxor_938a50c5(flag)
flag = cmul_de3ea36c(flag)
flag = sub_d674ee07(flag)
flag = chunk_bd7c4f37(flag)
flag = chmul_7eb45a9e(flag)
flag = xor_6f958906(flag)
flag = chadd_3d456bc0(flag)
flag = cxor_d43914ce(flag)
flag = cmul_8facd3c6(flag)
flag = chsub_5b0f6d80(flag)
flag = xor_00e48dde(flag)
flag = digsub_b4f2bfbc(flag)
flag = cmul_c648ff5d(flag)
flag = xor_6aa3c7e7(flag)
flag = cmul_1db73e1b(flag)
flag = cxor_f2627c5a(flag)
flag = shuffle_ee42405e(flag)
flag = chmul_e513d3af(flag)
flag = add_9dad90bf(flag)
flag = chxor_3c2c0416(flag)
flag = chsub_da5ea1df(flag)
flag = chunk_181817bc(flag)
flag = chmul_96b3e78c(flag)
flag = chsub_92f27399(flag)
flag = add_c908a5f4(flag)
flag = chxor_556134a0(flag)
flag = cadd_4003b254(flag)
flag = cadd_23594983(flag)
flag = sub_c126f74d(flag)
flag = chmul_ab54c89e(flag)
flag = shuffle_f4cba7dd(flag)
flag = chsub_3e828f05(flag)
flag = cxor_4d3c5896(flag)
flag = xor_9e177199(flag)
flag = csub_20a768aa(flag)
flag = csub_024ef6f9(flag)
flag = cxor_f30be4dd(flag)
flag = chxor_a76b0441(flag)
flag = chmul_885659c9(flag)
flag = cmul_e4155cf9(flag)
flag = sub_a96a1483(flag)
flag = csub_237fd55f(flag)
flag = digsub_f74d6e2c(flag)
flag = cmul_b305eb99(flag)
flag = cxor_9eab5098(flag)
flag = xor_f87e36e2(flag)
flag = xor_a8eff498(flag)
flag = chmul_708c05e7(flag)
flag = add_6e9d979e(flag)
flag = chmul_4e871d0b(flag)
flag = sub_609bbd1a(flag)
flag = chsub_76cedeac(flag)
flag = digsub_a7419844(flag)
flag = chunk_406fc18b(flag)
flag = cxor_da3537d5(flag)
flag = cadd_88038a55(flag)
flag = cmul_cd1aad88(flag)
flag = xor_37922856(flag)
flag = chmul_16176275(flag)
flag = csub_8477e013(flag)
flag = cadd_b3a97789(flag)
flag = chmul_a32f41a3(flag)
flag = cadd_d6913038(flag)
flag = cadd_eab5dc9b(flag)
flag = add_d3cda0e4(flag)
flag = chadd_2bcca0b5(flag)
flag = xor_df70e045(flag)
flag = chxor_a244aa4c(flag)
flag = sub_1719880f(flag)
flag = chmul_215a2fee(flag)
flag = digsub_4c404e0f(flag)
flag = cxor_aea954dc(flag)
flag = chsub_f27f3438(flag)
flag = chxor_6b786c2e(flag)
flag = chunk_530e625c(flag)
flag = digsub_db13869f(flag)
flag = shuffle_76309fe2(flag)
flag = xor_fd001add(flag)
flag = chsub_bae85472(flag)
flag = cxor_2aa22b89(flag)
flag = cadd_0788aaad(flag)
flag = chxor_e6a0d155(flag)
flag = digsub_24f7cbd7(flag)
flag = cadd_210c6dc4(flag)
flag = digsub_2f2a8750(flag)
flag = sub_d6d53ea0(flag)
flag = sub_72e0ad9e(flag)
flag = csub_fe2f121a(flag)
flag = chsub_31abc2cf(flag)
flag = add_07231911(flag)
flag = chsub_dff9f4eb(flag)
flag = chsub_86f783b0(flag)
flag = xor_8297deee(flag)
flag = cxor_d1f287be(flag)
flag = cadd_b1988d37(flag)
flag = shuffle_d65597c5(flag)
flag = chunk_40051429(flag)
flag = mul_3d2d3c98(flag)
flag = chxor_0f3c245c(flag)
flag = chunk_6b870e2e(flag)
flag = digsub_f22e07b0(flag)
flag = cadd_5fc3a121(flag)
flag = chxor_72127666(flag)
flag = cmul_f7e015fa(flag)
flag = xor_93a9262d(flag)
flag = chsub_863e4a9e(flag)
flag = chunk_39378691(flag)
flag = xor_f80d29fb(flag)
flag = chunk_aeecc76a(flag)
flag = chadd_0fbbf4b8(flag)
flag = chunk_8703835d(flag)
flag = chunk_0591e3c5(flag)
flag = digsub_f22e07b0(flag)
flag = sub_b4f35853(flag)
flag = chsub_c3fb1168(flag)
flag = chsub_9f73bc9e(flag)
flag = chadd_1e481fb6(flag)
flag = shuffle_28820acc(flag)
flag = xor_46eb3b29(flag)
flag = csub_bce4bb70(flag)
flag = chunk_9b5e7e5c(flag)
flag = csub_b25f1796(flag)
flag = cadd_5162d960(flag)
flag = chxor_ce07c0ad(flag)
flag = chunk_c154a4b0(flag)
flag = csub_8dbb396c(flag)
flag = cxor_697bee04(flag)
flag = chunk_e808502e(flag)
flag = chxor_dbd34bdf(flag)
flag = digsub_69f7a7ef(flag)
flag = mul_70770109(flag)
flag = shuffle_82fd1e74(flag)
flag = chsub_da5ea1df(flag)
flag = add_30966eb1(flag)
flag = cxor_dc7aac3c(flag)
flag = cadd_370c5e9e(flag)
flag = xor_6a599f5a(flag)
flag = cadd_0fb9e0bd(flag)
flag = cmul_ddef00cb(flag)
flag = cxor_e6156798(flag)
flag = chxor_8d5feb9a(flag)
flag = xor_57c90fb5(flag)
flag = shuffle_8e2c57eb(flag)
flag = chxor_e1dd333b(flag)
flag = xor_a53f1f68(flag)
flag = cadd_aef291ba(flag)
flag = xor_ccce8b68(flag)
flag = chadd_f5ab37d9(flag)
flag = chadd_40293e24(flag)
flag = chxor_a87f9d33(flag)
flag = cadd_ba362142(flag)
flag = chunk_6b35af69(flag)
flag = shuffle_c5e07151(flag)
flag = add_f582d81c(flag)
flag = digsub_6d16b628(flag)
flag = chsub_59843fee(flag)
flag = cxor_6bc7237d(flag)
flag = chmul_dd1920ab(flag)
flag = chmul_9e62f058(flag)
flag = cxor_e4b3ee28(flag)
flag = sub_3c288b1c(flag)
flag = cadd_92da2c6d(flag)
flag = chmul_90381a7d(flag)
flag = cadd_56eef358(flag)
flag = sub_a148160b(flag)
flag = xor_5c62e4ce(flag)
flag = cxor_16cc8dc6(flag)
flag = xor_5c62e4ce(flag)
flag = chxor_72c80534(flag)
flag = chmul_7fdbddec(flag)
flag = chxor_e36c3430(flag)
flag = chxor_a120d278(flag)
flag = xor_61d47dbf(flag)
flag = sub_b82d8405(flag)
flag = shuffle_0ca300ee(flag)
flag = chxor_cc8c61bf(flag)
flag = chunk_f87a2350(flag)
flag = chadd_5fc42fbd(flag)
flag = chxor_f84733a4(flag)
flag = chsub_4d0982ce(flag)
flag = shuffle_c433a286(flag)
flag = chxor_6db45a16(flag)
flag = shuffle_3ef98f81(flag)
flag = cmul_1620fc61(flag)
flag = digsub_e4e90033(flag)
flag = shuffle_c3bda042(flag)
flag = shuffle_fbcb4ff2(flag)
flag = chadd_40293e24(flag)
flag = chadd_27f19124(flag)
flag = add_42869331(flag)
flag = digsub_ee67309b(flag)
flag = chsub_be9e6b3a(flag)
flag = chxor_ddc3a6b5(flag)
flag = digsub_76cf6e97(flag)
flag = chadd_6156d6db(flag)
flag = shuffle_74813596(flag)
flag = mul_6a63acf6(flag)
flag = csub_f9235964(flag)
flag = mul_a337ba89(flag)
flag = cmul_3152eceb(flag)
flag = cadd_d6acbbb6(flag)
flag = chunk_6f47d8f4(flag)
flag = mul_6a63acf6(flag)
flag = xor_8ae01235(flag)
flag = chxor_97c61f30(flag)
flag = xor_1c0c670c(flag)
flag = chunk_d697c787(flag)
flag = chunk_158dd2b2(flag)
flag = shuffle_2946b8f8(flag)
flag = sub_5525246a(flag)
flag = csub_a5842efc(flag)
flag = cxor_df42d206(flag)
flag = xor_827e6b83(flag)
flag = chmul_a1decfe1(flag)
flag = cxor_6976fe3d(flag)
flag = cadd_3cbc013d(flag)
flag = sub_ee08aad9(flag)
flag = digsub_f38ffcc2(flag)
flag = cadd_469004ba(flag)
flag = chadd_ac9d1de7(flag)
flag = xor_5806c787(flag)
flag = chunk_ce24a612(flag)
flag = chsub_c1db5393(flag)
flag = xor_92fb1dc0(flag)
flag = chxor_e1dd333b(flag)
flag = chsub_6acb4ef8(flag)
flag = chunk_0934570f(flag)
flag = mul_bdbf4994(flag)
flag = digsub_95a880da(flag)
flag = csub_d79026ba(flag)
flag = chxor_87ec1ab5(flag)
flag = add_12e64206(flag)
flag = add_a3d5d1da(flag)
flag = chsub_5a5cbf95(flag)
flag = cxor_7d6f0b67(flag)
flag = chmul_bc251ec0(flag)
flag = chxor_beaa6fd7(flag)
flag = cmul_5d27452a(flag)
flag = chmul_f462de4c(flag)
flag = cadd_b6aa1a21(flag)
flag = cadd_0ab7b7d7(flag)
flag = shuffle_f3858d75(flag)
flag = xor_ddb48d72(flag)
flag = chxor_1649570d(flag)
flag = mul_89548da9(flag)
flag = csub_59c43ed1(flag)
flag = add_9e4296de(flag)
flag = chadd_58981664(flag)
flag = digsub_e60d693c(flag)
flag = shuffle_ca27178d(flag)
flag = xor_24b008b9(flag)
flag = shuffle_40277085(flag)
flag = xor_48d487cb(flag)
flag = cxor_0e701321(flag)
flag = chsub_4c1e3f38(flag)
flag = sub_91d3d73f(flag)
flag = csub_d14c716c(flag)
flag = sub_44011266(flag)
flag = cxor_03f5597b(flag)
flag = chxor_ce07c0ad(flag)
flag = chsub_f15fc200(flag)
flag = chunk_757730c2(flag)
flag = cmul_57e3d5bf(flag)
flag = xor_3d551e50(flag)
flag = chsub_bb765577(flag)
flag = chadd_f5ab37d9(flag)
flag = sub_5e615eab(flag)
flag = cmul_f7e015fa(flag)
flag = chunk_0e5f27e0(flag)
flag = xor_097a8a70(flag)
flag = cxor_1c819fcf(flag)
flag = mul_1e5ed056(flag)
flag = mul_3d2d3c98(flag)
flag = csub_44ad5428(flag)
flag = csub_973b4044(flag)
flag = chmul_f175d1d7(flag)
flag = chmul_7ebba446(flag)
flag = csub_5174b08f(flag)
flag = xor_cc5d6b6d(flag)
flag = cmul_aa6e389f(flag)
flag = chsub_75cdd33b(flag)
flag = sub_7f903ea3(flag)
flag = sub_4a2fd9ee(flag)
flag = xor_df70e045(flag)
flag = chadd_e678a699(flag)
flag = sub_7198b6a2(flag)
flag = xor_5b72ca68(flag)
flag = shuffle_64a08693(flag)
flag = add_b510c979(flag)
flag = xor_308c8fd5(flag)
flag = chsub_02fa3ce0(flag)
flag = cxor_88eef1ab(flag)
flag = chxor_829e0b1c(flag)
flag = chmul_cc8af1e6(flag)
flag = add_49cf2359(flag)
flag = cmul_57e3d5bf(flag)
flag = mul_e74b3261(flag)
flag = sub_33da435e(flag)
flag = cmul_1b746adb(flag)
flag = digsub_ecf47b8f(flag)
flag = chunk_5d103edd(flag)
flag = mul_2f486d74(flag)
flag = cmul_7b0890d6(flag)
flag = chxor_7fed6271(flag)
flag = xor_cdbf869f(flag)
flag = chmul_73d44dfc(flag)
flag = csub_7f2211d8(flag)
flag = digsub_c30772e5(flag)
flag = chsub_8a044489(flag)
flag = chxor_fa8c5c5f(flag)
flag = chmul_138f562c(flag)
flag = shuffle_47929ded(flag)
flag = add_2b6347c9(flag)
flag = cmul_d487af89(flag)
flag = chadd_977a0637(flag)
flag = chmul_d1afe9b0(flag)
flag = shuffle_1676c2c9(flag)
flag = shuffle_7b370edd(flag)
flag = csub_23f2ff18(flag)
flag = add_eee6c971(flag)
flag = chxor_5cda58cc(flag)
flag = cadd_b07f15df(flag)
flag = chadd_4d2a9496(flag)
flag = xor_c0bb5777(flag)
flag = cadd_130f7b9b(flag)
flag = add_f11cd945(flag)
flag = cmul_2d5025b5(flag)
flag = shuffle_de9df0cf(flag)
flag = digsub_2a51613f(flag)
flag = add_3cfe5566(flag)
flag = chunk_01c25ee4(flag)
flag = cxor_765f4bed(flag)
flag = cxor_892833c6(flag)
flag = csub_754c0169(flag)
flag = csub_35e65bc6(flag)
flag = mul_89bed2ea(flag)
flag = csub_ecd1b6d0(flag)
flag = chmul_afd7fea6(flag)
flag = add_eb6ed9ef(flag)
flag = sub_d6d53ea0(flag)
flag = chsub_f3e2875f(flag)
flag = chxor_aa6e4431(flag)
flag = cxor_97867026(flag)
flag = chunk_95566664(flag)
flag = shuffle_f89bee84(flag)
flag = cadd_07c72dba(flag)
flag = cmul_ed0fd163(flag)
flag = cmul_99a00a24(flag)
flag = cadd_370c5e9e(flag)
flag = chsub_33711b4f(flag)
flag = cmul_2a502598(flag)
flag = chmul_58875bd8(flag)
flag = chxor_c05fc484(flag)
flag = cmul_40bb0e2b(flag)
flag = xor_ccce8b68(flag)
flag = chxor_001e807f(flag)
flag = chmul_68e4c6ff(flag)
flag = chunk_e5aaf751(flag)
flag = mul_9e94e89a(flag)
flag = cxor_974a0f64(flag)
flag = chunk_69dd3db9(flag)
flag = chxor_3e87843f(flag)
flag = chunk_dadea384(flag)
flag = cxor_9a959665(flag)
flag = digsub_34bac6be(flag)
flag = chunk_e20796de(flag)
flag = add_ab46dc0e(flag)
flag = add_7cb7d116(flag)
flag = mul_4bf9810d(flag)
flag = chadd_ac9d1de7(flag)
flag = sub_d45b504c(flag)
flag = csub_97ae1a88(flag)
flag = sub_a40cb760(flag)
flag = digsub_2a496578(flag)
flag = chadd_42bbf689(flag)
flag = digsub_24f7cbd7(flag)
flag = chxor_e5000f9b(flag)
flag = sub_50bd0d23(flag)
flag = digsub_8224944b(flag)
flag = chadd_42bbf689(flag)
flag = chsub_7e45d909(flag)
flag = chmul_414bc877(flag)
flag = chxor_6f31d36b(flag)
flag = sub_a9414276(flag)
flag = add_e4570f19(flag)
flag = csub_7321b0e9(flag)
flag = chsub_4cadc753(flag)
flag = chmul_743f98a5(flag)
flag = chxor_0c3b8e79(flag)
flag = xor_0b406c7d(flag)
flag = cmul_87dca596(flag)
flag = chmul_e559b45c(flag)
flag = mul_54b3dab3(flag)
flag = add_c1f5edb7(flag)
flag = shuffle_c507521b(flag)
flag = shuffle_1ff845ef(flag)
flag = chadd_79e35c1e(flag)
flag = sub_97300f52(flag)
flag = cadd_fc1ffff9(flag)
flag = sub_0b5acfeb(flag)
flag = chsub_b4abe193(flag)
flag = shuffle_f6aee04d(flag)
flag = chsub_c6725cc1(flag)
flag = shuffle_7894ad24(flag)
flag = shuffle_abafc5c1(flag)
flag = digsub_a821dc7d(flag)
flag = mul_2a5a432a(flag)
flag = xor_10794d34(flag)
flag = chadd_43e1206d(flag)
flag = xor_af966677(flag)
flag = chadd_ff6b9cf5(flag)
flag = chunk_6b35af69(flag)
flag = chxor_829e0b1c(flag)
flag = mul_e8a5e4e0(flag)
flag = shuffle_dd27dbb1(flag)
flag = digsub_ba2f366a(flag)
flag = xor_fccb27f6(flag)
flag = cadd_a6332778(flag)
flag = csub_f9d99859(flag)
flag = xor_2ec3c23c(flag)
flag = cmul_5ae914fe(flag)
flag = add_a04dd9fa(flag)
flag = chunk_bb0e25ea(flag)
flag = csub_8278d2c0(flag)
flag = shuffle_1011fc21(flag)
flag = shuffle_6c33ee33(flag)
flag = chunk_ba9920ce(flag)
flag = chadd_e99579ed(flag)
flag = chxor_72c80534(flag)
flag = add_c9b23e99(flag)
flag = cmul_ca478228(flag)
flag = chsub_f15fc200(flag)
flag = chsub_c48765e6(flag)
flag = chunk_aac2455e(flag)
flag = cadd_79d7fa85(flag)
flag = chmul_53f7c783(flag)
flag = mul_e7784e75(flag)
flag = cadd_029527b8(flag)
flag = add_66171335(flag)
flag = chmul_bfab997d(flag)
flag = chadd_e5be5f3f(flag)
flag = chmul_02f67fce(flag)
flag = chsub_f3a1330b(flag)
flag = chadd_0badfcf5(flag)
flag = cxor_51d9f2ee(flag)
flag = chmul_510bb7ff(flag)
flag = chadd_81dfe861(flag)
flag = chmul_207c7813(flag)
flag = chmul_5ed084ad(flag)
flag = chxor_ce130299(flag)
flag = chunk_f140121b(flag)
flag = csub_3d47b491(flag)
flag = chxor_d23e056d(flag)
flag = chmul_5f9891b6(flag)
flag = xor_af966677(flag)
flag = mul_6a63acf6(flag)
flag = sub_a62e014f(flag)
flag = csub_7321b0e9(flag)
flag = xor_097a8a70(flag)
flag = cxor_938a50c5(flag)
flag = xor_f88ae7f1(flag)
flag = digsub_1f6e32d7(flag)
flag = chmul_aa4f6daf(flag)
flag = chadd_bd0ec963(flag)
flag = chsub_1c4c548c(flag)
flag = xor_f41b0fa6(flag)
flag = add_e7bf4d1a(flag)
flag = mul_8f7d3564(flag)
flag = csub_19752fd1(flag)
flag = chxor_faf934e8(flag)
flag = cmul_8bc2cf3b(flag)
flag = cxor_87ecf0a7(flag)
flag = sub_297255e0(flag)
flag = cmul_b487c574(flag)
flag = digsub_636b7f9c(flag)
flag = chxor_822180c4(flag)
flag = cmul_c9f8e5a1(flag)
flag = digsub_189a0416(flag)
flag = mul_36bc3f6e(flag)
flag = chunk_fa703d6a(flag)
flag = chsub_a81063be(flag)
flag = chxor_b080755f(flag)
flag = chxor_6db45a16(flag)
flag = chadd_97096590(flag)
flag = chunk_65bd8d47(flag)
flag = cmul_789804bf(flag)
flag = shuffle_f0fadf4b(flag)
flag = chmul_c042377c(flag)
flag = cxor_5fa90da0(flag)
flag = cmul_bb576c8f(flag)
flag = chxor_b3e205ec(flag)
flag = chsub_ee48bdeb(flag)
flag = chxor_e1dd333b(flag)
flag = sub_46493b1b(flag)
flag = shuffle_cadeb447(flag)
flag = chmul_96b3e78c(flag)
flag = csub_d6e694b3(flag)
flag = chsub_c2ad3630(flag)
flag = digsub_a56c83c8(flag)
flag = cadd_428d6ecc(flag)
flag = chmul_e513d3af(flag)
flag = digsub_c30772e5(flag)
flag = chxor_c14e4305(flag)
flag = csub_ef420147(flag)
flag = cadd_6b0bc3e3(flag)
flag = cmul_18b5fc94(flag)
flag = chsub_be5f9d3f(flag)
flag = cxor_53008000(flag)
flag = digsub_426ca25d(flag)
flag = sub_47698898(flag)
flag = chsub_207ccdea(flag)
flag = chunk_205e30c0(flag)
flag = cadd_432be002(flag)
flag = add_278192d9(flag)
flag = shuffle_3f68185e(flag)
flag = cadd_fb2c7b99(flag)
flag = chadd_1ed1777e(flag)
flag = cadd_3a2cd387(flag)
flag = cmul_d487af89(flag)
flag = chunk_ba9920ce(flag)
flag = cadd_6bde1e47(flag)
flag = xor_38573e9d(flag)
flag = cxor_03f5597b(flag)
flag = shuffle_a924ad8b(flag)
flag = xor_57c90fb5(flag)
flag = cadd_0208daec(flag)
flag = xor_b601f000(flag)
flag = shuffle_f554897b(flag)
flag = mul_ed586e66(flag)
flag = cmul_ac2fe6b4(flag)
flag = chxor_013d1031(flag)
flag = cmul_65dc26f9(flag)
flag = chmul_5af32334(flag)
flag = cmul_0d8033d0(flag)
flag = shuffle_fda70d35(flag)
flag = cadd_d3ea8638(flag)
flag = cadd_ce6a8f1f(flag)
flag = chsub_68af0dd5(flag)
flag = mul_00091c11(flag)
flag = add_4584979d(flag)
flag = xor_31c0451b(flag)
flag = digsub_8e7fd683(flag)
flag = cxor_7d13d92f(flag)
flag = chunk_ba2558cf(flag)
flag = cxor_5161196f(flag)
flag = add_0582a092(flag)
flag = mul_c01af210(flag)
flag = xor_00e48dde(flag)
flag = add_4db6bc88(flag)
flag = xor_00e48dde(flag)
flag = sub_df1c5e46(flag)
flag = shuffle_47929ded(flag)
flag = chunk_594d46bc(flag)
flag = mul_1e5ed056(flag)
flag = chsub_3679cdb7(flag)
flag = mul_d4e4b51b(flag)
flag = csub_efe13119(flag)
flag = add_58fa684a(flag)
flag = mul_d9dbdb53(flag)
flag = chsub_fd459d3e(flag)
flag = xor_984175c8(flag)
flag = cxor_fe5870fc(flag)
flag = cxor_87ecf0a7(flag)
flag = xor_9bd4e1fb(flag)
flag = chsub_70fd4908(flag)
flag = sub_023318b3(flag)
flag = xor_6f958906(flag)
flag = add_595625e1(flag)
flag = cxor_2e4819bf(flag)
flag = chunk_9532fc70(flag)
flag = chxor_dbb28a03(flag)
flag = cadd_46c0a285(flag)
flag = chadd_d4f4e60b(flag)
flag = sub_48430fed(flag)
flag = chunk_443df39a(flag)
flag = chxor_84d7073f(flag)
flag = digsub_2c3da0c6(flag)
flag = cadd_6b0bc3e3(flag)
flag = chmul_d6a4e65e(flag)
flag = csub_b56c06db(flag)
flag = chxor_90da6de6(flag)
flag = shuffle_e666492b(flag)
flag = chmul_50bf6425(flag)
flag = chunk_bf78a71f(flag)
flag = csub_bf7e54b2(flag)
flag = cxor_ad9ae418(flag)
flag = sub_36eea33a(flag)
flag = cadd_2c027db7(flag)
flag = chmul_b8c4917b(flag)
flag = cadd_a2b15006(flag)
flag = mul_5486cc62(flag)
flag = chxor_7858401c(flag)
flag = chxor_e2e70239(flag)
flag = chxor_616b9569(flag)
flag = cmul_303b4073(flag)
flag = sub_4d3e2340(flag)
flag = chunk_e808502e(flag)
flag = cadd_81014cf5(flag)
flag = chunk_e20796de(flag)
flag = add_393870bc(flag)
flag = chunk_515df396(flag)
flag = shuffle_a9affa02(flag)
flag = chxor_ac024fc8(flag)
flag = sub_4b79348d(flag)
flag = chsub_8590464c(flag)
flag = cadd_d3782943(flag)
flag = csub_d46575ec(flag)
flag = cmul_a36f268e(flag)
flag = csub_dcf528e5(flag)
flag = digsub_6be19c93(flag)
flag = chunk_9b2dc824(flag)
flag = csub_c3302d5b(flag)
flag = chunk_a008d507(flag)
flag = chunk_4b50f9e1(flag)
flag = chsub_da5ea1df(flag)
flag = sub_29f5a027(flag)
flag = chunk_dd51ac10(flag)
flag = shuffle_9076b7e7(flag)
flag = add_c9b23e99(flag)
flag = cadd_d04bb716(flag)
flag = digsub_39cc5a0e(flag)
flag = chadd_50e33e22(flag)
flag = add_e7bb6b2d(flag)
flag = chsub_a13b0c4e(flag)
flag = shuffle_3ef98f81(flag)
flag = cmul_3c18a69a(flag)
flag = add_f66fdb75(flag)
flag = add_bc7653a1(flag)
flag = digsub_06f2e415(flag)
flag = chsub_68af0dd5(flag)
flag = chxor_4427bf9d(flag)
flag = cmul_e55c9291(flag)
flag = cmul_c9f8e5a1(flag)
flag = chmul_e406aa1a(flag)
flag = sub_de9b7e77(flag)
flag = chxor_e6a0d155(flag)
flag = chmul_c1277148(flag)
flag = chadd_d7cdb5da(flag)
flag = sub_1b55f541(flag)
flag = chunk_8af8feea(flag)
flag = chunk_bdec9045(flag)
flag = csub_3d47b491(flag)
flag = shuffle_b22f1c56(flag)
flag = cxor_d20accc3(flag)
flag = cadd_159797e5(flag)
flag = digsub_9bb50253(flag)
flag = sub_3cb32b59(flag)
flag = chunk_b0b7f3b2(flag)
flag = add_885196c7(flag)
flag = csub_e6b3e198(flag)
flag = chmul_d95ce6fa(flag)
flag = chunk_e2c320ee(flag)
flag = chxor_385bc3a3(flag)
flag = chadd_60898084(flag)
flag = shuffle_d0a6fda1(flag)
flag = chxor_56c9e723(flag)
flag = chxor_845d20e4(flag)
flag = chunk_e3f72016(flag)
flag = chsub_808e087e(flag)
flag = chsub_1ee9c5e9(flag)
flag = digsub_864e27e4(flag)
flag = chmul_f8790cde(flag)
flag = chxor_5cda58cc(flag)
flag = chunk_cd87c4de(flag)
flag = cmul_7ad45fd6(flag)
flag = cmul_63f9fdde(flag)
flag = digsub_189a0416(flag)
flag = chmul_20654021(flag)
flag = add_33350535(flag)
flag = csub_247f37f1(flag)
flag = xor_0238a60c(flag)
flag = xor_7465fff5(flag)
flag = shuffle_b1134b2a(flag)
flag = xor_b5a69ced(flag)
flag = chsub_20dd3740(flag)
flag = mul_c0b36007(flag)
flag = digsub_fbcfe8c3(flag)
flag = sub_f3871ca4(flag)
flag = sub_88400353(flag)
flag = cmul_16644eba(flag)
flag = cmul_fa47ed88(flag)
flag = sub_47cbdf28(flag)
flag = chadd_51cbffb6(flag)
flag = chunk_518ff916(flag)
flag = chxor_dadbfeff(flag)
flag = cmul_c112008e(flag)
flag = csub_2cc5f209(flag)
flag = chxor_d6bf3b04(flag)
flag = mul_2898db69(flag)
flag = chadd_7d40b8f2(flag)
flag = cadd_2da455cf(flag)
flag = cadd_6fe68866(flag)
flag = add_a69aa2f4(flag)
flag = xor_702b624c(flag)
flag = chsub_42d80cc4(flag)
flag = shuffle_de4afce0(flag)
flag = shuffle_15813d84(flag)
flag = chsub_b4abe193(flag)
flag = add_2551e3c7(flag)
flag = chunk_4c3d6535(flag)
flag = mul_389dee3d(flag)
flag = cadd_66bcc5a2(flag)
flag = chadd_53eb2419(flag)
flag = sub_6ca5da9b(flag)
flag = add_0942c03a(flag)
flag = shuffle_dec87fe1(flag)
flag = chmul_f8409008(flag)
flag = cadd_3124bc3c(flag)
flag = cadd_594b40aa(flag)
flag = chxor_67aa494b(flag)
flag = chadd_fed374e0(flag)
flag = csub_bbb7d7ae(flag)
flag = chmul_4af7800f(flag)
flag = cxor_6938f43d(flag)
flag = mul_e04c3fbe(flag)
flag = xor_3b807d61(flag)
flag = mul_c01af210(flag)
flag = chsub_f7d05960(flag)
flag = xor_5c4520e3(flag)
flag = chsub_8b936fd7(flag)
flag = csub_fbcb846c(flag)
flag = cadd_4658d16e(flag)
flag = chxor_dda862c4(flag)
flag = chsub_16d6c248(flag)
flag = add_48f0c9fc(flag)
flag = add_6792b1ea(flag)
flag = csub_31de6d2c(flag)
flag = chxor_c7f6ad65(flag)
flag = cmul_9f53e257(flag)
flag = chadd_714abd5f(flag)
flag = cmul_85b39864(flag)
flag = digsub_ce000989(flag)
flag = chunk_c828ed7d(flag)
flag = cxor_fe5870fc(flag)
flag = shuffle_f380512c(flag)
flag = xor_ddb48d72(flag)
flag = chxor_b212e95c(flag)
flag = cadd_432be002(flag)
flag = chmul_b11a8b8c(flag)
flag = sub_f95a3649(flag)
flag = sub_6ca5da9b(flag)
flag = xor_1e24aa63(flag)
flag = chsub_2b33e666(flag)
flag = digsub_eccd1606(flag)
flag = mul_c01af210(flag)
flag = chunk_0074c4bc(flag)
flag = sub_5da6bb53(flag)
flag = cxor_31e27f48(flag)
flag = mul_4369dd0c(flag)
flag = chsub_3af5214b(flag)
flag = chsub_9e3a2eb0(flag)
flag = chunk_45336ad9(flag)
flag = chunk_7496a2c0(flag)
flag = chsub_c3fb1168(flag)
flag = mul_2cd00355(flag)
flag = digsub_c71698e9(flag)
flag = add_bb299925(flag)
flag = cxor_677dcdda(flag)
flag = cmul_77da69c4(flag)
flag = chxor_a987af1b(flag)
flag = chunk_0188117c(flag)
flag = sub_4a2fd9ee(flag)
flag = chmul_998ab1ea(flag)
flag = digsub_18fc0c9e(flag)
flag = digsub_f8bfc612(flag)
flag = add_c9854582(flag)
flag = chunk_0046d260(flag)
flag = csub_359c8002(flag)
flag = sub_12d5d25f(flag)
flag = digsub_8df7fbd0(flag)
flag = chunk_c47f2b0e(flag)
flag = cmul_7bb17901(flag)
flag = cadd_5fc3a121(flag)
flag = mul_78cdcde8(flag)
flag = sub_61538669(flag)
flag = shuffle_2a813d89(flag)
flag = chxor_8550301d(flag)
flag = csub_d77927e4(flag)
flag = cxor_8666b092(flag)
flag = chmul_315f2063(flag)
flag = chsub_f17ba2e2(flag)
flag = chsub_86f783b0(flag)
flag = chxor_b1f5dc0d(flag)
flag = cadd_97daaa50(flag)
flag = mul_224595eb(flag)
flag = csub_b73a0cb6(flag)
flag = chsub_07a262a0(flag)
flag = chmul_de111dfb(flag)
flag = shuffle_40f99305(flag)
flag = sub_eeb354ba(flag)
flag = add_b2a61490(flag)
flag = xor_b2f63512(flag)
flag = chxor_bbac4066(flag)
flag = chsub_b705b02f(flag)
flag = shuffle_b20aa4f9(flag)
flag = chsub_ebadaefe(flag)
flag = sub_77f3b344(flag)
flag = chxor_b09e96f6(flag)
flag = chunk_f899efdf(flag)
flag = shuffle_987eaf21(flag)
flag = csub_3564220e(flag)
flag = mul_30a2cd61(flag)
flag = cxor_c8ef5dcc(flag)
flag = csub_76313df2(flag)
flag = xor_18093134(flag)
flag = csub_d14c716c(flag)
flag = chxor_4427bf9d(flag)
flag = cmul_7e424373(flag)
flag = cmul_7dfade82(flag)
flag = digsub_41290eb4(flag)
flag = chsub_68113691(flag)
flag = cmul_76043ee3(flag)
flag = xor_e9e26f3f(flag)
flag = xor_99a5aed1(flag)
flag = csub_cb2cec49(flag)
flag = chunk_158dd2b2(flag)
flag = csub_c5965200(flag)
flag = add_546e77b8(flag)
flag = chadd_37bb2c71(flag)
flag = mul_af43f0cd(flag)
flag = add_06c4c375(flag)
flag = cadd_dd57ed89(flag)
flag = add_c3711383(flag)
flag = chmul_e62c2028(flag)
flag = chunk_406e7c05(flag)
flag = cxor_765f4bed(flag)
flag = add_14d5f474(flag)
flag = chmul_7fdbddec(flag)
flag = xor_e9151d45(flag)
flag = cmul_8d226a5e(flag)
flag = sub_e769f5cd(flag)
flag = sub_dbea1d09(flag)
flag = mul_c5467b19(flag)
flag = chxor_42438acb(flag)
flag = chunk_b0d8cc2d(flag)
flag = chsub_56440f95(flag)
flag = sub_50bd0d23(flag)
flag = xor_9a3a96a8(flag)
flag = chadd_3a7cbca3(flag)
flag = csub_ea9d41b8(flag)
flag = chmul_77349f1c(flag)
flag = digsub_e0de2a5d(flag)
flag = chmul_db134c2c(flag)
flag = chsub_c6725cc1(flag)
flag = chadd_7fc84678(flag)
flag = cadd_d96fc4cc(flag)
flag = csub_20a984f0(flag)
flag = chmul_57848b7a(flag)
flag = cadd_ae3d5a54(flag)
flag = mul_520721f3(flag)
flag = xor_49a34b54(flag)
flag = chmul_a6bf2367(flag)
flag = cxor_765f4bed(flag)
flag = digsub_4c6a11c2(flag)
flag = chsub_84e2be83(flag)
flag = chadd_52640d1f(flag)
flag = cmul_adeb1535(flag)
flag = chsub_a2001711(flag)
flag = chxor_4a6282f5(flag)
flag = chsub_86f783b0(flag)
flag = chmul_d3cbaa99(flag)
flag = digsub_154d7267(flag)
flag = digsub_7b1651a7(flag)
flag = chunk_9d77353c(flag)
flag = cxor_d2b698ff(flag)
flag = cadd_0083dd15(flag)
flag = chmul_615c46c1(flag)
flag = mul_3a6b9086(flag)
flag = chxor_af8f84bc(flag)
flag = sub_6baa906d(flag)
flag = cmul_9a7d5570(flag)
flag = chunk_f5342e5d(flag)
flag = add_f10a2818(flag)
flag = xor_53ec0b4a(flag)
flag = mul_d900d8ed(flag)
flag = chxor_90da6de6(flag)
flag = digsub_ce000989(flag)
flag = cmul_ca02e498(flag)
flag = chsub_792c2235(flag)
flag = shuffle_abafc5c1(flag)
flag = xor_3b14c897(flag)
flag = csub_e0440f53(flag)
flag = chadd_1f526c5a(flag)
flag = cmul_adeb1535(flag)
flag = cxor_15061824(flag)
flag = sub_c24992e8(flag)
flag = digsub_bcb409f7(flag)
flag = cadd_e69f5bf8(flag)
flag = cmul_6cf9601c(flag)
flag = cadd_a6332778(flag)
flag = chsub_d3796f81(flag)
flag = shuffle_0d458069(flag)
flag = chsub_d228accf(flag)
flag = chmul_49e5e1c7(flag)
flag = add_30966eb1(flag)
flag = digsub_0ea92eac(flag)
flag = mul_efab7eff(flag)
flag = digsub_ecaa949d(flag)
flag = xor_071e51df(flag)
flag = chadd_42bbf689(flag)
flag = cmul_ba434ed3(flag)
flag = chxor_1272b4b3(flag)
flag = chunk_9b2dc824(flag)
flag = chunk_b51aa621(flag)
flag = chunk_20e19fb4(flag)
flag = chadd_ff6b9cf5(flag)
flag = chsub_ee1754a3(flag)
flag = mul_8028fe56(flag)
flag = sub_149a7d50(flag)
flag = chmul_64d93738(flag)
flag = xor_85d496cf(flag)
flag = chunk_b0b7f3b2(flag)
flag = xor_39a60514(flag)
flag = chmul_47e5352e(flag)
flag = cmul_b759583b(flag)
flag = cmul_3df83c6a(flag)
flag = chmul_708c05e7(flag)
flag = chsub_4fe6a0b8(flag)
flag = mul_1caf7ce9(flag)
flag = chadd_f78e9fb5(flag)
flag = csub_ea9d41b8(flag)
flag = cmul_c36f1e1c(flag)
flag = chunk_faeac0c7(flag)
flag = chmul_a0fda47c(flag)
flag = chmul_58875bd8(flag)
flag = shuffle_29b39d8e(flag)
flag = add_769c8b28(flag)
flag = shuffle_eeea5e4e(flag)
flag = sub_ca91f11f(flag)
flag = chunk_ba9920ce(flag)
flag = cxor_faa42ed7(flag)
flag = shuffle_88823dcd(flag)
flag = chxor_02aa625d(flag)
flag = chxor_a987af1b(flag)
flag = chunk_25c9a817(flag)
flag = add_d7079839(flag)
flag = xor_b7dd3197(flag)
flag = shuffle_57fe470a(flag)
flag = mul_4bd300c9(flag)
flag = cxor_2b349478(flag)
flag = chunk_59cbae4c(flag)
flag = chsub_8809f725(flag)
flag = shuffle_a924ad8b(flag)
flag = sub_753032fe(flag)
flag = cmul_65983a34(flag)
flag = mul_a43ce0da(flag)
flag = cadd_ca2e862f(flag)
flag = add_0f654473(flag)
flag = chsub_d94b1450(flag)
flag = chunk_c8598499(flag)
flag = mul_3d2d3c98(flag)
flag = chsub_24c471c0(flag)
flag = chsub_1b8086f6(flag)
flag = xor_3bb0008c(flag)
flag = cmul_16d7f1e9(flag)
flag = xor_46b7d1d1(flag)
flag = cxor_1247d512(flag)
flag = digsub_f2e8b007(flag)
flag = cmul_1f88fc08(flag)
flag = shuffle_78cd475f(flag)
flag = chsub_99c9e6ed(flag)
flag = chsub_f97f894e(flag)
flag = add_7ab0c406(flag)
flag = xor_5c4520e3(flag)
flag = digsub_2f6deeb4(flag)
flag = csub_96f86ad8(flag)
flag = chxor_65adc1af(flag)
flag = chmul_885659c9(flag)
flag = xor_f98f4d97(flag)
flag = digsub_ff462c4a(flag)
flag = digsub_18fc0c9e(flag)
flag = add_100ba22e(flag)
flag = cadd_6a1ee984(flag)
flag = digsub_ecaa949d(flag)
flag = cxor_e1387672(flag)
flag = cadd_6719a051(flag)
flag = cmul_0b1c712d(flag)
flag = chxor_97c61f30(flag)
flag = cadd_b83d6dfa(flag)
flag = sub_0216c0df(flag)
flag = digsub_288ef9ea(flag)
flag = mul_8876595f(flag)
flag = shuffle_ffc10c41(flag)
flag = sub_94808741(flag)
flag = sub_1b9f18a3(flag)
flag = csub_d46575ec(flag)
flag = sub_6ca5da9b(flag)
flag = sub_149a7d50(flag)
flag = xor_f1cb1b28(flag)
flag = cadd_5afd7d69(flag)
flag = chadd_55d11883(flag)
flag = chsub_83dc3951(flag)
flag = chadd_ee551422(flag)
flag = mul_2f486d74(flag)
flag = chxor_6c38cb27(flag)
flag = cadd_0228ee52(flag)
flag = add_4a7519db(flag)
flag = add_0f654473(flag)
flag = chadd_79e35c1e(flag)
flag = chmul_dac3ab2b(flag)
flag = xor_abff1870(flag)
flag = xor_e1acd3bf(flag)
flag = chunk_b3c680b6(flag)
flag = mul_21355dba(flag)
flag = cadd_4f92ed7a(flag)
flag = cadd_aef291ba(flag)
flag = cxor_8fe94932(flag)
flag = chmul_414bc877(flag)
flag = mul_7dc7f4e3(flag)
flag = sub_d07a778e(flag)
flag = shuffle_9294cfce(flag)
flag = csub_3d47b491(flag)
flag = sub_f21c7d69(flag)
flag = chxor_3c2c0416(flag)
flag = cmul_4691495a(flag)
flag = cmul_9535a158(flag)
flag = shuffle_4756c622(flag)
flag = chsub_6649ba27(flag)
flag = digsub_81042cb1(flag)
flag = mul_7ec01a05(flag)
flag = chunk_0b233094(flag)
flag = cadd_bf48a745(flag)
flag = xor_25ac4148(flag)
flag = chxor_6eac24b1(flag)
flag = digsub_95a880da(flag)
flag = cadd_1aff9833(flag)
flag = mul_9d4040eb(flag)
flag = cadd_b4ab774d(flag)
flag = cxor_83571dc3(flag)
flag = cmul_c6f9ed4d(flag)
flag = shuffle_6c33ee33(flag)
flag = xor_8297deee(flag)
flag = cxor_a4885bca(flag)
flag = chadd_5544e38e(flag)
flag = digsub_1f6e32d7(flag)
flag = shuffle_691df10d(flag)
flag = csub_af6b6944(flag)
flag = xor_41405d72(flag)
flag = chadd_55b65d14(flag)
flag = sub_085ded8f(flag)
flag = chxor_dbd34bdf(flag)
flag = xor_c0421e98(flag)
flag = xor_ed4e00db(flag)
flag = sub_d37c6c7c(flag)
flag = chadd_70e1dac6(flag)
flag = chmul_fa12100c(flag)
flag = cadd_88038a55(flag)
flag = sub_6ca5da9b(flag)
flag = chadd_cc7b7e1e(flag)
flag = mul_959ccef4(flag)
flag = sub_53b0de62(flag)
flag = chxor_da644b5f(flag)
flag = xor_5806c787(flag)
flag = chsub_dbb4ae01(flag)
flag = chmul_b65f3bc2(flag)
flag = xor_bbeda458(flag)
flag = chmul_48477e80(flag)
flag = chsub_1ee9c5e9(flag)
flag = add_e696fc9f(flag)
flag = chunk_69dd3db9(flag)
flag = chmul_b131f273(flag)
flag = chunk_02f12019(flag)
flag = xor_2495a11e(flag)
flag = chsub_c10f331f(flag)
flag = xor_24b008b9(flag)
flag = csub_69098245(flag)
flag = chxor_2e7e40ef(flag)
flag = cmul_3e5a5794(flag)
flag = chxor_bca7bb47(flag)
flag = xor_6cc1a542(flag)
flag = xor_7c90aa84(flag)
flag = xor_8e04350f(flag)
flag = cmul_b6dff247(flag)
flag = cxor_c68edc46(flag)
flag = chmul_0e5b89be(flag)
flag = digsub_3534e3b8(flag)
flag = digsub_154d7267(flag)
flag = chsub_9a699614(flag)
flag = cadd_6719a051(flag)
flag = digsub_ef43a4f8(flag)
flag = chsub_b942a4e6(flag)
flag = cmul_63b57c2a(flag)
flag = sub_53b0de62(flag)
flag = chadd_31ab6514(flag)
flag = chsub_3df0ef3c(flag)
flag = cxor_9064d63f(flag)
flag = shuffle_0df0d459(flag)
flag = mul_d4fa63d2(flag)
flag = cxor_65e0c2b5(flag)
flag = sub_56d810e7(flag)
flag = xor_35ce8bcd(flag)
flag = chunk_01d5b245(flag)
flag = chunk_36ffef9b(flag)
flag = chunk_1e635fb5(flag)
flag = xor_2b415907(flag)
flag = cmul_1c2bf9c2(flag)
flag = cmul_10dcbe35(flag)
flag = chsub_7e45d909(flag)
flag = cxor_dfcb824e(flag)
flag = xor_b2f63512(flag)
flag = xor_046c82f6(flag)
flag = add_91bf6c2c(flag)
flag = xor_d9eda893(flag)
flag = add_87ac44d1(flag)
flag = add_bdedbeea(flag)
flag = cmul_e7965a1e(flag)
flag = chmul_88eb44fc(flag)
flag = cxor_0afe7e7a(flag)
flag = cxor_8fe94932(flag)
flag = csub_74a6e474(flag)
flag = chmul_bc251ec0(flag)
flag = add_49cf2359(flag)
flag = mul_14ad1525(flag)
flag = cmul_2eb8bc9e(flag)
flag = chadd_5290e7f2(flag)
flag = cadd_2ed55f8d(flag)
flag = chsub_a13b0c4e(flag)
flag = xor_3366a9d3(flag)
flag = mul_386487fa(flag)
flag = add_664be5fd(flag)
flag = cadd_2b51aac8(flag)
flag = digsub_907a9a8a(flag)
flag = mul_b3866976(flag)
flag = shuffle_a8092414(flag)
flag = chsub_4d0660a5(flag)
flag = sub_a99136b5(flag)
flag = chxor_9f1b55f6(flag)
flag = cmul_7d0c9f1b(flag)
flag = xor_bf47bb3a(flag)
flag = chunk_e4be2495(flag)
flag = chxor_d01563ec(flag)
flag = add_3fa4a716(flag)
flag = chsub_75cdd33b(flag)
flag = cxor_871a2d7f(flag)
flag = cadd_b38e11c1(flag)
flag = sub_468e1495(flag)
flag = cxor_83571dc3(flag)
flag = xor_5baa6117(flag)
flag = chxor_3b22e51a(flag)
flag = chmul_7cfdd3dc(flag)
flag = chmul_38133c10(flag)
flag = shuffle_2de78ecc(flag)
flag = chmul_c9980e5a(flag)
flag = chmul_7ebba446(flag)
flag = add_2a4aac0f(flag)
flag = chadd_6156d6db(flag)
flag = chxor_be9a01b5(flag)
flag = add_6c1ae0e6(flag)
flag = digsub_fda06cd9(flag)
flag = chxor_a1104840(flag)
flag = mul_92b1b71e(flag)
flag = sub_8c5d52aa(flag)
flag = cxor_454d9bad(flag)
flag = chmul_b11a8b8c(flag)
flag = chunk_e53ff766(flag)
flag = xor_278fef34(flag)
flag = sub_6fb5c242(flag)
flag = cmul_f579357e(flag)
flag = add_d70fa7c6(flag)
flag = chunk_cf8a51ed(flag)
flag = chmul_326aefee(flag)
flag = sub_8c476a01(flag)
flag = mul_34d9a702(flag)
flag = mul_21b7a6b1(flag)
flag = add_99ad02f5(flag)
flag = digsub_b8269215(flag)
flag = cadd_61a362c2(flag)
flag = digsub_7a739dc2(flag)
flag = chunk_524ad27b(flag)
flag = cxor_53f93269(flag)
flag = csub_479c2380(flag)
flag = mul_9536d3d7(flag)
flag = xor_acef1014(flag)
flag = chmul_fc1bd11c(flag)
flag = shuffle_922a7e0d(flag)
flag = shuffle_8ca0e8e2(flag)
flag = cxor_5cb8c60b(flag)
flag = sub_40f8346a(flag)
flag = cxor_1247d512(flag)
flag = cmul_1db73e1b(flag)
flag = chunk_80f5c942(flag)
flag = add_1eefd08b(flag)
flag = chsub_bc163239(flag)
flag = csub_f9d99859(flag)
flag = digsub_79a3f207(flag)
flag = xor_ed479080(flag)
flag = digsub_5513d3dd(flag)
flag = chadd_977a0637(flag)
flag = chmul_7ce961bc(flag)
flag = chadd_d54dcfab(flag)
flag = cadd_2dcf1992(flag)
flag = cadd_e0fbc1fa(flag)
flag = cadd_b51d3eba(flag)
flag = cmul_a2ec48eb(flag)
flag = chsub_5b0f6d80(flag)
flag = shuffle_a8092414(flag)
flag = chsub_0b2321c1(flag)
flag = shuffle_f0fadf4b(flag)
flag = chxor_cc620f44(flag)
flag = chsub_e30c03a4(flag)
flag = cxor_5ab74c0d(flag)
flag = cmul_ee26b387(flag)
flag = cmul_23a5f304(flag)
flag = chadd_01e97c37(flag)
flag = cmul_d82edfb1(flag)
flag = mul_8502f399(flag)
flag = shuffle_0f715c90(flag)
flag = csub_2645ed31(flag)
flag = add_53a3ae63(flag)
flag = cadd_bf9e62c2(flag)
flag = chsub_0b185319(flag)
flag = chadd_eacac1c3(flag)
flag = cmul_3dfa51d9(flag)
flag = add_204a88d5(flag)
flag = cxor_bac2ca1f(flag)
flag = chadd_40e55360(flag)
flag = chxor_7e8369a9(flag)
flag = mul_8c6fc3ce(flag)
flag = chunk_2bbf6ee5(flag)
flag = chadd_5fc42fbd(flag)
flag = mul_709d81e2(flag)
flag = digsub_3ff40549(flag)
flag = shuffle_6d9a62f9(flag)
flag = chadd_8e51c71d(flag)
flag = chxor_6fdbabf9(flag)
flag = sub_44011266(flag)
flag = chmul_78c19c03(flag)
flag = sub_361737a7(flag)
flag = add_0ed21bd0(flag)
flag = cmul_06a971d4(flag)
flag = sub_297255e0(flag)
flag = digsub_efd7a1ee(flag)
flag = cmul_5f2f8cea(flag)
flag = xor_92938e20(flag)
flag = shuffle_c5e07151(flag)
flag = chmul_5c3ce310(flag)
flag = csub_0b003b96(flag)
flag = shuffle_204502b1(flag)
flag = mul_a3a1940e(flag)
flag = shuffle_ce932b10(flag)
flag = xor_ff7262d6(flag)
flag = add_6056a4c7(flag)
flag = chadd_404cff4b(flag)
flag = digsub_d22e4d9e(flag)
flag = chxor_55e4ace7(flag)
flag = chsub_6ff2c5bf(flag)
flag = chxor_4ec23f54(flag)
flag = cmul_e577eda6(flag)
flag = chadd_52f847ab(flag)
flag = mul_fac797c0(flag)
flag = cmul_4e66e309(flag)
flag = chsub_92108511(flag)
flag = cadd_d6acbbb6(flag)
flag = csub_d14c716c(flag)
flag = cadd_e3f803ca(flag)
flag = cxor_7f32a16a(flag)
flag = chmul_aa4f6daf(flag)
flag = digsub_26596efe(flag)
flag = mul_36a4bfa0(flag)
flag = sub_8c476a01(flag)
flag = chsub_8b936fd7(flag)
flag = xor_5806c787(flag)
flag = shuffle_28099eb5(flag)
flag = csub_9856c97f(flag)
flag = chsub_e8aa8b79(flag)
flag = cadd_fdec7760(flag)
flag = cxor_025cbbe3(flag)
flag = sub_aabddf03(flag)
flag = chunk_dbc6d3a2(flag)
flag = shuffle_8c84166e(flag)
flag = chunk_ce966b63(flag)
flag = chmul_b923d46c(flag)
flag = chxor_d62951fc(flag)
flag = chmul_d06b2f3e(flag)
flag = chsub_1ad0c5fe(flag)
flag = digsub_21c1f0e1(flag)
flag = chmul_7cc3c4ab(flag)
flag = sub_2a18cec8(flag)
flag = chmul_e6b12a10(flag)
flag = cxor_7073d927(flag)
flag = digsub_f56a1358(flag)
flag = chadd_baaab600(flag)
flag = chsub_d64b63cc(flag)
flag = cadd_97b622f1(flag)
flag = shuffle_45b62e3f(flag)
flag = shuffle_3e606129(flag)
flag = digsub_2a496578(flag)
flag = chunk_ddef464d(flag)
flag = sub_aa1109df(flag)
flag = shuffle_7df2cac5(flag)
flag = chmul_ab23c18c(flag)
flag = cxor_21b4aab4(flag)
flag = add_34a7ffc5(flag)
flag = xor_6a599f5a(flag)
flag = cxor_3829c9db(flag)
flag = cxor_f87a3a8a(flag)
flag = chxor_7f2707c2(flag)
flag = sub_bc852ad6(flag)
flag = mul_fac797c0(flag)
flag = chmul_49ccc560(flag)
flag = digsub_fcc47cc3(flag)
flag = sub_0bdcedb0(flag)
flag = cxor_5cb8c60b(flag)
flag = sub_468e1495(flag)
flag = cmul_29ff7c2b(flag)
flag = chunk_75264af5(flag)
flag = digsub_504110f5(flag)
flag = add_c90f428d(flag)
flag = chunk_dadea384(flag)
flag = digsub_ac841ac3(flag)
flag = xor_ba2cb10f(flag)
flag = chsub_863e4a9e(flag)
flag = xor_860fd005(flag)
flag = cmul_26f5ab98(flag)
flag = chxor_699d5577(flag)
flag = chadd_cdd2cb99(flag)
flag = shuffle_29c93f75(flag)
flag = shuffle_1cae3f87(flag)
flag = shuffle_6186b5b1(flag)
flag = csub_ee7d6d31(flag)
flag = chunk_da01c0e7(flag)
flag = chxor_8a775b98(flag)
flag = digsub_e2130014(flag)
flag = chunk_158dd2b2(flag)
flag = chxor_cd1b98ab(flag)
flag = xor_f2a99984(flag)
flag = mul_c50eb88b(flag)
flag = cadd_4f92ed7a(flag)
flag = cadd_626b1801(flag)
flag = add_917bbbbc(flag)
flag = sub_381e766c(flag)
flag = chxor_de63b1bc(flag)
flag = cmul_0c91bf4c(flag)
flag = digsub_2a51613f(flag)
flag = add_331118ba(flag)
flag = digsub_2945b343(flag)
flag = mul_89548da9(flag)
flag = cmul_a51dd714(flag)
flag = cmul_893e1b56(flag)
flag = xor_ced10726(flag)
flag = shuffle_c0cc818c(flag)
flag = shuffle_a09d75d9(flag)
flag = chunk_a998eeb4(flag)
flag = cadd_4f92ed7a(flag)
flag = digsub_575bce65(flag)
flag = chsub_3cc05763(flag)
flag = cadd_7936e180(flag)
flag = chadd_4b0b608a(flag)
flag = mul_18205495(flag)
flag = cadd_e856ecc9(flag)
flag = chadd_9e80333c(flag)
flag = chmul_9fd400d3(flag)
flag = cxor_4cfe1de0(flag)
flag = csub_6f8ba274(flag)
flag = chsub_a2fdcc3b(flag)
flag = mul_34d9a702(flag)
flag = csub_83d96569(flag)
flag = csub_302bf054(flag)
flag = add_867182be(flag)
flag = sub_29f5a027(flag)
flag = mul_7dc7f4e3(flag)
flag = chxor_49e5796a(flag)
flag = chmul_1bd08914(flag)
flag = chxor_65adc1af(flag)
flag = shuffle_c089e7f9(flag)
flag = cadd_d279898b(flag)
flag = sub_46493b1b(flag)
flag = mul_a43ce0da(flag)
flag = digsub_172d24b0(flag)
flag = sub_5da6bb53(flag)
flag = chadd_c23de33f(flag)
flag = xor_00e48dde(flag)
flag = digsub_e2a32d2b(flag)
flag = mul_f41b15dd(flag)
flag = shuffle_0847afe1(flag)
flag = shuffle_de9df0cf(flag)
flag = cmul_01d50eab(flag)
flag = chadd_96a0ee76(flag)
flag = sub_b665fdaf(flag)
flag = cmul_fd9e1024(flag)
flag = sub_aabddf03(flag)
flag = csub_b1b08f24(flag)
flag = chunk_07e06228(flag)
flag = xor_0b406c7d(flag)
flag = mul_fc6ac804(flag)
flag = chxor_845d20e4(flag)
flag = digsub_b8659438(flag)
flag = chadd_0fbbf4b8(flag)
flag = csub_645a6092(flag)
flag = chxor_ac024fc8(flag)
flag = sub_7198b6a2(flag)
flag = chxor_01d4c54e(flag)
flag = chsub_894d41c7(flag)
flag = cxor_25ff2742(flag)
flag = xor_9ec16d95(flag)
flag = cadd_a31d859b(flag)
flag = cadd_54b12cd0(flag)
flag = chxor_bca7bb47(flag)
flag = chunk_aed3b0f6(flag)
flag = xor_10794d34(flag)
flag = chunk_e3f72016(flag)
flag = chadd_da891bd7(flag)
flag = chadd_c32db46a(flag)
flag = add_6e9d979e(flag)
flag = chsub_f15fc200(flag)
flag = chadd_c9b892b7(flag)
flag = mul_3d1b9786(flag)
flag = shuffle_7b60ebb6(flag)
flag = cxor_16cc8dc6(flag)
flag = xor_e9e26f3f(flag)
flag = shuffle_1139f911(flag)
flag = chunk_b0f88afb(flag)
flag = chadd_cc7b7e1e(flag)
flag = xor_581836de(flag)
flag = chxor_42438acb(flag)
flag = add_ae27c2fc(flag)
flag = xor_d9eda893(flag)
flag = chmul_71128504(flag)
flag = add_885196c7(flag)
flag = shuffle_64f815bd(flag)
flag = cmul_bb576c8f(flag)
flag = chmul_be23499e(flag)
flag = cxor_89cd8dcd(flag)
flag = chxor_01d4c54e(flag)
flag = add_9573eecb(flag)
flag = chsub_fded2730(flag)
flag = digsub_7aec5b80(flag)
flag = digsub_441e29b0(flag)
flag = shuffle_b118d2cc(flag)
flag = chunk_dbc6d3a2(flag)
flag = cadd_5afd7d69(flag)
flag = chmul_a156d55d(flag)
flag = chsub_b9b2576f(flag)
flag = chmul_c84a1d05(flag)
flag = chsub_79027896(flag)
flag = chsub_0063bc32(flag)
flag = chmul_b28ec3c8(flag)
flag = chxor_cc8c61bf(flag)
flag = csub_642b1701(flag)
flag = csub_c123debf(flag)
flag = chmul_4245aa0c(flag)
flag = chmul_11d3795c(flag)
flag = mul_c50eb88b(flag)
flag = csub_eb8a37eb(flag)
flag = cxor_29df8c0e(flag)
flag = chmul_5fa96fe5(flag)
flag = chsub_53443fe3(flag)
flag = chadd_658a720b(flag)
flag = mul_89548da9(flag)
flag = chsub_f3e2875f(flag)
flag = chxor_730db16c(flag)
flag = chsub_a9bb41f7(flag)
flag = shuffle_a293a45d(flag)
flag = chmul_6c610e81(flag)
flag = mul_c4baebe4(flag)
flag = add_e696fc9f(flag)
flag = mul_6bdc88d2(flag)
flag = cmul_7bb17901(flag)
flag = chsub_f09042f0(flag)
flag = chxor_18337976(flag)
flag = xor_23d58644(flag)
flag = mul_69dd5e3a(flag)
flag = xor_fc88f2e7(flag)
flag = mul_ebff36e1(flag)
flag = add_9d214583(flag)
flag = chxor_00dbbc36(flag)
flag = cadd_b38e11c1(flag)
flag = chadd_d68e3c7a(flag)
flag = xor_11751251(flag)
flag = chsub_f75e24ea(flag)
flag = add_58fa684a(flag)
flag = chsub_b448dac1(flag)
flag = cmul_1b7b7fb7(flag)
flag = sub_2ccd274d(flag)
flag = shuffle_eb45c1f4(flag)
flag = cmul_decdbb6d(flag)
flag = xor_860fd005(flag)
flag = shuffle_7b8c9089(flag)
flag = shuffle_9a408c44(flag)
flag = chunk_05980501(flag)
flag = chadd_5a85e49b(flag)
flag = csub_bc70c3a8(flag)
flag = cadd_4dc54d10(flag)
flag = chmul_a156d55d(flag)
flag = add_3631a2fd(flag)
flag = xor_722e91a8(flag)
flag = chsub_3d2428ad(flag)
flag = chadd_da891bd7(flag)
flag = mul_62cf6aa4(flag)
flag = add_1c8d08f1(flag)
flag = cxor_faa42ed7(flag)
flag = chsub_e1ab9cb3(flag)
flag = cadd_e69f5bf8(flag)
flag = add_e0bbf910(flag)
flag = chsub_66269564(flag)
flag = digsub_b0591b22(flag)
flag = chxor_829e0b1c(flag)
flag = chmul_ab54c89e(flag)
flag = chadd_7fc84678(flag)
flag = chxor_7bd8fe19(flag)
flag = digsub_703bfb0c(flag)
flag = chunk_24c352a1(flag)
flag = shuffle_39351a8a(flag)
flag = csub_ad630998(flag)
flag = csub_f291b39b(flag)
flag = chsub_714e8ec9(flag)
flag = xor_50156ac2(flag)
flag = chmul_dac3ab2b(flag)
flag = shuffle_ee25c5d7(flag)
flag = digsub_f9d31323(flag)
flag = chunk_ec01f5f0(flag)
flag = xor_48d487cb(flag)
flag = cmul_a292d693(flag)
flag = cadd_6abb159d(flag)
flag = cmul_c648ff5d(flag)
flag = xor_fa921805(flag)
flag = cadd_d629e9a0(flag)
flag = chmul_b65f3bc2(flag)
flag = add_f22a99f3(flag)
flag = sub_0bdcedb0(flag)
flag = sub_b83b0b5a(flag)
flag = add_a45b80f9(flag)
flag = cmul_b487c574(flag)
flag = shuffle_8a10d0b7(flag)
flag = shuffle_64f815bd(flag)
flag = digsub_7638ee12(flag)
flag = sub_0b5acfeb(flag)
flag = chmul_9d6b502f(flag)
flag = chmul_22d64a0f(flag)
flag = chxor_7f2707c2(flag)
flag = chunk_ce966b63(flag)
flag = csub_7c363447(flag)
flag = shuffle_40277085(flag)
flag = xor_8da999ff(flag)
flag = cadd_991ec901(flag)
flag = sub_a244688a(flag)
flag = chsub_1c4c548c(flag)
flag = chsub_99c4b363(flag)
flag = digsub_2f2a8750(flag)
flag = chmul_c4924d51(flag)
flag = sub_1719880f(flag)
flag = cadd_57a83163(flag)
flag = csub_5bd78a36(flag)
flag = digsub_b6993817(flag)
flag = xor_e437e0ae(flag)
flag = chmul_695202ac(flag)
flag = xor_f87e36e2(flag)
flag = digsub_2684203b(flag)
flag = cxor_28d8fe91(flag)
flag = xor_2495a11e(flag)
flag = chunk_adb7a31f(flag)
flag = xor_df31e322(flag)
flag = mul_d4fa63d2(flag)
flag = cxor_da3537d5(flag)
flag = cmul_108a5ff2(flag)
flag = cxor_0017f17c(flag)
flag = digsub_0fcbc54c(flag)
flag = chmul_c042377c(flag)
flag = sub_5da6bb53(flag)
flag = cadd_df4a88c2(flag)
flag = csub_4fc27255(flag)
flag = cxor_ce58803c(flag)
flag = cadd_1c3f6ab8(flag)
flag = chadd_8658906e(flag)
flag = chunk_8703835d(flag)
flag = chsub_38be16e5(flag)
flag = shuffle_3150238f(flag)
flag = shuffle_9076b7e7(flag)
flag = chmul_6192a06c(flag)
flag = cxor_6c5cd5c7(flag)
flag = chunk_e7835142(flag)
flag = sub_b83b0b5a(flag)
flag = cadd_81afebad(flag)
flag = chxor_90da6de6(flag)
flag = csub_9a19bbcf(flag)
flag = sub_f95a3649(flag)
flag = add_50d7387e(flag)
flag = digsub_61a694a2(flag)
flag = cmul_910def34(flag)
flag = cmul_c6f9ed4d(flag)
flag = xor_c0bb5777(flag)
flag = shuffle_28099eb5(flag)
flag = chmul_330af750(flag)
flag = cadd_56728fa3(flag)
flag = chxor_00408453(flag)
flag = mul_a36d212f(flag)
flag = sub_5730f691(flag)
flag = add_546e77b8(flag)
flag = csub_ad630998(flag)
flag = mul_fbf76069(flag)
flag = chxor_c7b14201(flag)
flag = mul_2fea700d(flag)
flag = chadd_5171aa72(flag)
flag = cmul_72112381(flag)
flag = xor_cdbf869f(flag)
flag = chunk_7ee32000(flag)
flag = chmul_3d6abe7c(flag)
flag = chsub_b448dac1(flag)
flag = sub_5e069f47(flag)
flag = sub_5525246a(flag)
flag = chmul_d43d1a9f(flag)
flag = csub_d4490e14(flag)
flag = cmul_c288fd59(flag)
flag = add_c43e26d8(flag)
flag = chadd_36b8739d(flag)
flag = chunk_ac3a4598(flag)
flag = shuffle_ac6dd478(flag)
flag = add_3631a2fd(flag)
flag = chmul_aae03452(flag)
flag = sub_142fa244(flag)
flag = chmul_77349f1c(flag)
flag = chmul_8ef21d96(flag)
flag = sub_dc4b5de9(flag)
flag = cadd_d1616fc6(flag)
flag = add_30b3e082(flag)
flag = shuffle_2877e883(flag)
flag = mul_947580cb(flag)
flag = csub_d616f883(flag)
flag = chxor_f2f16c61(flag)
flag = csub_d14c716c(flag)
flag = cmul_012b5eb8(flag)
flag = xor_b2f63512(flag)
flag = digsub_1b9caedc(flag)
flag = xor_9b985733(flag)
flag = add_07231911(flag)
flag = chadd_fa13451e(flag)
flag = chunk_82b4fb76(flag)
flag = chsub_fd459d3e(flag)
flag = sub_dd4a6aab(flag)
flag = cmul_01d50eab(flag)
flag = cmul_b805737d(flag)
flag = mul_6a63acf6(flag)
flag = chsub_f15fc200(flag)
flag = csub_f9d99859(flag)
flag = cxor_37164c6f(flag)
flag = add_a1fe299c(flag)
flag = csub_512edb93(flag)
flag = xor_ed479080(flag)
flag = cmul_7e84fb88(flag)
flag = chsub_5b0f6d80(flag)
flag = digsub_7c2a7053(flag)
flag = chunk_426d469b(flag)
flag = chunk_31cdb624(flag)
flag = digsub_d5cf3761(flag)
flag = chsub_ebadaefe(flag)
flag = add_30966eb1(flag)
flag = add_de55f4f2(flag)
flag = chadd_d68e3c7a(flag)
flag = cmul_f7e015fa(flag)
flag = sub_c7fb8e5e(flag)
flag = xor_deeded30(flag)
flag = sub_c24992e8(flag)
flag = cxor_a9c59f97(flag)
flag = chmul_4e871d0b(flag)
flag = shuffle_057518f5(flag)
flag = shuffle_a17bb4ee(flag)
flag = cadd_ca2e862f(flag)
flag = chadd_7fc84678(flag)
flag = chmul_5ed084ad(flag)
flag = mul_0a969cbc(flag)
flag = chsub_16d6c248(flag)
flag = cxor_9a341cfa(flag)
flag = sub_a96a1483(flag)
flag = cadd_2bb6b4bc(flag)
flag = cmul_ee26b387(flag)
flag = chmul_2e39a1a5(flag)
flag = cxor_21574829(flag)
flag = xor_c425535c(flag)
flag = add_8ad39807(flag)
flag = csub_9856c97f(flag)
flag = chadd_01e97c37(flag)
flag = chxor_65adc1af(flag)
flag = chadd_d2932b24(flag)
flag = shuffle_e75b3905(flag)
flag = cadd_f5745b35(flag)
flag = chadd_fcb73b21(flag)
flag = chxor_0f6be034(flag)
flag = digsub_81358f03(flag)
flag = cmul_259fe9ec(flag)
flag = cmul_5f59af38(flag)
flag = chunk_7692aef1(flag)
flag = cxor_8549d8eb(flag)
flag = chunk_e157469e(flag)
flag = chunk_e157469e(flag)
flag = mul_c3e69fa2(flag)
flag = cadd_3124bc3c(flag)
flag = chmul_c25d1cd0(flag)
flag = cadd_dd5bf521(flag)
flag = xor_11dd9cd2(flag)
flag = chxor_fb59e14c(flag)
flag = csub_8322948c(flag)
flag = xor_57c90fb5(flag)
flag = add_c9854582(flag)
flag = chunk_e4be2495(flag)
flag = xor_13c063a7(flag)
flag = chmul_99695284(flag)
flag = chmul_06728846(flag)
flag = cadd_074e39fc(flag)
flag = mul_49d2ca13(flag)
flag = chxor_013d1031(flag)
flag = csub_fc0bc142(flag)
flag = chadd_d6631ab3(flag)
flag = cxor_bac498f9(flag)
flag = add_eee1f715(flag)
flag = chsub_02246759(flag)
flag = shuffle_64f815bd(flag)
flag = chmul_6f2b8735(flag)
flag = sub_4e125d47(flag)
flag = xor_df4800db(flag)
flag = cmul_7ad45fd6(flag)
flag = add_6e9d979e(flag)
flag = chunk_e20796de(flag)
flag = xor_e1acd3bf(flag)
flag = add_d1eb8814(flag)
flag = chmul_207c7813(flag)
flag = chsub_c4e082fd(flag)
flag = chxor_62bb4f9e(flag)
flag = sub_d4145101(flag)
flag = cadd_e4e4c9c0(flag)
flag = add_278192d9(flag)
flag = digsub_a56c83c8(flag)
flag = shuffle_8abc2b43(flag)
flag = xor_eca7972f(flag)
flag = chmul_26b6373e(flag)
flag = cadd_d6913038(flag)
flag = sub_2cdb195c(flag)
flag = csub_e730833f(flag)
flag = add_eee1f715(flag)
flag = sub_ecf0a346(flag)
flag = add_53fcaa0e(flag)
flag = add_fee2762f(flag)
flag = csub_7abf52ba(flag)
flag = chunk_bb0e25ea(flag)
flag = chxor_c399373f(flag)
flag = shuffle_e5071e98(flag)
flag = digsub_69f3e773(flag)
flag = add_35671a57(flag)
flag = xor_16c7c77d(flag)
flag = cxor_7ec801e0(flag)
flag = digsub_575bce65(flag)
flag = cxor_57e03f14(flag)
flag = sub_6321bdd8(flag)
flag = cmul_9ebbf06f(flag)
flag = chunk_e808502e(flag)
flag = chmul_d5ba6298(flag)
flag = digsub_ba2f366a(flag)
flag = sub_58947fb5(flag)
flag = chxor_dadbfeff(flag)
flag = chmul_2332b1f2(flag)
flag = chmul_8fdd15ff(flag)
flag = digsub_0c60c240(flag)
flag = csub_d46575ec(flag)
flag = mul_2f89e56a(flag)
flag = mul_d62641f4(flag)
flag = chsub_f75e24ea(flag)
flag = chxor_a987af1b(flag)
flag = chsub_dcb1a2a8(flag)
flag = chunk_45c083a0(flag)
flag = digsub_78f5b7bb(flag)
flag = chxor_26ed8369(flag)
flag = cxor_69cd9f4e(flag)
flag = cmul_18b5fc94(flag)
flag = chsub_004b681b(flag)
flag = chunk_40051429(flag)
flag = chunk_b51aa621(flag)
flag = shuffle_81777ea5(flag)
flag = shuffle_13171fff(flag)
flag = chmul_81ec0d4f(flag)
flag = cmul_dc2b00da(flag)
flag = mul_eb559523(flag)
flag = digsub_78ba6bc8(flag)
flag = chmul_36d54a3c(flag)
flag = add_0cecddf7(flag)
flag = chxor_616b9569(flag)
flag = chadd_3d456bc0(flag)
flag = chsub_8396a9b9(flag)
flag = sub_2291bf41(flag)
flag = chxor_e2e70239(flag)
flag = shuffle_236a7376(flag)
flag = chxor_6fca7a91(flag)
flag = xor_7c90aa84(flag)
flag = digsub_b6993817(flag)
flag = chmul_326aefee(flag)
flag = xor_840940ad(flag)
flag = chunk_8af8feea(flag)
flag = xor_3f0bcfae(flag)
flag = csub_96d5d023(flag)
flag = csub_2cc5f209(flag)
flag = mul_87b720f5(flag)
flag = xor_30504fc8(flag)
flag = mul_92b1b71e(flag)
flag = chadd_00e2dbca(flag)
flag = add_ebcc13ce(flag)
flag = sub_430d0f4c(flag)
flag = digsub_426ca25d(flag)
flag = xor_310c33bd(flag)
flag = chunk_b4139adc(flag)
flag = csub_088507c1(flag)
flag = chadd_f137e21d(flag)
flag = csub_d14c716c(flag)
flag = chadd_5290e7f2(flag)
flag = chunk_0b233094(flag)
flag = xor_19983c03(flag)
flag = shuffle_6c33ee33(flag)
flag = shuffle_2946b8f8(flag)
flag = csub_cb2cec49(flag)
flag = digsub_b6137e92(flag)
flag = cxor_98058884(flag)
flag = add_69d61a24(flag)
flag = cxor_928d8cb2(flag)
flag = add_e051c869(flag)
flag = chunk_a431061a(flag)
flag = chadd_2fa4c3aa(flag)
flag = sub_29f5a027(flag)
flag = chxor_7b570606(flag)
flag = sub_e0bac344(flag)
flag = cadd_e9f8600c(flag)
flag = shuffle_b16c2957(flag)
flag = chsub_04fb6e14(flag)
flag = cmul_29ff7c2b(flag)
flag = cxor_cc7ef037(flag)
flag = chmul_32362a1d(flag)
flag = chadd_258b2420(flag)
flag = csub_392cef70(flag)
flag = csub_1951cfda(flag)
flag = mul_2fea700d(flag)
flag = chxor_3c2c0416(flag)
flag = chsub_1cf94121(flag)
flag = cxor_9e4b96f2(flag)
flag = cmul_c9f41697(flag)
flag = chxor_a244aa4c(flag)
flag = chsub_93324e19(flag)
flag = chmul_23d520ac(flag)
flag = cmul_3aff1e18(flag)
flag = chadd_9c4be3af(flag)
flag = xor_acef1014(flag)
flag = cmul_3e4053fd(flag)
flag = xor_efa5ece1(flag)
flag = chunk_dfb92a41(flag)
flag = chxor_0c3b8e79(flag)
flag = cxor_0afe7e7a(flag)
flag = cxor_4496ba54(flag)
flag = chadd_adaa5d2b(flag)
flag = mul_1d0b4953(flag)
flag = chadd_0124a79d(flag)
flag = chxor_9fa88068(flag)
flag = chunk_cbf1932b(flag)
flag = chunk_8703835d(flag)
flag = digsub_18fe324f(flag)
flag = xor_c0543d9e(flag)
flag = chxor_de94bd99(flag)
flag = chsub_e1699c5c(flag)
flag = digsub_288ef9ea(flag)
flag = add_d153a7bf(flag)
flag = sub_a96a1483(flag)
flag = xor_b8937290(flag)
flag = cadd_400b70cb(flag)
flag = shuffle_abafc5c1(flag)
flag = xor_ba1d287c(flag)
flag = digsub_1d28a867(flag)
flag = chmul_06d41645(flag)
flag = chunk_90824d65(flag)
flag = mul_1b781211(flag)
flag = chmul_6f2b8735(flag)
flag = chmul_d95a813a(flag)
flag = digsub_8fc854f8(flag)
flag = shuffle_de4afce0(flag)
flag = digsub_1d4087e8(flag)
flag = cxor_81cc1cc2(flag)
flag = cadd_6d037df0(flag)
flag = sub_a148160b(flag)
flag = chadd_3b98f1b0(flag)
flag = chadd_6a4e5b24(flag)
flag = cmul_22a48cb5(flag)
flag = cmul_108a5ff2(flag)
flag = chmul_7eb45a9e(flag)
flag = chsub_3df0ef3c(flag)
flag = chunk_31cdb624(flag)
flag = xor_c425535c(flag)
flag = cadd_469004ba(flag)
flag = shuffle_0ca300ee(flag)
flag = cadd_03187d75(flag)
flag = chsub_a0999ab2(flag)
flag = shuffle_865caf5e(flag)
flag = cadd_a6332778(flag)
flag = cadd_b70fc370(flag)
flag = chunk_607218b8(flag)
flag = csub_30ac2fb9(flag)
flag = chxor_a120d278(flag)
flag = xor_f80064d0(flag)
flag = chxor_32814bee(flag)
flag = csub_40fa37b4(flag)
flag = chxor_a614acf2(flag)
flag = chsub_3d2428ad(flag)
flag = digsub_6dd6217e(flag)
flag = csub_d480ce5f(flag)
flag = add_377e663e(flag)
flag = xor_6a599f5a(flag)
flag = sub_5e069f47(flag)
flag = mul_89548da9(flag)
flag = chmul_99695284(flag)
flag = chxor_442c0a5b(flag)
flag = cxor_4b979532(flag)
flag = digsub_46ad768c(flag)
flag = sub_381e766c(flag)
flag = chadd_151f0f0e(flag)
flag = chmul_905d7d7a(flag)
flag = chxor_947d449e(flag)
flag = sub_abe98fac(flag)
flag = chsub_ad5739bc(flag)
flag = digsub_081fcfe8(flag)
flag = xor_3d8de492(flag)
flag = chadd_abc266d5(flag)
flag = digsub_fcf8a8ee(flag)
flag = chunk_56a0ded7(flag)
flag = chadd_b9c3b1c6(flag)
flag = chunk_397a3d62(flag)
flag = xor_f7706b03(flag)
flag = chunk_757730c2(flag)
flag = cmul_318e5f45(flag)
flag = chxor_1e5bb2ed(flag)
flag = chadd_d5cb8b82(flag)
flag = sub_b82d8405(flag)
flag = chsub_ca548f97(flag)
flag = shuffle_efb3207c(flag)
flag = xor_77377fa6(flag)
flag = digsub_dcdf3ce1(flag)
flag = chsub_b335ae97(flag)
flag = cxor_e86ea0c2(flag)
flag = chadd_97096590(flag)
flag = cadd_f1510001(flag)
flag = chsub_91553a2c(flag)
flag = cadd_a6332778(flag)
flag = chsub_0063bc32(flag)
flag = csub_6f8ba274(flag)
flag = xor_f904d9a6(flag)
flag = xor_3994c2ad(flag)
flag = cxor_f87a3a8a(flag)
flag = digsub_80e4e5c7(flag)
flag = chsub_d4cc5505(flag)
flag = chmul_47a26e6f(flag)
flag = chunk_225b51ad(flag)
flag = xor_813cf8a0(flag)
flag = add_ed6c03df(flag)
flag = chmul_3d18df83(flag)
flag = digsub_c24462ab(flag)
flag = csub_c3302d5b(flag)
flag = cmul_ca02e498(flag)
flag = chunk_a431061a(flag)
flag = shuffle_b20aa4f9(flag)
flag = mul_947580cb(flag)
flag = chadd_9f220dc2(flag)
flag = chadd_9e80333c(flag)
flag = add_d7079839(flag)
flag = mul_947580cb(flag)
flag = chsub_7e45d909(flag)
flag = sub_8058d94d(flag)
flag = xor_276ba897(flag)
flag = cxor_79917601(flag)
flag = chadd_7c5f1cde(flag)
flag = chunk_55f369b0(flag)
flag = chsub_f9d9c30e(flag)
flag = chmul_0bc227c2(flag)
flag = cxor_98fe5771(flag)
flag = chsub_0642b6ad(flag)
flag = add_b6dbb476(flag)
flag = chadd_93e431eb(flag)
flag = csub_76313df2(flag)
flag = chsub_37756695(flag)
flag = add_6c1ae0e6(flag)
flag = chsub_0d419486(flag)
flag = cadd_01e4dea4(flag)
flag = chsub_7ade6cf5(flag)
flag = csub_2df7e131(flag)
flag = xor_13c063a7(flag)
flag = cadd_01e4dea4(flag)
flag = cadd_4d6936c6(flag)
flag = csub_f291b39b(flag)
flag = csub_37af1f58(flag)
flag = chmul_77349f1c(flag)
flag = chsub_56813bb5(flag)
flag = chxor_4fe33b06(flag)
flag = sub_05bc34d7(flag)
flag = sub_0d8062bd(flag)
flag = sub_1b9f18a3(flag)
flag = cadd_79d7fa85(flag)
flag = cxor_8e45b4c4(flag)
flag = cxor_24690d71(flag)
flag = add_0b0a39a3(flag)
flag = sub_47cbdf28(flag)
flag = sub_f95a3649(flag)
flag = chunk_b0f88afb(flag)
flag = chunk_28475841(flag)
flag = chadd_2a11532c(flag)
flag = chsub_3a9fd4f5(flag)
flag = xor_ee57e55f(flag)
flag = shuffle_b118d2cc(flag)
flag = csub_7f9b642d(flag)
flag = chsub_1d756bfc(flag)
flag = chsub_93ac52f5(flag)
flag = mul_cba48e57(flag)
flag = chunk_cf1766d3(flag)
flag = digsub_6e4a7a18(flag)
flag = xor_b1dcccdc(flag)
flag = chsub_c6725cc1(flag)
flag = chsub_4c1e3f38(flag)
flag = chxor_6ef3ef24(flag)
flag = cxor_44afb555(flag)
flag = cxor_31be8398(flag)
flag = cxor_c8ef5dcc(flag)
flag = mul_8c56f020(flag)
flag = cmul_6cf9601c(flag)
flag = chadd_6156d6db(flag)
flag = chmul_0b2874b7(flag)
flag = sub_31290fb7(flag)
flag = add_9a1634ef(flag)
flag = xor_b7fcf01b(flag)
flag = cxor_2e4b26f4(flag)
flag = csub_ef41ffb0(flag)
flag = mul_49d2ca13(flag)
flag = cadd_2da455cf(flag)
flag = digsub_d70c6f19(flag)
flag = chsub_1c4c548c(flag)
flag = xor_c0655006(flag)
flag = chunk_a5854668(flag)
flag = chadd_af05dbbf(flag)
flag = cmul_9f9f2324(flag)
flag = add_8357f559(flag)
flag = sub_a99136b5(flag)
flag = digsub_69f3e773(flag)
flag = chmul_2c8f4393(flag)
flag = cadd_66bcc5a2(flag)
flag = chxor_9b4a8975(flag)
flag = cxor_37cf37e1(flag)
flag = shuffle_4e8ad324(flag)
flag = cadd_e69f5bf8(flag)
flag = chunk_69dd3db9(flag)
flag = cadd_36d81dd6(flag)
flag = chxor_b3e205ec(flag)
flag = shuffle_c089e7f9(flag)
flag = chmul_b39f382d(flag)
flag = chadd_151f0f0e(flag)
flag = chunk_e798b09f(flag)
flag = cadd_fb2c7b99(flag)
flag = cxor_89b073e0(flag)
flag = cadd_5f3da75c(flag)
flag = shuffle_a293a45d(flag)
flag = csub_d97e3189(flag)
flag = cadd_01e4dea4(flag)
flag = csub_07dcceeb(flag)
flag = mul_e6b65f6c(flag)
flag = xor_cb183615(flag)
flag = cxor_8e45b4c4(flag)
flag = xor_097a8a70(flag)
flag = chsub_68113691(flag)
flag = chsub_01f682a9(flag)
flag = cxor_18c1314e(flag)
flag = add_30966eb1(flag)
flag = digsub_6899cdac(flag)
flag = add_f2a6c048(flag)
flag = chxor_98102bb9(flag)
flag = xor_2bdb6650(flag)
flag = add_79292e38(flag)
flag = csub_cf019266(flag)
flag = cadd_5352b247(flag)
flag = chsub_3679cdb7(flag)
flag = cadd_e7cd385e(flag)
flag = chxor_ad45b413(flag)
flag = csub_8bb7278b(flag)
flag = shuffle_8c8dc376(flag)
flag = add_c3711383(flag)
flag = cadd_261a4a1d(flag)
flag = chxor_b3e205ec(flag)
flag = csub_61350fa4(flag)
flag = mul_589a2ea6(flag)
flag = shuffle_aabdc81c(flag)
flag = chxor_bbf3589a(flag)
flag = mul_8502f399(flag)
flag = xor_5c62e4ce(flag)
flag = chsub_e4b39d3b(flag)
flag = mul_fc9252b1(flag)
flag = csub_1d8c0c6b(flag)
flag = cxor_26057d46(flag)
flag = shuffle_b38ea8bc(flag)
flag = chxor_beaa6fd7(flag)
flag = chxor_6ae1cc6a(flag)
flag = xor_34c86087(flag)
flag = chmul_faead8d0(flag)
flag = chunk_59cbae4c(flag)
flag = mul_0b75c488(flag)
flag = digsub_63dc4ebb(flag)
flag = chadd_36010571(flag)
flag = chsub_37756695(flag)
flag = cadd_8a476763(flag)
flag = chadd_bbfef485(flag)
flag = digsub_a708386c(flag)
flag = chxor_01d4c54e(flag)
flag = sub_3935d689(flag)
flag = add_f10a2818(flag)
flag = cmul_04ae6c22(flag)
flag = sub_2291bf41(flag)
flag = chsub_411c54c2(flag)
flag = cxor_42ec5686(flag)
flag = csub_35e65bc6(flag)
flag = chmul_28162caa(flag)
flag = chsub_e2d10a29(flag)
flag = sub_6bf5673d(flag)
flag = cmul_97c0f64c(flag)
flag = cxor_8549d8eb(flag)
flag = chmul_0db588dd(flag)
flag = xor_a1e6019f(flag)
flag = cxor_65e0c2b5(flag)
flag = chunk_0f650cd2(flag)
flag = shuffle_03c855c6(flag)
flag = add_9e4296de(flag)
flag = chmul_843e27ef(flag)
flag = chadd_2bcca0b5(flag)
flag = chunk_bfd2f50a(flag)
flag = chunk_aeecc76a(flag)
flag = cxor_4f2ad7d2(flag)
flag = sub_a8ed3df9(flag)
flag = mul_9ff113f3(flag)
flag = chsub_daf292bd(flag)
flag = xor_4e5c29b0(flag)
flag = chxor_37bb6be2(flag)
flag = cadd_c170383d(flag)
flag = xor_e2704680(flag)
flag = csub_19752fd1(flag)
flag = chunk_97e5e867(flag)
flag = shuffle_f44f0fc5(flag)
flag = chadd_baaab600(flag)
flag = shuffle_35e807af(flag)
flag = shuffle_691df10d(flag)
flag = xor_90755689(flag)
flag = chxor_a76b0441(flag)
flag = mul_d9dbdb53(flag)
flag = add_99300f40(flag)
flag = csub_9bf22fee(flag)
flag = chadd_3aa9c371(flag)
flag = cxor_2f7b49f0(flag)
flag = mul_2f89e56a(flag)
flag = chadd_55b65d14(flag)
flag = add_502ea941(flag)
flag = csub_16bab438(flag)
flag = csub_fe63b620(flag)
flag = cadd_88038a55(flag)
flag = xor_816adcd8(flag)
flag = chmul_e6b12a10(flag)
flag = cadd_f435a64a(flag)
flag = digsub_732f28f7(flag)
flag = digsub_7d45ef3f(flag)
flag = cmul_1f88fc08(flag)
flag = chmul_71128504(flag)
flag = sub_d6d53ea0(flag)
flag = add_e4570f19(flag)
flag = chxor_cab624ba(flag)
flag = chmul_998ab1ea(flag)
flag = sub_8058d94d(flag)
flag = chmul_998ab1ea(flag)
flag = xor_e994fa9c(flag)
flag = xor_c0655006(flag)
flag = chsub_379e2ba1(flag)
flag = xor_25ac4148(flag)
flag = sub_abe98fac(flag)
flag = cadd_7838f4d9(flag)
flag = xor_0238a60c(flag)
flag = cxor_9eab5098(flag)
flag = cxor_c9ef0e8c(flag)
flag = cmul_108a5ff2(flag)
flag = chxor_8db15314(flag)
flag = chxor_1c95a906(flag)
flag = cmul_ea158364(flag)
flag = sub_5d7857eb(flag)
flag = chmul_df642f23(flag)
flag = chadd_51cbffb6(flag)
flag = chsub_68af0dd5(flag)
flag = chmul_c35fb5e9(flag)
flag = chunk_f140121b(flag)
flag = chmul_215a2fee(flag)
flag = cxor_bba6fa0a(flag)
flag = chmul_6d29d2c8(flag)
flag = add_547096c9(flag)
flag = chxor_eae131e0(flag)
flag = chunk_c154a4b0(flag)
flag = chxor_88e67ab1(flag)
flag = add_d1eb8814(flag)
flag = shuffle_7df2cac5(flag)
flag = shuffle_39351a8a(flag)
flag = add_100ba22e(flag)
flag = chxor_7fed6271(flag)
flag = add_9e15da4e(flag)
flag = chunk_9758765f(flag)
flag = shuffle_3125b36d(flag)
flag = xor_890e78b1(flag)
flag = cmul_2d5025b5(flag)
flag = sub_481904d7(flag)
flag = shuffle_ee42405e(flag)
flag = chmul_97ccb142(flag)
flag = add_c8475b4e(flag)
flag = chadd_fe09deb1(flag)
flag = chunk_97afc148(flag)
flag = chmul_a6bf2367(flag)
flag = csub_31de2ba3(flag)
flag = shuffle_691df10d(flag)
flag = sub_46493b1b(flag)
flag = add_42869331(flag)
flag = chunk_5e4cee28(flag)
flag = cxor_ec93c298(flag)
flag = chmul_315f2063(flag)
flag = cxor_29255d85(flag)
flag = chsub_dfabe48a(flag)
flag = chmul_384134ae(flag)
flag = chsub_9c3ae2d0(flag)
flag = csub_b9b5b150(flag)
flag = chsub_29d24d89(flag)
flag = chxor_ee89b49e(flag)
flag = chxor_6db45a16(flag)
flag = chmul_d62489f9(flag)
flag = chxor_829e0b1c(flag)
flag = chunk_dd51ac10(flag)
flag = add_4734c18c(flag)
flag = chsub_a23842be(flag)
flag = mul_4ca5f016(flag)
flag = chunk_5f5b8349(flag)
flag = add_aae6cc04(flag)
flag = chsub_4c1e3f38(flag)
flag = chadd_adaa5d2b(flag)
flag = cadd_01e4dea4(flag)
flag = cxor_89b073e0(flag)
flag = chxor_da22b4fb(flag)
flag = cadd_626b1801(flag)
flag = digsub_e2dd946e(flag)
flag = chxor_fb59e14c(flag)
flag = shuffle_285ae96d(flag)
flag = chsub_daf292bd(flag)
flag = csub_c123debf(flag)
flag = cadd_69879170(flag)
flag = chsub_9c3ae2d0(flag)
flag = sub_72b00ca4(flag)
flag = chmul_cfee488f(flag)
flag = csub_d6e694b3(flag)
flag = shuffle_7c86708c(flag)
flag = chxor_c14e4305(flag)
flag = xor_e1acd3bf(flag)
flag = chunk_b4139adc(flag)
flag = chmul_ee75a8f1(flag)
flag = chsub_894d41c7(flag)
flag = chsub_2b33e666(flag)
flag = mul_2b51c8be(flag)
flag = cxor_71fd1f39(flag)
flag = csub_83d96569(flag)
flag = add_ed9a96c7(flag)
flag = chadd_e835abf7(flag)
flag = csub_9678c8c9(flag)
flag = sub_cfa999fe(flag)
flag = cxor_7be08bad(flag)
flag = xor_890e78b1(flag)
flag = csub_d24d889b(flag)
flag = chxor_daa5c35b(flag)
flag = chadd_fe09deb1(flag)
flag = mul_df48e442(flag)
flag = digsub_be5397e9(flag)
flag = sub_12d5d25f(flag)
flag = cmul_be878186(flag)
flag = chmul_be23499e(flag)
flag = cadd_b60bc8ff(flag)
flag = xor_df1ffac5(flag)
flag = chmul_3d6abe7c(flag)
flag = cxor_95c41471(flag)
flag = cxor_39585eb3(flag)
flag = mul_3dd9a13e(flag)
flag = shuffle_467b8ca7(flag)
flag = sub_46493b1b(flag)
flag = cmul_4f99fe69(flag)
flag = cmul_cd2eddf4(flag)
flag = sub_8fe1102c(flag)
flag = shuffle_b3fe3e10(flag)
flag = mul_bc232ddb(flag)
flag = shuffle_4e66918e(flag)
flag = chmul_a1decfe1(flag)
flag = chsub_4364daac(flag)
flag = csub_8bb7278b(flag)
flag = mul_6d210a06(flag)
flag = cxor_85556ac5(flag)
flag = add_546e77b8(flag)
flag = chxor_1c95a906(flag)
flag = add_8357f559(flag)
flag = chsub_c48765e6(flag)
flag = csub_6f8ba274(flag)
flag = chunk_ba6b2283(flag)
flag = csub_4707f65f(flag)
flag = chadd_84fac9b1(flag)
flag = cxor_48ff1c3c(flag)
flag = mul_29392dc2(flag)
flag = chxor_f0c78fe9(flag)
flag = cmul_259fe9ec(flag)
flag = cmul_72112381(flag)
flag = xor_a175d05f(flag)
flag = cmul_8f4e7b08(flag)
flag = shuffle_a05741bb(flag)
flag = cmul_1f88fc08(flag)
flag = cxor_d05587bc(flag)
flag = chmul_885659c9(flag)
flag = chadd_977a0637(flag)
flag = cxor_974a0f64(flag)
flag = cadd_a31d859b(flag)
flag = chunk_e006d845(flag)
flag = cmul_bf506846(flag)
flag = chunk_cf1766d3(flag)
flag = csub_96d5d023(flag)
flag = shuffle_77f02835(flag)
flag = xor_16c7c77d(flag)
flag = cxor_5161196f(flag)
flag = mul_cab49d47(flag)
flag = shuffle_f3858d75(flag)
flag = chxor_79ffa521(flag)
flag = cadd_9a96d521(flag)
flag = chmul_4e871d0b(flag)
flag = chxor_c55e532b(flag)
flag = xor_276ba897(flag)
flag = csub_37af1f58(flag)
flag = chxor_e5000f9b(flag)
flag = shuffle_2946b8f8(flag)
flag = add_f4bd902e(flag)
flag = shuffle_5de0aca9(flag)
flag = csub_cf019266(flag)
flag = chunk_1ba6912f(flag)
flag = cxor_29df8c0e(flag)
flag = chunk_530108df(flag)
flag = chunk_e4be2495(flag)
flag = cadd_fd35b517(flag)
flag = xor_49a34b54(flag)
flag = chunk_f5aa64b7(flag)
flag = cadd_de624ff2(flag)
flag = cmul_ca71521f(flag)
flag = mul_4de4594c(flag)
flag = mul_1dfffbd5(flag)
flag = cxor_96357748(flag)
flag = csub_a0c64190(flag)
flag = sub_a40cb760(flag)
flag = sub_8c476a01(flag)
flag = chsub_f3e2875f(flag)
flag = csub_d3a63092(flag)
flag = cxor_5161196f(flag)
flag = chunk_77a6c434(flag)
flag = cmul_880f9e67(flag)
flag = cmul_f579357e(flag)
flag = chmul_18ecaa08(flag)
flag = xor_11751251(flag)
flag = cxor_567d1d52(flag)
flag = cxor_94658244(flag)
flag = cmul_8d626e12(flag)
flag = shuffle_77f02835(flag)
flag = digsub_caab5c9d(flag)
flag = sub_481904d7(flag)
flag = shuffle_28820acc(flag)
flag = csub_81ef0c4c(flag)
flag = sub_bc852ad6(flag)
flag = digsub_6b9010a5(flag)
flag = chunk_45336ad9(flag)
flag = digsub_dcdf3ce1(flag)
flag = add_aa98b4ae(flag)
flag = xor_18093134(flag)
flag = add_2af4f21d(flag)
flag = add_ed2b53a6(flag)
flag = cadd_0a20014b(flag)
flag = add_8db2a643(flag)
flag = shuffle_d69d2c9b(flag)
flag = cmul_65983a34(flag)
flag = xor_ba2cb10f(flag)
flag = chmul_6d29d2c8(flag)
flag = chadd_896dc902(flag)
flag = mul_ce14d872(flag)
flag = mul_9d4040eb(flag)
flag = chsub_f1540b87(flag)
flag = cadd_428d6ecc(flag)
flag = cxor_77ffb5fc(flag)
flag = add_0f654473(flag)
flag = cadd_074e39fc(flag)
flag = chunk_be89d48a(flag)
flag = chxor_b8ec7b4f(flag)
flag = chsub_20dd3740(flag)
flag = csub_ad630998(flag)
flag = chmul_4af7800f(flag)
flag = cmul_ec6817f2(flag)
flag = chmul_90f76848(flag)
flag = cadd_a39df2bc(flag)
flag = chunk_4423d984(flag)
flag = add_02bb294f(flag)
flag = add_88ef453e(flag)
flag = shuffle_b1134b2a(flag)
flag = csub_f4c94d76(flag)
flag = cmul_423d2433(flag)
flag = cmul_2d5025b5(flag)
flag = digsub_2c3da0c6(flag)
flag = xor_24b008b9(flag)
flag = chmul_b537d51c(flag)
flag = xor_b7dd3197(flag)
flag = shuffle_86e11db2(flag)
flag = chadd_6662b275(flag)
flag = digsub_269bf7d5(flag)
flag = chmul_c3fa7120(flag)
flag = xor_13c063a7(flag)
flag = cxor_cc615bb3(flag)
flag = digsub_1209d475(flag)
flag = digsub_504110f5(flag)
flag = digsub_0fcbc54c(flag)
flag = digsub_dddb1e6b(flag)
flag = chmul_5f9891b6(flag)
flag = mul_eb559523(flag)
flag = mul_34324887(flag)
flag = cadd_22e59670(flag)
flag = add_b0ac8236(flag)
flag = mul_53ea4a75(flag)
flag = cxor_3addab66(flag)
flag = add_06c4c375(flag)
flag = cxor_21574829(flag)
flag = cmul_3dfa51d9(flag)
flag = cxor_0aedee08(flag)
flag = chmul_498a4104(flag)
flag = cmul_93bd1510(flag)
flag = mul_f58805a3(flag)
flag = xor_3b14c897(flag)
flag = chsub_d64b63cc(flag)
flag = cxor_a56196fd(flag)
flag = add_271749c1(flag)
flag = shuffle_68814b98(flag)
flag = digsub_6b9010a5(flag)
flag = sub_297255e0(flag)
flag = chunk_7692aef1(flag)
flag = cmul_db96fc2e(flag)
flag = add_b510c979(flag)
flag = xor_addb072f(flag)
flag = xor_1a989c5f(flag)
flag = chadd_4b37b268(flag)
flag = cadd_441443f1(flag)
flag = cmul_b7f51e10(flag)
flag = xor_e35626c5(flag)
flag = chxor_587ae605(flag)
flag = cmul_7dfade82(flag)
flag = mul_49d2ca13(flag)
flag = cadd_d279898b(flag)
flag = mul_4bd300c9(flag)
flag = cxor_95401b5f(flag)
flag = chsub_b335ae97(flag)
flag = chunk_56a22d4f(flag)
flag = chsub_62312f9d(flag)
flag = digsub_154d7267(flag)
flag = csub_cd81496c(flag)
flag = csub_b5b948c9(flag)
flag = chxor_aa8e1df9(flag)
flag = digsub_0ea92eac(flag)
flag = cxor_ae2b4026(flag)
flag = chxor_8550301d(flag)
flag = chmul_05b3201a(flag)
flag = chunk_faeac0c7(flag)
flag = add_26bde20c(flag)
flag = sub_a9414276(flag)
flag = cxor_b7550d4d(flag)
flag = sub_eeb354ba(flag)
flag = chunk_31411086(flag)
flag = add_eac32141(flag)
flag = chsub_c4e082fd(flag)
flag = cadd_b0a14b2d(flag)
flag = chsub_0d419486(flag)
flag = xor_3b3fc8a0(flag)
flag = cxor_18ccd1a8(flag)
flag = shuffle_2de78ecc(flag)
flag = cmul_7fe479fd(flag)
flag = chxor_e4593d98(flag)
flag = csub_4660584b(flag)
flag = xor_f8437474(flag)
flag = chunk_8ad268b9(flag)
flag = mul_2a724485(flag)
flag = cadd_4f92ed7a(flag)
flag = csub_452392a9(flag)
flag = digsub_bd11b809(flag)
flag = digsub_e9fbb5e0(flag)
flag = chadd_2eddab35(flag)
flag = chunk_367e0942(flag)
flag = shuffle_65d9ca2c(flag)
flag = mul_e2b49085(flag)
flag = digsub_8e44fdbd(flag)
flag = add_f22a99f3(flag)
flag = chxor_36059956(flag)
flag = chunk_426d469b(flag)
flag = shuffle_7b370edd(flag)
flag = cadd_ea8c28f4(flag)
flag = chadd_b07351e2(flag)
flag = shuffle_35e807af(flag)
flag = chadd_ac9d1de7(flag)
flag = cxor_89cd8dcd(flag)
flag = sub_6fb5c242(flag)
flag = chsub_de16135d(flag)
flag = shuffle_1011fc21(flag)
flag = mul_abf95b28(flag)
flag = chsub_daf292bd(flag)
flag = chadd_f2fd70f1(flag)
flag = chxor_6712129e(flag)
flag = xor_f88ae7f1(flag)
flag = csub_f4c94d76(flag)
flag = csub_26fceede(flag)
flag = cadd_56728fa3(flag)
flag = cxor_c8ef5dcc(flag)
flag = mul_b97eacc4(flag)
flag = chunk_3f96f374(flag)
flag = chmul_e4e712b9(flag)
flag = chxor_4447550e(flag)
flag = chunk_6df9f44d(flag)
flag = xor_276ba897(flag)
flag = cmul_be878186(flag)
flag = cadd_598cbf7e(flag)
flag = shuffle_f0fadf4b(flag)
flag = cadd_caab3e28(flag)
flag = chxor_4f175e3b(flag)
flag = chsub_33711b4f(flag)
flag = sub_00c9af82(flag)
flag = cmul_b759583b(flag)
flag = xor_4e43f7ea(flag)
flag = mul_d62641f4(flag)
flag = chxor_4fe33b06(flag)
flag = chunk_3f96f374(flag)
flag = sub_5e069f47(flag)
flag = csub_e6b3e198(flag)
flag = shuffle_d88e3f7d(flag)
flag = digsub_e9fbb5e0(flag)
flag = chunk_d9ce60f8(flag)
flag = chunk_80f5c942(flag)
flag = digsub_2ab90ae8(flag)
flag = chunk_dd75a83f(flag)
flag = chadd_da1b4b19(flag)
flag = shuffle_45b62e3f(flag)
flag = mul_e2b49085(flag)
flag = sub_297255e0(flag)
flag = chmul_23d520ac(flag)
flag = chsub_ad5739bc(flag)
flag = cadd_7ed856d4(flag)
flag = chxor_c7f6ad65(flag)
flag = shuffle_9076b7e7(flag)
flag = sub_716f026e(flag)
flag = cmul_0d8033d0(flag)
flag = add_fee2762f(flag)
flag = mul_fc6ac804(flag)
flag = shuffle_58938b75(flag)
flag = xor_23517ee7(flag)
flag = add_0090343e(flag)
flag = chmul_5ed084ad(flag)
flag = cxor_97867026(flag)
flag = chsub_27dae3ae(flag)
flag = xor_1eba93e4(flag)
flag = chadd_7fc84678(flag)
flag = digsub_ff462c4a(flag)
flag = chxor_0a1291f0(flag)
flag = digsub_ec12ae2a(flag)
flag = chxor_665eed2c(flag)
flag = cxor_e9ecb31a(flag)
flag = chxor_de94bd99(flag)
flag = mul_37e82792(flag)
flag = xor_f8437474(flag)
flag = chxor_d7d9bf32(flag)
flag = chmul_49efe464(flag)
flag = mul_f44aa210(flag)
flag = chxor_3f9af41e(flag)
flag = digsub_f44f1764(flag)
flag = cmul_bf506846(flag)
flag = xor_f580ac50(flag)
flag = cadd_428d6ecc(flag)
flag = chxor_6fca7a91(flag)
flag = chsub_ebadaefe(flag)
flag = shuffle_3150238f(flag)
flag = digsub_dae4f397(flag)
flag = chsub_9e3a2eb0(flag)
flag = shuffle_de9df0cf(flag)
flag = cadd_f288775d(flag)
flag = cadd_bf48a745(flag)
flag = chmul_e559b45c(flag)
flag = chunk_e5aaf751(flag)
flag = cxor_bac498f9(flag)
flag = chsub_29874234(flag)
flag = cadd_40a2d9f1(flag)
flag = chsub_3d7d2e18(flag)
flag = chunk_caa9baa3(flag)
flag = chunk_cb1a7d77(flag)
flag = csub_f6d8e64f(flag)
flag = shuffle_65d9ca2c(flag)
flag = cadd_12c3036e(flag)
flag = csub_1ca516a7(flag)
flag = csub_63df48f0(flag)
flag = cxor_98fe5771(flag)
flag = sub_2d595d46(flag)
flag = chmul_06d41645(flag)
flag = chmul_1bd08914(flag)
flag = sub_97300f52(flag)
flag = xor_1c0c670c(flag)
flag = cadd_b8669446(flag)
flag = cxor_d2e5bfdf(flag)
flag = csub_c128716f(flag)
flag = cmul_c648ff5d(flag)
flag = chsub_b448dac1(flag)
flag = mul_fc9252b1(flag)
flag = digsub_6bf0d618(flag)
flag = chxor_83f63c74(flag)
flag = add_79292e38(flag)
flag = sub_d163ba0e(flag)
flag = chmul_0ef7cc5e(flag)
flag = chsub_6649ba27(flag)
flag = chxor_5f238dda(flag)
flag = cmul_63b57c2a(flag)
flag = chsub_4d7b9897(flag)
flag = cadd_f288775d(flag)
flag = shuffle_f89bee84(flag)
flag = digsub_69f7a7ef(flag)
flag = chsub_a40de1d7(flag)
flag = xor_5c4520e3(flag)
flag = xor_78f0da60(flag)
flag = chunk_6f47d8f4(flag)
flag = cxor_1adfeb4e(flag)
flag = add_c90f428d(flag)
flag = add_6aac990e(flag)
flag = chxor_a84644b1(flag)
flag = cmul_012b5eb8(flag)
flag = chmul_0c946b47(flag)
flag = cadd_d44bbdbd(flag)
flag = sub_aa1109df(flag)
flag = xor_49a34b54(flag)
flag = sub_e6d0323d(flag)
flag = chunk_9758765f(flag)
flag = cadd_596e2779(flag)
flag = sub_53dd4b93(flag)
flag = mul_eb201421(flag)
flag = shuffle_0a4f92ab(flag)
flag = chmul_75d42cab(flag)
flag = digsub_9dafa980(flag)
flag = xor_6cfdbb4a(flag)
flag = cxor_df42d206(flag)
flag = cadd_5acbd300(flag)
flag = chadd_bd0ec963(flag)
flag = cmul_029f5e8d(flag)
flag = chmul_73d44dfc(flag)
flag = chmul_ee75a8f1(flag)
flag = cadd_3882e35e(flag)
flag = sub_899f4720(flag)
flag = cxor_46b69f72(flag)
flag = add_e08d6566(flag)
flag = csub_fdb702b6(flag)
flag = add_0ed21bd0(flag)
flag = chsub_91add2c2(flag)
flag = sub_658747e3(flag)
flag = mul_c4479db6(flag)
flag = chmul_b28ec3c8(flag)
flag = cadd_bf38d005(flag)
flag = mul_3d2d3c98(flag)
flag = add_604f7a16(flag)
flag = chsub_3d2428ad(flag)
flag = chadd_bd55be6b(flag)
flag = sub_12d5d25f(flag)
flag = xor_19d4481b(flag)
flag = cmul_892d62b0(flag)
flag = sub_753032fe(flag)
flag = cxor_4cfe1de0(flag)
flag = shuffle_e204c945(flag)
flag = cadd_3124bc3c(flag)
flag = chunk_eb268372(flag)
flag = cmul_7b0890d6(flag)
flag = chadd_6b1daeac(flag)
flag = sub_4efcb7e6(flag)
flag = chadd_fc03260a(flag)
flag = chunk_f554e6ab(flag)
flag = chxor_67aa494b(flag)
flag = chsub_8b38a202(flag)
flag = sub_6ca5da9b(flag)
flag = mul_d952127d(flag)
flag = shuffle_022284b4(flag)
flag = digsub_7638ee12(flag)
flag = chxor_de63f975(flag)
flag = shuffle_3113cb7a(flag)
flag = chsub_98a13db8(flag)
flag = chmul_7cbf2205(flag)
flag = cadd_27c86167(flag)
flag = chunk_cbf1932b(flag)
flag = chmul_58875bd8(flag)
flag = cmul_9bf9f69d(flag)
flag = sub_a5b2a08c(flag)
flag = cxor_16cc8dc6(flag)
flag = digsub_be47e356(flag)
flag = chsub_7b8aa8b8(flag)
flag = chxor_f309545e(flag)
flag = chadd_837f34c3(flag)
flag = shuffle_7eddc63c(flag)
flag = chunk_0188117c(flag)
flag = chunk_c761d499(flag)
flag = csub_23f2ff18(flag)
flag = shuffle_0d936e4f(flag)
flag = chsub_a70db66e(flag)
flag = chmul_f175d1d7(flag)
flag = chxor_d8c4549f(flag)
flag = csub_eb753ff1(flag)
flag = shuffle_e56a1778(flag)
flag = add_9009d319(flag)
flag = chunk_b78988b6(flag)
flag = add_e696fc9f(flag)
flag = cxor_4d3c5896(flag)
flag = chunk_13e026f7(flag)
flag = add_b071c8e9(flag)
flag = sub_f3b58e44(flag)
flag = sub_f1ab5525(flag)
flag = digsub_6bf0d618(flag)
flag = cxor_f0f82070(flag)
flag = chsub_4d0982ce(flag)
flag = chsub_d07297d3(flag)
flag = chadd_4b0b608a(flag)
flag = cmul_cd1aad88(flag)
flag = add_6300f0c0(flag)
flag = chxor_cf758070(flag)
flag = chxor_e93460f8(flag)
flag = chmul_4245aa0c(flag)
flag = csub_5bd78a36(flag)
flag = cxor_fe5870fc(flag)
flag = chadd_eb195385(flag)
flag = shuffle_057518f5(flag)
flag = chmul_f8bd0b15(flag)
flag = cadd_97daaa50(flag)
flag = mul_8c6fc3ce(flag)
flag = chsub_3af5214b(flag)
flag = chadd_37ffbfed(flag)
flag = xor_22aa0e90(flag)
flag = chxor_87ec1ab5(flag)
flag = chmul_7eea79aa(flag)
flag = csub_359c8002(flag)
flag = shuffle_82faa11e(flag)
flag = chsub_c813b5d2(flag)
flag = mul_ebff36e1(flag)
flag = cxor_0e701321(flag)
flag = chmul_991b7825(flag)
flag = cmul_3df83c6a(flag)
flag = cmul_ff24f1b5(flag)
flag = sub_f3be4e25(flag)
flag = shuffle_9eddde7b(flag)
flag = chsub_66269564(flag)
flag = chxor_1649570d(flag)
flag = cxor_9064d63f(flag)
flag = chunk_cb1a7d77(flag)
flag = cmul_e7c72b68(flag)
flag = sub_aa1109df(flag)
flag = sub_657f5f3f(flag)
flag = cmul_e577eda6(flag)
flag = sub_51002c26(flag)
flag = add_7aa57e32(flag)
flag = shuffle_f4bbf14d(flag)
flag = add_02374137(flag)
flag = cmul_f59de4d7(flag)
flag = shuffle_2c2121d2(flag)
flag = csub_5c981857(flag)
flag = mul_959ccef4(flag)
flag = cadd_df4a88c2(flag)
flag = chsub_21d8fc5d(flag)
flag = cmul_f05686bd(flag)
flag = chunk_8356e7c8(flag)
flag = chxor_e276b565(flag)
flag = csub_24fb716e(flag)
flag = chmul_d3cbaa99(flag)
flag = chadd_52640d1f(flag)
flag = digsub_c686d6d7(flag)
flag = chxor_a120d278(flag)
flag = cadd_640c9c4d(flag)
flag = digsub_95a880da(flag)
flag = digsub_4ed94ee3(flag)
flag = shuffle_0242ca5c(flag)
flag = chunk_efe1acab(flag)
flag = cadd_3a2cd387(flag)
flag = xor_4849bd77(flag)
flag = chsub_62a8f1cd(flag)
flag = mul_f44aa210(flag)
flag = shuffle_7df2cac5(flag)
flag = add_1e3629e5(flag)
flag = xor_a175d05f(flag)
flag = sub_2ccd274d(flag)
flag = cxor_94658244(flag)
flag = cxor_060ce4e2(flag)
flag = chsub_c78a57d0(flag)
flag = chsub_c78a57d0(flag)
flag = shuffle_b38ea8bc(flag)
flag = chsub_2d6c78f3(flag)
flag = chunk_2e1e8db3(flag)
flag = sub_609bbd1a(flag)
flag = cadd_b07f15df(flag)
flag = chmul_4d8aa24b(flag)
flag = sub_0992e83f(flag)
flag = shuffle_e56a1778(flag)
flag = xor_22aa0e90(flag)
flag = sub_d3dc3330(flag)
flag = chadd_404cff4b(flag)
flag = chadd_ee551422(flag)
flag = add_9a1634ef(flag)
flag = csub_247f37f1(flag)
flag = chsub_00adad20(flag)
flag = cxor_28d8fe91(flag)
flag = xor_f5bcc389(flag)
flag = chmul_23bd481d(flag)
flag = chmul_4af7800f(flag)
flag = xor_2a24945c(flag)
flag = digsub_6d16b628(flag)
flag = cmul_111bce58(flag)
flag = csub_fda3f560(flag)
flag = cmul_fedaeb35(flag)
flag = cxor_e59dc6e0(flag)
flag = cadd_2dcf1992(flag)
flag = chadd_04ef3ad8(flag)
flag = cadd_7936e180(flag)
flag = cxor_892833c6(flag)
flag = digsub_0ca9e7fd(flag)
flag = shuffle_2fffd50a(flag)
flag = chsub_5a5cbf95(flag)
flag = add_e9f76a38(flag)
flag = cadd_3a7e4ac5(flag)
flag = cadd_626b1801(flag)
flag = chxor_49e5796a(flag)
flag = cmul_06a86517(flag)
flag = chxor_79daeaf3(flag)
flag = chmul_34dab8e4(flag)
flag = chmul_70ce2001(flag)
flag = add_b071c8e9(flag)
flag = cmul_ca478228(flag)
flag = xor_3bb0008c(flag)
flag = cxor_b342528a(flag)
flag = xor_ac6e82c0(flag)
flag = add_37600cfb(flag)
flag = cadd_e9f8600c(flag)
flag = chadd_5816fd7f(flag)
flag = chxor_8550301d(flag)
flag = cxor_0af289cf(flag)
flag = digsub_afa62336(flag)
flag = chunk_957ebc7b(flag)
flag = cadd_a4fd2ffb(flag)
flag = mul_e04a2c12(flag)
flag = shuffle_cadeb447(flag)
flag = mul_6fc04a8d(flag)
flag = xor_e2704680(flag)
flag = cxor_11a1bb19(flag)
flag = cmul_dc2b00da(flag)
flag = chxor_01d4c54e(flag)
flag = shuffle_49d97f75(flag)
flag = cmul_054249fc(flag)
flag = chunk_b4b187d5(flag)
flag = digsub_a708386c(flag)
flag = chsub_7bc426c7(flag)
flag = chsub_2d19348f(flag)
flag = chxor_9eee4faf(flag)
flag = csub_20a6b2c3(flag)
flag = xor_3b807d61(flag)
flag = cxor_e799ce0f(flag)
flag = sub_1939e4b0(flag)
flag = shuffle_bbb676d2(flag)
flag = cadd_fd1d6bfc(flag)
flag = shuffle_b6779950(flag)
flag = cmul_22a48cb5(flag)
flag = chxor_00408453(flag)
flag = chsub_66a6c561(flag)
flag = cadd_81a69b3f(flag)
flag = mul_7fd5912a(flag)
flag = chmul_b8c4917b(flag)
flag = chsub_3679cdb7(flag)
flag = add_0572be2d(flag)
flag = chadd_5544e38e(flag)
flag = chadd_974a7c54(flag)
flag = csub_9856c97f(flag)
flag = chadd_39c0e18e(flag)
flag = chunk_443df39a(flag)
flag = add_7cb7d116(flag)
flag = digsub_be5397e9(flag)
flag = xor_5b9dbd1c(flag)
flag = sub_7bf8c980(flag)
flag = shuffle_987eaf21(flag)
flag = digsub_ef3c36c5(flag)
flag = chadd_58981664(flag)
flag = sub_a9414276(flag)
flag = cxor_454d9bad(flag)
flag = add_03dc5f83(flag)
flag = chsub_379e2ba1(flag)
flag = chmul_d22494d3(flag)
flag = mul_7fa6ac59(flag)
flag = csub_9bf22fee(flag)
flag = xor_46b7d1d1(flag)
flag = chsub_d3796f81(flag)
flag = chxor_b10769e4(flag)
flag = cmul_9a7d5570(flag)
flag = sub_f502ff48(flag)
flag = chmul_e7f67d19(flag)
flag = chunk_406fc18b(flag)
flag = add_f66fdb75(flag)
flag = shuffle_5ad024ad(flag)
flag = chmul_6d4f5527(flag)
flag = chsub_d866d58b(flag)
flag = digsub_03c94dae(flag)
flag = chsub_4c1e3f38(flag)
flag = xor_9baa41ff(flag)
flag = add_16b704e9(flag)
flag = cadd_0228ee52(flag)
flag = cadd_c0d41733(flag)
flag = cmul_63f9fdde(flag)
flag = chsub_ee48bdeb(flag)
flag = cmul_dd8d739c(flag)
flag = add_0ed21bd0(flag)
flag = chxor_b9b02bcc(flag)
flag = add_c43e26d8(flag)
flag = mul_6906b8ec(flag)
flag = cxor_567d1d52(flag)
flag = add_7ea1ef19(flag)
flag = add_c8475b4e(flag)
flag = sub_4e125d47(flag)
flag = shuffle_5de0aca9(flag)
flag = chsub_a3a9e242(flag)
flag = chadd_a6e32549(flag)
flag = cmul_db003c24(flag)
flag = csub_98af337d(flag)
flag = chunk_28acccb3(flag)
flag = chunk_a998eeb4(flag)
flag = xor_2b6a5232(flag)
flag = cxor_83571dc3(flag)
flag = digsub_4a75fccf(flag)
flag = xor_3d2b41ae(flag)
flag = chadd_cf38fd97(flag)
flag = chsub_3cc05763(flag)
flag = digsub_189a0416(flag)
flag = add_07231911(flag)
flag = shuffle_0242ca5c(flag)
flag = cxor_e9ecb31a(flag)
flag = xor_e17e7409(flag)
flag = chmul_f03e312d(flag)
flag = cxor_719205d0(flag)
flag = chadd_e1175475(flag)
flag = shuffle_efb3207c(flag)
flag = cadd_f59f3dd1(flag)
flag = chsub_26373389(flag)
flag = digsub_81a9c939(flag)
flag = chunk_c1b1042d(flag)
flag = sub_f502ff48(flag)
flag = add_34a7ffc5(flag)
flag = chxor_6c6e06b4(flag)
flag = chadd_b0d8f554(flag)
flag = cadd_1521484b(flag)
flag = add_e6d0a399(flag)
flag = chxor_01d4c54e(flag)
flag = add_b7a421e2(flag)
flag = xor_64a04adb(flag)
flag = mul_0b75c488(flag)
flag = sub_3fa33786(flag)
flag = chsub_9c3ae2d0(flag)
flag = shuffle_d0a6fda1(flag)
flag = xor_ac6e82c0(flag)
flag = chunk_e5683735(flag)
flag = chxor_2e7e40ef(flag)
flag = cxor_22b4a127(flag)
flag = cadd_130f7b9b(flag)
flag = digsub_0ea92eac(flag)
flag = cmul_38769a31(flag)
flag = mul_001d570f(flag)
flag = chmul_498a4104(flag)
flag = cadd_779b79cd(flag)
flag = chunk_a8579f80(flag)
flag = add_b2a61490(flag)
flag = cxor_4d3c5896(flag)
flag = chmul_e6614b6a(flag)
flag = chxor_9bc8ede2(flag)
flag = chxor_31537f25(flag)
flag = chadd_47332c73(flag)
flag = csub_4e221287(flag)
flag = add_44200607(flag)
flag = add_6aeef0e9(flag)
flag = chadd_16ea1a60(flag)
flag = cxor_b42cfa90(flag)
flag = cxor_8666b092(flag)
flag = digsub_574e8941(flag)
flag = xor_860fd005(flag)
flag = xor_2b6a5232(flag)
flag = cadd_a39df2bc(flag)
flag = chsub_e8aa8b79(flag)
flag = xor_9d8c4a8c(flag)
flag = chxor_b9b02bcc(flag)
flag = shuffle_b14477ff(flag)
flag = add_0b0a39a3(flag)
flag = chmul_138f562c(flag)
flag = chmul_9522f239(flag)
flag = chunk_1f1becb3(flag)
flag = xor_78429cb3(flag)
flag = chmul_cfee488f(flag)
flag = chunk_5f5b8349(flag)
flag = shuffle_8a10d0b7(flag)
flag = cmul_1ebf8c3e(flag)
flag = xor_29589c28(flag)
flag = add_a1fe299c(flag)
flag = chunk_cb2fa615(flag)
flag = csub_a2102746(flag)
flag = cadd_b138e6e3(flag)
flag = shuffle_c089e7f9(flag)
flag = digsub_0410b672(flag)
flag = cadd_a4fd2ffb(flag)
flag = chsub_93324e19(flag)
flag = cadd_626b1801(flag)
flag = sub_72e0ad9e(flag)
flag = chsub_3df0ef3c(flag)
flag = chsub_c4e082fd(flag)
flag = chadd_0305d89a(flag)
flag = chadd_9c4be3af(flag)
flag = mul_fbf76069(flag)
flag = add_1ddc8330(flag)
flag = cadd_ba362142(flag)
flag = add_c8330084(flag)
flag = csub_98f9a52a(flag)
flag = chmul_02f67fce(flag)
flag = chmul_bd4ac691(flag)
flag = chadd_d95f9ffa(flag)
flag = cmul_a0ab0dc2(flag)
flag = cadd_5afd7d69(flag)
flag = chadd_f2fd70f1(flag)
flag = sub_aa1109df(flag)
flag = chadd_37ffbfed(flag)
flag = chadd_d12574c1(flag)
flag = shuffle_abafc5c1(flag)
flag = shuffle_4756c622(flag)
flag = chsub_dfabe48a(flag)
flag = cadd_b6aa1a21(flag)
flag = xor_3bb0008c(flag)
flag = chxor_b64d0435(flag)
flag = chunk_77a6c434(flag)
flag = chsub_31abc2cf(flag)
flag = chxor_26ed8369(flag)
flag = digsub_b6993817(flag)
flag = cmul_5410e40d(flag)
flag = chsub_258a5c14(flag)
flag = xor_890e78b1(flag)
flag = mul_36bc3f6e(flag)
flag = cadd_469004ba(flag)
flag = chsub_7af0731b(flag)
flag = cxor_f5f56306(flag)
flag = mul_67e87c31(flag)
flag = chmul_905d7d7a(flag)
flag = csub_5a6c81e3(flag)
flag = chxor_855b33d8(flag)
flag = cxor_83571dc3(flag)
flag = sub_4e6d826d(flag)
flag = shuffle_88823dcd(flag)
flag = chmul_7cfdd3dc(flag)
flag = shuffle_d70b85e8(flag)
flag = csub_5eadc310(flag)
flag = cadd_4d6b4b20(flag)
flag = chxor_a244aa4c(flag)
flag = xor_4c95d03b(flag)
flag = cmul_5bbd0126(flag)
flag = chunk_42bc522c(flag)
flag = digsub_b8269215(flag)
flag = csub_b9b5b150(flag)
flag = chadd_fc7a65ec(flag)
flag = digsub_f9d31323(flag)
flag = xor_f580ac50(flag)
flag = cmul_85b39864(flag)
flag = cmul_0b0ac64f(flag)
flag = csub_cb2cec49(flag)
flag = mul_87965a17(flag)
flag = digsub_ddee790f(flag)
flag = cxor_bbd7e7fe(flag)
flag = cmul_615b3bac(flag)
flag = chmul_4e871d0b(flag)
flag = cxor_49668fd6(flag)
flag = chxor_c8d60001(flag)
flag = csub_8477e013(flag)
flag = chsub_1a499bac(flag)
flag = cadd_6b0bc3e3(flag)
flag = chmul_b28ec3c8(flag)
flag = cmul_615b3bac(flag)
flag = cadd_ba5550aa(flag)
flag = add_9349052b(flag)
flag = cadd_779b79cd(flag)
flag = chadd_ed0711d8(flag)
flag = chadd_b0d8f554(flag)
flag = shuffle_6a6f7803(flag)
flag = chmul_d95a813a(flag)
flag = chunk_37604f81(flag)
flag = chxor_9d86eb3b(flag)
flag = sub_31d58010(flag)
flag = cadd_c170383d(flag)
flag = xor_0cecea66(flag)
flag = mul_49cd764a(flag)
flag = chunk_29281be2(flag)
flag = chmul_7df9b320(flag)
flag = mul_1f240b2b(flag)
flag = chsub_8b38a202(flag)
flag = mul_77c55019(flag)
flag = mul_b19c9677(flag)
flag = add_9e4296de(flag)
flag = xor_5fc3579e(flag)
flag = chxor_24586d25(flag)
flag = digsub_1d28a867(flag)
flag = shuffle_f6aee04d(flag)
flag = chxor_cf80cd00(flag)
flag = chxor_5cda58cc(flag)
flag = mul_af43f0cd(flag)
flag = chxor_665eed2c(flag)
flag = chunk_5d103edd(flag)
flag = chmul_fb4d75c9(flag)
flag = add_ed9a96c7(flag)
flag = chxor_44d65ee9(flag)
flag = chxor_2b81e3ec(flag)
flag = chxor_7bc1a643(flag)
flag = cxor_eb9b7ae7(flag)
flag = chmul_227b1b2a(flag)
flag = add_c2f77d7b(flag)
flag = chxor_a67420fd(flag)
flag = chmul_826efe63(flag)
flag = cmul_9020ca8c(flag)
flag = xor_11751251(flag)
flag = chxor_be9a01b5(flag)
flag = cxor_2eec2815(flag)
flag = mul_04e23b1b(flag)
flag = digsub_a821dc7d(flag)
flag = add_c8330084(flag)
flag = shuffle_c5cb30a9(flag)
flag = chmul_d06b2f3e(flag)
flag = mul_e04a2c12(flag)
flag = csub_20678af6(flag)
flag = shuffle_5cd09bb7(flag)
flag = xor_e9151d45(flag)
flag = digsub_a821dc7d(flag)
flag = cxor_41be00fc(flag)
flag = cxor_95401b5f(flag)
flag = cxor_ffad6101(flag)
flag = sub_4d3e2340(flag)
flag = cmul_f769c78a(flag)
flag = cmul_de3ea36c(flag)
flag = cxor_13669885(flag)
flag = chadd_323e5325(flag)
flag = cadd_f9211e40(flag)
flag = cmul_0fec80e1(flag)
flag = chsub_f27f3438(flag)
flag = cmul_b0b395c7(flag)
flag = cadd_6fbe94f5(flag)
flag = xor_9baa41ff(flag)
flag = cmul_87dca596(flag)
flag = chunk_80f5c942(flag)
flag = add_79292e38(flag)
flag = chunk_1e635fb5(flag)
flag = shuffle_2a813d89(flag)
flag = cadd_4836ae77(flag)
flag = digsub_324078ea(flag)
flag = xor_3994c2ad(flag)
flag = mul_a0ace443(flag)
flag = sub_960a2209(flag)
flag = cmul_b57f5cfc(flag)
flag = chunk_37604f81(flag)
flag = chxor_1649570d(flag)
flag = chunk_7ee32000(flag)
flag = cadd_e7cd385e(flag)
flag = digsub_670300f2(flag)
flag = sub_2a18cec8(flag)
flag = add_7ea1ef19(flag)
flag = sub_be3b1a5a(flag)
flag = chmul_8e421910(flag)
flag = add_139a0cf3(flag)
flag = digsub_a580518f(flag)
flag = sub_4bcab1c3(flag)
flag = cadd_7ed856d4(flag)
flag = chadd_abc266d5(flag)
flag = cxor_1e0efad7(flag)
flag = csub_936d88b2(flag)
flag = mul_c991ef9e(flag)
flag = xor_839d29d8(flag)
flag = cxor_a009b999(flag)
flag = chmul_de111dfb(flag)
flag = shuffle_86e11db2(flag)
flag = cmul_38769a31(flag)
flag = digsub_8e7fd683(flag)
flag = digsub_ef724e8c(flag)
flag = chmul_5fa96fe5(flag)
flag = xor_fccb27f6(flag)
flag = mul_70770109(flag)
flag = sub_a0d3d89e(flag)
flag = sub_47cbdf28(flag)
flag = chunk_88bc39ba(flag)
flag = cadd_61a362c2(flag)
flag = cadd_6ae07a4d(flag)
flag = mul_e2b49085(flag)
flag = chadd_d4f4e60b(flag)
flag = chunk_0b233094(flag)
flag = digsub_18fc0c9e(flag)
flag = chxor_d62951fc(flag)
flag = xor_6f958906(flag)
flag = sub_7a049de1(flag)
flag = cxor_025cbbe3(flag)
flag = shuffle_8c84166e(flag)
flag = chunk_e2c320ee(flag)
flag = chadd_55b65d14(flag)
flag = digsub_9fc4a4c5(flag)
flag = chmul_0bc227c2(flag)
flag = xor_4849bd77(flag)
flag = csub_d215325c(flag)
flag = mul_2fea700d(flag)
flag = sub_18770552(flag)
flag = chadd_af05dbbf(flag)
flag = digsub_9ab35f2e(flag)
flag = cxor_3db736ba(flag)
flag = chxor_7bd8fe19(flag)
flag = cadd_bf38d005(flag)
flag = csub_8cff1d96(flag)
flag = sub_96b63796(flag)
flag = chmul_882a927d(flag)
flag = cmul_280315b7(flag)
flag = digsub_bb8430e7(flag)
flag = xor_4c2f2b2e(flag)
flag = chxor_87ec1ab5(flag)
flag = sub_71ca3f1b(flag)
flag = chunk_85747b20(flag)
flag = xor_6cabd79d(flag)
flag = digsub_18fc0c9e(flag)
flag = cmul_028527b6(flag)
flag = cadd_e87be691(flag)
flag = shuffle_8a66e8f2(flag)
flag = chadd_0badfcf5(flag)
flag = csub_3c2b1960(flag)
flag = mul_c4baebe4(flag)
flag = add_28d6777c(flag)
flag = digsub_bd11b809(flag)
flag = cadd_7f81973a(flag)
flag = chsub_ef4867dc(flag)
flag = cxor_71e7ff03(flag)
flag = csub_d79026ba(flag)
flag = mul_9536d3d7(flag)
flag = digsub_703bfb0c(flag)
flag = chadd_e835abf7(flag)
flag = cadd_03a33025(flag)
flag = chadd_fa13451e(flag)
flag = add_f2a6c048(flag)
flag = chunk_bfd2f50a(flag)
flag = digsub_5513d3dd(flag)
flag = xor_e9151d45(flag)
flag = chadd_55d11883(flag)
flag = cxor_a9c59f97(flag)
flag = digsub_828ecd75(flag)
flag = csub_a2102746(flag)
flag = digsub_15856403(flag)
flag = cxor_86921258(flag)
flag = chadd_d12574c1(flag)
flag = sub_5d7857eb(flag)
flag = chunk_b4139adc(flag)
flag = chsub_2d6c78f3(flag)
flag = shuffle_54e93000(flag)
flag = cadd_a79fc94c(flag)
flag = sub_8346a4e8(flag)
flag = cmul_5ae914fe(flag)
flag = csub_fc0bc142(flag)
flag = cadd_283bf302(flag)
flag = chmul_1bf400c7(flag)
flag = xor_8dc6fc89(flag)
flag = chmul_70ce2001(flag)
flag = cmul_04ae6c22(flag)
flag = shuffle_3d5811d2(flag)
flag = cadd_dd5bf521(flag)
flag = chxor_6c6e06b4(flag)
flag = digsub_ef3c36c5(flag)
flag = sub_6ca5da9b(flag)
flag = cxor_bfb33206(flag)
flag = mul_8c6fc3ce(flag)
flag = shuffle_7bf7a2c9(flag)
flag = cadd_3a2cd387(flag)
flag = cxor_ed3b1b28(flag)
flag = chxor_db85cf59(flag)
flag = cxor_207ceb20(flag)
flag = shuffle_28099eb5(flag)
flag = sub_72b00ca4(flag)
flag = csub_f765621d(flag)
flag = chadd_dba6c166(flag)
flag = sub_4e853fbb(flag)
flag = cmul_f579357e(flag)
flag = chadd_81dfe861(flag)
flag = chadd_c8c1b7ad(flag)
flag = cadd_94b8e069(flag)
flag = csub_74a6e474(flag)
flag = cmul_4381cbd5(flag)
flag = mul_bce42f5e(flag)
flag = shuffle_0736ce82(flag)
flag = chmul_608cd53e(flag)
flag = sub_381e766c(flag)
flag = cxor_d339f91c(flag)
flag = chmul_27a340a5(flag)
flag = cadd_3882e35e(flag)
flag = cmul_6fb2378c(flag)
flag = digsub_864e27e4(flag)
flag = cadd_709ceb61(flag)
flag = chadd_1989b407(flag)
flag = chadd_01e97c37(flag)
flag = csub_936d88b2(flag)
flag = chxor_e3309cca(flag)
flag = xor_8833c00c(flag)
flag = chunk_c55c643f(flag)
flag = chmul_efbeeb2f(flag)
flag = xor_7c3bd1e8(flag)
flag = mul_a1ba17e5(flag)
flag = shuffle_c5e07151(flag)
flag = csub_f291b39b(flag)
flag = cxor_ae138bf7(flag)
flag = chadd_151f0f0e(flag)
flag = cxor_b70fe991(flag)
flag = csub_c123debf(flag)
flag = cmul_4a4181f0(flag)
flag = digsub_8e7fd683(flag)
flag = add_1559ce63(flag)
flag = chxor_9eee4faf(flag)
flag = chmul_7ebba446(flag)
flag = xor_4946eb25(flag)
flag = add_a5b30fdf(flag)
flag = chsub_b60cec96(flag)
flag = csub_9bf22fee(flag)
flag = cadd_94b8e069(flag)
flag = cxor_bbd7e7fe(flag)
flag = cxor_e59dc6e0(flag)
flag = add_882b6a0b(flag)
flag = chxor_79ffa521(flag)
flag = mul_74c39d4d(flag)
flag = mul_2e2bca7d(flag)
flag = chsub_e2d10a29(flag)
flag = shuffle_6cc67bbf(flag)
flag = xor_f19c0746(flag)
flag = digsub_aecf9a86(flag)
flag = digsub_be47e356(flag)
flag = cmul_e03e8b1c(flag)
flag = chadd_fa13451e(flag)
flag = cmul_c9b92e36(flag)
flag = chsub_99c9e6ed(flag)
flag = add_8ef46bd6(flag)
flag = chxor_d3897d6a(flag)
flag = chadd_1fa30d24(flag)
flag = csub_557e07a6(flag)
flag = cadd_fdc5f9f6(flag)
flag = digsub_e0de2a5d(flag)
flag = chmul_7eb45a9e(flag)
flag = csub_1d8c0c6b(flag)
flag = chunk_4113b7f6(flag)
flag = shuffle_e666492b(flag)
flag = csub_97ae1a88(flag)
flag = chsub_7af0731b(flag)
flag = csub_6cc93d0b(flag)
flag = chxor_9eee4faf(flag)
flag = chunk_6b35af69(flag)
flag = chunk_53760c11(flag)
flag = cxor_b42cfa90(flag)
flag = sub_e383e4d5(flag)
flag = digsub_8224944b(flag)
flag = digsub_50bc72d1(flag)
flag = chmul_1a3d7c8c(flag)
flag = cxor_20661e8f(flag)
flag = xor_9e177199(flag)
flag = cxor_29df8c0e(flag)
flag = cxor_9a341cfa(flag)
flag = digsub_f74d6e2c(flag)
flag = cxor_d42f4ceb(flag)
flag = shuffle_64f815bd(flag)
flag = chxor_3e87843f(flag)
flag = xor_df4800db(flag)
flag = chunk_f44dbb33(flag)
flag = csub_a76aeaed(flag)
flag = chadd_fa13451e(flag)
flag = cxor_b9faaea4(flag)
flag = cxor_57e03f14(flag)
flag = mul_f44aa210(flag)
flag = sub_29f5a027(flag)
flag = digsub_f74d6e2c(flag)
flag = mul_60fbc31e(flag)
flag = add_3631a2fd(flag)
flag = chunk_5fa20e0f(flag)
flag = add_d1d41f14(flag)
flag = sub_149a7d50(flag)
flag = cadd_441443f1(flag)
flag = shuffle_1a7b4aba(flag)
flag = add_dcb94ddc(flag)
flag = chsub_daf292bd(flag)
flag = mul_82f61bf9(flag)
flag = shuffle_d9cf5546(flag)
flag = chmul_7ce961bc(flag)
flag = cxor_eb9b7ae7(flag)
flag = cxor_fa9fe64d(flag)
flag = csub_d46575ec(flag)
flag = mul_386487fa(flag)
flag = chxor_02646472(flag)
flag = cadd_f288775d(flag)
flag = cmul_1db73e1b(flag)
flag = chxor_faf934e8(flag)
flag = digsub_c09c7211(flag)
flag = xor_385da77c(flag)
flag = cxor_f20321f0(flag)
flag = chxor_6eac24b1(flag)
flag = sub_a0d3d89e(flag)
flag = sub_4d3e2340(flag)
flag = cadd_7ed856d4(flag)
flag = shuffle_879744de(flag)
flag = cmul_8ce7a691(flag)
flag = sub_64547020(flag)
flag = cxor_b7550d4d(flag)
flag = cadd_8c4577cf(flag)
flag = csub_1f106834(flag)
flag = add_71df7f95(flag)
flag = chunk_97e5e867(flag)
flag = shuffle_9eddde7b(flag)
flag = cmul_b759583b(flag)
flag = cadd_8fd791e9(flag)
flag = cmul_8f4e7b08(flag)
flag = chunk_fa703d6a(flag)
flag = digsub_3534e3b8(flag)
flag = digsub_f44f1764(flag)
flag = xor_b7dd3197(flag)
flag = chsub_84e9e2bd(flag)
flag = add_b2a61490(flag)
flag = csub_6e812142(flag)
flag = csub_b5b948c9(flag)
flag = shuffle_2a77ed9b(flag)
flag = digsub_94dd3136(flag)
flag = csub_4392ba2f(flag)
flag = cadd_5afd7d69(flag)
flag = cadd_92b9fd37(flag)
flag = add_bb11d3eb(flag)
flag = mul_1a70b6a5(flag)
flag = sub_ec18d730(flag)
flag = cadd_22e59670(flag)
flag = chxor_da81821a(flag)
flag = digsub_7942bae6(flag)
flag = cadd_3879fa4f(flag)
flag = mul_5486cc62(flag)
flag = xor_f68eb9b6(flag)
flag = add_9349052b(flag)
flag = add_ee203fd4(flag)
flag = digsub_03f54ba3(flag)
flag = cadd_fa34d6b4(flag)
flag = cxor_39585eb3(flag)
flag = chxor_b212e95c(flag)
flag = cmul_0bb3391d(flag)
flag = xor_acef1014(flag)
flag = add_a00a7d48(flag)
flag = chsub_68113691(flag)
flag = chadd_36148017(flag)
flag = chunk_406fc18b(flag)
flag = digsub_15856403(flag)
flag = csub_7c363447(flag)
flag = digsub_c71ff0e5(flag)
flag = chadd_896dc902(flag)
flag = cadd_bbf43e6f(flag)
flag = csub_b649d113(flag)
flag = sub_b82d8405(flag)
flag = add_1dc9ccaa(flag)
flag = cadd_7ed856d4(flag)
flag = add_30966eb1(flag)
flag = chunk_45336ad9(flag)
flag = shuffle_b20aa4f9(flag)
flag = cadd_e9d43d97(flag)
flag = sub_32cc1a97(flag)
flag = cadd_0079a56b(flag)
flag = add_b6e74b73(flag)
flag = chunk_530108df(flag)
flag = chadd_bbfef485(flag)
flag = sub_a091f45e(flag)
flag = sub_61538669(flag)
flag = cadd_9ae3f2d8(flag)
flag = digsub_a821dc7d(flag)
flag = chunk_db078de2(flag)
flag = csub_08317493(flag)
flag = cmul_5e8f38d5(flag)
flag = cadd_03a33025(flag)
flag = sub_7bf8c980(flag)
flag = chadd_d4f4e60b(flag)
flag = csub_4e221287(flag)
flag = digsub_b4f2bfbc(flag)
flag = chadd_6a1bd216(flag)
flag = chmul_a4bed1f5(flag)
flag = chxor_353fb03b(flag)
flag = csub_96f86ad8(flag)
flag = mul_87b720f5(flag)
flag = cmul_f0b91a4d(flag)
flag = add_ed6c03df(flag)
flag = csub_ed2f200a(flag)
flag = add_ef37b006(flag)
flag = chunk_ab1c7f5f(flag)
flag = shuffle_3f9d1ce8(flag)
flag = csub_edb15e4c(flag)
flag = xor_84fc41ea(flag)
flag = digsub_7d236bf8(flag)
flag = cadd_b83d6dfa(flag)
flag = csub_5c981857(flag)
flag = sub_8058d94d(flag)
flag = chmul_79e6dd5d(flag)
flag = shuffle_866b2261(flag)
flag = cxor_4e53f8be(flag)
flag = add_ea027a3a(flag)
flag = chmul_5fbe910e(flag)
flag = chmul_e62c2028(flag)
flag = chxor_49854e3d(flag)
flag = cadd_074e39fc(flag)
flag = sub_a96a1483(flag)
flag = chmul_16176275(flag)
flag = cmul_36d19f08(flag)
flag = xor_cb183615(flag)
flag = sub_77f3b344(flag)
flag = chadd_31ab6514(flag)
flag = chxor_30be5eb3(flag)
flag = xor_339b9a13(flag)
flag = chxor_2978c8d9(flag)
flag = csub_d14c716c(flag)
flag = add_bb299925(flag)
flag = chadd_36010571(flag)
flag = chmul_e0c73179(flag)
flag = digsub_b4a68c58(flag)
flag = chadd_8ab3b2a8(flag)
flag = sub_6fb5c242(flag)
flag = chxor_db85cf59(flag)
flag = csub_63df48f0(flag)
flag = xor_c0f387ba(flag)
flag = digsub_46d7afa7(flag)
flag = chxor_18337976(flag)
flag = chunk_ec01f5f0(flag)
flag = chsub_4a4043a6(flag)
flag = chunk_e798b09f(flag)
flag = sub_6f40f29f(flag)
flag = add_b6cb0782(flag)
flag = cadd_079c91f6(flag)
flag = cadd_03187d75(flag)
flag = cadd_df4a88c2(flag)
flag = cmul_a089bf19(flag)
flag = xor_df4800db(flag)
flag = csub_417a5b3f(flag)
flag = cadd_a2b15006(flag)
flag = chunk_518ff916(flag)
flag = add_7cb7d116(flag)
flag = add_3fa4a716(flag)
flag = sub_91d3d73f(flag)
flag = sub_5b169d21(flag)
flag = xor_fbcf5aa3(flag)
flag = cmul_e953e2ca(flag)
flag = add_91babee9(flag)
flag = cmul_ed0fd163(flag)
flag = cmul_dd8d739c(flag)
flag = csub_cec4261b(flag)
flag = cmul_f769c78a(flag)
flag = xor_890e78b1(flag)
flag = mul_6d210a06(flag)
flag = shuffle_5ea1f654(flag)
flag = chxor_b69b0e36(flag)
flag = shuffle_496b2c86(flag)
flag = chsub_56440f95(flag)
flag = cmul_89ce7854(flag)
flag = cadd_e856ecc9(flag)
flag = chsub_b9dc2f68(flag)
flag = mul_712130c5(flag)
flag = csub_7035f8db(flag)
flag = chadd_8cbc6e8c(flag)
flag = sub_e0ca897d(flag)
flag = chxor_ce31e412(flag)
flag = cadd_4dc54d10(flag)
flag = cmul_4e66e309(flag)
flag = chadd_5488a6fe(flag)
flag = cadd_61a362c2(flag)
flag = cmul_7ca572e2(flag)
flag = sub_e383e4d5(flag)
flag = digsub_ef43a4f8(flag)
flag = csub_46c4ad67(flag)
flag = add_b7a421e2(flag)
flag = chmul_20654021(flag)
flag = shuffle_3e606129(flag)
flag = digsub_ecaa949d(flag)
flag = cxor_ea36911a(flag)
flag = chunk_4b50f9e1(flag)
flag = cmul_bf506846(flag)
flag = cmul_f769c78a(flag)
flag = chsub_f7d05960(flag)
flag = digsub_211a2fee(flag)
flag = digsub_ced825e4(flag)
flag = chxor_0f3c245c(flag)
flag = cadd_1d1894a8(flag)
flag = chadd_186dd996(flag)
flag = cxor_e4b3ee28(flag)
flag = digsub_7638ee12(flag)
flag = add_7af2fe07(flag)
flag = chsub_4d0982ce(flag)
flag = cxor_03f5597b(flag)
flag = chxor_eb7e47c1(flag)
flag = chxor_4427bf9d(flag)
flag = chxor_c399373f(flag)
flag = shuffle_76c2382f(flag)
flag = cadd_88038a55(flag)
flag = chxor_97c3e5f8(flag)
flag = cadd_c751d9e4(flag)
flag = digsub_ea672c6d(flag)
flag = chsub_f17ba2e2(flag)
flag = add_8db2a643(flag)
flag = cmul_5f2f8cea(flag)
flag = chunk_caa9baa3(flag)
flag = chadd_1375b126(flag)
flag = add_6d8a2110(flag)
flag = cadd_0208daec(flag)
flag = chadd_4162bfbe(flag)
flag = digsub_c71698e9(flag)
flag = xor_3d2b41ae(flag)
flag = chsub_bf5cdb36(flag)
flag = csub_f0b67669(flag)
flag = add_0a6cff9e(flag)
flag = add_0090343e(flag)
flag = cadd_3c6d2025(flag)
flag = chsub_be5f9d3f(flag)
flag = mul_6bdc88d2(flag)
flag = cxor_21b4aab4(flag)
flag = chsub_0ee9fb58(flag)
flag = digsub_c09c7211(flag)
flag = xor_3994c2ad(flag)
flag = chxor_4fe33b06(flag)
flag = chsub_b9b2576f(flag)
flag = chsub_92f27399(flag)
flag = digsub_899a9f6d(flag)
flag = csub_d14c716c(flag)
flag = xor_df31e322(flag)
flag = chunk_45aefbfc(flag)
flag = cxor_5fa90da0(flag)
flag = mul_4bf9810d(flag)
flag = mul_f80a89cf(flag)
flag = cmul_18dd5479(flag)
flag = cxor_9e4b96f2(flag)
flag = xor_214fe10e(flag)
flag = add_88cb654b(flag)
flag = mul_9d0c3682(flag)
flag = xor_da634428(flag)
flag = cmul_fe6ecce9(flag)
flag = cxor_060ce4e2(flag)
flag = chxor_b96f779c(flag)
flag = cxor_1290e20b(flag)
flag = shuffle_1cae3f87(flag)
flag = sub_a3d54f98(flag)
flag = chxor_e5000f9b(flag)
flag = add_aae6cc04(flag)
flag = csub_160421ef(flag)
flag = shuffle_328f0268(flag)
flag = chunk_a998eeb4(flag)
flag = chsub_e1699c5c(flag)
flag = mul_69dd5e3a(flag)
flag = chunk_cf8a51ed(flag)
flag = chmul_05459301(flag)
flag = cxor_7ec801e0(flag)
flag = cxor_1039bf70(flag)
flag = chadd_bf07e93b(flag)
flag = sub_51e1902d(flag)
flag = mul_6bdc88d2(flag)
flag = cmul_03ecbb18(flag)
flag = chmul_221b0f47(flag)
flag = shuffle_5c9d432d(flag)
flag = chxor_55bd1b17(flag)
flag = xor_2cce1391(flag)
flag = xor_a35575ce(flag)
flag = chsub_167fa647(flag)
flag = mul_a0ace443(flag)
flag = sub_a8ed3df9(flag)
flag = mul_ebff36e1(flag)
flag = chadd_6a4e5b24(flag)
flag = cadd_09c2f719(flag)
flag = digsub_e9fbb5e0(flag)
flag = chmul_8e52ad65(flag)
flag = shuffle_0df0d459(flag)
flag = chunk_7692aef1(flag)
flag = digsub_7942bae6(flag)
flag = chmul_4d8aa24b(flag)
flag = digsub_f8bfc612(flag)
flag = csub_7035f8db(flag)
flag = cadd_0ab7b7d7(flag)
flag = chsub_379e2ba1(flag)
flag = add_125357c0(flag)
flag = mul_74c39d4d(flag)
flag = chmul_8c7712e0(flag)
flag = add_67af3ff4(flag)
flag = digsub_e9fbb5e0(flag)
flag = xor_875a544d(flag)
flag = chmul_f8bd0b15(flag)
flag = cmul_e4155cf9(flag)
flag = chunk_0f650cd2(flag)
flag = chmul_d06b2f3e(flag)
flag = add_a04dd9fa(flag)
flag = chsub_8590464c(flag)
flag = chunk_0e5f27e0(flag)
flag = mul_04e23b1b(flag)
flag = cxor_dd1d60a4(flag)
flag = xor_1eba93e4(flag)
flag = cadd_f61d1530(flag)
flag = digsub_7d14062a(flag)
flag = xor_5c21cfc7(flag)
flag = chsub_8a25c41f(flag)
flag = cmul_9ea3f862(flag)
flag = mul_8f7d3564(flag)
flag = cadd_991ec901(flag)
flag = cadd_0208daec(flag)
flag = add_e4570f19(flag)
flag = xor_d30c564f(flag)
flag = add_9349052b(flag)
flag = chmul_522be87f(flag)
flag = digsub_99f3c205(flag)
flag = cmul_23a5f304(flag)
flag = chunk_f899efdf(flag)
flag = cxor_c68edc46(flag)
flag = chxor_b041b00c(flag)
flag = csub_8a92b818(flag)
flag = sub_0b5acfeb(flag)
flag = sub_97300f52(flag)
flag = cmul_1fd240a5(flag)
flag = sub_6ca5da9b(flag)
flag = chsub_d64b63cc(flag)
flag = chmul_8cfb1503(flag)
flag = chmul_c35fb5e9(flag)
flag = chunk_225b51ad(flag)
flag = chsub_76a99240(flag)
flag = chadd_db065984(flag)
flag = cmul_5193391a(flag)
flag = xor_edf3c9f3(flag)
flag = chunk_9903c486(flag)
flag = sub_134957ec(flag)
flag = cxor_dc7aac3c(flag)
flag = chmul_d909e81b(flag)
flag = cadd_97daaa50(flag)
flag = add_827d7100(flag)
flag = chxor_f274337d(flag)
flag = cxor_f744fca4(flag)
flag = sub_b8c51fbd(flag)
flag = cxor_e4036825(flag)
flag = digsub_0d0244fc(flag)
flag = sub_d163ba0e(flag)
flag = mul_c5467b19(flag)
flag = shuffle_b08c994e(flag)
flag = cadd_074e39fc(flag)
flag = xor_722e91a8(flag)
flag = cadd_46c0a285(flag)
flag = chxor_3dd86e1b(flag)
flag = cxor_ebeaa56d(flag)
flag = cxor_f4744f0e(flag)
flag = cadd_652099bf(flag)
flag = chmul_e08d8ea1(flag)
flag = chadd_65b8d0ef(flag)
flag = mul_5c575cdb(flag)
flag = chxor_c55e532b(flag)
flag = xor_9fab62d4(flag)
flag = chxor_3bea6df8(flag)
flag = cxor_938a50c5(flag)
flag = mul_b2698654(flag)
flag = add_f10a2818(flag)
flag = chxor_8ee7d3f7(flag)
flag = cxor_e9ecb31a(flag)
flag = csub_9560b32f(flag)
flag = xor_31c0451b(flag)
flag = cadd_2da455cf(flag)
flag = xor_097a8a70(flag)
flag = shuffle_2a77e1f0(flag)
flag = add_91babee9(flag)
flag = chmul_64d93738(flag)
flag = mul_53ea4a75(flag)
flag = chmul_ab9cdb92(flag)
flag = add_30966eb1(flag)
flag = xor_32fe74f6(flag)
flag = add_1039dc95(flag)
flag = cadd_d6acbbb6(flag)
flag = digsub_c4e4d709(flag)
flag = shuffle_8dc55f06(flag)
flag = cadd_ca2e862f(flag)
flag = add_31efa65a(flag)
flag = cxor_bba6fa0a(flag)
flag = mul_3feda191(flag)
flag = chunk_bdec9045(flag)
flag = chunk_e949207e(flag)
flag = chadd_a3542df8(flag)
flag = shuffle_2a813d89(flag)
flag = chunk_205e30c0(flag)
flag = chsub_863e4a9e(flag)
flag = digsub_19a384d0(flag)
flag = chadd_8658906e(flag)
flag = chmul_ff76516d(flag)
flag = chsub_4e9faeee(flag)
flag = cxor_9bda6371(flag)
flag = chadd_3d5f0a2c(flag)
flag = cmul_5f59af38(flag)
flag = cxor_3ea0418e(flag)
flag = xor_9fab62d4(flag)
flag = cxor_fb665168(flag)
flag = cmul_e7965a1e(flag)
flag = cmul_85b39864(flag)
flag = sub_88400353(flag)
flag = shuffle_c3a4eec2(flag)
flag = cmul_f769c78a(flag)
flag = chadd_d54dcfab(flag)
flag = chmul_26b6373e(flag)
flag = sub_00c9af82(flag)


flag = [str(j) for j in flag]
open("super_encrypted", "w").write("\n".join(flag))
